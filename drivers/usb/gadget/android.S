	.cpu cortex-a15
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 2
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"android.c"
#APP
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.type	reset_config, %function
reset_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r6, r0
	ldr	r3, [r0, #12]
	mov	r5, #0
	ldr	r4, [r3, #36]
	sub	r4, r4, #72
.L2:
	ldr	r3, [r6, #12]
	add	r2, r4, #72
	mov	r0, r4
	mov	r1, #0
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L10
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L3
	blx	r3
.L3:
	ldr	r3, [r4, #72]
	str	r5, [r4, #80]
	sub	r4, r3, #72
	b	.L2
.L10:
	str	r1, [r6, #12]
	str	r1, [r6, #56]
	ldmfd	sp!, {r4, r5, r6, pc}
	.fnend
	.size	reset_config, .-reset_config
	.text
	.align	2
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L23
.LPIC0:
	add	lr, pc, lr
	ldr	r3, [lr]
	cmp	lr, r3
	sub	r3, r3, #4
	beq	.L21
	mov	ip, #0
.L15:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L14
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
.L14:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L15
.L21:
	mov	r0, r2
	ldr	pc, [sp], #4
.L24:
	.align	2
.L23:
	.word	.LANCHOR0-(.LPIC0+8)
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	str	r1, [r3, #328]
	str	r1, [r3, #364]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.section	.text.unlikely
	.align	2
	.type	xport_to_str, %function
xport_to_str:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r0, r0, #1
	cmp	r0, #9
	addls	pc, pc, r0, asl #2
	b	.L32
.L34:
	b	.L44
	b	.L35
	b	.L36
	b	.L37
	b	.L38
	b	.L39
	b	.L40
	b	.L41
	b	.L42
	b	.L43
	.p2align 1
.L35:
	ldr	r0, .L45
.LPIC4:
	add	r0, pc, r0
	bx	lr
.L36:
	ldr	r0, .L45+4
.LPIC5:
	add	r0, pc, r0
	bx	lr
.L37:
	ldr	r0, .L45+8
.LPIC6:
	add	r0, pc, r0
	bx	lr
.L38:
	ldr	r0, .L45+12
.LPIC7:
	add	r0, pc, r0
	bx	lr
.L39:
	ldr	r0, .L45+16
.LPIC8:
	add	r0, pc, r0
	bx	lr
.L40:
	ldr	r0, .L45+20
.LPIC9:
	add	r0, pc, r0
	bx	lr
.L41:
	ldr	r0, .L45+24
.LPIC10:
	add	r0, pc, r0
	bx	lr
.L42:
	ldr	r0, .L45+28
.LPIC11:
	add	r0, pc, r0
	bx	lr
.L43:
	ldr	r0, .L45+32
.LPIC12:
	add	r0, pc, r0
	bx	lr
.L32:
	ldr	r0, .L45+36
.LPIC13:
	add	r0, pc, r0
	bx	lr
.L44:
	ldr	r0, .L45+40
.LPIC3:
	add	r0, pc, r0
	bx	lr
.L46:
	.align	2
.L45:
	.word	.LC1-(.LPIC4+8)
	.word	.LC2-(.LPIC5+8)
	.word	.LC3-(.LPIC6+8)
	.word	.LC4-(.LPIC7+8)
	.word	.LC5-(.LPIC8+8)
	.word	.LC6-(.LPIC9+8)
	.word	.LC7-(.LPIC10+8)
	.word	.LC8-(.LPIC11+8)
	.word	.LC9-(.LPIC12+8)
	.word	.LC10-(.LPIC13+8)
	.word	.LC0-(.LPIC3+8)
	.fnend
	.size	xport_to_str, .-xport_to_str
	.text
	.align	2
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L47
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L47:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #408]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #404]
	str	r1, [r3, #400]
	str	r1, [r3, #312]
	str	r1, [r3, #412]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, r0
	str	lr, [sp, #4]
	ldr	r1, [r0, #212]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #80]
	ldr	r2, [r1, #60]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	mov	r2, r2, lsr #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #212]
	ldr	lr, [ip, #80]
	ldr	r1, [ip, #68]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #212]
	ldr	r2, [r3, #200]
	ldr	r0, [r3, #80]
	ldr	r3, [r2, #120]
	ldr	r2, [r2, #112]
	rsb	r3, r2, r3
	mov	r3, r3, asl #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, [r0, #124]
	movw	r0, #26496
	cmp	r1, r0
	ldr	r0, [ip]
	beq	.L71
	cmp	r0, #0
	beq	.L67
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L67
	bx	r3
.L71:
	mov	r3, r2
	ldr	r2, [ip, #132]
	cmp	r2, #0
	beq	.L64
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r0, [r1, #178]
	cmp	r0, #0
	beq	.L65
	uxtb	r2, r3
	mov	r1, lr
.L63:
	mov	ip, r1
	ldrh	r3, [r1], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L62
	cmp	r3, r2
	beq	.L72
.L62:
	subs	r0, r0, #1
	bne	.L63
.L65:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L72:
	rsb	r0, lr, ip
	mov	r0, r0, asr #1
	ldr	pc, [sp], #4
.L64:
	mvn	r0, #18
	bx	lr
.L67:
	mvn	r0, #24
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L80
	bx	r3
.L80:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #52]
	cmp	r3, #0
	beq	.L84
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L84:
	mov	r0, r3
	bx	lr
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L87
	ldr	r2, [r3, #136]
	cmp	r2, #0
	beq	.L87
	mov	r0, r3
	bx	r2
.L87:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L96
	mov	r2, #0
	mov	r0, r2
.LPIC22:
	add	r3, pc, r3
	str	r2, [r3]
	bx	lr
.L97:
	.align	2
.L96:
	.word	.LANCHOR1-(.LPIC22+8)
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L100
	ldr	r3, .L110
	ldr	ip, [r2]
.LPIC23:
	add	r3, pc, r3
	cmp	ip, #0
	cmnne	r3, #4
	add	r1, r3, #4
	beq	.L100
	blx	ip
.L100:
	ldr	r3, .L110+4
	ldr	r4, [sp]
	add	sp, sp, #4
.LPIC25:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L111:
	.align	2
.L110:
	.word	.LANCHOR1-(.LPIC23+8)
	.word	.LANCHOR1-(.LPIC25+8)
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #152]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L119
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, asl #2]
	strb	r1, [r3, #9]
.L118:
	bx	lr
.L119:
	mvn	r0, #21
	b	.L118
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #28]
	mov	r2, r0
	ldr	r3, [r0, #12]
	ldr	r1, [r1, #200]
	cmp	r3, #15
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, asl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #172]
	ldr	ip, [r1]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L140
.L129:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L140:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L129
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L129
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L129
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L141
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L141
	cmn	r2, #108
	beq	.L146
	cmn	r2, #104
	beq	.L146
	ldr	r3, [r4, #168]
	cmp	r3, r0
	beq	.L164
.L141:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L146:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L141
.L164:
	add	r5, r4, #176
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L141
	ldr	r0, [r4, #168]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L141
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L141
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L166
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L166:
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L169
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #198]	@ zero_extendqisi2
	mvnne	r0, #21
.L169:
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L176
	cmn	r3, #104
	beq	.L176
.L175:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #168]
	ldr	r0, [r3, #24]
	beq	.L174
	ldrb	r2, [r5, #172]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L180
	bcc	.L174
	cmp	r2, #2
	bne	.L179
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bls	.L182
	ldr	r2, [r2, #16]
	cmp	r2, #5
	beq	.L197
.L184:
	mov	r0, #28672
	mov	lr, #0
	cmp	r2, #3
	movt	r0, 148
	movt	lr, 6500
	movne	r2, r0
	moveq	r2, lr
	b	.L183
.L176:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L175
.L182:
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L198
.L183:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #172]
.L179:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	ip, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #168]
.L174:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L180:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #172]
	b	.L179
.L197:
	mov	r2, #0
	movt	r2, 13000
	b	.L183
.L198:
	ldr	r2, [r2, #16]
	b	.L184
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L200
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L200:
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L208
.LPIC27:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L207
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L207:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
.L209:
	.align	2
.L208:
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC27+8))
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, asl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, asl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	mov	r2, #0
	ldr	ip, [r1, #32]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L219
	ldr	r2, [r1, #48]
	ldr	r3, [r1, #4]
	cmp	r2, r3
	beq	.L220
.L219:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L220:
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r1]
	ldrb	r1, [lr, #2]	@ zero_extendqisi2
	ldrb	r3, [lr, #1]	@ zero_extendqisi2
	ldrb	r2, [lr]	@ zero_extendqisi2
	ldrb	lr, [lr, #3]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	orr	r3, r1, r3, asl #8
	orr	r3, r3, r2
	orr	r3, r3, lr, asl #24
	cmp	r3, #2048
	bcc	.L215
	ldr	r2, .L221
.LPIC28:
	add	r2, pc, r2
	ldr	r2, [r2, #4]
	cmp	r2, r3
	strcs	r3, [ip, #112]
	bcs	.L217
.L215:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	lr, [sp], #4
	ldr	r3, [r3, #24]
	bx	r3
.L217:
	ldr	pc, [sp], #4
.L222:
	.align	2
.L221:
	.word	.LANCHOR2-(.LPIC28+8)
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L224
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L224:
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L253
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #24]
.LPIC29:
	add	r1, pc, r1
	ldr	r3, [r1, #16]!
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L237
	b	.L234
.L252:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	beq	.L234
.L237:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L252
.L234:
	ldr	r3, [r0]
	mov	r6, r5
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strneb	r2, [r3, #378]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L233
.L241:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L240
	blx	r3
.L240:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L241
.L233:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L254:
	.align	2
.L253:
	.word	.LANCHOR1-(.LPIC29+8)
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r1, #32]
	str	r3, [sp, #4]
	cmp	r5, r3
	bne	.L255
	ldr	r6, [r4, #272]
	cmp	r6, r3
	beq	.L255
	ldr	r2, [r1, #4]
	add	r0, sp, #4
	ldr	r1, [r1]
	bl	memcpy(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r4, #268]	@ zero_extendqisi2
	blx	r3
	str	r5, [r4, #272]
.L255:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L268
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC33:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L262
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L265
.L264:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L266:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L262:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L264
.L265:
	mvn	r0, #11
	b	.L266
.L269:
	.align	2
.L268:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC33+8))
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L277
.LPIC35:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L271
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L271:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L278:
	.align	2
.L277:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC35+8))
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L286
.LPIC37:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L280
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L280:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L287:
	.align	2
.L286:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC37+8))
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L296
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC39:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L291
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L295
.L289:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L290:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L291:
	mov	r3, #16
	b	.L289
.L295:
	mvn	r0, #11
	b	.L290
.L297:
	.align	2
.L296:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC39+8))
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L299
	str	r5, [r4, #4]
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L304
.L299:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L304:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L299
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.type	mtp_request_new, %function
mtp_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L306
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L311
.L306:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L311:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L306
	.fnend
	.size	mtp_request_new, .-mtp_request_new
	.align	2
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L313
	ldr	r0, [r1, #8]
	bl	kfree(PLT)
.L313:
	ldr	r0, [r4, #16]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.type	rmnet_sdio_free_req, %function
rmnet_sdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_sdio_free_req, .-rmnet_sdio_free_req
	.align	2
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L319
	ldr	r3, [r5, #68]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L318
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L318:
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L319:
	mov	r4, r5
	b	.L318
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.section	.text.unlikely
	.align	2
	.type	mbim_free_ctrl_pkt, %function
mbim_free_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree(PLT)
	mov	r0, r4
	ldmfd	sp!, {r4, lr}
	b	kfree(PLT)
	.fnend
	.size	mbim_free_ctrl_pkt, .-mbim_free_ctrl_pkt
	.text
	.align	2
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r5, #84]
	beq	.L335
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L336
	cmn	r2, #108
	beq	.L335
	ldr	r0, [r7]
	ldr	r1, .L358
	add	r0, r0, #32
.LPIC40:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L336:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L357
.L333:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L335:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L333
.L357:
	add	r6, r5, #172
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L333
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L333
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L358+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC41:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L359:
	.align	2
.L358:
	.word	.LC11-(.LPIC40+8)
	.word	.LC12-(.LPIC41+8)
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #84]
	beq	.L362
	cmp	r2, #0
	mov	r5, r1
	beq	.L363
	cmn	r2, #108
	beq	.L362
	ldr	r0, [r7]
	ldr	r1, .L385
	add	r0, r0, #32
.LPIC42:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L363:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L360
	add	r6, r4, #196
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L384
.L360:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L362:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L360
.L384:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L360
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L385+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC43:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L386:
	.align	2
.L385:
	.word	.LC13-(.LPIC42+8)
	.word	.LC14-(.LPIC43+8)
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #8515
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	lr, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	ip, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldr	r5, [lr, #24]
	ldrh	lr, [r1, #2]	@ unaligned
	orr	r3, r3, ip, asl #8
	ldrh	ip, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [r5, #4]
	bne	.L392
	cmp	ip, #0
	beq	.L395
.L392:
	mvn	r6, #94
.L388:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L395:
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L392
	strh	lr, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L388
	ldr	r0, [r5]
	str	r6, [sp]
	ldr	r1, .L396
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC44:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L388
.L397:
	.align	2
.L396:
	.word	.LC15-(.LPIC44+8)
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #84]
	beq	.L400
	cmp	r2, #0
	mov	r5, r1
	beq	.L401
	cmn	r2, #108
	beq	.L400
	ldr	r0, [r7]
	ldr	r1, .L420
	add	r0, r0, #32
.LPIC45:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L401:
	add	r6, r4, #376
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L419
.L398:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L419:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L398
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L420+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC46:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L400:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L398
.L421:
	.align	2
.L420:
	.word	.LC16-(.LPIC45+8)
	.word	.LC14-(.LPIC46+8)
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L426
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L426
.L428:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L427
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L427:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L428
.L426:
	ldr	r3, .L435
.LPIC47:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L425
	mov	r0, r6
	blx	r3
.L425:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L422
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L422:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L436:
	.align	2
.L435:
	.word	.LANCHOR1-(.LPIC47+8)
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, .L458
	mov	r5, r0
.LPIC48:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L438
	blx	r3
.L438:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L440
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #72
	beq	.L441
.L443:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L442
	blx	r3
	ldr	r1, [r5, #12]
	add	r2, r1, #36
.L442:
	ldr	r4, [r4, #72]
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L443
.L441:
	ldrb	r1, [r1, #23]	@ zero_extendqisi2
	cmp	r1, #0
	ldrne	r3, [r5, #64]
	moveq	r1, #500
	mulne	r1, r3, r1
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L440
	mov	r0, r6
	blx	r3
.L440:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L459:
	.align	2
.L458:
	.word	.LANCHOR1-(.LPIC48+8)
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, #2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	lr, [r0, #4]
	mov	ip, #0
	movw	r3, #26215
	ldr	r0, .L467
	mov	r1, ip
	movt	r3, 26214
	add	r2, lr, r5
	strb	ip, [lr, #1]
.LPIC57:
	add	r0, pc, r0
	strb	ip, [r2], #1
	strb	ip, [r2], #1
	strb	ip, [r2], #1
	strb	ip, [r2]
	strb	r5, [lr]
	b	.L461
.L462:
	rsb	r2, r2, r1
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	ip, [lr, r2]	@ zero_extendqisi2
	eor	ip, ip, r5
	strb	ip, [lr, r2]
	beq	.L465
.L461:
	add	r5, r0, #28
	smull	r2, ip, r3, r1
	mov	r2, r1, asr #31
	ldrb	r5, [r1, r5]	@ zero_extendqisi2
	rsb	r2, r2, ip, asr #1
	cmp	r5, #0
	add	r2, r2, r2, lsl #2
	bne	.L462
.L465:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L468:
	.align	2
.L467:
	.word	.LANCHOR1-(.LPIC57+8)
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L494
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r0, r5
	sub	r5, r5, #36
	beq	.L471
	sub	r2, r2, #1
	b	.L472
.L474:
	cmp	r2, #0
	mov	r2, r1
	beq	.L473
.L472:
	ldr	r3, [r5, #36]
	sub	r1, r2, #1
	cmp	r3, r6
	sub	r5, r3, #36
	mov	r0, r3
	bne	.L474
	ldr	r3, [r7, #28]
	cmp	r2, #0
	mov	r4, r1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	beq	.L495
.L475:
	cmp	r3, #0
	bne	.L477
	ldr	r5, .L497
.LPIC58:
	add	r5, pc, r5
	b	.L479
.L496:
	str	r5, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add(PLT)
	cmp	r4, #0
	sub	r2, r4, #1
	mov	r4, r2
	beq	.L495
.L479:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L496
	ldr	r3, [r6]
	cmp	r6, r3
	beq	.L470
.L495:
	mov	r0, #0
.L492:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L473:
	ldr	r4, [r5, #36]
	bl	list_del(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	sub	r5, r4, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r4, r6
	mov	r0, r4
	bne	.L473
	b	.L495
.L477:
	ldr	r5, .L497+4
.LPIC59:
	add	r5, pc, r5
	b	.L482
.L481:
	str	r5, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add(PLT)
	cmp	r4, #0
	sub	r2, r4, #1
	mov	r4, r2
	beq	.L495
.L482:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L481
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L495
.L470:
	mvn	r0, #11
	b	.L492
.L471:
	ldr	r3, [r1, #28]
	sub	r4, r2, #1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	b	.L475
.L494:
	mvn	r0, #11
	bx	lr
.L498:
	.align	2
.L497:
	.word	rx_complete-(.LPIC58+8)
	.word	tx_complete-(.LPIC59+8)
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #132]
	ldr	r1, [r4, #124]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #132]
	beq	.L499
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L499
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L499:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	ldr	ip, [r5, #136]
	sub	r2, ip, #1
	str	r2, [r5, #136]
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L509
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L509
	udiv	lr, r0, r2
	mls	r0, r2, lr, r0
	cmp	r0, #0
	beq	.L522
.L509:
	add	r6, r5, #108
	mov	r4, r3
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L523
.L510:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L508
	ldr	ip, [r3, #12]
	cmp	ip, #0
	beq	.L508
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #16]
	bx	ip	@ indirect register sibling call
.L523:
	ldr	r3, [r4, #48]
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	b	.L510
.L508:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L522:
	str	ip, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r7, #8]
	ldr	r3, [r1, #44]
	str	r3, [r7, #12]
	ldr	r0, [r5, #88]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #108
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L525
	ldr	ip, [r3, #12]
	cmp	ip, r6
	beq	.L525
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #1
	blx	ip
.L525:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r4, #124]
	cmp	ip, #0
	beq	.L537
	mov	r2, r6
	ldr	r0, [r4, #128]
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L537:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	bne	.L541
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L541
	udiv	ip, r0, r2
	mls	r2, r2, ip, r0
	cmp	r2, #0
	beq	.L548
.L541:
	add	r7, r5, #188
	mov	r4, r3
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L549
.L542:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r5, #124]
	cmp	ip, #0
	beq	.L540
	mov	r2, r6
	ldr	r0, [r5, #128]
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L549:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L542
.L540:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L548:
	ldr	r0, [r1, #48]
	str	r2, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L555
.L558:
	bl	list_del(PLT)
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L557
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L555:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L558
	mov	r1, r10
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L557:
	ldr	r0, [r9]
	ldr	r1, .L559
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
.LPIC60:
	add	r1, pc, r1
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err(PLT)
.L560:
	.align	2
.L559:
	.word	.LC17-(.LPIC60+8)
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r7, #356]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r6, [r0, #8]
	add	r5, r6, #108
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #92]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, ip
	rsb	r3, r3, r2
	udiv	r2, r3, ip
	mls	r4, ip, r2, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	beq	.L571
	ldr	r5, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r2, r2, r5
	rsb	r3, r3, r2
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r5, r5, r2, r3
.L570:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L571:
	mov	r5, r3
	b	.L570
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L580
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC69:
	add	r7, pc, r7
	ldr	r3, [r7, #284]
	cmp	r3, #0
	beq	.L578
	mov	r4, #0
	add	fp, r7, #288
	mov	r6, r4
	mov	r9, r4
.L574:
	add	r3, fp, r4
	add	r6, r6, #1
	ldr	r5, [r3, #20]
	add	r4, r4, #104
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r5, #184]
	mov	r0, r8
	str	r9, [r5, #188]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7, #284]
	cmp	r6, r3
	bcc	.L574
.L578:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L581:
	.align	2
.L580:
	.word	.LANCHOR1-(.LPIC69+8)
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L589
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC72:
	add	r7, pc, r7
	ldr	r3, [r7, #496]
	cmp	r3, #0
	beq	.L587
	mov	r4, #0
	add	fp, r7, #500
	mov	r6, r4
	mov	r9, r4
.L583:
	add	r3, fp, r4
	add	r6, r6, #1
	ldr	r5, [r3, #20]
	add	r4, r4, #104
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r5, #172]
	mov	r0, r8
	str	r9, [r5, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7, #496]
	cmp	r6, r3
	bcc	.L583
.L587:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L590:
	.align	2
.L589:
	.word	.LANCHOR1-(.LPIC72+8)
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #0
	strd	r8, [sp, #16]
	ldr	r8, .L599
	mov	r9, r2
	strd	r6, [sp, #8]
	mov	r7, r5
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC75:
	add	r8, pc, r8
.L593:
	add	r3, r8, #708
	ldr	r4, [r5, r3]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L592
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r4, #96]
	mov	r0, r6
	str	r7, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L592:
	cmp	r5, #504
	bne	.L593
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L600:
	.align	2
.L599:
	.word	.LANCHOR1-(.LPIC75+8)
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r3, r4, #16
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L608
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC76:
	add	r4, pc, r4
	ldr	r3, [r4, #1212]
	add	r2, r3, #16
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L604
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L606:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L604:
	ldr	r0, [r4, #1212]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1212]
	mov	r1, r0
	strb	r5, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L606
.L609:
	.align	2
.L608:
	.word	.LANCHOR1-(.LPIC76+8)
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L621
	mov	r9, r2
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC79:
	add	r8, pc, r8
	ldr	r2, [r8, #1216]
	cmp	r2, #0
	beq	.L619
	mov	r5, #0
	mov	r6, r5
	mov	r10, r5
.L613:
	add	r3, r8, #1216
	add	r6, r6, #1
	add	r3, r3, #4
	ldr	r4, [r5, r3]
	add	r5, r5, #104
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L612
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r10, [r4, #100]
	mov	r0, r7
	str	r10, [r4, #96]
	str	r10, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r8, #1216]
.L612:
	cmp	r6, r2
	bcc	.L613
.L619:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L622:
	.align	2
.L621:
	.word	.LANCHOR1-(.LPIC79+8)
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L634
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC82:
	add	r9, pc, r9
	ldr	r2, [r9, #1636]
	cmp	r2, #0
	beq	.L632
	mov	r6, #0
	mov	r7, r6
	mov	r5, r6
.L626:
	add	r3, r9, #1632
	add	r7, r7, #1
	add	r3, r3, #8
	ldr	r4, [r6, r3]
	add	r6, r6, #104
	cmp	r4, #0
	add	r8, r4, #80
	add	fp, r4, #48
	mov	r0, r8
	beq	.L625
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, fp
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r9, #1636]
.L625:
	cmp	r7, r2
	bcc	.L626
.L632:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L635:
	.align	2
.L634:
	.word	.LANCHOR1-(.LPIC82+8)
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L647
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC85:
	add	r6, pc, r6
	ldr	r1, [r6, #2056]
	cmp	r1, #0
	beq	.L645
	mov	r5, #0
	mov	r7, r5
	mov	r9, r5
.L639:
	add	r3, r6, #2048
	add	r7, r7, #1
	add	r3, r3, #12
	ldr	r4, [r5, r3]
	add	r5, r5, #84
	cmp	r4, #0
	add	r10, r4, #8
	mov	r0, r10
	beq	.L638
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #100]
	mov	r0, r10
	str	r9, [r4, #96]
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r6, #2056]
.L638:
	cmp	r7, r1
	bcc	.L639
.L645:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L648:
	.align	2
.L647:
	.word	.LANCHOR1-(.LPIC85+8)
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L660
	strd	r8, [sp, #16]
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC88:
	add	r6, pc, r6
	ldr	r1, [r6, #2228]
	cmp	r1, #0
	beq	.L658
	mov	r5, #0
	mov	r7, r5
	mov	r9, r5
.L652:
	add	r3, r6, #2224
	add	r7, r7, #1
	add	r3, r3, #8
	ldr	r4, [r5, r3]
	add	r5, r5, #84
	cmp	r4, #0
	add	fp, r4, #104
	add	r10, r4, #72
	mov	r0, fp
	beq	.L651
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #204]
	mov	r0, fp
	str	r9, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #208]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r6, #2228]
.L651:
	cmp	r7, r1
	bcc	.L652
.L658:
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L661:
	.align	2
.L660:
	.word	.LANCHOR1-(.LPIC88+8)
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L663
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #356]
	movls	r4, r3
.L663:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L668
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #356]
	movls	r4, r3
.L668:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L677
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC91:
	add	r3, pc, r3
	ldr	r4, [r3, #2400]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L674
	ldr	r6, [r4, #116]
	cmp	r6, #0
	bne	.L675
	mov	r3, #1
	add	r7, r4, #92
	mov	r5, r1
	mov	r0, r7
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L673:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L675:
	mvn	r6, #15
	b	.L673
.L674:
	mvn	r6, #18
	b	.L673
.L678:
	.align	2
.L677:
	.word	.LANCHOR1-(.LPIC91+8)
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L684
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC92:
	add	r3, pc, r3
	ldr	r4, [r3, #2400]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L681
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L682
	mov	r3, #1
	add	r7, r4, #92
	str	r5, [r4, #148]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L680:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L682:
	mvn	r5, #15
	b	.L680
.L681:
	mvn	r5, #18
	b	.L680
.L685:
	.align	2
.L684:
	.word	.LANCHOR1-(.LPIC92+8)
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, [r1, #296]
	movw	r2, #44100
	ldr	r3, [r1, #284]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L692
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #496]
	ldrd	r2, [lr, #248]
	orrs	r3, r2, r3
	beq	.L698
.L688:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #188
	str	r3, [r0, #176]
	ldr	r3, [ip]
	ldr	r3, [r3, #496]
	str	lr, [r0, #196]
	str	r3, [r0, #180]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #496]
	cmp	r3, #0
	beq	.L689
	ldr	ip, [r3, #276]
	cmp	ip, #0
	beq	.L689
.L690:
	mov	r6, #0
	mov	r4, r0
	mov	r5, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	ip, [ip]
	blx	ip
	cmp	r0, r6
	str	r0, [r4, #184]
	beq	.L693
	ldr	r1, [r5, #380]
	adds	r2, r4, #176
	ldr	r3, [r4, #212]
	str	r1, [r4, #192]
	str	r2, [r3, #552]
	beq	.L691
	ldr	r2, [r4, #184]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #188]
	str	r2, [r3, #544]
	ldr	r2, [r4, #192]
	str	r2, [r3, #548]
.L687:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L698:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr, #248]
	ldr	ip, [r0]
	b	.L688
.L689:
	ldr	ip, .L699
.LPIC94:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L690
.L691:
	mov	r0, r2
	str	r2, [r3, #540]
	str	r2, [r3, #544]
	str	r2, [r3, #548]
	b	.L687
.L692:
	mvn	r0, #21
	bx	lr
.L693:
	mvn	r0, #11
	b	.L687
.L700:
	.align	2
.L699:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC94+8))
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L703
	str	r3, [r1, #124]
	add	r2, r3, #84
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	add	r2, r3, #88
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	bx	lr
.L703:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L710
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	add	r1, r3, #88
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	bx	lr
.L710:
	ldr	r0, .L711
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #947
	str	lr, [sp, #4]
.LPIC95:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L712:
	.align	2
.L711:
	.word	.LC18-(.LPIC95+8)
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L717
	cmn	r3, #104
	beq	.L717
.L716:
	ldr	r3, [r4, #20]
	cmp	r5, #0
	str	r5, [r4, #168]
	ldr	r1, [r3, #24]
	beq	.L719
	ldrb	r2, [r4, #172]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L721
	bcc	.L719
	cmp	r2, #2
	bne	.L720
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	r2, [r3, #2]
	strb	lr, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	r0, [r3, #6]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L734
.L723:
	mov	r1, #1
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	r1, [r4, #172]
.L720:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L719:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L717:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L716
.L721:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	r0, [r3, #2]	@ unaligned
	str	r1, [r5, #4]
	strb	r2, [r4, #172]
	b	.L720
.L734:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L723
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r0, #20]
	ldr	r3, [r0, #372]
	ldrh	r2, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [ip, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L745
	ldrb	ip, [r1]	@ zero_extendqisi2
	mov	r4, r0
	movw	r0, #8482
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	orr	r3, r3, ip, asl #8
	cmp	r3, r0
	beq	.L738
	movw	r1, #41217
	cmp	r3, r1
	beq	.L739
	cmp	r3, #8448
	beq	.L748
.L737:
	mvn	r0, #94
.L746:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L739:
	cmp	r2, #0
	bne	.L737
	add	r9, r4, #368
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	ldr	r8, [r3, #340]!
	cmp	r8, r3
	beq	.L749
	mov	r0, r8
	sub	r10, r8, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #348]
	mov	r0, r9
	sub	r3, r3, #1
	str	r3, [r4, #348]
	bl	_raw_spin_unlock(PLT)
	ldmdb	r8, {r1, r3}
	ldr	r0, [r5]
	cmp	r6, r3
	movcs	r9, r3
	movcc	r9, r6
	mov	r2, r9
	bl	memcpy(PLT)
	ldr	r3, .L750
	str	r4, [r5, #32]
.LPIC97:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	ldr	r3, [r4, #416]
	cmp	r6, r9
	mov	r6, r9
	movle	r0, #0
	movgt	r0, #1
	add	r3, r3, #1
	str	r3, [r4, #416]
	b	.L741
.L748:
	ldr	r3, .L750+4
	mov	r0, #0
	str	r4, [r5, #32]
.LPIC96:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L741:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r0, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L744
	mov	r0, r4
	b	.L746
.L738:
	ldr	r3, [r4, #352]
	adds	r0, r6, #0
	movne	r0, #1
	ands	r2, r2, #1
	movne	r6, #0
	moveq	r6, r2
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #352]
	b	.L741
.L744:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L750+8
	add	r0, r0, #32
.LPIC98:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L746
.L745:
	mvn	r0, #106
	b	.L746
.L749:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	b	.L737
.L751:
	.align	2
.L750:
	.word	rmnet_mux_response_complete-(.LPIC97+8)
	.word	rmnet_mux_command_complete-(.LPIC96+8)
	.word	.LC19-(.LPIC98+8)
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L761
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC99:
	add	r3, pc, r3
	ldr	r2, [r3, #2404]
	cmp	r2, #0
	ble	.L757
	ldr	r4, [r3, #2408]
	cmp	r4, #0
	beq	.L757
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #264]
	str	r3, [r4, #260]
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L757:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L762:
	.align	2
.L761:
	.word	.LANCHOR1-(.LPIC99+8)
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r8, [r0, #104]
	ldrb	r7, [r0, #76]	@ zero_extendqisi2
	tst	r3, #247
	bne	.L775
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	mov	r9, r4, lsr #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r8, #28]
	beq	.L765
	mov	r1, #8
	mov	r0, r5
	bl	__memzero(PLT)
	sub	r2, r4, #63
	cmp	r7, #26
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	clz	r2, r2
	mov	r2, r2, lsr #5
	beq	.L783
	and	r3, r3, #2
	cmp	r3, #0
	add	r6, r5, #8
	movne	r3, #128
	moveq	r3, #0
	movw	r10, #65535
	strb	r3, [r5, #3]
.L769:
	cmp	r4, #8
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L784
	cmp	r4, #42
	beq	.L774
.L775:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r8, #28]
.L765:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L784:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero(PLT)
	cmp	r9, #1
	beq	.L772
	mvn	r3, #0
	mov	r2, #4
	strb	r3, [r6, #4]
	strb	r2, [r6, #2]
	strb	r3, [r6, #5]
	strb	r3, [r6, #8]
	strb	r3, [r6, #9]
	strb	r3, [r6, #10]
	strb	r3, [r6, #11]
.L772:
	add	r3, r6, #12
.L773:
	rsb	r0, r5, r3
	cmp	r10, r0
	blt	.L775
	cmp	r7, #26
	subeq	r3, r0, #1
	streqb	r3, [r5]
	beq	.L765
	sub	r3, r0, #2
	uxth	r3, r3
	mov	r2, r3, lsr #8
	strb	r3, [r5, #1]
	strb	r2, [r5]
	b	.L765
.L783:
	and	r3, r3, #2
	add	r6, r5, #4
	cmp	r3, #0
	mov	r10, #255
	movne	r3, #128
	moveq	r3, #0
	strb	r3, [r5, #2]
	b	.L769
.L774:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero(PLT)
	mov	r2, #2
	mov	r0, #4
	mov	r1, #40
	add	r3, r6, #28
	strb	r2, [r6, #2]
	strb	r2, [r6, #3]
	strb	r0, [r6, #4]
	strb	r1, [r6, #6]
	b	.L773
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L790
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC101:
	add	r3, pc, r3
	ldr	r5, [r3, #2492]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #356]
	cmp	r4, #0
	bne	.L789
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L787:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L789:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L790+4
	ldr	r0, .L790+8
.LPIC102:
	add	r1, pc, r1
.LPIC103:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
	b	.L787
.L791:
	.align	2
.L790:
	.word	.LANCHOR1-(.LPIC101+8)
	.word	.LANCHOR3-(.LPIC102+8)
	.word	.LC20-(.LPIC103+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #20]
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldr	ip, [r2, #24]
	cmp	r3, #34
	ldr	r0, [ip, #4]
	beq	.L794
	cmp	r3, #162
	beq	.L795
.L803:
	mvn	r4, #94
.L805:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L795:
	ldrh	r3, [r1, #2]	@ unaligned
	ldr	lr, [r0]
	cmp	r3, #256
	bne	.L803
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L803
	mov	r4, #68
	mvn	r1, #83
	mov	r3, #0
	mov	r2, #3
	strb	r4, [lr]
	strb	r1, [lr, #1]
	strb	r3, [lr, #2]
.L797:
	ldrb	lr, [r0, #26]	@ zero_extendqisi2
	str	r2, [r0, #4]
	mov	r1, r0
	ldr	r3, .L807
	mov	r2, #32
	bfc	lr, #1, #1
.LPIC105:
	add	r3, pc, r3
	strb	lr, [r0, #26]
	str	r3, [r0, #28]
	ldr	r3, [ip]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L805
	ldr	r0, .L807+4
	mov	r1, r4
.LPIC104:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L805
.L794:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	r3, r3, #1
	cmp	r3, #3
	bhi	.L803
	b	.L797
.L808:
	.align	2
.L807:
	.word	audio_control_complete-(.LPIC105+8)
	.word	.LC21-(.LPIC104+8)
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L823
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L811
	ldr	r8, [r3, #92]
	add	r9, r5, #12
	mov	r10, #2048
	b	.L812
.L825:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L811
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	fp, #0
	mov	r7, r0
	bne	.L824
.L812:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L825
.L811:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L824:
	ldr	r1, .L826
	mov	r2, r5
	ldr	r0, .L826+4
	ldr	r3, [r5]
.LPIC108:
	add	r1, pc, r1
	add	r1, r1, #24
.LPIC109:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r9
	ldr	r1, [r5, #16]
	mov	r0, r4
	bl	__list_add(PLT)
	b	.L811
.L823:
	ldr	r1, .L826+8
	ldr	r0, .L826+12
.LPIC106:
	add	r1, pc, r1
.LPIC107:
	add	r0, pc, r0
	add	r1, r1, #24
	b	printk(PLT)
.L827:
	.align	2
.L826:
	.word	.LANCHOR3-(.LPIC108+8)
	.word	.LC23-(.LPIC109+8)
	.word	.LANCHOR3-(.LPIC106+8)
	.word	.LC22-(.LPIC107+8)
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L842
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L843
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	bne	.L844
.L833:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L842:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L845
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L833
	ldr	r1, .L846
	mov	r2, r0
	ldr	r0, .L846+4
.LPIC112:
	add	r1, pc, r1
	add	r1, r1, #40
.LPIC113:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L833
.L844:
	ldr	r1, .L846+8
	mov	r2, r0
	ldr	r0, .L846+12
.LPIC116:
	add	r1, pc, r1
	add	r1, r1, #64
.LPIC117:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L833
.L843:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L846+16
	ldr	r0, .L846+20
.LPIC114:
	add	r1, pc, r1
.LPIC115:
	add	r0, pc, r0
	add	r1, r1, #64
.L841:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L845:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L846+24
	ldr	r0, .L846+28
.LPIC110:
	add	r1, pc, r1
.LPIC111:
	add	r0, pc, r0
	add	r1, r1, #40
	b	.L841
.L847:
	.align	2
.L846:
	.word	.LANCHOR3-(.LPIC112+8)
	.word	.LC25-(.LPIC113+8)
	.word	.LANCHOR3-(.LPIC116+8)
	.word	.LC25-(.LPIC117+8)
	.word	.LANCHOR3-(.LPIC114+8)
	.word	.LC24-(.LPIC115+8)
	.word	.LANCHOR3-(.LPIC110+8)
	.word	.LC24-(.LPIC111+8)
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L858
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC118:
	add	r3, pc, r3
	ldr	r2, [r3, #1216]
	cmp	r0, r2
	bcs	.L855
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r4, [r3, #1220]
	cmp	r4, #0
	beq	.L856
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	beq	.L853
	mov	r2, r5
	mov	r1, r6
	bl	memcpy(PLT)
	ldr	r3, [r4, #84]
	ands	r5, r3, #1
	beq	.L857
	ldr	r3, [r4, #96]
	mov	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #96]
.L850:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L857:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	b	.L850
.L853:
	mvn	r5, #11
	b	.L850
.L856:
	ldr	r1, .L858+4
	mvn	r5, #18
	ldr	r0, .L858+8
.LPIC122:
	add	r1, pc, r1
	add	r1, r1, #88
.LPIC123:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L850
.L855:
	ldr	r1, .L858+12
	mov	r2, r0
	mvn	r5, #18
	ldr	r0, .L858+16
.LPIC119:
	add	r1, pc, r1
	add	r1, r1, #88
.LPIC120:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L850
.L859:
	.align	2
.L858:
	.word	.LANCHOR1-(.LPIC118+8)
	.word	.LANCHOR3-(.LPIC122+8)
	.word	.LC22-(.LPIC123+8)
	.word	.LANCHOR3-(.LPIC119+8)
	.word	.LC26-(.LPIC120+8)
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r2, #8515
	str	lr, [sp, #8]
	ldrb	lr, [r1]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	ip, [ip, #24]
	orr	r3, r3, lr, asl #8
	ldrh	lr, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [ip, #4]
	bne	.L865
	cmp	lr, #0
	beq	.L868
.L865:
	mvn	r5, #94
.L861:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L868:
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L865
	strh	r5, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	lr, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, lr, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [ip]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L861
	ldr	r1, .L869
	ldr	r0, .L869+4
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldrb	r2, [r4]	@ zero_extendqisi2
.LPIC124:
	add	r1, pc, r1
	add	r1, r1, #112
.LPIC125:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L861
.L870:
	.align	2
.L869:
	.word	.LANCHOR3-(.LPIC124+8)
	.word	.LC27-(.LPIC125+8)
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r1, #44]
	ldr	r0, [r1, #32]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L872
	ldr	r3, [r1, #48]
	ldr	ip, [r1, #4]
	cmp	r3, ip
	bne	.L872
	cmp	r3, #4
	beq	.L884
	cmp	r3, #8
	bne	.L878
	ldr	ip, [r1]
	ldrb	r3, [ip, #2]	@ zero_extendqisi2
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r1, [ip]	@ zero_extendqisi2
	ldrb	r2, [ip, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, lr, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L879
	ldr	r3, .L885
.LPIC131:
	add	r3, pc, r3
	ldr	r3, [r3, #32]
	cmp	r3, r2
	bcc	.L879
	ldrb	r1, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #8
	strh	r3, [r0, #228]	@ movhi
.L877:
	str	r2, [r0, #224]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L884:
	ldr	ip, [r1]
	ldrb	r3, [ip, #2]	@ zero_extendqisi2
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r1, [ip]	@ zero_extendqisi2
	ldrb	r2, [ip, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, lr, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L876
	ldr	r3, .L885+4
.LPIC128:
	add	r3, pc, r3
	ldr	r3, [r3, #32]
	cmp	r3, r2
	bcs	.L877
.L876:
	ldr	r1, .L885+8
	ldr	r0, .L885+12
.LPIC129:
	add	r1, pc, r1
.LPIC130:
	add	r0, pc, r0
	add	r1, r1, #128
	bl	printk(PLT)
.L874:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L885+16
	ldr	r0, .L885+20
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC136:
	add	r2, pc, r2
	add	r2, r2, #128
.LPIC138:
	add	r0, pc, r0
	mov	r1, r2
	b	printk(PLT)
.L872:
	ldr	r1, .L885+24
	ldr	r0, .L885+28
.LPIC126:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC127:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L874
.L879:
	ldr	r1, .L885+32
	ldr	r0, .L885+36
.LPIC132:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC133:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L874
.L878:
	ldr	r1, .L885+40
	ldr	r0, .L885+44
.LPIC134:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC135:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L874
.L886:
	.align	2
.L885:
	.word	.LANCHOR2-(.LPIC131+8)
	.word	.LANCHOR2-(.LPIC128+8)
	.word	.LANCHOR3-(.LPIC129+8)
	.word	.LC29-(.LPIC130+8)
	.word	.LANCHOR3-(.LPIC136+8)
	.word	.LC31-(.LPIC138+8)
	.word	.LANCHOR3-(.LPIC126+8)
	.word	.LC28-(.LPIC127+8)
	.word	.LANCHOR3-(.LPIC132+8)
	.word	.LC29-(.LPIC133+8)
	.word	.LANCHOR3-(.LPIC134+8)
	.word	.LC30-(.LPIC135+8)
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L903
	cmp	r3, #0
	beq	.L887
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	bne	.L904
.L887:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L903:
	cmp	r3, #0
	beq	.L887
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	beq	.L887
	ldr	r2, .L905
	mov	r3, r0
	ldr	r0, .L905+4
.LPIC139:
	add	r2, pc, r2
.LPIC141:
	add	r0, pc, r0
	add	r2, r2, #152
	b	.L902
.L904:
	ldr	r2, .L905+8
	mov	r3, r0
	ldr	r0, .L905+12
.LPIC142:
	add	r2, pc, r2
.LPIC144:
	add	r0, pc, r0
	add	r2, r2, #180
.L902:
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk(PLT)
.L906:
	.align	2
.L905:
	.word	.LANCHOR3-(.LPIC139+8)
	.word	.LC32-(.LPIC141+8)
	.word	.LANCHOR3-(.LPIC142+8)
	.word	.LC32-(.LPIC144+8)
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L908
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L908
	cmn	r3, #104
	beq	.L911
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L912
	cmn	r3, #108
	beq	.L911
	ldr	r1, .L937
	ldr	r2, [r0, #4]
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	ldr	r0, .L937+4
.LPIC148:
	add	r1, pc, r1
	add	r1, r1, #208
	stmia	sp, {ip, lr}
.LPIC149:
	add	r0, pc, r0
	bl	printk(PLT)
.L912:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L936
.L907:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L911:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L907
.L936:
	add	r6, r5, #164
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L907
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L907
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L907
.L908:
	ldr	r2, .L937+8
	ldr	r0, .L937+12
.LPIC145:
	add	r2, pc, r2
	add	r2, r2, #208
.LPIC147:
	add	r0, pc, r0
	mov	r1, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L938:
	.align	2
.L937:
	.word	.LANCHOR3-(.LPIC148+8)
	.word	.LC34-(.LPIC149+8)
	.word	.LANCHOR3-(.LPIC145+8)
	.word	.LC33-(.LPIC147+8)
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L947
.L939:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L947:
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L939
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L948
	mov	r2, r0
	ldr	r0, .L948+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC150:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC151:
	add	r0, pc, r0
	add	r1, r1, #236
	b	printk(PLT)
.L949:
	.align	2
.L948:
	.word	.LANCHOR3-(.LPIC150+8)
	.word	.LC35-(.LPIC151+8)
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L958
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC157:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L953
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L956
.L951:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	movne	r0, r4
	beq	.L957
.L952:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L953:
	mov	r4, #16
	b	.L951
.L957:
	ldr	r1, .L958+4
	ldr	r0, .L958+8
.LPIC155:
	add	r1, pc, r1
	add	r1, r1, #264
.LPIC156:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L952
.L956:
	ldr	r1, .L958+12
	ldr	r0, .L958+16
.LPIC153:
	add	r1, pc, r1
.LPIC154:
	add	r0, pc, r0
	add	r1, r1, #264
	bl	printk(PLT)
	mvn	r0, #11
	b	.L952
.L959:
	.align	2
.L958:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC157+8))
	.word	.LANCHOR3-(.LPIC155+8)
	.word	.LC37-(.LPIC156+8)
	.word	.LANCHOR3-(.LPIC153+8)
	.word	.LC36-(.LPIC154+8)
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	lr, [r1, #2]	@ unaligned
	ldr	r5, [r3, #24]
	cmp	r2, #34
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r4, [r5, #4]
	beq	.L962
	bls	.L1036
	cmp	r2, #161
	beq	.L965
	cmp	r2, #162
	bne	.L961
	ldr	r3, [r7, #260]!
	and	ip, ip, #127
	mov	lr, lr, lsr #8
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L1011
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, ip
	beq	.L1000
.L1037:
	ldr	r3, [r3]
	cmp	r3, r7
	beq	.L1011
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L1037
.L1000:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L1011
	ldrb	r0, [r2, #12]	@ zero_extendqisi2
	cmp	r0, lr
	beq	.L1004
.L1038:
	ldr	r2, [r2]
	cmp	r2, r3
	beq	.L1011
	ldrb	r0, [r2, #12]	@ zero_extendqisi2
	cmp	r0, lr
	bne	.L1038
.L1004:
	and	r3, r1, #15
	sub	r1, r3, #1
	cmp	r1, #3
	bhi	.L1011
	add	r3, r3, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [r2, r3, asl #2]
	mov	r2, r6
	str	r3, [r1, #-4]!
	bl	memcpy(PLT)
	b	.L1007
.L965:
	ldr	r3, [r0, #252]!
	mvn	r2, #94
	mov	ip, ip, lsr #8
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	str	r2, [sp, #20]
	cmp	r3, r0
	bne	.L983
.L977:
	ldr	r3, .L1042
	str	r7, [r4, #32]
	mov	r2, r6
	add	r1, sp, #20
	ldr	r0, [r4]
.LPIC159:
	add	r3, pc, r3
	str	r3, [r4, #28]
	bl	memcpy(PLT)
.L1007:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r6, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1039
.L1015:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L980:
	ldr	r3, [r3]
	cmp	r3, r0
	beq	.L977
.L983:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L980
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L977
	mov	lr, lr, lsr #8
	b	.L982
.L981:
	ldr	r0, [r0]
	cmp	r0, r3
	beq	.L977
.L982:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L981
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L981
	and	r1, r1, #15
	blx	r2
	str	r0, [sp, #20]
	b	.L977
.L1036:
	cmp	r2, #33
	bne	.L961
	ldr	r3, [r0, #252]!
	mov	ip, ip, lsr #8
	ldrb	r8, [r1, #1]	@ zero_extendqisi2
	cmp	r3, r0
	and	r8, r8, #15
	bne	.L975
.L967:
	ldr	r3, .L1042+4
	strb	r8, [r7, #268]
	str	r7, [r4, #32]
.LPIC158:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L1007
.L970:
	ldr	r3, [r3]
	cmp	r3, r0
	beq	.L967
.L975:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L970
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L967
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	mov	lr, lr, lsr #8
	cmp	r1, lr
	bne	.L973
	b	.L971
.L974:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L971
.L973:
	ldr	r2, [r2]
	cmp	r2, r3
	bne	.L974
	b	.L967
.L961:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r6, [sp, #8]
	ldr	r1, .L1042+8
	str	ip, [sp, #4]
	ldr	r0, .L1042+12
	str	lr, [sp]
.LPIC163:
	add	r1, pc, r1
.LPIC164:
	add	r0, pc, r0
	add	r1, r1, #312
	bl	printk(PLT)
.L1011:
	ldr	r1, .L1042+16
	mvn	r4, #94
	ldr	r0, .L1042+20
.LPIC167:
	add	r1, pc, r1
	add	r1, r1, #312
.LPIC168:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1015
.L962:
	mov	r2, r0
	and	ip, ip, #127
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	ldr	r3, [r2, #260]!
	mov	lr, lr, lsr #8
	cmp	r3, r2
	beq	.L1011
	ldrb	r0, [r3, #16]	@ zero_extendqisi2
	cmp	r0, ip
	beq	.L987
.L1040:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L1011
	ldrb	r0, [r3, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L1040
.L987:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L1011
	ldrb	r0, [r2, #12]	@ zero_extendqisi2
	cmp	r0, lr
	beq	.L991
.L1041:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1011
	ldrb	r0, [r2, #12]	@ zero_extendqisi2
	cmp	r0, lr
	bne	.L1041
.L991:
	ands	r1, r1, #15
	beq	.L993
	cmp	r1, #4
	bls	.L994
	cmp	r1, #5
	beq	.L1011
.L993:
	ldr	r1, .L1042+24
	ldr	r0, .L1042+28
.LPIC161:
	add	r1, pc, r1
	add	r1, r1, #288
.LPIC162:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1011
.L994:
	ldr	r3, .L1042+32
	str	r2, [r7, #272]
	strb	r1, [r7, #268]
	str	r7, [r4, #32]
.LPIC160:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L1007
.L971:
	str	r2, [r7, #272]
	b	.L967
.L1039:
	ldr	r1, .L1042+36
	mov	r2, r4
	ldr	r0, .L1042+40
.LPIC165:
	add	r1, pc, r1
	add	r1, r1, #312
.LPIC166:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1015
.L1043:
	.align	2
.L1042:
	.word	f_audio_complete-(.LPIC159+8)
	.word	f_audio_complete-(.LPIC158+8)
	.word	.LANCHOR3-(.LPIC163+8)
	.word	.LC39-(.LPIC164+8)
	.word	.LANCHOR3-(.LPIC167+8)
	.word	.LC41-(.LPIC168+8)
	.word	.LANCHOR3-(.LPIC161+8)
	.word	.LC38-(.LPIC162+8)
	.word	audio_set_endpoint_complete-(.LPIC160+8)
	.word	.LANCHOR3-(.LPIC165+8)
	.word	.LC40-(.LPIC166+8)
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L1050
	ldr	r5, .L1050+4
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
.LPIC169:
	add	r0, pc, r0
.LPIC170:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r0, [r5, #2496]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r5, #2496]
	mov	r2, r0
	ldr	r3, [r2, #136]!
	cmp	r3, r2
	ldr	r2, [r3], #-36
	bne	.L1049
.L1045:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L1050+8
	mov	r0, #0
.LPIC176:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	str	r0, [r3, #216]
	add	r2, r3, #116
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1049:
	ldr	r6, .L1050+12
	mov	r4, r3
	sub	r7, r2, #36
.LPIC172:
	add	r6, pc, r6
.L1046:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	printk(PLT)
	ldr	r3, [r5, #2496]
	mov	r1, r4
	mov	r4, r7
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r5, #2496]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r3, r7
	ldr	r0, [r5, #2496]
	ldr	r2, [r3, #36]!
	add	ip, r0, #136
	cmp	r3, ip
	sub	r7, r2, #36
	beq	.L1045
	b	.L1046
.L1051:
	.align	2
.L1050:
	.word	.LC42-(.LPIC169+8)
	.word	.LANCHOR1-(.LPIC170+8)
	.word	.LANCHOR1-(.LPIC176+8)
	.word	.LC43-(.LPIC172+8)
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	movw	r1, #8586
	str	lr, [sp, #16]
	mov	lr, r0
	strd	r6, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrb	r0, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	r6, [ip, #24]
	ldrh	r7, [r4, #4]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	ip, [r4, #6]	@ unaligned
	mov	r0, r2
	cmp	r3, r1
	ldr	r5, [r6, #4]
	beq	.L1054
	ble	.L1103
	movw	r2, #41349
	cmp	r3, r2
	beq	.L1061
	bgt	.L1062
	movw	r2, #41344
	cmp	r3, r2
	beq	.L1063
	movw	r2, #41347
	cmp	r3, r2
	bne	.L1098
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	beq	.L1104
.L1098:
	mvn	r5, #94
.L1101:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L1103:
	movw	r1, #8580
	cmp	r3, r1
	beq	.L1056
	ble	.L1105
	movw	r2, #8582
	cmp	r3, r2
	beq	.L1059
	movw	r2, #8584
	cmp	r3, r2
	bne	.L1098
	cmp	ip, #2
	cmpeq	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldr	r3, .L1106
	str	lr, [r5, #32]
	mov	r7, #2
.LPIC184:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L1067
.L1062:
	movw	r2, #41351
	cmp	r3, r2
	beq	.L1065
	movw	r2, #41353
	cmp	r3, r2
	bne	.L1098
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldrb	r2, [lr, #180]	@ zero_extendqisi2
	mov	r7, #2
	ldr	r3, [r5]
	strb	r2, [r3]
	strb	r0, [r3, #1]
	b	.L1067
.L1059:
	cmp	ip, #4
	cmpeq	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldr	r3, .L1106+4
	str	lr, [r5, #32]
	mov	r7, #4
.LPIC178:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L1067
.L1065:
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldrh	r2, [lr, #182]
	mov	r7, #2
	ldr	r1, .L1106+8
	ldr	r3, [r5]
	ldr	r0, .L1106+12
	mov	ip, r2, lsr #8
.LPIC182:
	add	r1, pc, r1
	strb	r2, [r3]
	add	r1, r1, #328
	strb	ip, [r3, #1]
.LPIC183:
	add	r0, pc, r0
	ldrh	r2, [lr, #182]
	bl	printk(PLT)
	b	.L1067
.L1063:
	clz	r3, ip
	mov	r3, r3, lsr #5
	cmp	r0, #0
	moveq	r0, r3
	orrne	r0, r3, #1
	cmp	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldr	r1, .L1106+16
	cmp	ip, #28
	movcc	r7, ip
	movcs	r7, #28
	ldr	r0, [r5]
	mov	r2, r7
.LPIC177:
	add	r1, pc, r1
	bl	memcpy(PLT)
	b	.L1067
.L1105:
	movw	r1, #8515
	cmp	r3, r1
	bne	.L1098
	cmp	ip, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	moveq	r7, ip
	streqh	r2, [lr, #98]	@ movhi
	bne	.L1098
	b	.L1067
.L1056:
	cmp	ip, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	cmp	r2, #0
	beq	.L1069
	cmp	r2, #1
	bne	.L1098
	ldr	r3, .L1106+20
	mov	r7, ip
.LPIC181:
	add	r3, pc, r3
	add	r3, r3, #100
	str	r3, [lr, #176]
	b	.L1067
.L1061:
	cmp	ip, #3
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldr	r2, [lr, #112]
	mov	r7, #4
	ldr	r3, [r5]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L1067
.L1054:
	cmp	ip, #0
	bne	.L1098
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	cmp	r2, #0
	beq	.L1071
	cmp	r2, #1
	bne	.L1098
	mov	r3, #16777216
	strb	r2, [lr, #180]
.L1073:
	ldr	r1, [lr, #176]
	mov	r7, #0
	ldr	r2, [r1, #4]
	bic	r2, r2, #16777216
	str	r2, [r1, #4]
	ldr	r2, [lr, #176]
	ldr	r1, [r2, #4]
	orr	r3, r1, r3
	str	r3, [r2, #4]
.L1067:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L1101
	ldr	r0, [r6]
	str	r5, [sp]
	ldr	r1, .L1106+24
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC185:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L1101
.L1104:
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1098
	ldr	r3, .L1106+28
	mov	r7, #2
	ldr	r2, [lr, #176]
	ldr	r1, [r5]
.LPIC179:
	add	r3, pc, r3
	add	r3, r3, #56
	subs	r3, r2, r3
	strb	r0, [r1, #1]
	movne	r3, #1
	strb	r3, [r1]
	b	.L1067
.L1071:
	strb	r2, [lr, #180]
	mov	r3, r2
	b	.L1073
.L1069:
	ldr	r3, .L1106+32
	mov	r7, r2
.LPIC180:
	add	r3, pc, r3
	add	r3, r3, #56
	str	r3, [lr, #176]
	b	.L1067
.L1107:
	.align	2
.L1106:
	.word	ncm_setdgram_complete-(.LPIC184+8)
	.word	ncm_ep0out_complete-(.LPIC178+8)
	.word	.LANCHOR3-(.LPIC182+8)
	.word	.LC44-(.LPIC183+8)
	.word	.LANCHOR2-(.LPIC177+8)
	.word	.LANCHOR2-(.LPIC181+8)
	.word	.LC45-(.LPIC185+8)
	.word	.LANCHOR2-(.LPIC179+8)
	.word	.LANCHOR2-(.LPIC180+8)
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1121
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, #0
	str	lr, [sp, #12]
	ldr	r5, [r1, #44]
	ldr	lr, [r1, #32]
.LPIC186:
	add	ip, pc, ip
	ldr	r2, [ip, #4]
	ldr	r3, [ip, #16]
	str	r6, [r1, #32]
	cmp	r2, r3
	movcc	r0, r2
	movcs	r0, r3
	cmp	r5, r6
	bne	.L1109
	ldr	r2, [r1, #48]
	ldr	r3, [r1, #4]
	cmp	r2, r3
	bne	.L1109
	ldr	r3, [r1]
	movw	r1, #7500
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	ldrb	r3, [r3]	@ zero_extendqisi2
	orr	r2, r3, r2, asl #8
	sub	r3, r2, #1504
	sub	r3, r3, #10
	cmp	r3, r1
	bhi	.L1119
	ldrh	r3, [ip, #24]
	rsb	r1, r3, #0
	add	r3, r3, #11
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r0, r3
	bcc	.L1120
	ldr	r3, [lr, #184]
	strh	r2, [lr, #182]	@ movhi
	ldr	r0, .L1121+4
	cmp	r3, #0
	subne	r1, r2, #14
.LPIC197:
	add	r0, pc, r0
	strne	r1, [r3, #356]
	ldr	r1, .L1121+8
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC196:
	add	r1, pc, r1
	add	r1, r1, #340
	b	printk(PLT)
.L1109:
	ldr	r1, .L1121+12
	ldr	r0, .L1121+16
.LPIC188:
	add	r1, pc, r1
.LPIC189:
	add	r0, pc, r0
	add	r1, r1, #340
	bl	printk(PLT)
.L1111:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L1119:
	ldr	r1, .L1121+20
	ldr	r0, .L1121+24
.LPIC190:
	add	r1, pc, r1
	add	r1, r1, #340
.LPIC191:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1111
.L1120:
	ldr	r1, .L1121+28
	ldr	r0, .L1121+32
.LPIC193:
	add	r1, pc, r1
	add	r1, r1, #340
.LPIC194:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L1121+36
.LPIC195:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1111
.L1122:
	.align	2
.L1121:
	.word	.LANCHOR2-(.LPIC186+8)
	.word	.LC50-(.LPIC197+8)
	.word	.LANCHOR3-(.LPIC196+8)
	.word	.LANCHOR3-(.LPIC188+8)
	.word	.LC46-(.LPIC189+8)
	.word	.LANCHOR3-(.LPIC190+8)
	.word	.LC47-(.LPIC191+8)
	.word	.LANCHOR3-(.LPIC193+8)
	.word	.LC48-(.LPIC194+8)
	.word	.LC49-(.LPIC195+8)
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1148
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #24]
.LPIC198:
	add	r1, pc, r1
	ldr	r3, [r1, #16]!
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L1127
	b	.L1124
.L1145:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	beq	.L1124
.L1127:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1145
.L1124:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L1136
.L1135:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L1146
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L1135
.L1136:
	mov	r0, #0
.L1129:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1146:
	ldr	r2, .L1148+4
	add	r5, r6, #36
	ldr	r3, [r4]
	ldr	r0, .L1148+8
.LPIC201:
	add	r2, pc, r2
	add	r2, r2, #364
	ldr	r3, [r3]
	mov	r1, r2
.LPIC203:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1132
.L1133:
	bl	list_del(PLT)
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L1147
.L1132:
	ldr	r4, [r6, #36]
	cmp	r4, r5
	mov	r0, r4
	sub	r8, r4, #72
	bne	.L1133
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L1134
	mov	r0, r6
	blx	r3
.L1134:
	mov	r0, r7
	b	.L1129
.L1147:
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L1132
.L1149:
	.align	2
.L1148:
	.word	.LANCHOR1-(.LPIC198+8)
	.word	.LANCHOR3-(.LPIC201+8)
	.word	.LC51-(.LPIC203+8)
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L1165
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	mov	fp, r0
	strd	r8, [sp, #16]
.LPIC204:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	add	r2, r5, #396
	ldr	r1, [r0, #8]
	ldr	r3, [r0, #4]
	str	r2, [sp, #8]
	ldr	r2, .L1165+4
	ldr	r6, [r0, #44]
	sub	r5, r3, #4
.LPIC205:
	add	r2, pc, r2
	str	r2, [sp, #12]
	ldr	r2, [r1]
	str	r2, [sp, #4]
.L1151:
	ldr	r4, [r5, #4]!
	mov	r0, r7
	cmp	r4, #0
	beq	.L1162
	ldr	r9, [r4]
	mov	r1, r9
	bl	strcmp(PLT)
	subs	r8, r0, #0
	bne	.L1151
	ldr	r1, [r4, #20]
	cmp	fp, r1
	cmpne	r1, #0
	bne	.L1163
	ldr	r3, .L1165+8
.LPIC209:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1159
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L1164
.L1154:
	str	fp, [r4, #20]
	add	r2, r10, #112
	str	r4, [r0], #4
	ldr	r1, [r10, #116]
	bl	__list_add(PLT)
	ldr	r5, [r6, #44]
	ldr	r7, [r4]
	cmp	r5, #0
	ble	.L1155
	mov	r3, r5, asl #3
	add	r4, r6, #12
	add	r5, r3, r5, lsl #1
	add	r5, r5, #12
	add	r5, r6, r5
	b	.L1157
.L1156:
	cmp	r4, r5
	beq	.L1155
.L1157:
	mov	r1, r4
	mov	r0, r7
	bl	strcmp(PLT)
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1156
	ldr	r3, [sp, #4]
	mov	r2, #1
	mov	r8, r0
	strb	r2, [r3, #378]
.L1155:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1159:
	mov	r0, #16
	b	.L1154
.L1162:
	mvn	r8, #21
	b	.L1155
.L1163:
	mov	r2, r9
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	b	.L1151
.L1164:
	ldr	r1, .L1165+12
	mvn	r8, #11
	ldr	r0, .L1165+16
.LPIC207:
	add	r1, pc, r1
	add	r1, r1, #396
.LPIC208:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1155
.L1166:
	.align	2
.L1165:
	.word	.LANCHOR3-(.LPIC204+8)
	.word	.LC52-(.LPIC205+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC209+8))
	.word	.LANCHOR3-(.LPIC207+8)
	.word	.LC53-(.LPIC208+8)
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r3, [r0]
	ldr	r5, [r1, #48]
	cmp	r2, #0
	bne	.L1183
	ldr	r2, [r3, #1640]
	cmp	r2, #5
	addls	pc, pc, r2, asl #2
	b	.L1169
.L1171:
	b	.L1170
	b	.L1172
	b	.L1173
	b	.L1174
	b	.L1175
	b	.L1176
	.p2align 1
.L1176:
	add	r7, r3, #1376
	add	r7, r7, #5
.L1177:
	cmp	r7, #0
	beq	.L1169
	add	r4, r3, #88
	mov	r6, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #255
	mov	r8, r0
	ldr	r1, [r6]
	movge	r5, #255
	mov	r0, r7
	mov	r2, r5
	bl	memcpy(PLT)
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r5]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1170:
	add	r7, r3, #101
	b	.L1177
.L1172:
	add	r7, r3, #356
	add	r7, r7, #1
	b	.L1177
.L1173:
	add	r7, r3, #612
	add	r7, r7, #1
	b	.L1177
.L1174:
	add	r7, r3, #868
	add	r7, r7, #1
	b	.L1177
.L1175:
	add	r7, r3, #1120
	add	r7, r7, #5
	b	.L1177
.L1183:
	ldr	r0, .L1184
	mov	r1, r2
.LPIC210:
	add	r0, pc, r0
.L1182:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1169:
	ldr	r0, .L1184+4
	mov	r1, r2
.LPIC211:
	add	r0, pc, r0
	b	.L1182
.L1185:
	.align	2
.L1184:
	.word	.LC54-(.LPIC210+8)
	.word	.LC55-(.LPIC211+8)
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1190
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC212:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1190+4
.LPIC213:
	add	r3, pc, r3
	ldr	r3, [r3, #2500]
	add	r3, r3, #1648
	add	r3, r3, #4
#APP
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
#APP
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r1, r2
	beq	.L1189
.L1187:
	ldr	r3, .L1190+8
	mov	r0, #0
.LPIC215:
	add	r3, pc, r3
	ldr	r3, [r3, #2500]
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1189:
	ldr	r0, .L1190+12
	movw	r1, #799
.LPIC214:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L1187
.L1191:
	.align	2
.L1190:
	.word	.LC56-(.LPIC212+8)
	.word	.LANCHOR1-(.LPIC213+8)
	.word	.LANCHOR1-(.LPIC215+8)
	.word	.LC57-(.LPIC214+8)
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1196
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC216:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, .L1196+4
.LPIC217:
	add	ip, pc, ip
	ldr	r3, [ip, #2500]
	add	r3, r3, #1648
	add	r3, r3, #4
#APP
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r0, #1
#APP
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r2, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	bne	.L1194
	ldr	r3, [ip, #2500]
	mov	r0, r2
	ldrb	ip, [r3, #100]	@ zero_extendqisi2
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #100]
	str	r3, [r4, #124]
.L1193:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1194:
	mvn	r0, #15
	b	.L1193
.L1197:
	.align	2
.L1196:
	.word	.LC58-(.LPIC216+8)
	.word	.LANCHOR1-(.LPIC217+8)
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy(PLT)
	ldr	ip, [r6, #96]
	mov	r2, r5
	mov	r3, #4
	ldr	r1, .L1202
	ldr	r0, .L1202+4
	add	ip, ip, #235
.LPIC219:
	add	r1, pc, r1
	add	r1, r1, #420
	str	ip, [sp]
.LPIC220:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1203:
	.align	2
.L1202:
	.word	.LANCHOR3-(.LPIC219+8)
	.word	.LC59-(.LPIC220+8)
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L1209
	ldr	r4, .L1209+4
	str	r6, [sp, #8]
	ldr	r0, .L1209+8
	str	lr, [sp, #12]
.LPIC221:
	add	r5, pc, r5
.LPIC223:
	add	r4, pc, r4
	add	r5, r5, #444
	add	r4, r4, #2496
	mov	r1, r5
.LPIC222:
	add	r0, pc, r0
	add	r4, r4, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L1209+12
	mov	r6, r0
.LPIC229:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L1208
	add	r2, r3, #152
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
.L1206:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1208:
	ldr	r0, .L1209+16
	mov	r1, r5
.LPIC226:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L1206
.L1210:
	.align	2
.L1209:
	.word	.LANCHOR3-(.LPIC221+8)
	.word	.LANCHOR1-(.LPIC223+8)
	.word	.LC60-(.LPIC222+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC229+8))
	.word	.LC61-(.LPIC226+8)
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L1219
	ldr	r5, .L1219+4
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r0, .L1219+8
	str	lr, [sp, #20]
	str	r8, [sp, #16]
.LPIC230:
	add	r4, pc, r4
.LPIC232:
	add	r5, pc, r5
	add	r4, r4, #468
	add	r5, r5, #2496
	mov	r1, r4
.LPIC231:
	add	r0, pc, r0
	add	r5, r5, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, .L1219+12
	mov	r7, r0
.LPIC242:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L1218
	add	r2, r3, #152
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	beq	.L1214
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L1219+16
	mov	r1, r4
	mvn	r5, #15
.LPIC237:
	add	r0, pc, r0
	bl	printk(PLT)
.L1213:
	ldr	r0, .L1219+20
	mov	r1, r7
.LPIC241:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1216:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1214:
	ldr	r3, [ip]
	mov	r1, r7
	mov	r0, r5
	mov	r5, #0
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L1219+24
	mov	r1, r4
.LPIC240:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1216
.L1218:
	ldr	r0, .L1219+28
	mov	r1, r4
	mvn	r5, #18
.LPIC235:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1213
.L1220:
	.align	2
.L1219:
	.word	.LANCHOR3-(.LPIC230+8)
	.word	.LANCHOR1-(.LPIC232+8)
	.word	.LC62-(.LPIC231+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC242+8))
	.word	.LC64-(.LPIC237+8)
	.word	.LANCHOR1-(.LPIC241+8)
	.word	.LC65-(.LPIC240+8)
	.word	.LC63-(.LPIC235+8)
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1223
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC243:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1223+4
.LPIC244:
	add	r3, pc, r3
	ldr	r3, [r3, #2508]
	add	r2, r3, #108
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1224:
	.align	2
.L1223:
	.word	.LC66-(.LPIC243+8)
	.word	.LANCHOR1-(.LPIC244+8)
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1232
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC245:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, .L1232+4
.LPIC246:
	add	ip, pc, ip
	ldr	r3, [ip, #2508]
	add	r2, r3, #108
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	r1, r0, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L1226
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #15
	ldr	pc, [sp], #4
.L1226:
	ldr	r3, [ip, #2508]
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	r0, [r3, #104]
	mov	r0, #0
	str	r3, [r4, #124]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1233:
	.align	2
.L1232:
	.word	.LC67-(.LPIC245+8)
	.word	.LANCHOR1-(.LPIC246+8)
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1234
	cmp	r1, #0
	beq	.L1234
	cmn	r1, #108
	beq	.L1234
	ldr	r0, .L1246
.LPIC248:
	add	r0, pc, r0
	b	printk(PLT)
.L1234:
	bx	lr
.L1247:
	.align	2
.L1246:
	.word	.LC68-(.LPIC248+8)
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	lr, [r0, #120]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #128]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	cmp	lr, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	beq	.L1258
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r3, #8482
	mov	r4, r1
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	mov	r5, r0
	orr	ip, ip, r2, asl #8
	cmp	ip, r3
	beq	.L1251
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1252
	cmp	ip, #8448
	beq	.L1261
.L1250:
	mvn	r0, #94
.L1259:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1252:
	cmp	r10, #0
	bne	.L1250
	add	fp, r0, #132
	mov	r0, fp
	bl	_raw_spin_lock(PLT)
	mov	ip, r5
	ldr	r5, [ip, #144]!
	cmp	r5, ip
	beq	.L1262
	mov	r0, r5
	sub	r9, r5, #8
	bl	list_del(PLT)
	mov	r0, fp
	bl	_raw_spin_unlock(PLT)
	ldmdb	r5, {r1, r3}
	ldr	r0, [r6]
	cmp	r7, r3
	movcc	r4, r7
	movcs	r4, r3
	mov	r2, r4
	bl	memcpy(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	cmp	r7, r4
	mov	r7, r4
	movle	r0, #0
	movgt	r0, #1
	b	.L1254
.L1261:
	ldr	r3, .L1263
	str	r0, [r6, #32]
	mov	r0, #0
.LPIC249:
	add	r3, pc, r3
	str	r3, [r6, #28]
.L1254:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r7, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r0, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1257
	mov	r0, r4
	b	.L1259
.L1251:
	ldr	ip, [r0, #100]
	cmp	ip, #0
	beq	.L1256
	ldrb	lr, [r0, #116]	@ zero_extendqisi2
	mov	r2, r10
	ldr	r3, .L1263+4
	mov	r1, lr, asl #5
.LPIC251:
	add	r3, pc, r3
	sub	r1, r1, lr, asl #3
	add	r3, r3, r1
	ldrb	r1, [r3, #2524]	@ zero_extendqisi2
	blx	ip
	adds	r0, r7, #0
	mov	r7, #0
	movne	r0, #1
	b	.L1254
.L1256:
	adds	r0, r7, #0
	mov	r7, ip
	movne	r0, #1
	b	.L1254
.L1257:
	ldr	r0, [r8]
	mov	r2, r4
	ldr	r1, .L1263+8
	add	r0, r0, #32
.LPIC252:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1259
.L1258:
	mvn	r0, #106
	b	.L1259
.L1262:
	ldr	r0, .L1263+12
	mov	r3, r10
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	str	r7, [sp, #4]
	ldrb	r1, [r4]	@ zero_extendqisi2
	str	r9, [sp]
.LPIC250:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, fp
	bl	_raw_spin_unlock(PLT)
	b	.L1250
.L1264:
	.align	2
.L1263:
	.word	frmnet_cmd_complete-(.LPIC249+8)
	.word	.LANCHOR1-(.LPIC251+8)
	.word	.LC70-(.LPIC252+8)
	.word	.LC69-(.LPIC250+8)
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1267
	cmp	r1, #0
	beq	.L1268
	cmn	r1, #108
	beq	.L1267
	ldr	r0, .L1293
.LPIC253:
	add	r0, pc, r0
	bl	printk(PLT)
.L1268:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L1292
.L1265:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1292:
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L1271
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r6
	str	r3, [r4, #152]
	beq	.L1290
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #136]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1265
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #144]!
	cmp	r5, r3
	beq	.L1274
	ldr	r2, [r4, #152]
	cmp	r2, #0
	beq	.L1275
	sub	r2, r2, #1
	mov	r0, r5
	sub	r8, r5, #8
	str	r2, [r4, #152]
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
.L1274:
	mov	r1, r7
	b	.L1291
.L1267:
	add	r5, r4, #132
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #152]
.L1290:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1271:
	mov	r1, r0
.L1291:
	mov	r0, r6
	b	.L1290
.L1275:
	ldr	r1, .L1293+4
	ldr	r0, .L1293+8
.LPIC254:
	add	r1, pc, r1
	add	r1, r1, #488
.LPIC255:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1274
.L1294:
	.align	2
.L1293:
	.word	.LC71-(.LPIC253+8)
	.word	.LANCHOR3-(.LPIC254+8)
	.word	.LC72-(.LPIC255+8)
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r1, #12]
	ldrh	ip, [r2, #4]	@ unaligned
	ldrh	lr, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r0, #0
	bne	.L1310
	ldr	r3, .L1315
.LPIC256:
	add	r3, pc, r3
	ldrb	r3, [r3, #170]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1310
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	cmp	r3, #128
	beq	.L1313
	cmp	r3, #192
	beq	.L1314
.L1310:
	mvn	r5, #94
.L1311:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1314:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	ip, #4
	bne	.L1310
	cmp	r5, #39
	movls	r7, r0
	movls	r6, r5
	bls	.L1302
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1302:
	ldr	r1, .L1315+4
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC258:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #144
	bl	memcpy(PLT)
.L1300:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r7, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L1311
	ldr	r1, .L1315+8
	ldr	r0, .L1315+12
.LPIC259:
	add	r1, pc, r1
	add	r1, r1, #512
.LPIC260:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1311
.L1313:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L1310
	mov	r3, lr, lsr #8
	cmp	r3, #3
	bne	.L1310
	uxtb	lr, lr
	cmp	lr, #238
	bne	.L1310
	cmp	r5, #17
	movls	r7, r0
	movls	r6, r5
	bls	.L1299
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1299:
	ldr	r1, .L1315+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC257:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #184
	bl	memcpy(PLT)
	b	.L1300
.L1316:
	.align	2
.L1315:
	.word	.LANCHOR2-(.LPIC256+8)
	.word	.LANCHOR2-(.LPIC258+8)
	.word	.LANCHOR3-(.LPIC259+8)
	.word	.LC73-(.LPIC260+8)
	.word	.LANCHOR2-(.LPIC257+8)
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1319
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L1319+4
	str	lr, [sp, #4]
.LPIC261:
	add	r1, pc, r1
	add	r1, r1, #532
.LPIC262:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1319+8
.LPIC263:
	add	r3, pc, r3
	ldr	r3, [r3, #2584]
	add	r2, r3, #92
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1320:
	.align	2
.L1319:
	.word	.LANCHOR3-(.LPIC261+8)
	.word	.LC74-(.LPIC262+8)
	.word	.LANCHOR1-(.LPIC263+8)
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r0, #-4]
	mov	r2, r0
	ldr	r1, .L1323
	.pad #12
	sub	sp, sp, #12
	ldr	r0, .L1323+4
	ldr	r3, [r2, #-124]!
	ldr	ip, [ip]
.LPIC264:
	add	r1, pc, r1
	add	r1, r1, #548
.LPIC265:
	add	r0, pc, r0
	str	ip, [sp]
	bl	printk(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1324:
	.align	2
.L1323:
	.word	.LANCHOR3-(.LPIC264+8)
	.word	.LC75-(.LPIC265+8)
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	ip, [r2, #84]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [ip]
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r1, .L1339
	add	r0, r0, #32
	stmia	sp, {ip, lr}
.LPIC266:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1340:
	.align	2
.L1339:
	.word	.LC76-(.LPIC266+8)
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	ip, [r2, #84]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r2, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [ip]
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r1, .L1355
	add	r0, r0, #32
	stmia	sp, {ip, lr}
.LPIC267:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1356:
	.align	2
.L1355:
	.word	.LC77-(.LPIC267+8)
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	mov	r0, r4
	ldr	r1, .L1359
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	and	r2, r2, #1
.LPIC268:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1360:
	.align	2
.L1359:
	.word	.LC78-(.LPIC268+8)
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1362
	mov	r0, r2
	ldr	r1, .L1362+4
.LPIC271:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC270:
	add	r1, pc, r1
	ldrb	r2, [r3]	@ zero_extendqisi2
	b	sprintf(PLT)
.L1363:
	.align	2
.L1362:
	.word	usb30en(GOT_PREL)+(.-(.LPIC271+8))
	.word	.LC79-(.LPIC270+8)
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r0
	mov	r0, r2
	ldr	r1, .L1367
	ldr	r2, [r3, #-48]
	ldrb	r3, [r3, #-24]	@ zero_extendqisi2
.LPIC272:
	add	r1, pc, r1
	cmp	r2, #0
	ubfxne	r2, r3, #1, #1
	andeq	r2, r3, #1
	b	sprintf(PLT)
.L1368:
	.align	2
.L1367:
	.word	.LC78-(.LPIC272+8)
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1370
	mov	r2, r3, lsr #7
.LPIC273:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1371:
	.align	2
.L1370:
	.word	.LC80-(.LPIC273+8)
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1373
	ubfx	r2, r3, #3, #1
.LPIC274:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1374:
	.align	2
.L1373:
	.word	.LC78-(.LPIC274+8)
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	ldr	r6, .L1426
	mov	r0, #0
	str	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	ip, [r4, #120]
	.pad #24
	sub	sp, sp, #24
.LPIC278:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	strb	r0, [sp]
	cmp	ip, r0
	ldr	r3, [r6]
	str	r3, [sp, #20]
	bne	.L1420
.L1376:
	ldr	r0, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r0, #0
	beq	.L1377
	cmp	r0, r3
	bls	.L1378
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, ip
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1379
	cmp	r3, #0
	bne	.L1382
.L1379:
	ldr	ip, [r4, #72]
	cmp	ip, r7
	beq	.L1394
.L1424:
	blt	.L1382
	ldr	lr, [r4, #104]
	cmp	lr, #0
	beq	.L1383
.L1425:
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L1384
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [lr, #36]
	str	r3, [lr, #28]
	str	r3, [lr, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [lr, #24]
	bne	.L1385
.L1384:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1390
.L1392:
	mov	r2, #1
	add	r1, r4, #76
	mov	r3, r2
.L1389:
	ldrb	r0, [r1, #1]!	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L1387
	ands	r0, r5, r3, asl r2
	beq	.L1421
.L1387:
	add	r2, r2, #1
	cmp	ip, r2
	bgt	.L1389
	cmp	lr, #0
	beq	.L1391
.L1390:
	ldr	r3, [sp, #48]
	ldr	r2, [lr]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r2, #0
	movne	r3, #0
	cmp	r3, #0
	bne	.L1422
.L1391:
	mov	r0, #0
.L1380:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L1423
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1377:
	ldr	ip, [r4, #72]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	cmp	ip, r7
	bne	.L1424
.L1394:
	ldr	lr, [r4, #104]
	mov	ip, r7
	cmp	lr, #0
	bne	.L1425
.L1383:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, lr, #4, #1
	cmp	r2, #3
	cmpne	r2, #18
	strb	r3, [r4, #144]
	bne	.L1388
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1392
	b	.L1391
.L1385:
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [lr, #28]
	strne	r3, [lr, #36]
	beq	.L1384
	b	.L1380
.L1421:
	cmp	lr, #0
	beq	.L1388
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [lr, #28]
	b	.L1380
.L1420:
	ldr	r2, .L1426+4
	mov	r0, sp
	ldr	r1, .L1426+8
	ldr	r3, [r4, #124]
.LPIC276:
	add	r2, pc, r2
	add	ip, r2, ip
.LPIC277:
	add	r1, pc, r1
	ldrb	r2, [ip, #564]	@ zero_extendqisi2
	bl	sprintf(PLT)
	ldr	ip, [r4, #120]
	b	.L1376
.L1378:
	cmp	r8, ip
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1379
.L1382:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1380
.L1388:
	mvn	r0, #21
	b	.L1380
.L1422:
	mov	r3, #14848
	mvn	r0, #21
	movt	r3, 2
	str	r3, [lr, #28]
	b	.L1380
.L1423:
	bl	__stack_chk_fail(PLT)
.L1427:
	.align	2
.L1426:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC278+8))
	.word	.LANCHOR3-(.LPIC276+8)
	.word	.LC81-(.LPIC277+8)
	.fnend
	.size	check_command, .-check_command
	.align	2
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1430
	ldr	r2, [r3, #96]
.LPIC279:
	add	r1, pc, r1
	add	r2, r2, #235
	bl	sprintf(PLT)
	ldr	r1, .L1430+4
	mov	r5, r0
	mov	r2, r4
	ldr	r0, .L1430+8
.LPIC280:
	add	r1, pc, r1
.LPIC281:
	add	r0, pc, r0
	add	r1, r1, #568
	bl	printk(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1431:
	.align	2
.L1430:
	.word	.LC82-(.LPIC279+8)
	.word	.LANCHOR3-(.LPIC280+8)
	.word	.LC83-(.LPIC281+8)
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1434
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
.LPIC282:
	add	r1, pc, r1
	add	r2, r2, #218
	b	sprintf(PLT)
.L1435:
	.align	2
.L1434:
	.word	.LC84-(.LPIC282+8)
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1438
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
.LPIC283:
	add	r1, pc, r1
	add	r2, r2, #209
	b	sprintf(PLT)
.L1439:
	.align	2
.L1438:
	.word	.LC84-(.LPIC283+8)
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1442
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
.LPIC284:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1443:
	.align	2
.L1442:
	.word	.LC78-(.LPIC284+8)
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1446
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [ip]
.LPIC285:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1447:
	.align	2
.L1446:
	.word	.LC85-(.LPIC285+8)
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1460
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L1451:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1450
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1450
	mov	r0, r6
	blx	r3
.L1450:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1460:
	ldr	r0, .L1461
	movw	r1, #1847
.LPIC286:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L1461+4
.LPIC287:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1451
.L1462:
	.align	2
.L1461:
	.word	.LC86-(.LPIC286+8)
	.word	.LC87-(.LPIC287+8)
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1478
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC288:
	add	r3, pc, r3
	ldr	r2, [r3, #2056]
	cmp	r0, r2
	bcs	.L1474
	mov	r2, #84
	mla	r3, r2, r0, r3
	ldr	r4, [r3, #2060]
	cmp	r4, #0
	beq	.L1475
	ldr	r3, [r4, #88]
	ubfx	r0, r3, #2, #1
	cmp	r0, #0
	beq	.L1476
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1465
	mov	r2, r5
	mov	r1, r6
	ldr	r5, .L1478+4
	bl	memcpy(PLT)
	ldr	r3, .L1478+8
.LPIC294:
	add	r5, pc, r5
	add	r5, r5, #592
.LPIC295:
	add	r3, pc, r3
	mov	r1, r5
	add	r0, r3, #204
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L1477
.L1468:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	mvn	r0, #18
.L1465:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1476:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1465
.L1475:
	ldr	r1, .L1478+12
	ldr	r0, .L1478+16
.LPIC292:
	add	r1, pc, r1
.LPIC293:
	add	r0, pc, r0
	add	r1, r1, #592
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1465
.L1474:
	ldr	r1, .L1478+20
	mov	r2, r0
	ldr	r0, .L1478+24
.LPIC289:
	add	r1, pc, r1
.LPIC290:
	add	r0, pc, r0
	add	r1, r1, #592
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1465
.L1477:
	ldr	r0, .L1478+28
	mov	r1, r5
	mvn	r2, #18
.LPIC297:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1468
.L1479:
	.align	2
.L1478:
	.word	.LANCHOR1-(.LPIC288+8)
	.word	.LANCHOR3-(.LPIC294+8)
	.word	.LANCHOR2-(.LPIC295+8)
	.word	.LANCHOR3-(.LPIC292+8)
	.word	.LC22-(.LPIC293+8)
	.word	.LANCHOR3-(.LPIC289+8)
	.word	.LC26-(.LPIC290+8)
	.word	.LC88-(.LPIC297+8)
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1481
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1481:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1482
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1482:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1483
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1483:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1496
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #4
	str	lr, [sp, #4]
.LPIC298:
	add	r3, pc, r3
	ldr	r3, [r3, #2588]
	add	r2, r3, #392
	ldr	r1, [r3, #388]
	bl	queue_work_on(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1497:
	.align	2
.L1496:
	.word	.LANCHOR1-(.LPIC298+8)
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1498
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1500
	ldr	r3, .L1505
	add	r2, r4, #60
	mov	r0, #4
.LPIC299:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	bl	queue_work_on(PLT)
.L1500:
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L1498:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1506:
	.align	2
.L1505:
	.word	.LANCHOR1-(.LPIC299+8)
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	ldr	r3, [r4, #128]
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add(PLT)
	ldr	r3, .L1509
	add	r2, r4, #60
	mov	r0, #4
.LPIC300:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	bl	queue_work_on(PLT)
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L1510:
	.align	2
.L1509:
	.word	.LANCHOR1-(.LPIC300+8)
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L1523
.LPIC301:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1515
	b	.L1512
.L1522:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1512
.L1515:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1522
.L1512:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1516
	ldr	r3, .L1523+4
	mov	r1, #0
	add	r2, r4, #180
	mov	r0, #4
	strb	r1, [r4, #50]
.LPIC305:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
.L1516:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume(PLT)
.L1524:
	.align	2
.L1523:
	.word	.LANCHOR1-(.LPIC301+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC305+8))
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.global	gsdio_write_complete
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1537
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r4
	mov	r8, r0
	ldr	r2, [r1, #52]!
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r1, [r5, #44]
	cmn	r1, #108
	beq	.L1528
	cmp	r1, #0
	bne	.L1538
.L1529:
	ldr	r3, .L1539
	add	r2, r4, #60
	mov	r0, #4
.LPIC310:
	add	r3, pc, r3
	ldr	r1, [r3, #2596]
	bl	queue_work_on(PLT)
.L1528:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1538:
	ldr	ip, [r6, #4]
	mov	r2, r4
	ldr	r3, [r4]
	str	r1, [sp, #4]
	ldr	r1, .L1539+4
	ldr	r0, .L1539+8
	str	ip, [sp]
.LPIC308:
	add	r1, pc, r1
	add	r1, r1, #620
.LPIC309:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1529
.L1537:
	ldr	r1, .L1539+12
	ldr	r0, .L1539+16
.LPIC306:
	add	r1, pc, r1
.LPIC307:
	add	r0, pc, r0
	add	r1, r1, #620
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1540:
	.align	2
.L1539:
	.word	.LANCHOR1-(.LPIC310+8)
	.word	.LANCHOR3-(.LPIC308+8)
	.word	.LC89-(.LPIC309+8)
	.word	.LANCHOR3-(.LPIC306+8)
	.word	.LC22-(.LPIC307+8)
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1559
.LPIC311:
	add	ip, pc, ip
	ldr	r3, [ip, #284]
	cmp	r1, r3
	bcs	.L1556
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mov	lr, r0
	beq	.L1557
	mov	r4, #104
	tst	r2, #1
	movne	r3, #2
	moveq	r3, #0
	mla	r1, r4, r1, ip
	ldr	r4, [r1, #308]
	ldr	r2, [r4, #180]
	cmp	r3, r2
	beq	.L1541
	ldr	r2, [r4, #108]
	str	r3, [r4, #180]
	cmp	r2, #0
	beq	.L1558
	cmp	r3, #0
	beq	.L1547
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1547
	ldr	r1, [r4, #176]
	blx	r3
.L1547:
	ldr	r3, .L1559+4
	add	r2, r4, #80
	mov	r0, #4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC319:
	add	r3, pc, r3
	ldr	r1, [r3, #2596]
	b	queue_work_on(PLT)
.L1541:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1556:
	ldr	r3, .L1559+8
	mov	r2, r1
	ldr	r0, .L1559+12
.LPIC312:
	add	r3, pc, r3
.LPIC313:
	add	r0, pc, r0
	add	r1, r3, #644
	b	printk(PLT)
.L1557:
	ldr	r1, .L1559+16
	ldr	r0, .L1559+20
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC314:
	add	r1, pc, r1
.LPIC315:
	add	r0, pc, r0
	add	r1, r1, #644
	b	printk(PLT)
.L1558:
	ldr	r1, .L1559+24
	mov	r2, r4
	ldr	r0, .L1559+28
	ldr	r3, [r4]
	ldr	lr, [sp, #4]
.LPIC317:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC318:
	add	r0, pc, r0
	add	r1, r1, #644
	b	printk(PLT)
.L1560:
	.align	2
.L1559:
	.word	.LANCHOR1-(.LPIC311+8)
	.word	.LANCHOR1-(.LPIC319+8)
	.word	.LANCHOR3-(.LPIC312+8)
	.word	.LC90-(.LPIC313+8)
	.word	.LANCHOR3-(.LPIC314+8)
	.word	.LC91-(.LPIC315+8)
	.word	.LANCHOR3-(.LPIC317+8)
	.word	.LC92-(.LPIC318+8)
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, #0
	strd	r8, [sp, #16]
	ldr	r8, .L1595
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r1, #44]
	.pad #8
	sub	sp, sp, #8
.LPIC321:
	add	r8, pc, r8
	ldr	r5, [r1, #32]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L1587
	ldr	r6, [r5, #172]
	mov	r4, r1
	cmp	r6, r0
	beq	.L1590
	ldr	r6, [r5, #176]
	cmp	r6, r0
	beq	.L1591
	ldr	r6, [r5, #272]
	cmp	r6, #0
	beq	.L1561
	ldr	r2, [r1, #4]
	add	r0, sp, #4
	ldr	r1, [r1]
	bl	memcpy(PLT)
	ldrh	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	blx	r3
	str	r7, [r5, #272]
.L1561:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1590:
	ldr	r7, [r5, #184]
	cmp	r7, r3
	beq	.L1561
	ldr	r9, .L1595+4
	ldr	r0, [r7, #4]
	ldr	r2, [r1, #48]
.LPIC320:
	add	r9, pc, r9
	ldr	r3, [r9, #228]
	rsb	r3, r0, r3
	cmp	r3, r2
	bcs	.L1567
	add	r0, r7, #8
	add	r2, r5, #204
	ldr	r1, [r5, #208]
	bl	__list_add(PLT)
	ldr	r3, .L1595+8
	add	r2, r5, #188
	mov	r0, #4
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	ldr	r0, [r9, #228]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L1568
	ldr	r0, [r0, #4]
	ldr	r2, [r4, #48]
.L1567:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy(PLT)
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r2, #32
	ldr	ip, [r4, #48]
	mov	r0, r6
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r5, #184]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1561
	ldr	r1, .L1595+12
	mov	r3, r0
	ldr	r0, .L1595+16
	ldr	r2, [r6, #4]
.LPIC325:
	add	r1, pc, r1
.LPIC326:
	add	r0, pc, r0
	add	r1, r1, #668
.L1589:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1591:
	ldr	r7, [r5, #216]
	cmp	r7, #0
	beq	.L1592
.L1571:
	ldmia	r7, {r1, r3}
	ldr	r2, [r4, #48]
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy(PLT)
	ldr	r1, [r4, #48]
	ldr	r3, [r7, #4]
	ldr	r2, .L1595+20
	add	r3, r3, r1
.LPIC327:
	add	r2, pc, r2
	ldr	r2, [r2, #232]
	str	r3, [r7, #4]
	ldr	r1, [r4, #48]
	rsb	r3, r3, r2
	cmp	r3, r1
	bcc	.L1593
.L1573:
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1561
	ldr	r1, .L1595+24
	mov	r3, r0
	ldr	r0, .L1595+28
	ldr	r2, [r6, #4]
.LPIC328:
	add	r1, pc, r1
.LPIC329:
	add	r0, pc, r0
	add	r1, r1, #700
	b	.L1589
.L1593:
	cmp	r7, #0
	beq	.L1574
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree(PLT)
.L1574:
	ldr	r3, .L1595+8
	mov	r1, #0
	add	r2, r5, #220
	mov	r0, #4
	str	r1, [r5, #216]
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L1573
.L1592:
	add	r9, r5, #212
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r5
	mov	r10, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L1594
	sub	r7, r0, #8
	bl	list_del(PLT)
	str	r7, [r5, #216]
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L1571
.L1568:
	ldr	r1, .L1595+32
	ldr	r0, .L1595+36
.LPIC323:
	add	r1, pc, r1
.LPIC324:
	add	r0, pc, r0
	add	r1, r1, #668
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1594:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L1595+8
	add	r2, r5, #220
	mov	r0, #4
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L1573
.L1587:
	ldr	r1, .L1595+40
	mov	r2, r7
	ldr	r0, .L1595+44
.LPIC330:
	add	r1, pc, r1
.LPIC331:
	add	r0, pc, r0
	add	r1, r1, #728
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1596:
	.align	2
.L1595:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC321+8)
	.word	.LANCHOR2-(.LPIC320+8)
	.word	system_wq(GOT)
	.word	.LANCHOR3-(.LPIC325+8)
	.word	.LC93-(.LPIC326+8)
	.word	.LANCHOR2-(.LPIC327+8)
	.word	.LANCHOR3-(.LPIC328+8)
	.word	.LC93-(.LPIC329+8)
	.word	.LANCHOR3-(.LPIC323+8)
	.word	.LC36-(.LPIC324+8)
	.word	.LANCHOR3-(.LPIC330+8)
	.word	.LC94-(.LPIC331+8)
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r5, [r1, #48]
	cmp	r3, #0
	ldr	r6, [r4, #12]
	bne	.L1601
	ldr	r3, [r4, #28]
	mov	r2, r5
	ldr	r0, [r4, #20]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy(PLT)
	ldr	r2, [r4, #28]
	ldr	r3, [r4, #24]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1602
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1602:
	ldr	r3, .L1603
	add	r2, r6, #1744
	mov	r0, #4
	ldrd	r4, [sp]
	add	r2, r2, #8
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC334:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	b	queue_work_on(PLT)
.L1601:
	ldr	r0, .L1603+4
	mov	r1, r3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC332:
	add	r0, pc, r0
	b	printk(PLT)
.L1604:
	.align	2
.L1603:
	.word	system_wq(GOT_PREL)+(.-(.LPIC334+8))
	.word	.LC95-(.LPIC332+8)
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r10, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	beq	.L1616
	mov	r4, r1
	ldrb	r1, [r1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	mov	r5, r0
	orr	r3, r3, r1, asl #8
	cmp	r3, r2
	beq	.L1608
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1609
	cmp	r3, #8448
	beq	.L1620
.L1607:
	mvn	r0, #94
.L1617:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1609:
	cmp	r9, #0
	bne	.L1607
	add	r3, r0, #188
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock(PLT)
	mov	r2, r5
	ldr	fp, [r2, #120]!
	cmp	fp, r2
	beq	.L1621
	mov	r0, fp
	sub	r9, fp, #8
	bl	list_del(PLT)
	ldr	r2, [r5, #128]
	ldr	r0, [sp, #20]
	sub	r2, r2, #1
	str	r2, [r5, #128]
	bl	_raw_spin_unlock(PLT)
	ldmdb	fp, {r1, r2}
	ldr	r0, [r6]
	cmp	r7, r2
	movcc	r4, r7
	movcs	r4, r2
	mov	r2, r4
	bl	memcpy(PLT)
	ldr	r2, .L1622
	str	r5, [r6, #32]
.LPIC337:
	add	r2, pc, r2
	str	r2, [r6, #28]
	ldr	r0, [fp, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r5, #368]
	cmp	r7, r4
	mov	r7, r4
	movle	r0, #0
	movgt	r0, #1
	add	r3, r3, #1
	str	r3, [r5, #368]
	b	.L1611
.L1620:
	ldr	r3, .L1622+4
	str	r0, [r6, #32]
	mov	r0, #0
.LPIC335:
	add	r3, pc, r3
	str	r3, [r6, #28]
.L1611:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r7, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r0, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	movge	r0, r4
	bge	.L1617
	ldr	r0, [r8]
	mov	r2, r4
	ldr	r1, .L1622+8
	add	r0, r0, #32
.LPIC338:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1617
.L1608:
	ldr	r3, [r0, #332]
	tst	r9, #1
	add	r2, r0, #336
	ldr	r1, [r0, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #332]
	mov	r0, #4
	bl	queue_work_on(PLT)
	adds	r0, r7, #0
	mov	r7, #0
	movne	r0, #1
	b	.L1611
.L1616:
	mvn	r0, #106
	b	.L1617
.L1621:
	ldr	r0, [r8]
	str	r7, [sp, #8]
	ldr	r1, .L1622+12
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r10, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r9, [sp]
	add	r0, r0, #32
.LPIC336:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	b	.L1607
.L1623:
	.align	2
.L1622:
	.word	rmnet_sdio_response_complete-(.LPIC337+8)
	.word	rmnet_sdio_command_complete-(.LPIC335+8)
	.word	.LC70-(.LPIC338+8)
	.word	.LC96-(.LPIC336+8)
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1630
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	mov	r0, #1
.LPIC339:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #2060]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1625
	add	r2, r4, #36
	ldr	r1, [r4, #32]
	mov	r0, #4
	bl	queue_work_on(PLT)
.L1625:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1631:
	.align	2
.L1630:
	.word	.LANCHOR1-(.LPIC339+8)
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L1640
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
.LPIC340:
	add	r2, pc, r2
	ldr	r1, [r2, #2228]
	cmp	r3, r1
	bcs	.L1639
	mov	r1, #84
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #2232]
	add	r1, r4, #188
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1634
	add	r2, r4, #112
	ldr	r1, [r4, #108]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, #0
.L1634:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1639:
	ldr	r1, .L1640+4
	mov	r2, r3
	ldr	r0, .L1640+8
.LPIC341:
	add	r1, pc, r1
.LPIC342:
	add	r0, pc, r0
	add	r1, r1, #748
	bl	printk(PLT)
	mvn	r0, #21
	b	.L1634
.L1641:
	.align	2
.L1640:
	.word	.LANCHOR1-(.LPIC340+8)
	.word	.LANCHOR3-(.LPIC341+8)
	.word	.LC97-(.LPIC342+8)
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1650
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #132
	sub	sp, sp, #132
.LPIC346:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	r3, [sp, #92]
	str	r1, [sp, #84]
	ldr	r3, [fp, #304]
	str	r2, [sp, #88]
	ldr	r0, [ip, #36]
	str	r3, [sp, #80]
	ldr	r3, [fp, #368]
	cmp	r0, #0
	str	r3, [sp, #76]
	beq	.L1645
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L1649
.L1643:
	add	r5, fp, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [fp, #432]
	str	r0, [sp, #96]
	ldr	r3, [fp, #424]
	ldr	r10, [fp, #428]
	ldr	lr, [fp, #168]
	str	r2, [sp, #72]
	ldr	r2, [fp, #452]
	ldr	r0, [fp, #260]
	str	r3, [sp, #104]
	rsb	ip, r3, r10
	ldr	r7, [fp, #444]
	str	lr, [sp, #100]
	ldr	r6, [fp, #436]
	str	ip, [sp, #108]
	ldr	r8, [fp, #440]
	str	r2, [sp, #124]
	ldr	r9, [fp, #448]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #120]
	ldr	r0, [fp, #260]
	bl	smd_write_avail(PLT)
	str	r0, [sp, #112]
	ldr	r0, [fp, #324]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #116]
	ldr	r0, [fp, #324]
	bl	smd_write_avail(PLT)
	ldr	r2, [sp, #72]
	rsb	lr, r8, r7
	str	r7, [sp, #32]
	ldr	r7, [sp, #72]
	str	r6, [sp, #24]
	mov	r1, #512
	ldr	r3, [sp, #120]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r10, [sp, #8]
	rsb	fp, r6, r2
	ldr	r2, [sp, #124]
	str	lr, [sp, #40]
	str	r7, [sp, #20]
	ldr	r7, [sp, #100]
	ldr	r6, [sp, #104]
	str	r3, [sp, #56]
	ldr	r3, [sp, #80]
	str	r9, [sp, #44]
	rsb	ip, r2, r9
	str	r2, [sp, #48]
	ldr	r2, .L1650+4
	str	r7, [sp, #4]
	ldr	r7, [sp, #76]
	str	ip, [sp, #52]
	ldr	ip, [sp, #116]
	str	r6, [sp, #12]
	ldr	r6, [sp, #108]
.LPIC345:
	add	r2, pc, r2
	str	r8, [sp, #36]
	str	r7, [sp]
	str	ip, [sp, #64]
	ldr	ip, [sp, #112]
	str	r6, [sp, #16]
	str	fp, [sp, #28]
	str	ip, [sp, #60]
	bl	scnprintf(PLT)
	mov	r6, r0
	ldr	r1, [sp, #96]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, sp, #84
	str	r6, [sp]
	mov	r3, r4
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r5, r0
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L1644:
	add	sp, sp, #132
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1645:
	mov	r4, #16
	b	.L1643
.L1649:
	mvn	r0, #11
	b	.L1644
.L1651:
	.align	2
.L1650:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC346+8))
	.word	.LC98-(.LPIC345+8)
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1660
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r10, [sp, #24]
.LPIC349:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1655
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L1659
.L1653:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #324]
	mov	r10, r0
	mov	r1, #4096
	ldr	lr, [r4, #196]
	mov	r0, r5
	ldr	r3, [r4, #356]
	ldr	r2, .L1660+4
	str	ip, [sp, #56]
	ldr	ip, [r4, #320]
	str	lr, [sp, #48]
.LPIC348:
	add	r2, pc, r2
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r3, r5
	mov	r0, r7
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1654:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1655:
	mov	r5, #16
	b	.L1653
.L1659:
	mvn	r0, #11
	b	.L1654
.L1661:
	.align	2
.L1660:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC349+8))
	.word	.LC99-(.LPIC348+8)
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r5, #8]
	ldr	fp, [r5, #4]
	cmp	r7, #0
	cmpne	fp, #0
	beq	.L1676
	mov	r10, r3
	ldr	r3, .L1678
	mov	r8, r1
	mov	r9, r2
.LPIC360:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L1668
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L1677
.L1665:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L1678+4
	str	r0, [sp, #12]
	mov	r1, #512
	ldr	r3, [r5, #128]
	mov	r0, r6
.LPIC352:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1678+8
	rsb	r1, r0, #512
	mov	r4, r0
	ldr	r3, [r5, #132]
	add	r0, r6, r0
.LPIC353:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r5, #128]
	add	r4, r4, r0
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r2, .L1678+12
	rsb	r3, r3, lr
.LPIC354:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1678+16
	add	r4, r0, r4
	rsb	r1, r4, #512
	ldr	r3, [r5, #136]
	add	r0, r6, r4
.LPIC355:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1678+20
	add	r4, r0, r4
	rsb	r1, r4, #512
	ldr	r3, [r5, #140]
	add	r0, r6, r4
.LPIC356:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r5, #136]
	add	r4, r0, r4
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r2, .L1678+24
	rsb	r3, r3, lr
.LPIC357:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1678+28
	add	r4, r0, r4
	ldr	r3, [r7, #156]
	rsb	r1, r4, #512
	add	r0, r6, r4
.LPIC358:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r3, [fp, #108]
	add	r4, r0, r4
	cmp	r3, #0
	beq	.L1666
	mov	r0, fp
	blx	r3
	ldr	r2, .L1678+32
	cmp	r0, #0
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
.LPIC359:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	add	r4, r4, r0
.L1666:
	ldr	r1, [sp, #12]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r3, r6
	mov	r0, r8
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r4
.L1664:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1668:
	mov	r6, #16
	b	.L1665
.L1677:
	mvn	r0, #11
	b	.L1664
.L1676:
	ldr	r0, .L1678+36
.LPIC350:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L1664
.L1679:
	.align	2
.L1678:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC360+8))
	.word	.LC101-(.LPIC352+8)
	.word	.LC102-(.LPIC353+8)
	.word	.LC103-(.LPIC354+8)
	.word	.LC104-(.LPIC355+8)
	.word	.LC105-(.LPIC356+8)
	.word	.LC106-(.LPIC357+8)
	.word	.LC107-(.LPIC358+8)
	.word	.LC108-(.LPIC359+8)
	.word	.LC100-(.LPIC350+8)
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1694
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC366:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1685
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r10, r0, #0
	beq	.L1693
.L1681:
	ldr	r8, .L1694+4
.LPIC362:
	add	r8, pc, r8
	ldr	r5, [r8, #284]
	cmp	r5, #0
	beq	.L1683
	ldr	r3, .L1694+8
	mov	r7, #0
	mov	r5, r7
	mov	r6, r7
.LPIC364:
	add	r3, pc, r3
	str	r3, [sp, #56]
	add	r3, r8, #288
	str	r3, [sp, #52]
.L1684:
	ldr	r3, [sp, #52]
	add	r3, r3, r7
	add	r7, r7, #104
	ldr	r4, [r3, #20]
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #56]
	add	r0, r10, r5
	add	r6, r6, #1
	str	lr, [sp, #40]
	ldr	lr, [r4, #108]
	str	lr, [sp, #36]
	ldr	lr, [r4, #8]
	str	lr, [sp, #32]
	ldr	lr, [r4, #76]
	str	lr, [sp, #28]
	ldr	lr, [r4, #48]
	str	lr, [sp, #24]
	ldr	lr, [r4, #44]
	str	lr, [sp, #20]
	ldr	lr, [r4, #176]
	str	lr, [sp, #16]
	ldr	lr, [r4, #180]
	str	lr, [sp, #12]
	ldr	lr, [r4, #188]
	str	lr, [sp, #8]
	ldr	lr, [r4, #184]
	stmia	sp, {r4, lr}
	bl	scnprintf(PLT)
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #284]
	cmp	r6, r3
	bcc	.L1684
.L1683:
	add	r0, sp, #60
	str	r5, [sp]
	mov	r3, r10
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1682:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1685:
	mov	r10, #16
	b	.L1681
.L1693:
	mvn	r0, #11
	b	.L1682
.L1695:
	.align	2
.L1694:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC366+8))
	.word	.LANCHOR1-(.LPIC362+8)
	.word	.LC109-(.LPIC364+8)
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1713
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC372:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #36]
	cmp	r0, #0
	beq	.L1702
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L1712
.L1697:
	ldr	r2, .L1713+4
.LPIC368:
	add	r2, pc, r2
	ldr	r3, [r2, #496]
	cmp	r3, #0
	beq	.L1699
	ldr	r3, .L1713+8
	mov	r10, #0
	mov	r8, r2
	mov	fp, r10
	mov	r7, r10
	str	r6, [sp, #68]
.LPIC370:
	add	r3, pc, r3
	str	r3, [sp, #80]
	add	r3, r2, #500
	str	r3, [sp, #76]
.L1701:
	ldr	r3, [sp, #76]
	rsb	r9, r7, #512
	ldr	r2, [sp, #68]
	add	r3, r3, r10
	ldr	r6, [r3, #20]
	add	r2, r2, r7
	str	r2, [sp, #48]
	add	r5, r6, #4
	ldr	r4, [r6, #72]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #172]
	str	r0, [sp, #44]
	ldr	r2, [r4]
	str	r3, [sp, #52]
	ldr	r3, [r6, #168]
	subs	r0, r2, #0
	str	r3, [sp, #56]
	ldr	r3, [r6, #160]
	str	r3, [sp, #60]
	ldr	r3, [r6, #164]
	ldr	r6, [r6, #8]
	str	r3, [sp, #64]
	moveq	r3, r2
	beq	.L1700
	bl	smd_read_avail(PLT)
	ldr	r3, [r4]
	mov	r2, r0
	cmp	r3, #0
	mov	r0, r3
	beq	.L1700
	str	r2, [sp, #72]
	bl	smd_write_avail(PLT)
	ldr	r2, [sp, #72]
	mov	r3, r0
.L1700:
	ldr	lr, [r4, #8]
	mov	r1, r9
	add	r10, r10, #104
	ldr	ip, [r4, #8]
	str	r3, [sp, #24]
	mov	r3, fp
	ldr	r4, [sp, #64]
	str	r2, [sp, #20]
	add	fp, fp, #1
	ldr	r2, [sp, #80]
	str	r6, [sp, #16]
	and	lr, lr, #1
	ldr	r0, [sp, #48]
	ubfx	ip, ip, #1, #1
	str	r4, [sp, #12]
	ldr	r4, [sp, #60]
	str	ip, [sp, #32]
	ldr	ip, [sp, #56]
	str	lr, [sp, #28]
	str	r4, [sp, #8]
	str	ip, [sp, #4]
	ldr	ip, [sp, #52]
	str	ip, [sp]
	bl	scnprintf(PLT)
	add	r7, r7, r0
	ldr	r1, [sp, #44]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #496]
	cmp	fp, r3
	bcc	.L1701
	ldr	r6, [sp, #68]
	mov	r3, r7
.L1699:
	add	r0, sp, #84
	str	r3, [sp]
	mov	r3, r6
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r4
.L1698:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1702:
	mov	r6, #16
	b	.L1697
.L1712:
	mvn	r0, #11
	b	.L1698
.L1714:
	.align	2
.L1713:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC372+8))
	.word	.LANCHOR1-(.LPIC368+8)
	.word	.LC110-(.LPIC370+8)
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1727
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	strd	r6, [sp, #8]
.LPIC377:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1720
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L1726
.L1716:
	ldr	r3, .L1727+4
.LPIC374:
	add	r3, pc, r3
	ldr	r2, [r3, #2404]
	cmp	r2, #0
	movle	r4, #0
	ble	.L1718
	ldr	r4, [r3, #2408]
	cmp	r4, #0
	beq	.L1718
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	lr, [r4, #20]
	add	r3, r4, #20
	mov	r1, #1024
	ldr	ip, [r4, #20]
	mov	r0, r5
	str	r3, [sp, #68]
	ldr	r2, .L1727+8
	mov	r3, #0
	ubfx	lr, lr, #1, #1
	ubfx	ip, ip, #2, #1
	str	lr, [sp, #52]
	ldr	lr, [sp, #68]
.LPIC376:
	add	r2, pc, r2
	str	ip, [sp, #56]
	ldr	ip, [r4, #68]
	str	ip, [sp, #48]
	ldr	ip, [r4, #44]
	str	ip, [sp, #44]
	ldr	ip, [r4, #280]
	str	ip, [sp, #40]
	ldr	ip, [r4, #276]
	str	ip, [sp, #36]
	ldr	ip, [r4, #272]
	str	ip, [sp, #32]
	ldr	ip, [r4, #268]
	str	ip, [sp, #28]
	ldr	ip, [r4, #248]
	str	ip, [sp, #24]
	ldr	ip, [r4, #244]
	str	ip, [sp, #20]
	ldr	ip, [r4, #240]
	str	ip, [sp, #16]
	ldr	ip, [r4, #260]
	str	ip, [sp, #12]
	ldr	ip, [r4, #264]
	str	r4, [sp]
	str	lr, [sp, #4]
	str	ip, [sp, #8]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1718:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r3, r5
	mov	r0, r8
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1717:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1720:
	mov	r5, #16
	b	.L1716
.L1726:
	mvn	r0, #11
	b	.L1717
.L1728:
	.align	2
.L1727:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC377+8))
	.word	.LANCHOR1-(.LPIC374+8)
	.word	.LC111-(.LPIC376+8)
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1748
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC383:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1736
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L1747
.L1730:
	ldr	r3, .L1748+4
	mov	r9, #0
	mov	r10, r9
	mov	fp, r9
.LPIC381:
	add	r3, pc, r3
	str	r3, [sp, #64]
	ldr	r3, .L1748+8
.LPIC382:
	add	r3, pc, r3
	str	r3, [sp, #72]
	ldr	r3, .L1748+12
.LPIC378:
	add	r3, pc, r3
	str	r3, [sp, #76]
	ldr	r3, .L1748+16
.LPIC379:
	add	r3, pc, r3
	str	r3, [sp, #80]
.L1735:
	ldr	r3, [sp, #64]
	rsb	r8, r10, #1024
	ldr	r2, [sp, #60]
	add	r3, r3, #708
	ldr	r7, [r9, r3]
	add	r2, r2, r10
	str	r2, [sp, #40]
	cmp	r7, #0
	add	r6, r7, #108
	mov	r0, r6
	beq	.L1732
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r7, #88]
	str	r0, [sp, #48]
	ldr	r1, [sp, #80]
	ldr	r3, [r7]
	ldr	r4, [r7, #8]
	cmp	r2, #0
	ldr	r2, [r7, #96]
	ldr	r5, [r7, #8]
	mov	r0, r3
	and	r4, r4, #1
	str	r2, [sp, #52]
	ldr	r2, [sp, #76]
	moveq	r2, r1
	cmp	r3, #0
	ubfx	r5, r5, #1, #1
	str	r2, [sp, #44]
	ldr	r2, [r7, #92]
	str	r2, [sp, #56]
	moveq	r2, r3
	beq	.L1734
	bl	smd_read_avail(PLT)
	ldr	r2, [r7]
	mov	r3, r0
	cmp	r2, #0
	mov	r0, r2
	beq	.L1734
	str	r3, [sp, #68]
	bl	smd_write_avail(PLT)
	ldr	r3, [sp, #68]
	mov	r2, r0
.L1734:
	ldr	ip, [sp, #44]
	str	r3, [sp, #28]
	mov	r1, r8
	str	r2, [sp, #32]
	ldr	r0, [sp, #40]
	mov	r3, fp
	ldr	r2, [sp, #72]
	strd	r4, [sp, #20]
	str	r7, [sp]
	str	ip, [sp, #16]
	ldr	ip, [sp, #56]
	str	ip, [sp, #12]
	ldr	ip, [sp, #52]
	stmib	sp, {r7, ip}
	bl	scnprintf(PLT)
	add	r10, r10, r0
	ldr	r1, [sp, #48]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1732:
	add	r9, r9, #84
	add	fp, fp, #1
	cmp	r9, #504
	bne	.L1735
	ldr	r5, [sp, #60]
	add	r0, sp, #84
	str	r10, [sp]
	ldmia	r0, {r0, r1, r2}
	mov	r3, r5
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1731:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1736:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1730
.L1747:
	mvn	r0, #11
	b	.L1731
.L1749:
	.align	2
.L1748:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC383+8))
	.word	.LANCHOR1-(.LPIC381+8)
	.word	.LC114-(.LPIC382+8)
	.word	.LC112-(.LPIC378+8)
	.word	.LC113-(.LPIC379+8)
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1770
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC391:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1757
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L1769
.L1751:
	ldr	r5, .L1770+4
.LPIC387:
	add	r5, pc, r5
	ldr	r3, [r5, #1216]
	cmp	r3, #0
	beq	.L1753
	ldr	r2, .L1770+8
	add	r5, r5, #1216
	mov	r7, #0
	add	r5, r5, #4
	mov	r6, r7
.LPIC389:
	add	r2, pc, r2
	str	r2, [sp, #36]
	ldr	r2, .L1770+12
.LPIC390:
	add	r2, pc, r2
	str	r2, [sp, #40]
	ldr	r2, .L1770+16
.LPIC384:
	add	r2, pc, r2
	str	r2, [sp, #44]
	ldr	r2, .L1770+20
.LPIC385:
	add	r2, pc, r2
	str	r2, [sp, #48]
.L1756:
	ldr	r4, [r5]
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L1754
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #88]
	mov	r10, r0
	add	r0, r9, r7
	ldr	r1, [r4, #84]
	ldr	r3, [r5, #24]
	ldr	r2, [r4, #84]
	cmp	ip, #0
	ldr	ip, [r4, #104]
	ldr	lr, [r4, #100]
	and	r1, r1, #1
	ldr	fp, [r4, #96]
	str	r4, [sp, #4]
	ldr	r4, [sp, #48]
	ubfx	r2, r2, #1, #1
	str	r1, [sp, #24]
	str	ip, [sp, #16]
	ldr	ip, [sp, #44]
	rsb	r1, r7, #1024
	str	r2, [sp, #28]
	ldr	r2, [sp, #36]
	str	lr, [sp, #8]
	moveq	ip, r4
	str	fp, [sp, #12]
	str	r6, [sp]
	str	ip, [sp, #20]
	bl	scnprintf(PLT)
	add	r7, r7, r0
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #40]
	ldr	r3, [r3, #1216]
.L1754:
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r6, r3
	bcc	.L1756
	mov	r3, r7
.L1753:
	add	r0, sp, #52
	str	r3, [sp]
	mov	r3, r9
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1752:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1757:
	mov	r9, #16
	b	.L1751
.L1769:
	mvn	r0, #11
	b	.L1752
.L1771:
	.align	2
.L1770:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC391+8))
	.word	.LANCHOR1-(.LPIC387+8)
	.word	.LC115-(.LPIC389+8)
	.word	.LANCHOR1-(.LPIC390+8)
	.word	.LC112-(.LPIC384+8)
	.word	.LC113-(.LPIC385+8)
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1790
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC398:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #48]
	cmp	r0, #0
	beq	.L1778
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r10, r0, #0
	beq	.L1789
.L1773:
	ldr	r6, .L1790+4
.LPIC393:
	add	r6, pc, r6
	ldr	r3, [r6, #1636]
	cmp	r3, #0
	beq	.L1775
	ldr	r2, .L1790+8
	add	r6, r6, #1632
	mov	r5, #0
	add	r6, r6, #8
	mov	r7, r5
.LPIC395:
	add	r2, pc, r2
	str	r2, [sp, #48]
	ldr	r2, .L1790+12
.LPIC396:
	add	r2, pc, r2
	str	r2, [sp, #52]
	ldr	r2, .L1790+16
.LPIC397:
	add	r2, pc, r2
	str	r2, [sp, #56]
.L1777:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L1776
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #180]
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	lr, [r4, #180]
	add	r0, r10, r5
	ldr	r2, [r4, #164]
	ldr	r3, [r6, #24]
	and	ip, ip, #1
	ubfx	lr, lr, #1, #1
	ubfx	r2, r2, #1, #1
	str	ip, [sp, #44]
	str	r2, [sp, #36]
	ldr	ip, [r4, #208]
	ldr	r2, [sp, #48]
	str	ip, [sp, #32]
	ldr	ip, [r4, #204]
	str	ip, [sp, #28]
	ldr	ip, [r4, #72]
	str	ip, [sp, #24]
	ldr	ip, [r4, #212]
	str	ip, [sp, #20]
	ldr	ip, [r4, #188]
	str	lr, [sp, #12]
	str	r7, [sp]
	str	ip, [sp, #16]
	ldr	ip, [sp, #44]
	stmib	sp, {r4, ip}
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #56]
	ldr	r3, [r3, #1636]
.L1776:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L1777
	mov	r3, r5
.L1775:
	add	r0, sp, #60
	str	r3, [sp]
	mov	r3, r10
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1774:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1778:
	mov	r10, #16
	b	.L1773
.L1789:
	mvn	r0, #11
	b	.L1774
.L1791:
	.align	2
.L1790:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC398+8))
	.word	.LANCHOR1-(.LPIC393+8)
	.word	.LC116-(.LPIC395+8)
	.word	.LC117-(.LPIC396+8)
	.word	.LANCHOR1-(.LPIC397+8)
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1812
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC406:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r1, [sp, #44]
	strd	r2, [sp, #48]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1799
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L1811
.L1793:
	ldr	r8, .L1812+4
.LPIC402:
	add	r8, pc, r8
	ldr	r2, [r8, #2056]
	cmp	r2, #0
	beq	.L1795
	ldr	r3, .L1812+8
	mov	r5, #0
	mov	r6, r5
	mov	r4, r5
.LPIC404:
	add	r3, pc, r3
	str	r3, [sp, #28]
	ldr	r3, .L1812+12
.LPIC405:
	add	r3, pc, r3
	str	r3, [sp, #32]
	ldr	r3, .L1812+16
.LPIC399:
	add	r3, pc, r3
	str	r3, [sp, #36]
	ldr	r3, .L1812+20
.LPIC400:
	add	r3, pc, r3
	str	r3, [sp, #40]
.L1798:
	add	r3, r8, #2048
	add	r3, r3, #12
	ldr	fp, [r5, r3]
	add	r5, r5, #84
	cmp	fp, #0
	add	r7, fp, #8
	mov	r0, r7
	beq	.L1796
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [fp, #92]
	mov	r10, r0
	add	r0, r9, r6
	ldr	ip, [sp, #36]
	ldrd	r2, [fp, #96]
	ldr	r1, [fp, #104]
	str	fp, [sp]
	cmp	lr, #0
	ldr	lr, [sp, #40]
	movne	lr, ip
	str	r3, [sp, #4]
	mov	r3, r4
	str	r1, [sp, #12]
	rsb	r1, r6, #1024
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	str	lr, [sp, #16]
	bl	scnprintf(PLT)
	add	r6, r6, r0
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #32]
	ldr	r2, [r3, #2056]
.L1796:
	add	r4, r4, #1
	cmp	r4, r2
	bcc	.L1798
	mov	r2, r6
.L1795:
	add	r0, sp, #44
	str	r2, [sp]
	mov	r3, r9
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1794:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1799:
	mov	r9, #16
	b	.L1793
.L1811:
	mvn	r0, #11
	b	.L1794
.L1813:
	.align	2
.L1812:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC406+8))
	.word	.LANCHOR1-(.LPIC402+8)
	.word	.LC118-(.LPIC404+8)
	.word	.LANCHOR1-(.LPIC405+8)
	.word	.LC112-(.LPIC399+8)
	.word	.LC113-(.LPIC400+8)
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1832
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC414:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #84
	sub	sp, sp, #84
	str	r1, [sp, #68]
	strd	r2, [sp, #72]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1820
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r10, r0, #0
	beq	.L1831
.L1815:
	ldr	r2, .L1832+4
.LPIC408:
	add	r2, pc, r2
	ldr	r3, [r2, #2228]
	cmp	r3, #0
	beq	.L1817
	ldr	r1, .L1832+8
	mov	r6, #0
	add	r9, r2, #2224
	add	r9, r9, #8
	mov	r5, r6
	str	r2, [sp, #56]
	mov	r7, r6
	str	r9, [sp, #52]
.LPIC411:
	add	r1, pc, r1
	str	r1, [sp, #60]
	ldr	r1, .L1832+12
.LPIC412:
	add	r1, pc, r1
	str	r1, [sp, #64]
.L1819:
	ldr	fp, [sp, #52]
	ldr	r4, [r6, fp]
	cmp	r4, #0
	add	r9, r4, #104
	add	r8, r4, #72
	mov	r0, r9
	beq	.L1818
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #188]
	add	r3, fp, r6
	rsb	r1, r5, #1024
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, r10, r5
	ldr	fp, [r4, #188]
	ldr	r2, [r4, #184]
	and	ip, ip, #1
	ldr	r3, [r3, #24]
	ubfx	lr, lr, #1, #1
	str	ip, [sp, #48]
	ubfx	fp, fp, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	ip, [r4, #96]
	ldr	r2, [sp, #60]
	str	ip, [sp, #28]
	ldr	ip, [r4, #212]
	str	ip, [sp, #24]
	ldr	ip, [r4, #204]
	str	lr, [sp, #12]
	str	fp, [sp, #16]
	str	r7, [sp]
	str	ip, [sp, #20]
	ldr	ip, [sp, #48]
	stmib	sp, {r4, ip}
	bl	scnprintf(PLT)
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	r3, [r4, #208]
	add	r0, r10, r5
	ldr	r2, [sp, #64]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #56]
	ldr	r3, [r3, #2228]
.L1818:
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r7, r3
	bcc	.L1819
	mov	r3, r5
.L1817:
	add	r0, sp, #68
	str	r3, [sp]
	mov	r3, r10
	ldmia	r0, {r0, r1, r2}
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1816:
	add	sp, sp, #84
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1820:
	mov	r10, #16
	b	.L1815
.L1831:
	mvn	r0, #11
	b	.L1816
.L1833:
	.align	2
.L1832:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC414+8))
	.word	.LANCHOR1-(.LPIC408+8)
	.word	.LC119-(.LPIC411+8)
	.word	.LC120-(.LPIC412+8)
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L1844
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC415:
	add	r6, pc, r6
	ldr	r4, [r6]
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1838
	ldr	r5, .L1844+4
	mov	fp, #0
	ldr	r7, .L1844+8
.LPIC418:
	add	r5, pc, r5
	add	r5, r5, #2592
.LPIC417:
	add	r7, pc, r7
	add	r5, r5, #8
.L1837:
	ldr	ip, [r4, #20]
	rsb	r1, fp, #4096
	add	r0, r5, fp
	mov	r2, r7
	cmp	ip, #0
	beq	.L1836
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf(PLT)
	add	fp, fp, r0
.L1836:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1837
.L1835:
	ldr	r3, .L1844+12
	str	fp, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
.LPIC420:
	add	r3, pc, r3
	add	r3, r3, #2592
	add	r3, r3, #8
	bl	simple_read_from_buffer(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1838:
	mov	fp, #0
	b	.L1835
.L1845:
	.align	2
.L1844:
	.word	.LANCHOR0-(.LPIC415+8)
	.word	.LANCHOR1-(.LPIC418+8)
	.word	.LC121-(.LPIC417+8)
	.word	.LANCHOR1-(.LPIC420+8)
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1847
.LPIC421:
	add	r3, pc, r3
	ldr	r0, [r3, #-1488]
	b	destroy_workqueue(PLT)
.L1848:
	.align	2
.L1847:
	.word	.LANCHOR4-(.LPIC421+8)
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L1857
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC422:
	add	r8, pc, r8
	ldr	r5, [r8, #8]!
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L1849
	ldr	r7, .L1857+4
.LPIC424:
	add	r7, pc, r7
	sub	r7, r7, #1472
	sub	r7, r7, #12
	mov	r9, r7
	b	.L1852
.L1854:
	mov	r4, r3
.L1852:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue(PLT)
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L1856
.L1851:
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r8
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L1854
.L1849:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1856:
	mov	r0, r5
	bl	list_del(PLT)
	sub	r0, r5, #116
	bl	kfree(PLT)
	b	.L1851
.L1858:
	.align	2
.L1857:
	.word	.LANCHOR0-(.LPIC422+8)
	.word	.LANCHOR4-(.LPIC424+8)
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L1867
	add	r6, r4, #164
	mov	r7, r1
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #448]
	ldr	r2, [r4, #308]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #448]
	beq	.L1868
.L1861:
	mov	r3, r4
	ldr	r5, [r3, #108]!
	cmp	r5, r3
	beq	.L1869
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [r7, #48]
	ldr	r1, [r7]
	ldr	r0, [r5, #-8]
	bl	memcpy(PLT)
	ldr	r3, [r7, #48]
	mov	r0, r6
	str	r3, [r5, #-4]
	bl	_raw_spin_lock(PLT)
	mov	r0, r5
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add(PLT)
	mov	r0, r6
.L1866:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L1868:
	ldr	r0, [r4, #260]
	bl	smd_write_avail(PLT)
	ldr	r3, [r7, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L1861
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [r7, #48]
	ldr	r1, [r7]
	ldr	r0, [r4, #260]
	bl	smd_write(PLT)
	ldr	r3, [r7, #48]
	cmp	r0, r3
	beq	.L1863
	ldr	r0, [r8]
	ldr	r1, .L1870
	add	r0, r0, #32
.LPIC428:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1863:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #452]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L1866
.L1867:
	ldr	r0, [r8]
	ldr	r1, .L1870+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC427:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L1869:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r8]
	ldr	r1, .L1870+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC429:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L1871:
	.align	2
.L1870:
	.word	.LC123-(.LPIC428+8)
	.word	.LC122-(.LPIC427+8)
	.word	.LC124-(.LPIC429+8)
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r1, #32]
	cmn	r3, #104
	ldr	r7, [r4, #84]
	beq	.L1874
	cmp	r3, #0
	beq	.L1875
	cmn	r3, #108
	beq	.L1874
	ldr	r2, [r0, #4]
	add	r6, r4, #164
	ldr	r0, [r7]
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r1, .L1896
	add	r0, r0, #32
	stmia	sp, {ip, lr}
.LPIC430:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1893:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #152]
	add	r0, r5, #36
	add	r2, r4, #148
.L1892:
	bl	__list_add(PLT)
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L1874:
	add	r6, r4, #164
	b	.L1893
.L1875:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #432]
	ldr	r2, [r4, #372]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #432]
	bne	.L1876
	ldr	r0, [r4, #324]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcs	.L1894
.L1876:
	add	r0, r5, #36
	add	r2, r4, #156
	ldr	r1, [r4, #160]
	b	.L1892
.L1894:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [r5, #48]
	ldr	r1, [r5]
	ldr	r0, [r4, #324]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L1878
	ldr	r0, [r7]
	ldr	r1, .L1896+4
	add	r0, r0, #32
.LPIC431:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1878:
	mov	r0, r6
	add	r9, r4, #148
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #436]
	mov	r2, r9
	add	r0, r5, #36
	ldr	r1, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L1879
.L1881:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L1895
.L1879:
	ldr	r5, [r4, #148]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L1881
.L1880:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L1895:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L1896+8
	add	r0, r0, #32
.LPIC432:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L1880
.L1897:
	.align	2
.L1896:
	.word	.LC125-(.LPIC430+8)
	.word	.LC126-(.LPIC431+8)
	.word	.LC127-(.LPIC432+8)
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r7, r5
	addne	r8, r4, #108
	bne	.L1904
	b	.L1903
.L1901:
	bl	list_del(PLT)
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L1906
	ldr	r3, [r4, #452]
	ldr	r1, [r4, #112]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add(PLT)
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L1903
.L1904:
	ldr	r0, [r4, #260]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L1901
	str	r3, [r4, #308]
.L1900:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L1903:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L1900
.L1906:
	ldr	r0, [r9]
	ldr	r1, .L1907
	add	r0, r0, #32
.LPIC433:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L1900
.L1908:
	.align	2
.L1907:
	.word	.LC123-(.LPIC433+8)
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L1910
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L1912
	b	.L1910
.L1920:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write(PLT)
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L1919
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r0, [r5, #-68]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r5, #24]
	beq	.L1910
	ldr	r4, [r5, #-28]
	cmp	r4, r8
	beq	.L1910
.L1912:
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L1920
.L1910:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L1919:
	ldr	r1, .L1921
	mov	r2, r10
	ldr	r0, .L1921+4
.LPIC434:
	add	r1, pc, r1
	add	r1, r1, #768
.LPIC435:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L1910
.L1922:
	.align	2
.L1921:
	.word	.LANCHOR3-(.LPIC434+8)
	.word	.LC128-(.LPIC435+8)
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #84]
	beq	.L1925
	cmp	r2, #0
	beq	.L1926
	cmn	r2, #108
	beq	.L1925
	ldr	r0, [r3]
	ldr	r1, .L1946
	add	r0, r0, #32
.LPIC436:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1926:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #140]
	add	r2, r4, #140
	cmp	r3, r2
	beq	.L1945
	add	r0, r5, #36
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L1930:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L1925:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	b	.L1930
.L1945:
	mov	r2, r3
	add	r0, r5, #36
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r5, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L1930
	mov	r0, r5
	bl	__tasklet_schedule(PLT)
	b	.L1930
.L1947:
	.align	2
.L1946:
	.word	.LC129-(.LPIC436+8)
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r6, [r7, #4]
	beq	.L1962
	mov	r4, r1
	ldrb	r1, [r1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	mov	r9, r0
	orr	r3, r3, r1, asl #8
	cmp	r3, r2
	beq	.L1951
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1952
	cmp	r3, #8448
	beq	.L1970
.L1950:
	mvn	r0, #94
.L1966:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1952:
	cmp	r8, #0
	bne	.L1950
	add	r3, r0, #164
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock(PLT)
	mov	r2, r9
	ldr	r10, [r2, #132]!
	cmp	r10, r2
	beq	.L1971
	mov	r0, r10
	bl	list_del(PLT)
	ldr	r4, [sp, #20]
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldmdb	r10, {r1, r2}
	ldr	r0, [r6]
	bl	memcpy(PLT)
	mov	r0, r4
	ldr	r4, [r10, #-4]
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r9, #116]
	add	r2, r9, #116
	cmp	r1, r2
	beq	.L1972
	mov	r0, r10
	ldr	r1, [r9, #120]
	bl	__list_add(PLT)
.L1961:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L1974
	str	r9, [r6, #32]
.LPIC439:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L1958
.L1970:
	ldr	r3, .L1974+4
	mov	r4, r5
	str	r0, [r6, #32]
.LPIC437:
	add	r3, pc, r3
	str	r3, [r6, #28]
.L1954:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r4, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1973
.L1964:
	mov	r0, r4
	b	.L1966
.L1951:
	ands	r1, r8, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset(PLT)
	mov	r4, r0
.L1958:
	cmp	r4, #0
	bge	.L1954
	b	.L1964
.L1973:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L1974+8
	add	r0, r0, #32
.LPIC440:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1966
.L1962:
	mvn	r0, #106
	b	.L1966
.L1971:
	ldr	r0, [r7]
	str	r5, [sp, #8]
	ldr	r1, .L1974+12
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	fp, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r8, [sp]
	add	r0, r0, #32
.LPIC438:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	b	.L1950
.L1972:
	mov	r2, r1
	mov	r0, r10
	ldr	r1, [r9, #120]
	bl	__list_add(PLT)
	mov	r0, r8
	add	r1, r9, #268
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r9, #264
	bne	.L1961
	bl	__tasklet_schedule(PLT)
	b	.L1961
.L1975:
	.align	2
.L1974:
	.word	rmnet_txcommand_complete-(.LPIC439+8)
	.word	rmnet_smd_command_complete-(.LPIC437+8)
	.word	.LC70-(.LPIC440+8)
	.word	.LC96-(.LPIC438+8)
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.section	.exit.text
	.align	2
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1977
.LPIC441:
	add	r3, pc, r3
	ldr	r0, [r3, #-1480]
	b	debugfs_remove_recursive(PLT)
.L1978:
	.align	2
.L1977:
	.word	.LANCHOR4-(.LPIC441+8)
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1980
.LPIC442:
	add	r3, pc, r3
	ldr	r0, [r3, #-1476]
	b	debugfs_remove_recursive(PLT)
.L1981:
	.align	2
.L1980:
	.word	.LANCHOR4-(.LPIC442+8)
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1990
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L1990+4
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC449:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC444:
	add	r7, pc, r7
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r5, [r7]
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L1982
	ldr	r6, .L1990+8
.LPIC446:
	add	r6, pc, r6
	sub	r6, r6, #1472
	mov	r8, r6
	b	.L1985
.L1987:
	mov	r4, r3
.L1985:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1989
.L1984:
	mov	r0, r8
	mov	r5, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r7
	ldr	r3, [r4]
	bne	.L1987
.L1982:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1989:
	str	r0, [sp, #4]
	sub	r9, r5, #4
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r1, [sp, #4]
	b	.L1984
.L1991:
	.align	2
.L1990:
	.word	dent_diag(GOT_PREL)+(.-(.LPIC449+8))
	.word	.LANCHOR0-(.LPIC444+8)
	.word	.LANCHOR4-(.LPIC446+8)
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L1996
.L2004:
	ldr	r0, [r4, #324]
	bl	smd_read_avail(PLT)
	cmp	r7, r0
	mov	r0, r6
	bgt	.L1992
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2002
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read(PLT)
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2003
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1996:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size(PLT)
	subs	r7, r0, #0
	bne	.L2004
.L1992:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2002:
	mov	r1, r10
.L2001:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2003:
	ldr	r0, [r9]
	ldr	r1, .L2005
	add	r0, r0, #32
.LPIC450:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, [r4, #144]
	mov	r2, r8
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r1, r7
	b	.L2001
.L2006:
	.align	2
.L2005:
	.word	.LC130-(.LPIC450+8)
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2020
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC452:
	add	r3, pc, r3
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r3, [r0, #84]
	str	r3, [sp, #4]
.L2012:
	add	r9, r4, #116
.L2011:
	add	r8, r4, #132
.L2010:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size(PLT)
	subs	r7, r0, #0
	beq	.L2007
	ldr	r0, [r4, #260]
	bl	smd_read_avail(PLT)
	cmp	r7, r0
	mov	r0, r6
	bgt	.L2007
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r9
	mov	r0, r10
	beq	.L2019
	bl	list_del(PLT)
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r7
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read(PLT)
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #444]
	mov	r7, r0
	mov	r2, r8
	mov	r0, r10
	ldr	r1, [r4, #136]
	add	r3, r3, #1
	str	r3, [r4, #444]
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #100]
	ldr	r7, [r4, #84]
	ldr	r3, [r3]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L2010
	mov	r1, #0
	mvn	r0, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r0, [r3]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2011
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2012
.L2007:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2019:
	ldr	r3, [sp, #4]
	ldr	r1, .L2020+4
	ldr	r0, [r3]
.LPIC451:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2021:
	.align	2
.L2020:
	.word	.LC12-(.LPIC452+8)
	.word	.LC131-(.LPIC451+8)
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #372]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	cmp	r3, #0
	beq	.L2022
	mov	r4, r0
	add	r7, r0, #368
	add	r8, r0, #104
	b	.L2034
.L2039:
	ldr	r0, [r4, #128]
	bl	smd_read_avail(PLT)
	cmp	r6, r0
	mov	r0, r7
	bgt	.L2022
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2037
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read(PLT)
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2038
	ldr	r3, [r4, #408]
	ldr	r2, [r4, #372]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #408]
	beq	.L2022
.L2034:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size(PLT)
	subs	r6, r0, #0
	bne	.L2039
.L2022:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2037:
	mov	r1, r10
.L2036:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2038:
	ldr	r3, [r9]
	mov	r2, r0
	ldr	r1, .L2040
	add	r0, r3, #32
.LPIC453:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r1, [r4, #108]
	mov	r2, r8
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r1, r6
	b	.L2036
.L2041:
	.align	2
.L2040:
	.word	.LC130-(.LPIC453+8)
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-56]
	ldr	r0, [r3]
	bl	smd_close(PLT)
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	sub	r0, r0, #124
	str	lr, [sp, #20]
	mov	r4, #0
	strd	r6, [sp, #8]
	mov	r7, r5
	str	r8, [sp, #16]
	bl	tasklet_kill(PLT)
	sub	r0, r5, #144
	bl	tasklet_kill(PLT)
	sub	r0, r5, #60
	bl	tasklet_kill(PLT)
	sub	r0, r5, #80
	bl	tasklet_kill(PLT)
	ldr	r0, [r5, #-148]
	bl	smd_close(PLT)
	str	r4, [r5, #-104]
	ldr	r0, [r5, #-84]
	bl	smd_close(PLT)
	str	r4, [r5, #-40]
	str	r4, [r5, #-236]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #260
	beq	.L2049
.L2048:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-256]
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2048
.L2049:
	mov	r7, r5
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #300
	beq	.L2047
.L2052:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-296]
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2052
.L2047:
	mov	r7, r5
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #292
	beq	.L2051
.L2055:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-288]
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2055
.L2051:
	ldrb	r3, [r5, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2044
	sub	r0, r5, #232
	bl	platform_driver_unregister(PLT)
	mov	r3, #0
	strb	r3, [r5, #-152]
.L2044:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2062
.LPIC454:
	add	r0, pc, r0
	add	r0, r0, #16
	b	platform_driver_unregister(PLT)
.L2063:
	.align	2
.L2062:
	.word	.LANCHOR0-(.LPIC454+8)
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	str	r3, [sp, #4]
	add	r3, r3, #108
	mov	r0, r3
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2065
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L2077:
	bl	smd_cur_packet_size(PLT)
	subs	r8, r0, #0
	ble	.L2065
	mov	r1, r5
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #208
	mov	r0, r8
	bl	__kmalloc(PLT)
	subs	r9, r0, #0
	beq	.L2064
	mov	r7, #0
.L2075:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	bne	.L2067
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2068
	ldr	r1, .L2102
	add	r3, sp, #24
	add	r6, sp, #12
	ldr	r0, [r10, #12]
	sub	r5, r4, #28
	str	fp, [sp, #12]
	str	r3, [sp, #24]
	str	r3, [sp, #28]
.LPIC462:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #16]
	b	.L2070
.L2099:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2069
	bl	schedule(PLT)
.L2070:
	mov	r2, #2
	mov	r1, r6
	mov	r0, r5
	bl	prepare_to_wait(PLT)
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	beq	.L2099
.L2069:
	mov	r1, r6
	mov	r0, r5
	bl	finish_wait(PLT)
.L2067:
	cmp	fp, #0
	ldr	r0, [r4, #-52]
	blt	.L2068
	cmp	r0, #0
	beq	.L2068
	add	r3, fp, r7
	cmp	r8, r3
	blt	.L2100
	mov	r2, fp
	add	r1, r9, r7
	bl	smd_read(PLT)
	cmp	r0, #0
	ble	.L2101
	add	r7, r7, r0
	cmp	r8, r7
	bgt	.L2075
	ldr	r0, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2076
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2076
	mov	r2, r8
	mov	r1, r9
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2076:
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2077
.L2065:
	mov	r1, r5
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2064:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2068:
	ldr	r1, .L2102+4
	mov	r3, r0
	mov	r2, fp
	ldr	r0, .L2102+8
.LPIC456:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC457:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2064
.L2101:
	ldr	r1, .L2102+12
	mov	r2, r0
	ldr	r0, .L2102+16
.LPIC460:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC461:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2064
.L2100:
	ldr	r1, .L2102+20
	ldr	r0, .L2102+24
.LPIC458:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC459:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2064
.L2103:
	.align	2
.L2102:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC462+8))
	.word	.LANCHOR3-(.LPIC456+8)
	.word	.LC132-(.LPIC457+8)
	.word	.LANCHOR3-(.LPIC460+8)
	.word	.LC134-(.LPIC461+8)
	.word	.LANCHOR3-(.LPIC458+8)
	.word	.LC133-(.LPIC459+8)
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L2106
	str	lr, [sp, #12]
	mov	r5, #1
	str	r6, [sp, #8]
	ldr	r1, [r4, #84]
	mov	r6, #0
.LPIC463:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r4, #100]
	str	r5, [r4, #104]
	ldr	r0, [r4, #92]
	str	r6, [r4, #100]
	str	r3, [r4, #212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up(PLT)
	ldr	lr, [sp, #12]
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #144
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2107:
	.align	2
.L2106:
	.word	.LC135-(.LPIC463+8)
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	ldr	r2, [r0, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up(PLT)
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2112
	mov	r2, #1
.LPIC464:
	add	r3, pc, r3
	ldr	r0, [r3, #2500]
	str	r2, [r0, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2111
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #100]
.L2111:
	add	r0, r0, #1664
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	b	__wake_up(PLT)
.L2113:
	.align	2
.L2112:
	.word	.LANCHOR1-(.LPIC464+8)
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r0, .L2146
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
.LPIC465:
	add	r0, pc, r0
	ldrh	r3, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	ldr	r7, [r0, #2508]
	beq	.L2140
	and	ip, r1, #96
	cmp	ip, #64
	beq	.L2141
	cmp	ip, #32
	bne	.L2136
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #100
	beq	.L2142
	cmp	r2, #103
	bne	.L2136
	orrs	r3, r6, r3
	bne	.L2136
	ldr	r2, [r4, #4]
	mov	r3, #4
	add	r10, r7, #88
	cmp	r5, r3
	mov	r0, r10
	mov	r6, r3
	movle	r8, #0
	movgt	r8, #1
	mov	r5, r3
	ldr	r9, [r2]
	strh	r3, [r9]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r7, #104]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r10
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r9, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2119:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r8, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L2138
	ldr	r2, .L2146+4
	ldr	r0, [r4]
	ldr	r1, .L2146+8
.LPIC468:
	add	r2, pc, r2
	add	r2, r2, #816
	add	r0, r0, #32
.LPIC469:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L2138
.L2140:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2143
.L2136:
	mvn	r5, #94
.L2138:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2141:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L2136
	tst	r1, #128
	beq	.L2136
	sub	r3, r3, #4
	cmp	r3, #1
	bhi	.L2136
	cmp	r5, #39
	movls	r8, #0
	movls	r6, r5
	bhi	.L2144
.L2122:
	ldr	r3, [r4, #4]
	mov	r2, r6
	ldr	r1, .L2146+12
	ldr	r0, [r3]
.LPIC470:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	bl	memcpy(PLT)
	b	.L2119
.L2142:
	orrs	r6, r6, r3
	bne	.L2136
	add	r8, r7, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #104]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2145
.L2124:
	mov	r0, r8
	mov	r1, r9
	mov	r8, #0
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2119
.L2144:
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
	b	.L2122
.L2143:
	mov	r3, r6, lsr #8
	cmp	r3, #3
	bne	.L2136
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2136
	cmp	r5, #17
	movls	r8, #0
	movls	r6, r5
	bls	.L2118
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
.L2118:
	ldr	r1, .L2146+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC466:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #236
	bl	memcpy(PLT)
	b	.L2119
.L2145:
	mov	r10, #3
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #132
	mov	r2, #1
	str	r10, [r7, #104]
	bl	__wake_up(PLT)
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #144
	mov	r2, #1
	bl	__wake_up(PLT)
	b	.L2124
.L2147:
	.align	2
.L2146:
	.word	.LANCHOR1-(.LPIC465+8)
	.word	.LANCHOR3-(.LPIC468+8)
	.word	.LC136-(.LPIC469+8)
	.word	mtp_ext_config_desc(GOT_PREL)+(.-(.LPIC470+8))
	.word	.LANCHOR2-(.LPIC466+8)
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #92]
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #132
	ldr	lr, [sp, #12]
	mov	r2, #1
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2155
	mov	r2, #1
.LPIC471:
	add	r3, pc, r3
	ldr	r0, [r3, #2508]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up(PLT)
.L2156:
	.align	2
.L2155:
	.word	.LANCHOR1-(.LPIC471+8)
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #96]
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r4, [r1, #6]	@ unaligned
	ldr	r2, [r2, #24]
	cmp	r3, #0
	ldr	lr, [r2, #4]
	beq	.L2164
	ldrb	r5, [r1]	@ zero_extendqisi2
	mov	ip, r0
	movw	r0, #41218
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	orr	r3, r3, r5, asl #8
	cmp	r3, r0
	beq	.L2159
	movw	r1, #41219
	cmp	r3, r1
	beq	.L2160
	movw	r2, #8449
	cmp	r3, r2
	beq	.L2172
.L2168:
	mvn	r0, #94
.L2170:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2160:
	ldr	r3, [lr, #4]
	cmp	r4, r3
	bhi	.L2168
	ldr	r3, .L2173
	cmp	r4, #4
	ldr	r1, [lr]
	movcs	r4, #4
.LPIC473:
	add	r3, pc, r3
	ldr	r3, [r3, #275]	@ unaligned
	str	r3, [r1]
	b	.L2162
.L2172:
	cmp	r4, #0
	bne	.L2168
	mov	r1, r6, lsr #8
	mov	lr, #1
	strb	r6, [ip, #141]
	add	r0, ip, #128
	strb	r4, [ip, #143]
	mov	r2, lr
	strb	lr, [ip, #140]
	mov	r3, r4
	strb	r1, [ip, #142]
	mov	r1, #3
	str	lr, [ip, #144]
	bl	__wake_up(PLT)
	mov	r0, r4
	b	.L2170
.L2159:
	ldr	r3, [lr, #4]
	cmp	r4, r3
	bhi	.L2168
	ldr	r3, .L2173+4
	cmp	r4, #4
	ldr	r1, [lr]
	movcs	r4, #4
.LPIC472:
	add	r3, pc, r3
	ldr	r3, [r3, #266]	@ unaligned
	str	r3, [r1]
.L2162:
	str	r4, [lr, #4]
	ldr	r3, [r2]
	mov	r1, lr
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L2163
	mov	r0, r4
	b	.L2170
.L2164:
	mvn	r0, #106
	b	.L2170
.L2163:
	ldr	r0, .L2173+8
	mov	r1, r4
.LPIC474:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L2170
.L2174:
	.align	2
.L2173:
	.word	.LANCHOR2-(.LPIC473+8)
	.word	.LANCHOR2-(.LPIC472+8)
	.word	.LC137-(.LPIC474+8)
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2180
	mov	ip, #1
	ldr	r2, [r1, #44]
.LPIC475:
	add	r3, pc, r3
	ldr	r1, [r3, #2400]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	strne	r3, [r1, #148]
	mov	r3, #0
	str	ip, [r1, #188]
	mov	r1, #3
	b	__wake_up(PLT)
.L2181:
	.align	2
.L2180:
	.word	.LANCHOR1-(.LPIC475+8)
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #92]
	mov	r6, #1
	strb	r5, [r4, #160]
	str	r6, [r4, #104]
	str	r5, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #128
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2189
	mov	r2, #1
.LPIC476:
	add	r3, pc, r3
	ldr	r0, [r3, #-1468]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up(PLT)
.L2190:
	.align	2
.L2189:
	.word	.LANCHOR4-(.LPIC476+8)
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	ldr	r3, [r0, #20]
	beq	.L2193
	cmp	r1, #3
	beq	.L2194
	cmp	r1, #1
	beq	.L2205
.L2191:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2205:
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2191
	cmp	r5, #0
	bne	.L2206
.L2198:
	ldr	r0, [r4]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2191
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L2191
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2194:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2193:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2206:
	ldr	r0, [r0]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2198
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2198
	bl	__tasklet_schedule(PLT)
	b	.L2198
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L2208
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4, #-164]
.L2208:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L2209
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L2207
.L2209:
	sub	r1, r4, #156
	mov	r0, #2
	bl	_clear_bit(PLT)
	ldr	r2, .L2215
	mov	r0, #84
	ldr	r3, [r4, #-64]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC477:
	add	r2, pc, r2
	mla	r0, r0, r3, r2
	add	r0, r0, #712
	b	platform_driver_unregister(PLT)
.L2207:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2216:
	.align	2
.L2215:
	.word	.LANCHOR1-(.LPIC477+8)
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2219
	cmp	r1, #3
	beq	.L2220
	cmp	r1, #1
	beq	.L2252
.L2218:
	add	r0, r5, #24
	ldrd	r6, [sp, #8]
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L2252:
	ldr	r0, [r0]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2222
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2253
.L2222:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L2218
	ldr	r3, .L2254
	add	r2, r5, #68
	mov	r0, #4
.LPIC479:
	add	r3, pc, r3
	ldr	r1, [r3, #-1464]
	bl	queue_work_on(PLT)
	b	.L2218
.L2220:
	add	r1, r0, #8
	mov	r0, #0
	bl	_clear_bit(PLT)
	cmp	r5, #0
	beq	.L2225
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2225
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2225
	blx	r3
.L2225:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r7, r4
	beq	.L2228
.L2227:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L2227
.L2228:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2218
.L2219:
	add	r1, r0, #8
	mov	r0, #0
	bl	_set_bit(PLT)
	cmp	r5, #0
	beq	.L2218
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2218
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2218
	blx	r3
	b	.L2218
.L2253:
	ldr	r3, .L2254+4
	add	r2, r5, #52
	mov	r0, #4
.LPIC478:
	add	r3, pc, r3
	ldr	r1, [r3, #-1464]
	bl	queue_work_on(PLT)
	b	.L2222
.L2255:
	.align	2
.L2254:
	.word	.LANCHOR4-(.LPIC479+8)
	.word	.LANCHOR4-(.LPIC478+8)
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2258
	bx	lr
.L2258:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2261
	bx	lr
.L2261:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2271
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
.LPIC480:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #2060]
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r5, #0
	beq	.L2270
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L2265
	mov	r0, r5
	blx	r3
.L2265:
	add	r4, r4, #88
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r1, r4
	mov	r0, #2
	bl	_clear_bit(PLT)
.L2264:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2270:
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r4, #88
	b	.L2264
.L2272:
	.align	2
.L2271:
	.word	.LANCHOR1-(.LPIC480+8)
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2275
	b	_clear_bit(PLT)
.L2275:
	b	_set_bit(PLT)
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2278
	cmp	r1, #3
	beq	.L2279
	cmp	r1, #1
	beq	.L2290
.L2276:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2290:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2276
	cmp	r5, #0
	bne	.L2291
.L2283:
	ldr	r0, [r4, #128]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2276
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2276
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2279:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2278:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2291:
	ldr	r0, [r0, #128]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2283
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2283
	bl	__tasklet_schedule(PLT)
	b	.L2283
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2301
	mov	r1, #0
	stmfd	sp!, {r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	sub	sp, sp, #12
	ldr	r4, .L2301+4
.LPIC481:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2301+8
.LPIC482:
	add	r4, pc, r4
	cmn	r0, #4096
	ldr	r3, [r4, r3]
	str	r0, [r3]
	bhi	.L2294
	ldr	ip, .L2301+12
	mov	r2, r0
	mov	r5, r3
	ldr	r0, .L2301+16
	mov	r3, #0
	mov	r1, #292
	ldr	ip, [r4, ip]
.LPIC483:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2301+20
	cmp	r0, #0
	ldr	r3, [r4, r3]
	str	r0, [r3]
	beq	.L2295
	cmn	r0, #4096
	bls	.L2294
.L2295:
	ldr	r0, [r5]
	bl	debugfs_remove(PLT)
.L2294:
	ldr	r3, .L2301+24
	mov	r2, #0
	mov	r0, r2
	ldr	r3, [r4, r3]
	strb	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldmfd	sp!, {r4, r5, pc}
.L2302:
	.align	2
.L2301:
	.word	.LC138-(.LPIC481+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC482+8)
	.word	smd_ctrl_dent(GOT)
	.word	gsmd_ctrl_stats_ops(GOT)
	.word	.LC139-(.LPIC483+8)
	.word	smd_ctrl_dfile(GOT)
	.word	online_clients(GOT)
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2305
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC486:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2305+4
	ldmfd	sp!, {r4, lr}
.LPIC485:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2306:
	.align	2
.L2305:
	.word	smd_ctrl_dfile(GOT_PREL)+(.-(.LPIC486+8))
	.word	smd_ctrl_dent(GOT_PREL)+(.-(.LPIC485+8))
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2316
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC487:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2316+4
	cmn	r0, #4096
.LPIC492:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	bhi	.L2309
	ldr	ip, .L2316+8
	mov	r2, r0
	mov	r4, r3
	ldr	r0, .L2316+12
	mov	r3, #0
	mov	r1, #292
.LPIC491:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC489:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2316+16
	cmp	r0, #0
.LPIC490:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	beq	.L2310
	cmn	r0, #4096
	bls	.L2309
.L2310:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
.L2309:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2317:
	.align	2
.L2316:
	.word	.LC140-(.LPIC487+8)
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC492+8))
	.word	gctrl_stats_ops(GOT_PREL)+(.-(.LPIC491+8))
	.word	.LC139-(.LPIC489+8)
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC490+8))
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2320
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC495:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2320+4
	ldmfd	sp!, {r4, lr}
.LPIC494:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2321:
	.align	2
.L2320:
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC495+8))
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC494+8))
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2336
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2336+4
.LPIC496:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC497:
	add	r4, pc, r4
	cmn	r0, #4096
	str	r0, [r4, #-1460]
	bhi	.L2324
	ldr	ip, .L2336+8
	mov	r2, r0
	mov	r3, #0
	ldr	r0, .L2336+12
	mov	r1, #292
.LPIC507:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC498:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-1456]
	beq	.L2325
	cmn	r0, #4096
	bls	.L2326
.L2325:
	ldr	r3, .L2336+16
.LPIC501:
	add	r3, pc, r3
	ldr	r0, [r3, #-1460]
	bl	debugfs_remove(PLT)
	b	.L2324
.L2326:
	ldr	ip, .L2336+20
	mov	r3, #0
	mov	r1, #420
	ldr	r0, .L2336+24
	ldr	r2, [r4, #-1460]
.LPIC506:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC503:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-1452]
	beq	.L2327
	cmn	r0, #4096
	bls	.L2324
.L2327:
	ldr	r3, .L2336+28
.LPIC505:
	add	r3, pc, r3
	ldr	r0, [r3, #-1460]
	bl	debugfs_remove(PLT)
.L2324:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2337:
	.align	2
.L2336:
	.word	.LC141-(.LPIC496+8)
	.word	.LANCHOR4-(.LPIC497+8)
	.word	ghsic_stats_ops(GOT_PREL)+(.-(.LPIC507+8))
	.word	.LC139-(.LPIC498+8)
	.word	.LANCHOR4-(.LPIC501+8)
	.word	gdata_timestamp_ops(GOT_PREL)+(.-(.LPIC506+8))
	.word	.LC142-(.LPIC503+8)
	.word	.LANCHOR4-(.LPIC505+8)
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L2340
.LPIC508:
	add	r4, pc, r4
	ldr	r0, [r4, #-1456]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-1452]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-1460]
	ldmfd	sp!, {r4, lr}
	b	debugfs_remove(PLT)
.L2341:
	.align	2
.L2340:
	.word	.LANCHOR4-(.LPIC508+8)
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2355
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC511:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2355+4
	cmp	r0, #0
.LPIC512:
	add	r3, pc, r3
	str	r0, [r3, #-1480]
	beq	.L2343
	cmn	r0, #4096
	bhi	.L2343
	ldr	ip, .L2355+8
	mov	r2, r0
	mov	r3, #0
	ldr	r0, .L2355+12
	mov	r1, #420
.LPIC514:
	add	ip, pc, ip
.LPIC513:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2344
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2353
.L2344:
	ldr	r4, .L2355+16
.LPIC515:
	add	r4, pc, r4
	ldr	r0, [r4, #-1480]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4, #-1480]
.L2343:
	mvn	r0, #18
.L2353:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2356:
	.align	2
.L2355:
	.word	.LC143-(.LPIC511+8)
	.word	.LANCHOR4-(.LPIC512+8)
	.word	.LANCHOR5-(.LPIC514+8)
	.word	.LC139-(.LPIC513+8)
	.word	.LANCHOR4-(.LPIC515+8)
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2370
	mov	r1, #0
	str	lr, [sp, #-4]!
	.save {lr}
	.pad #12
	sub	sp, sp, #12
.LPIC517:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2370+4
	cmp	r0, #0
.LPIC518:
	add	r3, pc, r3
	str	r0, [r3, #-1476]
	beq	.L2358
	cmn	r0, #4096
	bhi	.L2358
	ldr	ip, .L2370+8
	mov	r2, r0
	mov	r3, #0
	ldr	r0, .L2370+12
	mov	r1, #420
.LPIC522:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC519:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2359
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2368
.L2359:
	ldr	r3, .L2370+16
.LPIC521:
	add	r3, pc, r3
	ldr	r0, [r3, #-1476]
	bl	debugfs_remove(PLT)
.L2358:
	mvn	r0, #18
.L2368:
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L2371:
	.align	2
.L2370:
	.word	.LC144-(.LPIC517+8)
	.word	.LANCHOR4-(.LPIC518+8)
	.word	ghsuart_data_stats_ops(GOT_PREL)+(.-(.LPIC522+8))
	.word	.LC139-(.LPIC519+8)
	.word	.LANCHOR4-(.LPIC521+8)
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2381
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, #0
	ldr	r0, .L2381+4
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2381+8
.LPIC523:
	add	r3, pc, r3
	sub	r2, r3, #1440
.LPIC527:
	add	r0, pc, r0
	sub	r2, r2, #8
	str	r2, [r3, #-1448]
	str	r2, [r3, #-1444]
	bl	debugfs_create_dir(PLT)
.LPIC531:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r4]
	beq	.L2374
	cmn	r0, #4096
	bhi	.L2374
	ldr	ip, .L2381+12
	mov	r2, r0
	mov	r3, #0
	ldr	r0, .L2381+16
	mov	r1, #292
.LPIC530:
	add	ip, pc, ip
	add	ip, ip, #108
.LPIC529:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2376
	cmn	r0, #4096
	bhi	.L2376
.L2374:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2376:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L2374
.L2382:
	.align	2
.L2381:
	.word	.LANCHOR4-(.LPIC523+8)
	.word	.LC145-(.LPIC527+8)
	.word	dent_diag(GOT_PREL)+(.-(.LPIC531+8))
	.word	.LANCHOR5-(.LPIC530+8)
	.word	.LC139-(.LPIC529+8)
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #84]
	ldr	r8, [r0, #-152]
	tst	r3, #2
	beq	.L2390
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L2385
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, .L2391
	ldr	r0, [r8]
.LPIC534:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
.L2385:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2390:
	ldr	r1, .L2391+4
	ldr	r0, .L2391+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC532:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC533:
	add	r0, pc, r0
	add	r1, r1, #832
	add	sp, sp, #24
	b	printk(PLT)
.L2392:
	.align	2
.L2391:
	.word	.LC147-(.LPIC534+8)
	.word	.LANCHOR3-(.LPIC532+8)
	.word	.LC146-(.LPIC533+8)
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2407
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r8, [r3, #84]
	str	r1, [sp]
	cmp	r1, r2
	beq	.L2398
	ldr	r4, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #4]
	cmp	r4, r3
	cmpne	r4, #0
	beq	.L2398
	ldr	r3, .L2409
	mov	r9, #0
	ldr	fp, .L2409+4
.LPIC537:
	add	r3, pc, r3
.LPIC535:
	add	fp, pc, fp
	str	r3, [sp, #8]
	mov	r10, fp
	b	.L2399
.L2402:
	ldr	r4, [r6, #36]
	ldr	r3, [sp, #4]
	cmp	r4, r3
	cmpne	r4, #0
	beq	.L2398
.L2399:
	ldr	r1, [r6, #44]
	mov	ip, #1
	ldr	r3, [sp, #8]
	ldr	r2, [r10, #-1440]
	sub	r1, r1, #1
	str	r1, [r6, #44]
	ldrd	r0, [r4]
	add	r2, r2, ip
	str	r9, [r4]
	str	r9, [r4, #4]
	str	r2, [r10, #-1440]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r5, [r6, #28]
	str	r4, [r5, #-4]
	ldr	r0, [r4, #172]
	sub	fp, r5, #36
	str	r0, [r5, #-36]
	ldr	r0, [r4, #80]
	str	r0, [r5, #-32]
	ldr	r0, [r3, #312]
	cmp	r2, r0
	mov	r0, r5
	moveq	ip, #0
	streq	r9, [r10, #-1440]
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, ip, #0, #1
	uxtb	r2, r2
	orr	r2, r2, #2
	strb	r2, [r5, #-10]
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	ip, [r8, #8]
	mov	r1, fp
	mov	r2, #32
	mov	r0, r8
	ldr	ip, [ip, #16]
	blx	ip
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	fp, #0
	bne	.L2408
	ldr	r2, [r6, #264]
	ldr	r1, [r6, #28]
	ldr	r3, [sp]
	add	r2, r2, #1
	cmp	r1, r3
	str	r2, [r6, #264]
	bne	.L2402
.L2398:
	ldr	r1, [sp, #12]
.L2407:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2408:
	ldr	r1, .L2409+8
	mov	r2, fp
	ldr	r0, .L2409+12
.LPIC539:
	add	r1, pc, r1
	add	r1, r1, #856
.LPIC540:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, [sp]
	mov	r0, r5
	ldr	r2, [r6, #28]
	bl	__list_add(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	b	.L2398
.L2410:
	.align	2
.L2409:
	.word	.LANCHOR2-(.LPIC537+8)
	.word	.LANCHOR4-(.LPIC535+8)
	.word	.LANCHOR3-(.LPIC539+8)
	.word	.LC148-(.LPIC540+8)
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost(PLT)
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2414
	cmp	r2, #0
	beq	.L2415
	cmn	r2, #108
	beq	.L2414
	ldr	r1, .L2428
	ldr	r0, .L2428+4
.LPIC541:
	add	r1, pc, r1
.LPIC542:
	add	r0, pc, r0
	add	r1, r1, #880
	bl	printk(PLT)
.L2415:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	cmp	r5, #0
	beq	.L2412
	add	r6, r5, #8
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r2, r5, #28
	ldr	r1, [r5, #32]
	add	r0, r4, #36
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L2428+8
	add	r2, r5, #96
	mov	r0, #4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC543:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #-1436]
	b	queue_work_on(PLT)
.L2414:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2412:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2429:
	.align	2
.L2428:
	.word	.LANCHOR3-(.LPIC541+8)
	.word	.LC149-(.LPIC542+8)
	.word	.LANCHOR4-(.LPIC543+8)
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2431
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2431
	add	r6, r4, #48
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L2443
	add	r1, r4, #32
	mov	r7, r0
	ldr	r3, [r4, #36]
.LPIC544:
	add	r2, pc, r2
	stmia	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #316]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2434
	ldr	r2, [r2, #320]
	cmp	r2, r3
	bls	.L2442
.L2434:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r4, #136
	ldr	r1, [r4, #84]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, #0
.L2433:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2431:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #106
	b	.L2433
.L2442:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit(PLT)
	ldr	r3, [r4, #196]
	mov	r1, r7
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r4, #136
	ldr	r1, [r4, #84]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mvn	r0, #15
	b	.L2433
.L2444:
	.align	2
.L2443:
	.word	.LANCHOR2-(.LPIC544+8)
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1152
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	cmp	r3, #0
	beq	.L2446
	ldr	r9, [r3, #88]
	mov	r1, r0
	mov	r0, r6
	ldrh	r2, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r2, [sp, #8]
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r9, #0
	beq	.L2458
	add	r5, r4, #1168
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	str	r0, [sp, #12]
	cmp	r3, #0
	beq	.L2449
	ldr	r2, [r4, #1200]
	cmp	r2, #0
	beq	.L2505
.L2449:
	ldr	r1, [sp, #12]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #8]
	tst	r3, #1
	bne	.L2456
	ldr	r3, [r7, #172]
	ldrb	r2, [r3]	@ zero_extendqisi2
	tst	r2, #1
	bne	.L2506
.L2456:
	mov	r0, r5
	add	r8, r6, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #1172]
	mov	fp, r0
	cmp	r8, r10
	beq	.L2507
	sub	r3, r10, #36
	mov	r0, r10
	str	r3, [sp, #8]
	bl	list_del(PLT)
	ldr	r2, [r4, #1172]
	cmp	r8, r2
	beq	.L2508
.L2460:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1232]
	mov	fp, r0
	cmp	r2, #0
	beq	.L2462
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L2463
	mov	r1, r7
	blx	r2
	mov	r7, r0
.L2463:
	cmp	r7, #0
	beq	.L2509
.L2462:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L2510
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r7, #172]
	ldr	r6, [r7, #80]
	str	r7, [r10, #-4]
	str	r2, [r10, #-36]
.L2468:
	ldr	r2, [r4, #1156]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L2480
	ldr	r2, [r2, #112]
	cmp	r6, r2
	beq	.L2511
.L2480:
	mov	r1, #1
.L2469:
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r10, #-10]
	tst	r1, #2
	beq	.L2470
	ldrb	r2, [r4, #1276]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L2470
	ldrh	r0, [r9, #20]
	sdiv	r2, r6, r0
	mls	r2, r0, r2, r6
	cmp	r2, #0
	bne	.L2470
	bfi	r1, r2, #1, #1
	add	r6, r6, #1
	strb	r1, [r10, #-10]
.L2470:
	str	r6, [r10, #-32]
	ldr	r2, [r4, #1164]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L2471
	ldr	r2, [r2, #16]
	sub	r2, r2, #3
	bics	r2, r2, #2
	beq	.L2512
.L2471:
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	bfc	r2, #0, #1
	strb	r2, [r10, #-10]
.L2473:
	ldr	ip, [r9, #8]
	mov	r0, r9
	mov	r2, #32
	ldr	r1, [sp, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	bne	.L2503
	ldr	r3, .L2518
.LPIC550:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L2502:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2506:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	ldrb	lr, [r3, #2]	@ zero_extendqisi2
	ldrb	ip, [r3, #3]	@ zero_extendqisi2
	ldrb	r0, [r3, #4]	@ zero_extendqisi2
	and	r2, r2, r1
	ldrb	r1, [r3, #5]	@ zero_extendqisi2
	and	r3, r2, lr
	ldr	r2, [sp, #8]
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	cmp	r3, #255
	moveq	r3, #8
	movne	r3, #2
	tst	r3, r2
	bne	.L2456
.L2458:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2502
.L2510:
	ldr	ip, [r10, #-36]
	ldr	r0, [r10, #-32]
	ldr	r1, [r4, #1156]
	ldr	r2, [r4, #1220]
	add	r0, ip, r0
	ldr	r1, [r1, #144]
	bl	memcpy(PLT)
	ldr	ip, [r4, #1220]
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r10, #-32]
	add	r2, r2, ip
	str	r2, [r10, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r10, #-36]
	ldr	r0, [r10, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, ip, r0
	bl	memcpy(PLT)
	ldr	r1, [r10, #-32]
	mov	r0, r7
	ldr	r2, [r7, #80]
	add	r2, r2, r1
	mov	r6, r2
	str	r2, [r10, #-32]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1196]
	mov	fp, r0
	ldr	r1, [r4, #1228]
	add	r2, r2, #1
	cmp	r2, r1
	str	r2, [r4, #1196]
	ldr	r2, [r4, #1192]
	bcs	.L2467
	cmp	r2, #5
	bgt	.L2513
.L2467:
	add	r2, r2, #1
	mov	ip, #0
	mov	r1, fp
	mov	r0, r5
	str	r2, [r4, #1192]
	str	ip, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2468
.L2503:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r10, #-32]
	beq	.L2514
.L2464:
	ldr	r1, [r4, #1160]
	mov	r0, r5
	ldr	r2, [r1, #260]
	add	r2, r2, #1
	str	r2, [r1, #260]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1172]
	mov	r6, r0
	cmp	r8, r2
	beq	.L2515
.L2477:
	mov	r2, r8
	ldr	r1, [r4, #1176]
	mov	r0, r10
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2502
.L2507:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #16
	b	.L2502
.L2505:
	ldr	r1, [r4, #1160]
	add	r10, r6, #20
	ldr	r0, [r4, #1228]
	ldr	r8, [r4, #1172]
	ldr	r1, [r1, #356]
	cmp	r8, r10
	add	r1, r1, #80
	mul	r1, r0, r1
	str	r1, [r4, #1200]
	beq	.L2449
	mov	fp, r2
	b	.L2451
.L2452:
	str	fp, [r8, #-4]
	ldr	r8, [r8]
	cmp	r8, r10
	beq	.L2449
.L2451:
	ldr	r1, [r8, #-36]
	cmp	r1, #0
	bne	.L2452
	movw	r1, #32800
	ldr	r0, [r4, #1200]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r8, #-36]
	bne	.L2452
.L2453:
	ldr	r6, [r4, #1172]
	str	r0, [r4, #1200]
	cmp	r6, r10
	beq	.L2454
	mov	r4, r0
.L2455:
	ldr	r0, [r6, #-36]
	bl	kfree(PLT)
	str	r4, [r6, #-36]
	ldr	r6, [r6]
	cmp	r6, r10
	bne	.L2455
.L2454:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L2502
.L2512:
	ldr	r0, .L2518+4
	ldr	r1, [r4, #1188]
.LPIC548:
	add	r0, pc, r0
	ldr	r0, [r0, #324]
	add	r1, r1, #1
	str	r1, [r4, #1188]
	cmp	r1, r0, lsr #1
	beq	.L2516
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r10, #-10]
	b	.L2473
.L2511:
	ldrh	r1, [r9, #20]
	sdiv	r2, r6, r1
	mls	r1, r1, r2, r6
	adds	r1, r1, #0
	movne	r1, #1
	b	.L2469
.L2446:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2502
.L2514:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	b	.L2464
.L2508:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L2517
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L2460
.L2513:
	ldr	r2, [r4, #1172]
	mov	r1, r8
	mov	r0, r10
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2502
.L2509:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2464
.L2516:
	ldrb	r1, [r10, #-10]	@ zero_extendqisi2
	bfi	r1, r2, #0, #1
	strb	r1, [r10, #-10]
	str	r2, [r4, #1188]
	b	.L2473
.L2515:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit(PLT)
	b	.L2477
.L2517:
	ldr	r0, .L2518+8
	movw	r1, #1847
.LPIC546:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L2518+12
.LPIC547:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2460
.L2519:
	.align	2
.L2518:
	.word	jiffies(GOT_PREL)+(.-(.LPIC550+8))
	.word	.LANCHOR2-(.LPIC548+8)
	.word	.LC86-(.LPIC546+8)
	.word	.LC87-(.LPIC547+8)
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	sub	r7, r0, #16
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r4, r7
	cmpne	r4, #0
	beq	.L2521
	ldr	r9, .L2528
	mov	r10, #0
.LPIC551:
	add	r9, pc, r9
.L2522:
	ldr	r3, [r5, #-8]
	mov	r1, fp
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r0, [r8]
	mov	r1, r9
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r4, [r5, #-16]
	cmp	r4, r7
	cmpne	r4, #0
	bne	.L2522
.L2521:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2529:
	.align	2
.L2528:
	.word	.LC150-(.LPIC551+8)
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #40]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L2538
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L2533
	ldr	r2, [r5, #-48]
	ldr	r7, .L2569
	ldr	r0, .L2569+4
	sub	r2, r2, #1
.LPIC554:
	add	r7, pc, r7
	str	r2, [r5, #-48]
	ldr	ip, [r4]
.LPIC555:
	add	r0, pc, r0
	ldr	r2, [r4, #4]
	add	r7, r7, #900
	str	r3, [r4]
	str	r3, [r4, #4]
	mov	r1, r7
	add	r0, r0, #328
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2565
.L2535:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any(PLT)
.L2533:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r5, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L2538
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L2538
	ldr	r9, .L2569+8
	sub	r3, r5, #64
	str	r3, [sp, #4]
.LPIC556:
	add	r9, pc, r9
	b	.L2539
.L2567:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L2538
	ldr	r0, [r9, #352]
	bl	__alloc_skb(PLT)
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L2538
	bl	list_del(PLT)
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r4, #-36]
	ldr	r2, [r9, #352]
	str	fp, [r4, #-4]
	str	r2, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [ip, #16]
	blx	ip
	str	r0, [sp]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp]
	mov	r8, r0
	cmp	r2, #0
	bne	.L2566
.L2539:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L2567
.L2538:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2566:
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, .L2569+12
	add	r0, r9, #356
.LPIC558:
	add	r3, pc, r3
	add	r9, r3, #928
	mov	r1, r9
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2568
.L2540:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	beq	.L2541
	ldr	r2, [r5, #-64]
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	__list_add(PLT)
	b	.L2538
.L2541:
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2538
.L2568:
	ldr	r0, .L2569+16
	mov	r1, r9
.LPIC561:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2540
.L2565:
	ldr	r0, .L2569+20
	mov	r1, r7
	mvn	r2, #18
.LPIC553:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2535
.L2570:
	.align	2
.L2569:
	.word	.LANCHOR3-(.LPIC554+8)
	.word	.LANCHOR2-(.LPIC555+8)
	.word	.LANCHOR2-(.LPIC556+8)
	.word	.LANCHOR3-(.LPIC558+8)
	.word	.LC151-(.LPIC561+8)
	.word	.LC88-(.LPIC553+8)
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync(PLT)
	ldr	r0, [r4, #200]
	bl	destroy_workqueue(PLT)
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #88]
	bne	.L2581
.L2572:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L2573
	add	r1, r4, #324
	mov	r0, #1
	bl	_clear_bit(PLT)
.L2573:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L2581:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit(PLT)
	b	.L2572
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	ldr	r5, [r0, #-12]
	tst	r3, #2
	bne	.L2583
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2592
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2583:
	ldr	r3, .L2593
	sub	r2, r0, #112
	mov	r1, r2
	ldr	r0, [r0, #-108]
.LPIC563:
	add	r3, pc, r3
	bl	smd_open(PLT)
	cmp	r0, #0
	beq	.L2585
	cmn	r0, #11
	bne	.L2586
	ldr	r3, .L2593+4
	mov	r0, #250
.LPIC564:
	add	r3, pc, r3
	ldr	r5, [r3, #-1464]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r0, #4
	mov	r1, r5
	ldr	lr, [sp, #20]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_delayed_work_on(PLT)
.L2592:
	sub	r1, r0, #104
	mov	r0, #2
	bl	_set_bit(PLT)
	ldr	r0, .L2593+8
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC562:
	add	r0, pc, r0
	mla	r0, r3, r5, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #712
	b	platform_driver_register(PLT)
.L2585:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2587
	orr	r2, r6, #4
	ldr	r0, [r4, #-112]
	mov	r1, r6
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
.L2587:
	mov	r1, r7
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2586:
	ldr	r1, .L2593+12
	mov	r3, r0
	ldr	r0, .L2593+16
	ldr	r2, [r4, #-108]
	ldrd	r6, [sp, #8]
.LPIC565:
	add	r1, pc, r1
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC566:
	add	r0, pc, r0
	add	r1, r1, #952
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L2594:
	.align	2
.L2593:
	.word	grmnet_ctrl_smd_notify-(.LPIC563+8)
	.word	.LANCHOR4-(.LPIC564+8)
	.word	.LANCHOR1-(.LPIC562+8)
	.word	.LANCHOR3-(.LPIC565+8)
	.word	.LC152-(.LPIC566+8)
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L2599
	ldr	r1, [r0, #-172]
.LPIC567:
	add	r2, pc, r2
	ldr	r3, [r2, #-1432]
	cmp	r3, #90
	bgt	.L2598
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r3, r3, #1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	mov	r0, #2000
	str	r3, [r2, #-1432]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	lr, [sp, #12]
	mov	r0, #4
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L2598:
	ldr	r0, [r1]
	ldr	r1, .L2599+4
	add	r0, r0, #32
.LPIC568:
	add	r1, pc, r1
	b	dev_err(PLT)
.L2600:
	.align	2
.L2599:
	.word	.LANCHOR4-(.LPIC567+8)
	.word	.LC153-(.LPIC568+8)
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r0, #4
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r10, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2605
	ldr	fp, .L2625
	ldr	r7, .L2625+4
	ldr	r8, [r3, #88]
	add	r3, r10, #52
.LPIC570:
	add	fp, pc, fp
	str	r3, [sp, #12]
.LPIC572:
	add	r7, pc, r7
.L2603:
	ldr	r4, [r10, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #12]
	mov	r1, #32
	cmp	r4, r0
	sub	r0, r4, #36
	str	r0, [sp, #4]
	beq	.L2605
	ldr	r0, [fp, #380]
	cmp	r0, #0
	beq	.L2604
	ldr	lr, [r10, #68]
	ldr	r0, [fp, #384]
	cmp	lr, r0
	bcs	.L2605
.L2604:
	ldr	r0, [r7, #388]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r9, r0, #0
	mov	r0, r4
	beq	.L2605
	ldr	r1, [r9, #172]
	ldr	r2, [r9, #160]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [r9, #172]
	str	r2, [r9, #160]
	bl	list_del(PLT)
	ldr	r2, [r9, #172]
	mov	r1, r6
	mov	r0, r5
	str	r2, [r4, #-36]
	ldr	r2, [r7, #388]
	str	r9, [r4, #-4]
	str	r2, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	lr, [r8, #8]
	mov	r2, #32
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r6, [lr, #16]
	blx	r6
	str	r0, [sp, #8]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r6, r0
	cmp	r3, #0
	bne	.L2623
	ldr	r3, [r10, #12]
	cmp	r3, #0
	bne	.L2603
.L2605:
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2623:
	ldr	r7, .L2625+8
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
.LPIC574:
	add	r7, pc, r7
	add	r7, r7, #980
	mov	r0, r7
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2624
.L2607:
	ldr	r3, [r10, #12]
	cmp	r3, #0
	beq	.L2608
	ldr	r2, [r10, #52]
	mov	r0, r4
	ldr	r1, [sp, #12]
	bl	__list_add(PLT)
	b	.L2605
.L2608:
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2605
.L2624:
	ldr	r0, .L2625+12
	mov	r1, r7
	ldr	r2, [sp, #8]
.LPIC576:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2607
.L2626:
	.align	2
.L2625:
	.word	.LANCHOR2-(.LPIC570+8)
	.word	.LANCHOR2-(.LPIC572+8)
	.word	.LANCHOR3-(.LPIC574+8)
	.word	.LC154-(.LPIC576+8)
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r8, [r1, #32]
	cmn	r7, #104
	beq	.L2629
	cmp	r7, #0
	beq	.L2630
	cmn	r7, #108
	beq	.L2629
	ldr	r9, .L2658
.LPIC578:
	add	r9, pc, r9
	add	r9, r9, #996
	mov	r0, r9
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2656
.L2632:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
.L2631:
	ldr	r3, .L2658+4
.LPIC581:
	add	r3, pc, r3
	ldr	r2, [r3, #380]
	cmp	r2, #0
	beq	.L2633
	ldr	r3, [r3, #384]
	ldr	r2, [r5, #68]
	cmp	r2, r3
	bcc	.L2633
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L2655
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L2655:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add(PLT)
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L2629:
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r1, r4
	mov	r0, r6
	str	r3, [r4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2633:
	ldr	r8, .L2658+8
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
.LPIC583:
	add	r8, pc, r8
	ldr	r0, [r8, #388]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r7, r0, #0
	beq	.L2637
	ldr	r3, [r7, #172]
	mov	r0, r6
	mov	r2, #32
	ldr	ip, [r7, #160]
	mov	r1, r4
	add	r3, r3, #8
	add	ip, ip, #8
	str	r3, [r7, #172]
	str	ip, [r7, #160]
	str	r3, [r4]
	ldr	r3, [r8, #388]
	str	r7, [r4, #32]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L2657
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2630:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #64]
	add	ip, r5, #60
	add	r2, r5, #80
	ldr	r1, .L2658+12
	mov	r0, #4
	str	ip, [r8]
	str	r3, [r8, #4]
	str	r8, [r3]
	ldr	r3, [r5, #68]
.LPIC577:
	add	r1, pc, r1
	str	r8, [r5, #64]
	ldr	r1, [r1, #-1436]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on(PLT)
	b	.L2631
.L2657:
	ldr	r6, .L2658+16
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.LPIC585:
	add	r6, pc, r6
	add	r6, r6, #996
	mov	r0, r6
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	beq	.L2637
	ldr	r0, .L2658+20
	mov	r2, r8
	mov	r1, r6
.LPIC587:
	add	r0, pc, r0
	bl	printk(PLT)
.L2637:
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	b	.L2655
.L2656:
	ldr	lr, [r4, #4]
	mov	r3, r7
	mov	r1, r9
	ldr	ip, [r4, #48]
	ldr	r0, .L2658+24
	ldr	r2, [r6, #4]
	stmia	sp, {ip, lr}
.LPIC580:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2632
.L2659:
	.align	2
.L2658:
	.word	.LANCHOR3-(.LPIC578+8)
	.word	.LANCHOR2-(.LPIC581+8)
	.word	.LANCHOR2-(.LPIC583+8)
	.word	.LANCHOR4-(.LPIC577+8)
	.word	.LANCHOR3-(.LPIC585+8)
	.word	.LC156-(.LPIC587+8)
	.word	.LC155-(.LPIC580+8)
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	ldr	r0, [r0, #124]
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2662
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, #4
	beq	.L2664
.L2661:
	bx	lr
.L2664:
	add	r1, r0, #352
	mov	r0, r2
	mov	r2, #4
	b	__copy_to_user(PLT)
.L2662:
	mvn	r0, #18
	b	.L2661
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	beq	.L2667
	bls	.L2684
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2672
	bcc	.L2673
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2674
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r5, r5, #1376
	addeq	r5, r5, #5
	bne	.L2679
.L2676:
	cmp	r5, #0
	beq	.L2679
	mov	r0, r5
	mov	r6, r2
	bl	strlen(PLT)
	mov	r3, sp
	add	r4, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L2685
.L2677:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
	b	.L2666
.L2684:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L2669
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L2670
	movw	r3, #19719
	cmp	r1, r3
	beq	.L2686
.L2679:
	mvn	r0, #21
.L2666:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2670:
	add	r5, r5, #101
	b	.L2676
.L2674:
	add	r5, r5, #1120
	add	r5, r5, #5
	b	.L2676
.L2685:
	mov	r1, r5
	mov	r0, r6
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L2677
.L2673:
	add	r5, r5, #612
	add	r5, r5, #1
	b	.L2676
.L2669:
	ldr	r0, [r5, #1648]
	b	.L2666
.L2686:
	ldr	r0, [r5, #1644]
	b	.L2666
.L2672:
	add	r5, r5, #868
	add	r5, r5, #1
	b	.L2676
.L2667:
	add	r5, r5, #356
	add	r5, r5, #1
	b	.L2676
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2688
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2696:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2688:
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2700
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2691
.L2693:
	ldr	r0, .L2701
.LPIC588:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
.L2692:
	ldr	r3, [r4, #12]
.L2694:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L2696
.L2691:
	mov	r2, #4
	add	r1, sp, r2
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L2692
	b	.L2693
.L2700:
	ldr	r0, .L2701+4
.LPIC589:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2694
.L2702:
	.align	2
.L2701:
	.word	.LC157-(.LPIC588+8)
	.word	.LC158-(.LPIC589+8)
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r4, .L2724
	mov	r3, #0
	ldr	r5, .L2724+4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC590:
	add	r4, pc, r4
	add	r4, r4, #2496
	strb	r3, [sp, #3]
	add	r4, r4, #8
	str	r3, [sp, #4]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
.LPIC609:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	mov	r8, r0
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L2721
	ldrb	r1, [r3, #132]	@ zero_extendqisi2
	add	ip, r3, #148
	ldr	r2, [r3, #136]
	strb	r1, [sp, #3]
	str	r2, [sp, #4]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r9, [ip]
	add	r9, r9, #1
	strex	r2, r9, [ip]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r9, #1
	beq	.L2706
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [ip]
	sub	r2, r2, #1
	strex	r1, r2, [ip]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mvn	r4, #15
.L2705:
	ldr	r3, .L2724+8
	mov	r1, r8
.LPIC605:
	add	r3, pc, r3
	add	r0, r3, #2496
	add	r0, r0, #8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2706:
	mov	r1, r0
	mov	r0, r4
	ldr	r4, .L2724+12
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L2724+16
	mov	r2, r6
.LPIC607:
	add	r4, pc, r4
	add	r4, r4, #1016
.LPIC608:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	movw	r3, #26881
	movt	r3, 32769
	cmp	r6, r3
	beq	.L2707
	movw	r3, #26882
	movt	r3, 32772
	cmp	r6, r3
	bne	.L2722
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2713
.L2714:
	ldr	r1, .L2724+20
	mvn	r4, #13
	ldr	r0, .L2724+24
.LPIC598:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC599:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2711
.L2707:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2708
.L2710:
	ldr	r1, .L2724+28
	mvn	r4, #13
	ldr	r0, .L2724+32
.LPIC594:
	add	r1, pc, r1
.LPIC595:
	add	r0, pc, r0
	add	r1, r1, #1016
	bl	printk(PLT)
.L2709:
	ldr	r1, .L2724+36
	ldr	r0, .L2724+40
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
.LPIC596:
	add	r1, pc, r1
.LPIC597:
	add	r0, pc, r0
	add	r1, r1, #1016
	bl	printk(PLT)
.L2711:
	ldr	r0, .L2724+44
.LPIC602:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5]
	mov	r8, r0
	cmp	r3, #0
	beq	.L2723
	add	r2, r3, #148
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	b	.L2705
.L2721:
	ldr	r1, .L2724+48
	mvn	r4, #18
	ldr	r0, .L2724+52
.LPIC592:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC593:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2705
.L2722:
	ldr	r0, .L2724+56
	mov	r1, r4
	mvn	r4, #21
.LPIC601:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2711
.L2713:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2714
	mov	r4, r0
	b	.L2711
.L2723:
	ldr	r1, .L2724+60
	mvn	r4, #18
	ldr	r0, .L2724+64
.LPIC603:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC604:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2705
.L2708:
	mov	r2, r9
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2710
	mov	r4, r0
	b	.L2709
.L2725:
	.align	2
.L2724:
	.word	.LANCHOR1-(.LPIC590+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC609+8))
	.word	.LANCHOR1-(.LPIC605+8)
	.word	.LANCHOR3-(.LPIC607+8)
	.word	.LC162-(.LPIC608+8)
	.word	.LANCHOR3-(.LPIC598+8)
	.word	.LC159-(.LPIC599+8)
	.word	.LANCHOR3-(.LPIC594+8)
	.word	.LC159-(.LPIC595+8)
	.word	.LANCHOR3-(.LPIC596+8)
	.word	.LC160-(.LPIC597+8)
	.word	.LANCHOR1-(.LPIC602+8)
	.word	.LANCHOR3-(.LPIC592+8)
	.word	.LC61-(.LPIC593+8)
	.word	.LC161-(.LPIC601+8)
	.word	.LANCHOR3-(.LPIC603+8)
	.word	.LC61-(.LPIC604+8)
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #96
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2727
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2739:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2727:
	movw	r3, #28419
	mov	r0, r2
	movt	r3, 32770
	cmp	r1, r3
	beq	.L2734
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2743
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2730
.L2732:
	ldr	r1, .L2744
	mvn	r6, #13
	ldr	r0, .L2744+4
.LPIC610:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC611:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2731:
	ldr	r1, .L2744+8
	ldr	r0, .L2744+12
	ldr	r2, [r4, #224]
.LPIC612:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC613:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L2733
.L2734:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #2; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2735
.L2737:
	ldr	r1, .L2744+16
	mvn	r6, #13
	ldr	r0, .L2744+20
.LPIC614:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC615:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2736:
	ldr	r1, .L2744+24
	ldr	r0, .L2744+28
	ldrh	r2, [r4, #228]
.LPIC616:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC617:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2733:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L2739
.L2743:
	ldr	r1, .L2744+32
	mvn	r6, #21
	ldr	r0, .L2744+36
.LPIC618:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC619:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L2733
.L2735:
	mov	r2, #2
	add	r1, r4, #228
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2737
	mov	r6, r0
	b	.L2736
.L2730:
	mov	r2, #4
	add	r1, r4, #224
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2732
	mov	r6, r0
	b	.L2731
.L2745:
	.align	2
.L2744:
	.word	.LANCHOR3-(.LPIC610+8)
	.word	.LC159-(.LPIC611+8)
	.word	.LANCHOR3-(.LPIC612+8)
	.word	.LC163-(.LPIC613+8)
	.word	.LANCHOR3-(.LPIC614+8)
	.word	.LC159-(.LPIC615+8)
	.word	.LANCHOR3-(.LPIC616+8)
	.word	.LC164-(.LPIC617+8)
	.word	.LANCHOR3-(.LPIC618+8)
	.word	.LC165-(.LPIC619+8)
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L2747:
	ldr	ip, [r4, #372]
	cmp	ip, #0
	beq	.L2756
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	ip, r4
	mov	r1, r0
	ldr	r5, [ip, #316]!
	cmp	r5, ip
	bne	.L2750
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2747
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2747
	ldr	r2, .L2769
	mov	r3, #0
	add	r10, sp, #12
	ldr	r1, [r7, #12]
	add	r6, r4, #324
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC623:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L2753
.L2766:
	bl	schedule(PLT)
.L2753:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2751
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2751
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2766
	mov	r0, r6
	mov	r6, #65024
	mov	r1, r10
	movt	r6, 65535
	bl	finish_wait(PLT)
.L2764:
	mov	r0, r6
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2756:
	mvn	r6, #18
	b	.L2764
.L2750:
	ldr	r3, [r5, #-4]
	sub	r7, r5, #8
	cmp	r3, r9
	bhi	.L2767
	str	r0, [sp, #4]
	mov	r0, r5
	bl	list_del(PLT)
	ldr	r3, [r4, #336]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r6, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r1, [r5, #-8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	mov	r0, r6
	beq	.L2768
.L2755:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r6, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	b	.L2764
.L2751:
.L2748:
	mov	r1, r10
	mov	r0, r6
	bl	finish_wait(PLT)
	b	.L2747
.L2768:
	mov	r0, r8
	mov	r2, r6
	bl	__copy_to_user(PLT)
	b	.L2755
.L2767:
	mov	r0, r6
	mvn	r6, #11
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L2769+4
	mov	r3, r9
	ldr	r0, .L2769+8
	ldr	r2, [r5, #-4]
.LPIC621:
	add	r1, pc, r1
	add	r1, r1, #1040
.LPIC622:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L2764
.L2770:
	.align	2
.L2769:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC623+8))
	.word	.LANCHOR3-(.LPIC621+8)
	.word	.LC166-(.LPIC622+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r10, [sp, #24]
	mov	fp, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp]
	bhi	.L2788
	add	r10, r4, #20
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2774
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L2793
.LPIC625:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L2786:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2774:
	mov	r3, sp
	add	r6, r4, #52
	bic	r9, r3, #8128
	add	r5, r4, #44
	bic	r9, r9, #63
.L2776:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #44]
	mov	r1, r0
	cmp	r7, r5
	bne	.L2775
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #44]
	cmp	r3, r5
	bne	.L2776
	ldr	r2, .L2793+4
	mov	r3, #0
	add	r8, sp, #12
	ldr	r1, [r9, #12]
	add	r7, r4, #32
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC629:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L2779
.L2789:
	bl	schedule(PLT)
.L2779:
	mov	r2, #1
	mov	r1, r8
	mov	r0, r7
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #44]
	cmp	r3, r5
	bne	.L2777
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2789
	mov	r1, r8
	mov	r0, r7
	bl	finish_wait(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L2786
.L2777:
	mov	r1, r8
	mov	r0, r7
	bl	finish_wait(PLT)
	b	.L2776
.L2775:
	str	r0, [sp, #4]
	mov	r0, r7
	sub	r5, r7, #8
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r7, #-4]
	cmp	fp, r1
	bcc	.L2790
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r7, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp]
	bic	r3, r3, #63
	ldr	r1, [r7, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2791
.L2781:
	cmp	r2, #0
	ldreq	r4, [r7, #-4]
	bne	.L2792
.L2783:
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L2786
.L2791:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L2781
.L2790:
	ldr	r0, .L2793+8
	mov	r2, fp
.LPIC627:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L2786
.L2792:
	ldr	r0, .L2793+12
	mov	r1, r2
	mvn	r4, #13
.LPIC628:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2783
.L2788:
	ldr	r0, .L2793+16
	mov	r1, r2
	mov	r2, #2048
.LPIC624:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2786
.L2794:
	.align	2
.L2793:
	.word	.LC168-(.LPIC625+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC629+8))
	.word	.LC169-(.LPIC627+8)
	.word	.LC170-(.LPIC628+8)
	.word	.LC167-(.LPIC624+8)
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2809
	ands	r3, r3, #1
	mov	r5, r2
	mov	r9, r1
	bne	.L2797
	ldr	r2, .L2827
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r8, r4, #1664
	ldr	r1, [r6, #12]
	add	r7, sp, #4
	str	r3, [sp, #16]
.LPIC632:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2800
.L2823:
	bl	schedule(PLT)
.L2800:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r8
	bl	prepare_to_wait(PLT)
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2798
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2823
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
.L2821:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2798:
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait(PLT)
.L2797:
	ldr	r3, [r4, #1696]
	cmp	r5, #16384
	movcs	r5, #16384
	cmp	r3, #0
	beq	.L2801
	ldr	r6, [r4, #1688]
.L2802:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L2807
	ldr	r3, [r6, #48]
	cmp	r3, r2
	bne	.L2824
.L2801:
	ldr	r6, [r4, #1688]
	mov	r3, #0
	mov	r2, #208
	str	r5, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2807
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2802
	ldr	r2, .L2827+4
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r8, r1, #8128
	add	r3, sp, #16
	bic	r8, r8, #63
	add	r10, r4, #1664
	ldr	r1, [r8, #12]
	add	r7, sp, #4
	str	r3, [sp, #16]
.LPIC631:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2806
.L2825:
	bl	schedule(PLT)
.L2806:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r10
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2804
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2825
	mov	r1, r7
	mov	r0, r10
	bl	finish_wait(PLT)
	ldr	r0, [r4, #96]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
	b	.L2821
.L2807:
	mvn	r0, #4
	b	.L2821
.L2824:
	mov	r2, sp
	cmp	r5, r3
	ldr	r1, [r6]
	bic	r2, r2, #8128
	movcs	r5, r3
	bic	r2, r2, #63
	ldr	r3, [r2, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r5
	beq	.L2826
.L2808:
	cmp	r0, #0
	moveq	r0, r5
	mvnne	r0, #13
	b	.L2821
.L2809:
	mvn	r0, #18
	b	.L2821
.L2804:
	mov	r1, r7
	mov	r0, r10
	bl	finish_wait(PLT)
	b	.L2802
.L2826:
	mov	r0, r9
	mov	r2, r5
	bl	__copy_to_user(PLT)
	b	.L2808
.L2828:
	.align	2
.L2827:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC632+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC631+8))
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r0, #124]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L2836
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r4, r2
	movcc	r4, r2
	movcs	r4, #4
	mov	r7, r1
	cmp	r3, #0
	bne	.L2832
	ldr	r2, .L2847
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r8, r5, #128
	ldr	r1, [r6, #12]
	add	r9, sp, #4
	str	r3, [sp, #16]
.LPIC634:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2835
.L2845:
	bl	schedule(PLT)
.L2835:
	mov	r2, #1
	mov	r1, r9
	mov	r0, r8
	bl	prepare_to_wait(PLT)
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L2833
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2845
	mov	r0, r8
	mov	r1, r9
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L2843
.L2833:
	mov	r1, r9
	mov	r0, r8
	bl	finish_wait(PLT)
.L2832:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L2836
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L2846
.L2837:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L2843:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2846:
	add	r1, r5, #140
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L2837
.L2836:
	mvn	r0, #18
	b	.L2843
.L2848:
	.align	2
.L2847:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC634+8))
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L2857
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r4, .L2861
	strd	r6, [sp, #8]
	mov	r7, r1
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
.LPIC635:
	add	r4, pc, r4
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L2851
	ldr	r2, .L2861+4
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	add	r5, r4, #4
	ldr	r1, [r1, #12]
	add	r6, sp, #4
	str	r3, [sp, #16]
.LPIC643:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2854
.L2860:
	bl	schedule(PLT)
.L2854:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [r4]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	cmp	r2, #0
	bne	.L2852
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2860
	mov	r0, r5
	mov	r1, r6
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L2858
.L2852:
	mov	r1, r6
	mov	r0, r5
	bl	finish_wait(PLT)
.L2851:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2855
.L2856:
	mvn	r0, #13
.L2858:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2855:
	ldr	r1, .L2861+8
	mov	r2, #4
	mov	r0, r7
.LPIC639:
	add	r1, pc, r1
	sub	r1, r1, #1424
	sub	r1, r1, #4
	bl	__copy_to_user(PLT)
	subs	r2, r0, #0
	bne	.L2856
	ldr	r3, .L2861+12
	mov	r0, #4
.LPIC640:
	add	r3, pc, r3
	str	r2, [r3]
	b	.L2858
.L2857:
	mvn	r0, #10
	bx	lr
.L2862:
	.align	2
.L2861:
	.word	.LANCHOR1-(.LPIC635+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC643+8))
	.word	.LANCHOR4-(.LPIC639+8)
	.word	.LANCHOR1-(.LPIC640+8)
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2905
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC644:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3, #-1468]
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L2883
	cmp	r2, #4096
	bhi	.L2884
	add	r8, r4, #108
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r0, r3, [r8]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2898
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2896:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2898:
	mov	r3, sp
	mov	r9, r2
	bic	r7, r3, #8128
	mov	r10, r1
	bic	r7, r7, #63
.L2866:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2871
.L2900:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2871
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2866
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2866
	ldr	r2, .L2905+4
	add	r5, sp, #4
	add	r6, r4, #128
	ldr	r1, [r7, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC647:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2870
.L2899:
	bl	schedule(PLT)
.L2870:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2868
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2868
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2899
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L2896
.L2868:
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait(PLT)
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L2900
.L2871:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2880
	mov	r3, sp
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L2873:
	ldr	r6, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2901
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L2876
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2876
	ldr	r2, .L2905+8
	add	r5, sp, #4
	add	r7, r4, #128
	ldr	r1, [fp, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC646:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2879
.L2902:
	bl	schedule(PLT)
.L2879:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L2877
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2877
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2902
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait(PLT)
	ldr	r0, [r4, #96]
	mov	r9, #65024
	mov	r1, r6
	movt	r9, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L2874:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2903
.L2882:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r9
	b	.L2896
.L2877:
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait(PLT)
.L2876:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2880
	ldr	r2, [r6, #48]
	cmp	r2, #0
	beq	.L2873
	mov	r3, sp
	cmp	r2, r9
	ldr	r1, [r6]
	bic	r3, r3, #8128
	movcs	r2, r9
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, r10, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2904
.L2881:
	cmp	r2, #0
	mvnne	r9, #13
	b	.L2874
.L2880:
	ldr	r3, [r4, #104]
	mvn	r9, #4
	cmp	r3, #0
	beq	.L2882
.L2903:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up(PLT)
	b	.L2882
.L2901:
	mov	r3, #1
	mvn	r9, #4
	str	r3, [r4, #104]
	b	.L2874
.L2884:
	mvn	r0, #21
	b	.L2896
.L2904:
	mov	r0, r10
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L2881
.L2883:
	mvn	r0, #18
	b	.L2896
.L2906:
	.align	2
.L2905:
	.word	.LANCHOR4-(.LPIC644+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC647+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC646+8))
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2920
	cmp	r2, #0
	mov	r5, r2
	mov	r6, r1
	beq	.L2930
	cmp	r2, #4096
	bhi	.L2931
	ldr	r3, .L2935
.LPIC658:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L2921
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L2912
.L2911:
	movw	r1, #32976
	mov	r0, r5
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L2932
	mov	r3, sp
	str	r5, [r7, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2933
	mov	r1, r5
	bl	__memzero(PLT)
.L2915:
	ldr	r1, .L2935+4
	mov	r2, r5
	ldr	r0, .L2935+8
.LPIC653:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC654:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L2924:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2921:
	mov	r7, #16
	b	.L2911
.L2933:
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user(PLT)
	subs	r9, r0, #0
	bne	.L2934
	add	r6, r4, #368
	add	r8, r4, #376
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #348]
	mov	r1, r4
	mov	r10, r0
	add	r0, r7, #8
	add	r2, r2, #1
	str	r2, [r4, #348]
	ldr	r2, [r1, #340]!
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #100]
	ldr	r6, [r4, #84]
	ldr	r3, [r3]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L2924
	mvn	r1, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	strb	r1, [r3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	strh	r1, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2924
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L2935+12
	ldr	r0, [r6]
.LPIC655:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2924
.L2920:
	mvn	r5, #18
	b	.L2924
.L2932:
	mov	r0, r7
	bl	kfree(PLT)
.L2912:
	ldr	r1, .L2935+16
	mvn	r5, #11
	ldr	r0, .L2935+20
.LPIC656:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC657:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2924
.L2931:
	ldr	r1, .L2935+24
	mov	r3, r2
	mov	r2, #4096
	ldr	r0, .L2935+28
	mvn	r5, #11
.LPIC650:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC651:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2924
.L2930:
	ldr	r1, .L2935+32
	mvn	r5, #18
	ldr	r0, .L2935+36
.LPIC648:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC649:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2924
.L2934:
	mov	r5, r9
	b	.L2915
.L2936:
	.align	2
.L2935:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC658+8))
	.word	.LANCHOR3-(.LPIC653+8)
	.word	.LC173-(.LPIC654+8)
	.word	.LC174-(.LPIC655+8)
	.word	.LANCHOR3-(.LPIC656+8)
	.word	.LC175-(.LPIC657+8)
	.word	.LANCHOR3-(.LPIC650+8)
	.word	.LC172-(.LPIC651+8)
	.word	.LANCHOR3-(.LPIC648+8)
	.word	.LC171-(.LPIC649+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L2948
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2939
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L2964
.LPIC659:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L2955:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2939:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L2959
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L2960
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2961
	mov	r1, r5
	bl	__memzero(PLT)
	mov	r0, r5
.L2942:
	cmp	r0, #0
	bne	.L2962
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L2944
	ldr	ip, [r0, #92]
	cmp	ip, #0
	beq	.L2944
	mov	r2, r5
	mov	r1, r8
	blx	ip
	subs	r10, r0, #0
	bne	.L2963
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	b	.L2955
.L2961:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user(PLT)
	b	.L2942
.L2948:
	mvn	r0, #21
	b	.L2955
.L2959:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L2955
.L2944:
	ldr	r0, .L2964+4
.LPIC663:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #21
	b	.L2955
.L2960:
	ldr	r0, .L2964+8
.LPIC660:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #11
	b	.L2955
.L2963:
	ldr	r0, .L2964+12
	mov	r1, r10
.LPIC662:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L2955
.L2962:
	mov	r1, r0
	ldr	r0, .L2964+16
.LPIC661:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #13
	b	.L2955
.L2965:
	.align	2
.L2964:
	.word	.LC176-(.LPIC659+8)
	.word	.LC180-(.LPIC663+8)
	.word	.LC177-(.LPIC660+8)
	.word	.LC179-(.LPIC662+8)
	.word	.LC178-(.LPIC661+8)
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	cmp	r1, r3
	ldr	r4, [r5, #112]
	ldr	r0, [r4]
	beq	.L2968
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L2969
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	movne	r1, r4
	beq	.L2983
.L2967:
	ldr	r0, [r5, #100]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	movge	r0, #0
	blt	.L2984
.L2973:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2983:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L2974
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L2982
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r1, [r5, #112]
	b	.L2967
.L2968:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2985
.L2974:
	mov	r1, #4
	bl	__memzero(PLT)
.L2982:
	mvn	r0, #13
	b	.L2973
.L2969:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L2982
	mov	r0, r2
	add	r1, r5, #200
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L2973
	b	.L2982
.L2985:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L2982
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r1, [r5, #112]
	b	.L2967
.L2984:
	ldr	r0, .L2986
	mov	r1, r4
.LPIC664:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L2973
.L2987:
	.align	2
.L2986:
	.word	.LC181-(.LPIC664+8)
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L3024
	cmp	r2, #0
	mov	r5, r2
	beq	.L3025
	cmp	r2, #4096
	bhi	.L3026
	add	r6, r4, #104
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2993
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L3037
	ldr	r0, .L3037+4
.LPIC671:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC672:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #15
.L3015:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2993:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L3027
	ldr	r3, .L3037+8
	mov	r7, r1
.LPIC690:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3011
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L3028
.L2994:
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r9]
	movne	r8, r9
	strne	r5, [r9, #4]
	beq	.L3029
.L2995:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3030
	mov	r1, r5
	mov	r10, r5
	bl	__memzero(PLT)
.L2998:
	cmp	r10, #0
	bne	.L3031
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L3032
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L3033
	add	r7, r4, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r8, #8
	bl	__list_add(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	ldr	r8, [r4, #160]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3034
	cmp	r8, #0
	beq	.L3035
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L3036
	add	r9, r4, #168
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L3004
	mov	r1, r0
	mov	r0, r7
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2999:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	b	.L3015
.L3004:
	ldr	r3, [r8]
	mov	lr, #8
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r7
	str	lr, [r8, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L2999
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L3037+12
	mov	r2, r0
	ldr	r0, .L3037+16
.LPIC688:
	add	r1, pc, r1
	add	r1, r1, #1136
.LPIC689:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2999
.L3011:
	mov	r9, #16
	b	.L2994
.L3030:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user(PLT)
	mov	r10, r0
	b	.L2998
.L3028:
	mvn	r3, #0
	mvn	r8, #11
	ldr	r0, [r3, #-11]
	b	.L2995
.L3029:
	mov	r0, r9
	mvn	r8, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L2995
.L3025:
	ldr	r1, .L3037+20
	ldr	r0, .L3037+24
.LPIC667:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC668:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L3015
.L3024:
	ldr	r1, .L3037+28
	ldr	r0, .L3037+32
.LPIC665:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC666:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L3015
.L3026:
	ldr	r1, .L3037+36
	mov	r3, #4096
	ldr	r0, .L3037+40
.LPIC669:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC670:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L3015
.L3032:
	ldr	r1, .L3037+44
	mov	r2, r4
	ldr	r0, .L3037+48
.LPIC678:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC679:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r8
	bl	mbim_free_ctrl_pkt(PLT)
	b	.L2999
.L3036:
	ldr	r1, .L3037+52
	mov	r2, r4
	ldr	r0, .L3037+56
.LPIC686:
	add	r1, pc, r1
.LPIC687:
	add	r0, pc, r0
.L3020:
	add	r1, r1, #1136
	bl	printk(PLT)
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2999
.L3031:
	ldr	r1, .L3037+60
	mov	r2, r10
	ldr	r0, .L3037+64
.LPIC676:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC677:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r8
	bl	mbim_free_ctrl_pkt(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	b	.L3015
.L3027:
	ldr	r1, .L3037+68
	ldr	r0, .L3037+72
.LPIC673:
	add	r1, pc, r1
	add	r1, r1, #1088
.LPIC674:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L3015
.L3033:
	ldr	r1, .L3037+76
	mov	r2, r4
	ldr	r0, .L3037+80
.LPIC680:
	add	r1, pc, r1
	add	r1, r1, #1104
.LPIC681:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r8
	bl	mbim_free_ctrl_pkt(PLT)
	b	.L2999
.L3034:
	ldr	r1, .L3037+84
	mov	r2, r4
	ldr	r0, .L3037+88
.LPIC682:
	add	r1, pc, r1
.LPIC683:
	add	r0, pc, r0
	b	.L3020
.L3035:
	ldr	r1, .L3037+92
	mov	r2, r4
	ldr	r0, .L3037+96
.LPIC684:
	add	r1, pc, r1
.LPIC685:
	add	r0, pc, r0
	b	.L3020
.L3038:
	.align	2
.L3037:
	.word	.LANCHOR3-(.LPIC671+8)
	.word	.LC184-(.LPIC672+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC690+8))
	.word	.LANCHOR3-(.LPIC688+8)
	.word	.LC191-(.LPIC689+8)
	.word	.LANCHOR3-(.LPIC667+8)
	.word	.LC171-(.LPIC668+8)
	.word	.LANCHOR3-(.LPIC665+8)
	.word	.LC182-(.LPIC666+8)
	.word	.LANCHOR3-(.LPIC669+8)
	.word	.LC183-(.LPIC670+8)
	.word	.LANCHOR3-(.LPIC678+8)
	.word	.LC186-(.LPIC679+8)
	.word	.LANCHOR3-(.LPIC686+8)
	.word	.LC190-(.LPIC687+8)
	.word	.LANCHOR3-(.LPIC676+8)
	.word	.LC173-(.LPIC677+8)
	.word	.LANCHOR3-(.LPIC673+8)
	.word	.LC185-(.LPIC674+8)
	.word	.LANCHOR3-(.LPIC680+8)
	.word	.LC187-(.LPIC681+8)
	.word	.LANCHOR3-(.LPIC682+8)
	.word	.LC188-(.LPIC683+8)
	.word	.LANCHOR3-(.LPIC684+8)
	.word	.LC189-(.LPIC685+8)
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L3041
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r1, #208
	str	r6, [sp, #8]
	mov	r6, r0
	mov	r0, r4
	str	lr, [sp, #12]
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	beq	.L3042
	mov	r2, r4
	mov	r1, r6
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	mov	r0, r5
	bne	.L3045
.L3040:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3041:
	mov	r0, r1
	bx	lr
.L3042:
	mvn	r0, #11
	b	.L3040
.L3045:
	bl	kfree(PLT)
	mvn	r0, #13
	b	.L3040
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L3049
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC691:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L3049+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC692:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L3050:
	.align	2
.L3049:
	.word	.LC192-(.LPIC691+8)
	.word	.LC193-(.LPIC692+8)
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L3054
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC693:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L3054+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC694:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L3055:
	.align	2
.L3054:
	.word	.LC194-(.LPIC693+8)
	.word	.LC193-(.LPIC694+8)
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3060
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC695:
	add	ip, pc, ip
	sub	r0, ip, #1424
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3061:
	.align	2
.L3060:
	.word	.LANCHOR4-(.LPIC695+8)
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3075
	mov	r2, #140
	strd	r6, [sp, #8]
	ldr	r6, .L3075+4
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, #0
	mov	r8, r0
	str	lr, [sp, #20]
	.pad #144
	sub	sp, sp, #144
.LPIC697:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	mov	r0, sp
	mov	r4, sp
	ldr	r3, [r5]
	str	r3, [sp, #140]
	bl	memset(PLT)
.LPIC698:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L3068
	movw	r3, #10505
	cmp	r7, #0
	str	r8, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3073
	movw	r3, #21364
	mov	r1, r7
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #4
	str	r3, [sp, #136]
	bl	strlcpy(PLT)
.L3065:
	ldr	r3, [r6]
	mov	r0, r4
	add	r1, sp, #140
	sub	r3, r3, #4
.L3066:
	ldr	r2, [r0], #4
	cmp	r0, r1
	str	r2, [r3, #4]!
	bne	.L3066
	mov	r0, #0
.L3063:
	ldr	r2, [sp, #140]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L3074
	add	sp, sp, #144
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3073:
	mov	r1, #128
	add	r0, sp, #4
	bl	__memzero(PLT)
	b	.L3065
.L3068:
	mvn	r0, #18
	b	.L3063
.L3074:
	bl	__stack_chk_fail(PLT)
.L3076:
	.align	2
.L3075:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC697+8))
	.word	diag_dload(GOT_PREL)+(.-(.LPIC698+8))
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3079
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC699:
	add	ip, pc, ip
	sub	r0, ip, #1360
	sub	r0, r0, #12
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3080:
	.align	2
.L3079:
	.word	.LANCHOR4-(.LPIC699+8)
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3083
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC700:
	add	ip, pc, ip
	sub	r0, ip, #1328
	sub	r0, r0, #12
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3084:
	.align	2
.L3083:
	.word	.LANCHOR4-(.LPIC700+8)
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3087
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC701:
	add	ip, pc, ip
	sub	r0, ip, #1280
	sub	r0, r0, #8
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3088:
	.align	2
.L3087:
	.word	.LANCHOR4-(.LPIC701+8)
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3091
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC702:
	add	ip, pc, ip
	sub	r0, ip, #1232
	sub	r0, r0, #4
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3092:
	.align	2
.L3091:
	.word	.LANCHOR4-(.LPIC702+8)
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r10, [sp, #24]
	add	fp, r0, #108
	strd	r6, [sp, #8]
	mov	r0, fp
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3115
	ldr	r2, [r5, #120]
	mov	r1, r0
	mov	r0, fp
	cmp	r2, #0
	beq	.L3116
	ldr	r10, [r3, #212]
	movw	r8, #13531
	movw	r9, #56962
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, sp, #16
	movt	r8, 55222
	bl	ktime_get(PLT)
	ldrd	r0, [sp, #16]
	mov	ip, #0
	movt	r9, 17179
	ldrd	r2, [r5, #136]
	mov	r4, ip
	movw	lr, #44100
	str	ip, [sp]
	subs	r0, r0, r2
	sbc	r1, r1, r3
	mov	r2, r0
	mov	r3, r1
#APP
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r8, r2
	mov	r0, #0
@ 0 "" 2
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r9, r2
	umlal	r1, r4, r8, r3
	mov	r1, #0
	adds	r0, r4, r0
	adc	r1, r1, #0
	umlal	r0, r1, r9, r3
@ 0 "" 2
	mov	r2, r0, lsr #18
	movw	r8, #57147
	movw	r9, #28311
	orr	r2, r2, r1, asl #14
	mov	r1, r1, lsr #18
	movt	r8, 36175
	movt	r9, 33554
	umull	r2, r3, r2, lr
	mla	r3, lr, r1, r3
#APP
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r8, r2
	cmn	r0, r8
	adcs	r1, r1, r9
	adc	r0, ip, #0
@ 0 "" 2
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r9, r2
	umlal	r1, ip, r8, r3
	mov	r1, #0
	adds	r0, ip, r0
	adc	r1, r1, #0
	umlal	r0, r1, r9, r3
@ 0 "" 2
	ldrd	r8, [r5, #144]
	mov	r6, r0, lsr #9
	mov	r7, r1, lsr #9
	orr	r6, r6, r1, asl #23
	mov	r2, #440
	mov	r3, #0
	subs	r8, r6, r8
	sbc	r9, r7, r9
	cmp	r2, r8
	sbcs	r3, r3, r9
	blt	.L3119
.L3096:
	cmp	r8, #1
	sbcs	r3, r9, #0
	add	r3, r5, #96
	movlt	r8, #44
	movlt	r9, #0
	str	r3, [sp, #8]
	strd	r8, [sp]
	b	.L3107
.L3122:
	rsb	r7, r1, r7
	ldr	r0, [r6]
	mov	r2, r7
	str	r7, [sp, #12]
	bl	memcpy(PLT)
	cmp	r4, r7
	ldr	r3, [sp, #12]
	ble	.L3104
	ldr	r0, [r6]
	rsb	r3, r7, r4
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy(PLT)
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L3105:
	mov	r1, r9
	mov	r0, fp
	str	r8, [r6, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3120
	ldr	r2, [r10, #80]
	mov	r4, r4, asl #3
	mov	r9, #0
	ldrd	r0, [r5, #144]
	udiv	r2, r4, r2
	mov	r8, r2
	ldrd	r2, [sp]
	subs	r2, r2, r8
	sbc	r3, r3, r9
	mov	r6, r2
	mov	r7, r3
	adds	r2, r8, r0
	adc	r3, r9, r1
	mov	r1, r7
	cmp	r6, #1
	strd	r6, [sp]
	sbcs	r1, r1, #0
	strd	r2, [r5, #144]
	blt	.L3121
.L3107:
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r6, [r5, #96]
	cmp	r6, r3
	beq	.L3110
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del(PLT)
.L3098:
	mov	r1, r4
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r9, r0
	cmp	r3, #0
	beq	.L3117
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3117
	cmp	r6, #0
	beq	.L3117
	ldr	r3, [sp]
	ldr	r4, [r10, #80]
	ldr	r7, [r5, #116]
	mul	r4, r3, r4
	mov	r4, r4, lsr #3
	cmp	r4, #256
	movhi	r8, #256
	movls	r8, r4
	add	r3, r1, r8
	movhi	r4, r8
	cmp	r7, r3
	bcc	.L3122
	mov	r2, r8
	ldr	r0, [r6]
	bl	memcpy(PLT)
	mov	r3, r8
.L3104:
	ldr	r2, [r5, #120]
	ldr	r1, [r5, #116]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3105
.L3120:
	mov	r1, r0
	ldr	r0, .L3123
.LPIC703:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	ldr	r1, [r5, #100]
	add	r0, r6, #36
	ldr	r2, [sp, #8]
	bl	__list_add(PLT)
	mov	r1, r4
.L3115:
	mov	r0, fp
.L3116:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3117:
	mov	r1, r9
	mov	r0, fp
	b	.L3116
.L3119:
	subs	r2, r6, #44
	mov	r8, #44
	sbc	r3, r7, #0
	mov	r9, #0
	strd	r2, [r5, #144]
	b	.L3096
.L3110:
	mov	r6, #0
	b	.L3098
.L3121:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3124:
	.align	2
.L3123:
	.word	.LC195-(.LPIC703+8)
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #212]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L3130
.L3128:
	b	.L3127
	b	.L3129
	b	.L3130
	b	.L3130
	b	.L3130
	b	.L3127
	b	.L3129
	.p2align 1
.L3129:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get(PLT)
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r6, [r5, #144]
	strd	r2, [r5, #136]
	bl	audio_send(PLT)
	mov	r0, #0
.L3126:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3127:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L3126
.L3130:
	mvn	r0, #21
	b	.L3126
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3134
	.save {r4, r6, r7, r8, r9, r10, fp, lr}
	str	r4, [sp, #-32]!
	strd	r6, [sp, #4]
	strd	r8, [sp, #12]
	strd	r10, [sp, #20]
	mov	fp, r0
.LPIC704:
	add	r1, pc, r1
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	add	r1, r1, #1168
	ldr	r10, [r0, #212]
	ldrd	r6, [r1, #32]
	ldr	r4, [r0, #8]
	ldrd	r2, [r1, #8]
	add	lr, r10, #208
	ldrd	r8, [r1, #24]
	mov	r0, r10
	strd	r6, [sp]
	ldrd	r6, [r1]
	str	r4, [r10, #200]
	strd	r2, [r10, #216]
	ldrd	r2, [r1, #48]
	strd	r6, [r10, #208]
	ldrd	r6, [r1, #40]
	strd	r6, [r10, #248]
	ldrd	r6, [r1, #16]
	strd	r6, [r10, #224]
	ldrd	r6, [r1, #56]
	strd	r6, [lr, #56]
	ldrd	r6, [sp]
	strd	r8, [r10, #232]
	strd	r6, [r10, #240]
	strd	r2, [lr, #48]
	bl	snd_pcm_limit_hw_rates(PLT)
	mov	r3, #2
	mov	r0, #0
	str	r3, [r10, #240]
	str	fp, [r4, #92]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldrd	r6, [sp, #4]
	ldrd	r8, [sp, #12]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3135:
	.align	2
.L3134:
	.word	.LANCHOR3-(.LPIC704+8)
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r5, #4]
	cmp	r0, #0
	beq	.L3138
	ldr	r3, [r0, #124]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L3137
	mov	r1, r4
	blx	r3
	mov	r4, r0
.L3137:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3138:
	mov	r4, r0
	b	.L3137
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r5, [r6, #4]
	cmp	r5, #0
	beq	.L3149
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L3143
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L3143:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L3145
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	movne	r0, #4
	moveq	r0, #0
	orr	r4, r4, r0
.L3145:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L3142:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3149:
	mvn	r4, #18
	b	.L3142
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r6, #4]
	cmp	r4, #0
	beq	.L3165
	ands	r5, r7, #128
	beq	.L3162
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L3163
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L3162:
	tst	r8, #128
	beq	.L3163
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L3163
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3163:
	tst	r7, #64
	beq	.L3164
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L3161
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3164:
	tst	r8, #64
	beq	.L3161
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L3161
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3161:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3165:
	mvn	r5, #18
	b	.L3161
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3210
	add	r0, r0, #24
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3190
	movw	r1, #26371
	cmp	r5, r1
	beq	.L3191
	bhi	.L3192
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3193
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3203
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L3190
	mov	r5, #0
	blx	r3
.L3190:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
.L3207:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3192:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3195
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3203
	ldr	r0, [r4, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3199
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3199:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r5, [r3, r2, asl #2]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3200
.L3201:
	mvn	r0, #13
	b	.L3207
.L3200:
	mov	r1, r5
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L3201
.L3203:
	mvn	r5, #24
	b	.L3190
.L3193:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	mvneq	r5, #94
	beq	.L3190
	blx	r3
	mov	r5, r0
	b	.L3190
.L3195:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3190
.L3191:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3190
.L3210:
	ldr	r0, .L3211
	movw	r1, #979
.LPIC705:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #18
	b	.L3207
.L3212:
	.align	2
.L3211:
	.word	.LC18-(.LPIC705+8)
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L3226
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #104]
	ldr	r7, [r1, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r5, #28]
	str	r3, [r5, #4]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L3225
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #28]
	str	r2, [r5, #4]
	beq	.L3225
	cmn	r3, #95
	bne	.L3217
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L3225
.L3217:
	ldr	r0, [r4, #84]
	ldr	r1, .L3227
	ldr	r2, [r6, #4]
	add	r0, r0, #32
.LPIC709:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L3225:
	mov	r0, #1
.L3223:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3226:
	ldr	r2, .L3227+4
	movw	r3, #805
	ldr	r0, [r0]
	ldr	r1, .L3227+8
.LPIC706:
	add	r2, pc, r2
	add	r2, r2, #1232
	add	r0, r0, #32
.LPIC707:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L3227+12
	movw	r1, #550
.LPIC708:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r0, r4
	b	.L3223
.L3228:
	.align	2
.L3227:
	.word	.LC198-(.LPIC709+8)
	.word	.LANCHOR3-(.LPIC706+8)
	.word	.LC196-(.LPIC707+8)
	.word	.LC197-(.LPIC708+8)
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.align	2
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	sub	r9, r5, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3255
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L3239
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	bne	.L3245
	b	.L3239
.L3257:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read(PLT)
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	cmp	r10, #0
	bne	.L3256
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3241
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L3241
.L3245:
	bl	smd_read_avail(PLT)
	subs	r10, r0, #0
	bne	.L3257
.L3241:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3246
.L3239:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L3246
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L3246
	ldr	r3, .L3259
	mov	r2, r5
	mov	r0, #4
.LPIC712:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	bl	queue_work_on(PLT)
.L3246:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L3255:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L3229
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L3234
	b	.L3229
.L3235:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read(PLT)
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L3234:
	bl	smd_read_avail(PLT)
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L3235
.L3229:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3256:
	ldr	r1, .L3259+4
	str	r10, [sp]
	ldr	r0, .L3259+8
	ldr	r3, [r5, #-52]
	ldr	r2, [sp, #12]
.LPIC710:
	add	r1, pc, r1
	add	r1, r1, #1248
.LPIC711:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3258
	mov	r0, r4
	ldr	r2, [r5, #-8]
	mov	r1, r9
	bl	__list_add(PLT)
	b	.L3241
.L3258:
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3241
.L3260:
	.align	2
.L3259:
	.word	.LANCHOR4-(.LPIC712+8)
	.word	.LANCHOR3-(.LPIC710+8)
	.word	.LC199-(.LPIC711+8)
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	ldr	r10, .L3305
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #36
	sub	sp, sp, #36
.LPIC713:
	add	r10, pc, r10
	str	r2, [sp]
	str	r1, [sp, #4]
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3262
	mov	r3, sp
	str	r2, [sp, #12]
	ldr	r1, .L3305+4
	bic	r4, r3, #8128
	add	r5, fp, #132
	bic	r4, r4, #63
	add	r6, sp, #12
	ldr	r2, [r4, #12]
	str	r2, [sp, #16]
	ldr	r1, [r10, r1]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3265
.L3300:
	bl	schedule(PLT)
.L3265:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3263
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3300
	mov	r1, r6
	mov	r0, r5
	mov	r4, #65024
	add	r9, fp, #88
	bl	finish_wait(PLT)
	movt	r4, 65535
	b	.L3269
.L3263:
	mov	r1, r6
	mov	r0, r5
	bl	finish_wait(PLT)
.L3262:
	ldr	r2, .L3305+8
	ldr	r0, [fp, #96]
	ldr	r3, [sp]
	ldr	r1, [r10, r2]
	ldrh	r2, [r0, #20]
	ldr	r1, [r1]
	sub	r5, r2, #1
	rsb	r2, r2, #0
	add	r5, r5, r3
	and	r5, r5, r2
	cmp	r5, r1
	bhi	.L3282
	add	r9, fp, #88
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3301
	mov	r2, #2
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L3268:
	ldr	r4, [fp, #168]
	mov	ip, #0
	mov	r2, #208
	str	r5, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #96]
	str	ip, [fp, #176]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	blt	.L3288
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3270
	ldr	r1, [fp, #104]
	cmp	r1, #2
	beq	.L3302
	cmp	r1, #3
	beq	.L3281
.L3288:
	mvn	r4, #4
.L3269:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	mvneq	r4, #124
	beq	.L3277
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #104]
.L3277:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
.L3297:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3270:
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3275
.L3278:
	cmp	r2, #2
	bne	.L3288
	ldr	r2, [r4, #48]
	cmp	r2, #0
	beq	.L3268
	mov	r3, sp
	ldr	r1, [r4]
	bic	r0, r3, #8128
	ldr	r3, [sp]
	bic	r0, r0, #63
	cmp	r2, r3
	movcc	r4, r2
	movcs	r4, r3
	ldr	r2, [r0, #8]
	ldr	r3, [sp, #4]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, r3, r4; sbcccs r0, r0, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	movne	r0, r4
	beq	.L3303
.L3276:
	cmp	r0, #0
	mvnne	r4, #13
	b	.L3269
.L3302:
	ldr	r1, [r7, #12]
	str	r2, [sp, #12]
	add	r6, sp, #12
	ldr	r2, .L3305+4
	add	r8, fp, #132
	str	r1, [sp, #16]
	ldr	r1, [r10, r2]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3274
.L3304:
	bl	schedule(PLT)
.L3274:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r8
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3272
	ldr	r2, [fp, #104]
	cmp	r2, #2
	bne	.L3272
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3304
	mov	r1, r6
	mov	r0, r8
	bl	finish_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3299
	ldr	r0, [fp, #96]
	mov	r1, r4
	mov	r4, #65024
	movt	r4, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3269
.L3272:
	mov	r1, r6
	mov	r0, r8
	bl	finish_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	bne	.L3278
.L3299:
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3275
.L3281:
	ldr	r0, [fp, #96]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3275:
	mov	r0, r9
	mvn	r4, #124
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #3
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L3269
.L3282:
	mvn	r0, #21
	b	.L3297
.L3303:
	mov	r0, r3
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L3276
.L3301:
	mov	r2, #1
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L3297
.L3306:
	.align	2
.L3305:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC713+8)
	.word	autoremove_wake_function(GOT)
	.word	mtp_rx_req_len(GOT)
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3309
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	mov	r6, r2
.LPIC714:
	add	r3, pc, r3
	ldr	r5, [r3, #16]
	sub	r4, r5, #496
	mov	r0, r4
	bl	mutex_lock(PLT)
	ldr	r1, .L3309+4
	sub	r2, r5, #324
	mov	r0, r6
.LPIC715:
	add	r1, pc, r1
	bl	sprintf(PLT)
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3310:
	.align	2
.L3309:
	.word	.LANCHOR1-(.LPIC714+8)
	.word	.LC84-(.LPIC715+8)
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	sub	r8, r4, #8
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	ldr	r7, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3313
	ldr	r5, [r4, #-8]
	cmp	r8, r5
	beq	.L3313
	ldr	r6, .L3344
	ldr	r3, .L3344+4
.LPIC716:
	add	r6, pc, r6
	add	r6, r6, #1264
.LPIC717:
	add	r3, pc, r3
	add	r6, r6, #4
	str	r3, [sp, #12]
.L3321:
	ldr	r2, [r5, #8]
	cmn	r2, #108
	beq	.L3313
	cmp	r2, #0
	beq	.L3316
	ldr	r3, [r4, #-28]
	mov	r1, r6
	str	r2, [sp]
	ldr	r0, [sp, #12]
	mov	r2, r10
	bl	printk(PLT)
	ldr	r0, [r7]
.L3316:
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L3313
	ldr	fp, [r5, #12]
	cmp	fp, #0
	beq	.L3317
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r7]
	cmp	r2, #0
	rsbne	fp, r2, fp
	addne	r1, r1, r2
	mov	r2, fp
	bl	smd_write(PLT)
	cmp	r0, #0
	blt	.L3342
	cmp	r0, fp
	bne	.L3343
	ldr	r2, [r4, #140]
	add	r3, r2, fp
	str	r3, [r4, #140]
.L3317:
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-20]
	bl	__list_del_entry(PLT)
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-16]!
	bl	__list_add(PLT)
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3313
	ldr	r5, [r4, #-8]
	cmp	r8, r5
	bne	.L3321
.L3313:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L3343:
	ldr	r3, [r4, #-20]
	add	r0, r3, r0
	str	r0, [r4, #-20]
	b	.L3313
.L3342:
	ldr	r1, .L3344+8
	mov	r2, r0
	ldr	r0, .L3344+12
.LPIC718:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC719:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3313
.L3345:
	.align	2
.L3344:
	.word	.LANCHOR3-(.LPIC716+8)
	.word	.LC200-(.LPIC717+8)
	.word	.LANCHOR3-(.LPIC718+8)
	.word	.LC201-(.LPIC719+8)
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #516]
	cmp	r3, #0
	bne	.L3349
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L3349:
	ldr	r3, [r0, #508]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3350
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
.LPIC720:
	add	r2, pc, r2
	ubfx	r3, r3, #5, #1
	b	snprintf(PLT)
.L3351:
	.align	2
.L3350:
	.word	.LC78-(.LPIC720+8)
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r4, [r0, #8]
	mov	r6, r0
	cmp	r4, #0
	beq	.L3355
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3359
	ldr	r4, .L3360
.LPIC721:
	add	r4, pc, r4
.L3354:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L3353:
	ldr	r1, .L3360+4
	mov	r2, r4
	ldr	r0, .L3360+8
.LPIC725:
	add	r1, pc, r1
	add	r1, r1, #1280
.LPIC726:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r2, .L3360+12
	mov	r3, r4
	mov	r0, r7
	ldrd	r4, [sp]
	mov	r1, #4096
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC727:
	add	r2, pc, r2
	add	sp, sp, #24
	b	snprintf(PLT)
.L3355:
	ldr	r4, .L3360+16
.LPIC724:
	add	r4, pc, r4
	b	.L3353
.L3359:
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3357
	ldr	r4, .L3360+20
.LPIC723:
	add	r4, pc, r4
	b	.L3354
.L3357:
	ldr	r4, .L3360+24
.LPIC722:
	add	r4, pc, r4
	b	.L3354
.L3361:
	.align	2
.L3360:
	.word	.LC202-(.LPIC721+8)
	.word	.LANCHOR3-(.LPIC725+8)
	.word	.LC205-(.LPIC726+8)
	.word	.LC84-(.LPIC727+8)
	.word	.LC203-(.LPIC724+8)
	.word	.LC204-(.LPIC723+8)
	.word	.LC203-(.LPIC722+8)
	.fnend
	.size	state_show, .-state_show
	.align	2
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L3364
	add	r3, r0, #52
	mov	r1, #4096
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC728:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3365:
	.align	2
.L3364:
	.word	.LC84-(.LPIC728+8)
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L3368
	mov	r4, r0
	ldr	r0, .L3368+4
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
.LPIC729:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC730:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r2, .L3368+8
	mov	r0, r5
	mov	r1, #4096
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
.LPIC731:
	add	r2, pc, r2
	add	sp, sp, #16
	b	snprintf(PLT)
.L3369:
	.align	2
.L3368:
	.word	.LANCHOR3-(.LPIC729+8)
	.word	.LC206-(.LPIC730+8)
	.word	.LC78-(.LPIC731+8)
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	dev_get_drvdata(PLT)
	add	r10, r0, #24
	mov	r8, r0
	mov	r0, r10
	bl	mutex_lock(PLT)
	ldr	r7, [r8, #508]!
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3371
	ldr	r6, .L3384
	mov	fp, r9
.LPIC732:
	add	r6, pc, r6
.L3372:
	mov	r5, r7
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L3374
.L3375:
	ldr	r3, [r4]
	mov	r0, fp
	mov	r2, r6
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf(PLT)
	ldr	r4, [r4, #4]
	add	fp, fp, r0
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L3375
.L3374:
	ldr	r7, [r7, #120]
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3383
	cmp	r9, fp
	movne	r3, #58
	strneb	r3, [fp, #-1]
	b	.L3372
.L3383:
	mov	r0, r10
	bl	mutex_unlock(PLT)
	cmp	r9, fp
	beq	.L3382
	mov	r3, #10
	rsb	r0, r9, fp
	strb	r3, [fp, #-1]
.L3380:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3371:
	mov	r0, r10
	bl	mutex_unlock(PLT)
.L3382:
	mov	r0, #0
	b	.L3380
.L3385:
	.align	2
.L3384:
	.word	.LC207-(.LPIC732+8)
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3387
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3387+4
.LPIC733:
	add	r3, pc, r3
.LPIC734:
	add	r2, pc, r2
	add	r3, r3, #28
	b	snprintf(PLT)
.L3388:
	.align	2
.L3387:
	.word	.LANCHOR1-(.LPIC733+8)
	.word	.LC208-(.LPIC734+8)
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3390
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3390+4
.LPIC735:
	add	r3, pc, r3
	sub	r3, r3, #1168
.LPIC736:
	add	r2, pc, r2
	sub	r3, r3, #12
	b	snprintf(PLT)
.L3391:
	.align	2
.L3390:
	.word	.LANCHOR4-(.LPIC735+8)
	.word	.LC208-(.LPIC736+8)
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3393
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3393+4
.LPIC737:
	add	r3, pc, r3
.LPIC738:
	add	r2, pc, r2
	sub	r3, r3, #924
	b	snprintf(PLT)
.L3394:
	.align	2
.L3393:
	.word	.LANCHOR4-(.LPIC737+8)
	.word	.LC208-(.LPIC738+8)
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3396
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3396+4
.LPIC739:
	add	r3, pc, r3
.LPIC740:
	add	r2, pc, r2
	ldrb	r3, [r3, #398]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3397:
	.align	2
.L3396:
	.word	.LANCHOR2-(.LPIC739+8)
	.word	.LC78-(.LPIC740+8)
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3399
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3399+4
.LPIC741:
	add	r3, pc, r3
.LPIC742:
	add	r2, pc, r2
	ldrb	r3, [r3, #397]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3400:
	.align	2
.L3399:
	.word	.LANCHOR2-(.LPIC741+8)
	.word	.LC78-(.LPIC742+8)
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3402
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3402+4
.LPIC743:
	add	r3, pc, r3
.LPIC744:
	add	r2, pc, r2
	ldrb	r3, [r3, #396]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3403:
	.align	2
.L3402:
	.word	.LANCHOR2-(.LPIC743+8)
	.word	.LC78-(.LPIC744+8)
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3405
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3405+4
.LPIC745:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC746:
	add	r2, pc, r2
	ldrh	r3, [r3, #12]
	b	snprintf(PLT)
.L3406:
	.align	2
.L3405:
	.word	.LANCHOR2-(.LPIC745+8)
	.word	.LC209-(.LPIC746+8)
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3408
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3408+4
.LPIC747:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC748:
	add	r2, pc, r2
	ldrh	r3, [r3, #10]
	b	snprintf(PLT)
.L3409:
	.align	2
.L3408:
	.word	.LANCHOR2-(.LPIC747+8)
	.word	.LC209-(.LPIC748+8)
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3411
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3411+4
.LPIC749:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC750:
	add	r2, pc, r2
	ldrh	r3, [r3, #8]
	b	snprintf(PLT)
.L3412:
	.align	2
.L3411:
	.word	.LANCHOR2-(.LPIC749+8)
	.word	.LC209-(.LPIC750+8)
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3415
	ldmia	ip, {r3, ip}
.LPIC751:
	add	r2, pc, r2
	str	ip, [sp]
	bl	snprintf(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3416:
	.align	2
.L3415:
	.word	.LC85-(.LPIC751+8)
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3419
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
.LPIC752:
	add	r2, pc, r2
	add	r3, r3, #180
	b	snprintf(PLT)
.L3420:
	.align	2
.L3419:
	.word	.LC84-(.LPIC752+8)
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3423
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC753:
	add	r2, pc, r2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3424:
	.align	2
.L3423:
	.word	.LC210-(.LPIC753+8)
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3426
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3426+4
.LPIC754:
	add	r3, pc, r3
.LPIC755:
	add	r2, pc, r2
	sub	r3, r3, #1424
	b	snprintf(PLT)
.L3427:
	.align	2
.L3426:
	.word	.LANCHOR4-(.LPIC754+8)
	.word	.LC84-(.LPIC755+8)
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3430
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
.LPIC756:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3431:
	.align	2
.L3430:
	.word	.LC78-(.LPIC756+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3434
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
.LPIC757:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3435:
	.align	2
.L3434:
	.word	.LC209-(.LPIC757+8)
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3438
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC758:
	add	r2, pc, r2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3439:
	.align	2
.L3438:
	.word	.LC210-(.LPIC758+8)
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3442
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
.LPIC759:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3443:
	.align	2
.L3442:
	.word	.LC78-(.LPIC759+8)
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3446
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
.LPIC760:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3447:
	.align	2
.L3446:
	.word	.LC84-(.LPIC760+8)
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3449
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3449+4
.LPIC761:
	add	r3, pc, r3
	sub	r3, r3, #1328
.LPIC762:
	add	r2, pc, r2
	sub	r3, r3, #12
	b	snprintf(PLT)
.L3450:
	.align	2
.L3449:
	.word	.LANCHOR4-(.LPIC761+8)
	.word	.LC84-(.LPIC762+8)
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3452
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3452+4
.LPIC763:
	add	r3, pc, r3
	sub	r3, r3, #1280
.LPIC764:
	add	r2, pc, r2
	sub	r3, r3, #8
	b	snprintf(PLT)
.L3453:
	.align	2
.L3452:
	.word	.LANCHOR4-(.LPIC763+8)
	.word	.LC84-(.LPIC764+8)
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3455
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3455+4
.LPIC765:
	add	r3, pc, r3
	sub	r3, r3, #1232
.LPIC766:
	add	r2, pc, r2
	sub	r3, r3, #4
	b	snprintf(PLT)
.L3456:
	.align	2
.L3455:
	.word	.LANCHOR4-(.LPIC765+8)
	.word	.LC84-(.LPIC766+8)
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3469
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC767:
	add	r5, pc, r5
	ldr	r6, [r5, #496]
	cmp	r6, #0
	beq	.L3459
	ldr	r3, [r5, #520]
	mov	r2, #20
	ldr	r7, [r0]
	ldr	r4, [r3, #72]
	mov	r1, r7
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3460
	cmp	r6, #1
	bls	.L3459
	ldr	r3, [r5, #624]
	mov	r1, r7
	mov	r2, #20
	ldr	r4, [r3, #72]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3460
.L3459:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3460:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3459
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3459
.L3470:
	.align	2
.L3469:
	.word	.LANCHOR1-(.LPIC767+8)
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L3485
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC770:
	add	r6, pc, r6
	ldr	r7, [r6, #496]
	cmp	r7, #0
	beq	.L3472
	ldr	r4, [r6, #520]
	mov	r2, #20
	ldr	r8, [r0]
	ldr	r5, [r4, #72]
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3473
	cmp	r7, #1
	bls	.L3472
	ldr	r4, [r6, #624]
	mov	r1, r8
	mov	r2, #20
	ldr	r5, [r4, #72]
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3473
.L3472:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3473:
	add	r1, r5, #8
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3474
	ldr	r3, .L3485+4
	mov	r0, #0
.LPIC773:
	add	r3, pc, r3
	ldr	r7, [r3, #-1184]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r4, #76
	mov	r0, #4
	mov	r1, r7
	bl	queue_delayed_work_on(PLT)
.L3474:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3472
.L3486:
	.align	2
.L3485:
	.word	.LANCHOR1-(.LPIC770+8)
	.word	.LANCHOR4-(.LPIC773+8)
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3495
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC774:
	add	r4, pc, r4
	ldr	r3, [r4, #2404]
	cmp	r3, #0
	ble	.L3488
	ldr	r1, [r0]
	mov	r2, #20
	ldr	r0, .L3495+4
.LPIC775:
	add	r0, pc, r0
	bl	strncmp(PLT)
	cmp	r0, #0
	ldr	r4, [r4, #2408]
	beq	.L3494
.L3488:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3494:
	add	r1, r4, #20
	mov	r0, #2
	add	r5, r4, #4
	add	r6, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3489
	ldr	r3, .L3495+8
	add	r2, r4, #284
	mov	r0, #4
.LPIC777:
	add	r3, pc, r3
	ldr	r1, [r3, #-1436]
	bl	queue_work_on(PLT)
.L3489:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3488
.L3496:
	.align	2
.L3495:
	.word	.LANCHOR1-(.LPIC774+8)
	.word	.LC211-(.LPIC775+8)
	.word	.LANCHOR4-(.LPIC777+8)
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3541
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC778:
	add	r3, pc, r3
	ldr	r4, [r3, #708]
	cmp	r4, #0
	beq	.L3498
	ldr	r1, [r0]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3498:
	ldr	r3, .L3541+4
.LPIC779:
	add	r3, pc, r3
	ldr	r4, [r3, #792]
	cmp	r4, #0
	beq	.L3500
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3500:
	ldr	r3, .L3541+8
.LPIC780:
	add	r3, pc, r3
	ldr	r4, [r3, #876]
	cmp	r4, #0
	beq	.L3501
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3501:
	ldr	r3, .L3541+12
.LPIC781:
	add	r3, pc, r3
	ldr	r4, [r3, #960]
	cmp	r4, #0
	beq	.L3502
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3502:
	ldr	r3, .L3541+16
.LPIC782:
	add	r3, pc, r3
	ldr	r4, [r3, #1044]
	cmp	r4, #0
	beq	.L3503
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3503:
	ldr	r3, .L3541+20
.LPIC783:
	add	r3, pc, r3
	ldr	r4, [r3, #1128]
	cmp	r4, #0
	beq	.L3506
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3499
.L3506:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3499:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3506
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3506
.L3542:
	.align	2
.L3541:
	.word	.LANCHOR1-(.LPIC778+8)
	.word	.LANCHOR1-(.LPIC779+8)
	.word	.LANCHOR1-(.LPIC780+8)
	.word	.LANCHOR1-(.LPIC781+8)
	.word	.LANCHOR1-(.LPIC782+8)
	.word	.LANCHOR1-(.LPIC783+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3589
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC784:
	add	r3, pc, r3
	ldr	r4, [r3, #708]
	cmp	r4, #0
	beq	.L3544
	ldr	r1, [r0]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3544:
	ldr	r3, .L3589+4
.LPIC785:
	add	r3, pc, r3
	ldr	r4, [r3, #792]
	cmp	r4, #0
	beq	.L3546
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3546:
	ldr	r3, .L3589+8
.LPIC786:
	add	r3, pc, r3
	ldr	r4, [r3, #876]
	cmp	r4, #0
	beq	.L3547
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3547:
	ldr	r3, .L3589+12
.LPIC787:
	add	r3, pc, r3
	ldr	r4, [r3, #960]
	cmp	r4, #0
	beq	.L3548
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3548:
	ldr	r3, .L3589+16
.LPIC788:
	add	r3, pc, r3
	ldr	r4, [r3, #1044]
	cmp	r4, #0
	beq	.L3549
	mov	r2, #20
	ldr	r1, [r5]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3549:
	ldr	r3, .L3589+20
.LPIC789:
	add	r3, pc, r3
	ldr	r4, [r3, #1128]
	cmp	r4, #0
	beq	.L3550
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3545
.L3550:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3545:
	add	r5, r4, #8
	mov	r0, #2
	mov	r1, r5
	add	r6, r4, #108
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_set_bit(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #104]
	mov	r5, r0
	cmp	r3, #0
	beq	.L3551
	ldr	ip, .L3589+24
	add	r2, r4, #112
	mov	r3, #0
	mov	r0, #4
.LPIC790:
	add	ip, pc, ip
	ldr	r1, [ip, #-1464]
	bl	queue_delayed_work_on(PLT)
.L3551:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3550
.L3590:
	.align	2
.L3589:
	.word	.LANCHOR1-(.LPIC784+8)
	.word	.LANCHOR1-(.LPIC785+8)
	.word	.LANCHOR1-(.LPIC786+8)
	.word	.LANCHOR1-(.LPIC787+8)
	.word	.LANCHOR1-(.LPIC788+8)
	.word	.LANCHOR1-(.LPIC789+8)
	.word	.LANCHOR4-(.LPIC790+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3630
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC791:
	add	r5, pc, r5
	ldr	r7, [r5, #1216]
	cmp	r7, #0
	beq	.L3592
	ldr	r4, [r5, #1220]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3593
	cmp	r7, #1
	bls	.L3592
	ldr	r4, [r5, #1324]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3593
	cmp	r7, #2
	beq	.L3592
	ldr	r4, [r5, #1428]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3593
	cmp	r7, #3
	beq	.L3592
	ldr	r4, [r5, #1532]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3593
.L3592:
	ldr	r1, .L3630+4
	mvn	r2, #21
	ldr	r0, .L3630+8
.LPIC796:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC797:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
.L3625:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3593:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3629
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L3598
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L3603
.L3602:
	mov	r0, r5
	blx	r3
.L3603:
	add	r4, r4, #84
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
.L3597:
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L3625
.L3598:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L3602
	b	.L3603
.L3629:
	mov	r0, r6
	add	r4, r4, #84
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3597
.L3631:
	.align	2
.L3630:
	.word	.LANCHOR1-(.LPIC791+8)
	.word	.LANCHOR3-(.LPIC796+8)
	.word	.LC97-(.LPIC797+8)
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3661
.LPIC798:
	add	r3, pc, r3
	ldr	ip, [r3, #496]
	cmp	r1, ip
	bcs	.L3658
	cmp	r0, #0
	beq	.L3659
	mov	ip, #104
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	and	lr, r2, #1
	mla	r3, ip, r1, r3
	str	r6, [sp, #8]
	cmp	lr, #0
	moveq	r1, #4
	movne	r1, #6
	moveq	ip, #0
	movne	ip, #2
	ldr	r4, [r3, #520]
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #160]
	cmp	r3, r1
	beq	.L3632
	ldr	r3, [r4, #72]
	str	r1, [r4, #160]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3632
	tst	r1, #2
	bne	.L3660
.L3640:
	ldrd	r4, [sp]
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3]
	b	smd_tiocmset(PLT)
.L3632:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3660:
	mov	r5, r0
	ldr	r0, [r3]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L3657
	ldr	r0, [r4, #68]
	blx	r3
.L3657:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #160]
	b	.L3640
.L3658:
	ldr	r3, .L3661+4
	mov	r2, r1
	ldr	r0, .L3661+8
.LPIC799:
	add	r3, pc, r3
.LPIC800:
	add	r0, pc, r0
	add	r1, r3, #1328
	b	printk(PLT)
.L3659:
	ldr	r1, .L3661+12
	ldr	r0, .L3661+16
.LPIC801:
	add	r1, pc, r1
.LPIC802:
	add	r0, pc, r0
	add	r1, r1, #1328
	b	printk(PLT)
.L3662:
	.align	2
.L3661:
	.word	.LANCHOR1-(.LPIC798+8)
	.word	.LANCHOR3-(.LPIC799+8)
	.word	.LC90-(.LPIC800+8)
	.word	.LANCHOR3-(.LPIC801+8)
	.word	.LC91-(.LPIC802+8)
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r7, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r7, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3664
	ldr	r10, .L3680
	sub	r2, r4, #20
	mov	r9, #0
	ldr	r3, [r4, #160]
	str	r2, [sp, #4]
.LPIC804:
	add	r10, pc, r10
.L3665:
	ldr	r2, [r10, #412]
	mov	r1, fp
	mov	r0, r6
	cmp	r2, r3
	bls	.L3666
	ldr	r5, [r4, #-20]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L3666
	ldr	r3, [r4, #-12]
	sub	r3, r3, #1
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	fp, r0
	bne	.L3679
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
	b	.L3665
.L3679:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #180]
	ldr	r3, [r4, #168]
	sub	r1, r1, #1
	sub	r2, r2, #1
	add	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #180]
	str	r3, [r4, #168]
	bl	dev_kfree_skb_any(PLT)
.L3666:
	mov	r1, fp
	mov	r0, r6
	ldr	r5, [r4, #-12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L3680+4
.LPIC805:
	add	r3, pc, r3
	ldr	r3, [r3, #416]
	cmp	r5, r3
	bcs	.L3663
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3671
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3671:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L3663:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3664:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3681:
	.align	2
.L3680:
	.word	.LANCHOR2-(.LPIC804+8)
	.word	.LANCHOR2-(.LPIC805+8)
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3685
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3685:
	sub	r0, r4, #196
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3689
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3689:
	sub	r0, r4, #152
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3694
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #316
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
.LPIC806:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3693
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3693:
	ldr	r1, .L3694+4
	mov	r2, r5
	ldr	r0, .L3694+8
.LPIC807:
	add	r1, pc, r1
.LPIC808:
	add	r0, pc, r0
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3695:
	.align	2
.L3694:
	.word	gbam_wake_cb-(.LPIC806+8)
	.word	gbam_stop-(.LPIC807+8)
	.word	gbam_start-(.LPIC808+8)
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3700
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #200
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
.LPIC809:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3699
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3699:
	ldr	r1, .L3700+4
	mov	r2, r5
	ldr	r0, .L3700+8
.LPIC810:
	add	r1, pc, r1
.LPIC811:
	add	r0, pc, r0
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3701:
	.align	2
.L3700:
	.word	bam_data_wake_cb-(.LPIC809+8)
	.word	bam_data_stop-(.LPIC810+8)
	.word	bam_data_start-(.LPIC811+8)
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L3703
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L3703
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L3703
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset(PLT)
	cmp	r0, #0
	bne	.L3704
.L3714:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L3737
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L3738
	ldr	r3, [r4, #12]
	add	r5, r4, #4
	mov	r0, r5
	ldr	r3, [r3, #88]
	str	r4, [r3]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3739
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3740
.L3710:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L3709:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3741
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3742
.L3713:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L3712:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L3743
.L3716:
	mov	r5, #0
.L3735:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3703:
	mov	r0, #0
	bl	usb_bam_a2_reset(PLT)
	cmp	r0, #0
	beq	.L3712
	ldr	r1, .L3744
	mov	r2, r0
	ldr	r0, .L3744+4
.LPIC824:
	add	r1, pc, r1
	add	r1, r1, #1344
.LPIC825:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3712
.L3743:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L3716
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb(PLT)
	b	.L3735
.L3737:
	ldr	r1, .L3744+8
	ldr	r3, [r4, #12]
	ldr	r0, .L3744+12
.LPIC812:
	add	r1, pc, r1
	add	r1, r1, #1344
	ldr	r2, [r3, #84]
	add	r1, r1, #4
.LPIC813:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3735
.L3704:
	ldr	r1, .L3744+16
	mov	r2, r0
	ldr	r0, .L3744+20
.LPIC826:
	add	r1, pc, r1
	add	r1, r1, #1344
.LPIC827:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3714
.L3739:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3744+24
	ldr	r0, .L3744+28
.LPIC816:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC817:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3709
.L3740:
	ldr	r1, .L3744+32
	mov	r2, r0
	ldr	r0, .L3744+36
.LPIC818:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC819:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3710
.L3741:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3744+40
	ldr	r0, .L3744+44
.LPIC820:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC821:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3712
.L3742:
	ldr	r1, .L3744+48
	mov	r2, r0
	ldr	r0, .L3744+52
.LPIC822:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC823:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3713
.L3738:
	ldr	r1, .L3744+56
	ldr	r3, [r4, #12]
	ldr	r0, .L3744+60
.LPIC814:
	add	r1, pc, r1
	add	r1, r1, #1344
	ldr	r2, [r3, #88]
.LPIC815:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L3735
.L3745:
	.align	2
.L3744:
	.word	.LANCHOR3-(.LPIC824+8)
	.word	.LC215-(.LPIC825+8)
	.word	.LANCHOR3-(.LPIC812+8)
	.word	.LC212-(.LPIC813+8)
	.word	.LANCHOR3-(.LPIC826+8)
	.word	.LC215-(.LPIC827+8)
	.word	.LANCHOR3-(.LPIC816+8)
	.word	.LC24-(.LPIC817+8)
	.word	.LANCHOR3-(.LPIC818+8)
	.word	.LC214-(.LPIC819+8)
	.word	.LANCHOR3-(.LPIC820+8)
	.word	.LC24-(.LPIC821+8)
	.word	.LANCHOR3-(.LPIC822+8)
	.word	.LC214-(.LPIC823+8)
	.word	.LANCHOR3-(.LPIC814+8)
	.word	.LC213-(.LPIC815+8)
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	str	lr, [sp, #4]
	bl	usb_bam_a2_reset(PLT)
	subs	r4, r0, #0
	bne	.L3750
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb(PLT)
.L3748:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3750:
	ldr	r2, .L3751
	mov	r3, r4
	ldr	r0, .L3751+4
.LPIC828:
	add	r2, pc, r2
	add	r2, r2, #1408
.LPIC830:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	b	.L3748
.L3752:
	.align	2
.L3751:
	.word	.LANCHOR3-(.LPIC828+8)
	.word	.LC216-(.LPIC830+8)
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3759
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
.LPIC839:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3756
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	bne	.L3754
	ldr	r0, .L3759+4
.LPIC832:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3756:
	mov	r4, #16
.L3754:
	ldr	r2, .L3759+8
	mov	r5, #0
	add	r3, r4, #44
	ldr	r1, .L3759+12
	add	r0, r4, #32
	str	r3, [r4, #44]
	ldr	r7, .L3759+16
	str	r3, [r4, #48]
.LPIC833:
	add	r2, pc, r2
	str	r5, [r4, #52]
.LPIC834:
	add	r1, pc, r1
	sub	r2, r2, #668
	str	r5, [r4, #16]
	str	r5, [r4, #20]
.LPIC835:
	add	r7, pc, r7
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r5, [r4, #8]
	str	r5, [r4, #12]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3759+20
	str	r4, [r7, #1212]
.LPIC836:
	add	r0, pc, r0
	add	r0, r0, #96
	bl	misc_register(PLT)
	subs	r6, r0, #0
	beq	.L3757
	ldr	r0, .L3759+24
.LPIC837:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	str	r5, [r7, #1212]
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3757:
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3760:
	.align	2
.L3759:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC839+8))
	.word	.LC217-(.LPIC832+8)
	.word	.LANCHOR4-(.LPIC833+8)
	.word	.LC218-(.LPIC834+8)
	.word	.LANCHOR1-(.LPIC835+8)
	.word	.LANCHOR0-(.LPIC836+8)
	.word	.LC219-(.LPIC837+8)
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3772
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC851:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3765
	mov	r2, #1792
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3770
.L3762:
	ldr	r5, .L3772+4
	mov	r7, #0
	add	r0, r4, #1664
	ldr	r1, .L3772+8
	mov	r6, #65024
	add	r9, r4, #1776
	str	r7, [r4, #88]
	ldr	r8, .L3772+12
	movt	r6, 65535
.LPIC841:
	add	r5, pc, r5
	sub	r5, r5, #668
.LPIC842:
	add	r1, pc, r1
	mov	r2, r5
.LPIC845:
	add	r8, pc, r8
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3772+16
	add	r0, r4, #1664
	mov	r2, r5
	add	r0, r0, #12
	add	r5, r4, #1760
	add	r5, r5, #8
.LPIC844:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r2, r4, #1648
	add	lr, r4, #1776
	str	r5, [r4, #1768]
	add	ip, r4, #1696
	add	lr, lr, #8
	str	r5, [r4, #1772]
	add	ip, ip, #8
	add	r2, r2, #8
	str	r7, [r4, #1652]
	add	r0, r4, #1712
	mov	r3, r7
	str	lr, [r4, #1784]
	str	r2, [r4, #1656]
	mov	r1, r7
	add	r0, r0, #4
	str	r2, [r4, #1660]
	mov	r2, r7
	str	lr, [r4, #1788]
	str	ip, [r4, #1704]
	str	ip, [r4, #1708]
	str	r6, [r4, #1700]
	str	r8, [r4, #1712]
	str	r9, [r4, #1776]
	str	r9, [r4, #1780]
	bl	init_timer_key(PLT)
	ldr	r2, .L3772+20
	add	lr, r4, #1696
	add	r3, r4, #1744
	ldr	ip, .L3772+24
	add	r3, r3, #12
	add	lr, lr, #4
	ldr	r0, .L3772+28
	str	r6, [r4, #1752]
	ldr	r1, .L3772+32
	str	lr, [r4, #1736]
.LPIC850:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [r4, #1756]
.LPIC846:
	add	ip, pc, ip
	str	r3, [r4, #1760]
.LPIC848:
	add	r0, pc, r0
.LPIC847:
	add	r1, pc, r1
	str	ip, [r4, #1764]
	add	r0, r0, #132
	str	r2, [r4, #1732]
	str	r4, [r1, #2500]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3771
.L3763:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3765:
	mov	r4, #16
	b	.L3762
.L3770:
	mvn	r0, #11
	b	.L3763
.L3771:
.L3764:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3772+36
.LPIC849:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3763
.L3773:
	.align	2
.L3772:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC851+8))
	.word	.LANCHOR4-(.LPIC841+8)
	.word	.LC220-(.LPIC842+8)
	.word	acc_start_work-(.LPIC845+8)
	.word	.LC221-(.LPIC844+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC850+8))
	.word	acc_hid_work-(.LPIC846+8)
	.word	.LANCHOR0-(.LPIC848+8)
	.word	.LANCHOR1-(.LPIC847+8)
	.word	.LC222-(.LPIC849+8)
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3783
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC859:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3775
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L3778
.L3777:
	ldr	r4, .L3783+4
	ldr	r0, .L3783+8
.LPIC853:
	add	r4, pc, r4
	add	r4, r4, #1440
.LPIC854:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	ldr	r0, .L3783+12
	mov	r2, #0
	ldr	r3, .L3783+16
.LPIC856:
	add	r0, pc, r0
.LPIC855:
	add	r3, pc, r3
	add	r0, r0, #168
	str	r2, [r3, #2504]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3782
.L3780:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3775:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L3777
.L3778:
	mvn	r0, #11
	b	.L3780
.L3782:
	ldr	r0, .L3783+20
	mov	r1, r4
.LPIC858:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3780
.L3784:
	.align	2
.L3783:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC859+8))
	.word	.LANCHOR3-(.LPIC853+8)
	.word	.LC223-(.LPIC854+8)
	.word	.LANCHOR0-(.LPIC856+8)
	.word	.LANCHOR1-(.LPIC855+8)
	.word	.LC224-(.LPIC858+8)
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3798
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
.LPIC875:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L3790
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3796
.L3786:
	ldr	r5, .L3798+4
	mov	r6, #0
	add	r0, r4, #132
	ldr	r1, .L3798+8
	str	r6, [r4, #88]
.LPIC861:
	add	r5, pc, r5
	sub	r5, r5, #668
.LPIC862:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3798+12
	mov	r2, r5
	add	r0, r4, #144
.LPIC864:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3798+16
	mov	r2, r5
	add	r0, r4, #156
	add	r5, r4, #116
.LPIC866:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	ip, .L3798+20
	add	lr, r4, #124
	mov	r1, #10
	ldr	r0, .L3798+24
	str	r6, [r4, #108]
	mov	r3, r6
	str	r6, [r4, #112]
	movt	r1, 2
	mov	r2, #1
	str	r5, [r4, #116]
.LPIC868:
	add	ip, pc, ip
	str	r5, [r4, #120]
	str	lr, [r4, #124]
.LPIC867:
	add	r0, pc, r0
	str	lr, [r4, #128]
	stmia	sp, {r6, ip}
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r6
	str	r0, [r4, #180]
	beq	.L3792
	ldr	r1, .L3798+28
	mov	ip, #65024
	add	r5, r4, #188
	ldr	r2, .L3798+32
	movt	ip, 65535
	add	lr, r4, #204
	ldr	r0, .L3798+36
	str	r5, [r4, #188]
	ldr	r3, .L3798+40
	str	r5, [r4, #192]
.LPIC869:
	add	r1, pc, r1
	str	ip, [r4, #184]
.LPIC870:
	add	r2, pc, r2
	str	ip, [r4, #200]
.LPIC872:
	add	r0, pc, r0
	str	r1, [r4, #196]
.LPIC871:
	add	r3, pc, r3
	str	r2, [r4, #212]
	add	r0, r0, #204
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	r4, [r3, #2508]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3797
.L3787:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3790:
	mov	r4, #16
	b	.L3786
.L3796:
	mvn	r0, #11
	b	.L3787
.L3797:
.L3789:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue(PLT)
.L3788:
	ldr	r3, .L3798+44
	mov	r2, #0
	mov	r0, r4
.LPIC873:
	add	r3, pc, r3
	str	r2, [r3, #2508]
	bl	kfree(PLT)
	ldr	r0, .L3798+48
.LPIC874:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3787
.L3792:
	mvn	r5, #11
	b	.L3788
.L3799:
	.align	2
.L3798:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC875+8))
	.word	.LANCHOR4-(.LPIC861+8)
	.word	.LC220-(.LPIC862+8)
	.word	.LC221-(.LPIC864+8)
	.word	.LC225-(.LPIC866+8)
	.word	.LC226-(.LPIC868+8)
	.word	.LC208-(.LPIC867+8)
	.word	send_file_work-(.LPIC869+8)
	.word	receive_file_work-(.LPIC870+8)
	.word	.LANCHOR0-(.LPIC872+8)
	.word	.LANCHOR1-(.LPIC871+8)
	.word	.LANCHOR1-(.LPIC873+8)
	.word	.LC227-(.LPIC874+8)
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3816
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC884:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, #24]
	cmp	r0, #0
	beq	.L3801
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3805
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3807
.L3815:
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3805
.L3804:
	ldr	r5, .L3816+4
	mov	r6, #0
	add	r0, r4, #128
	ldr	r1, .L3816+8
	str	r6, [r4, #88]
.LPIC877:
	add	r5, pc, r5
	sub	r7, r5, #668
.LPIC878:
	add	r1, pc, r1
	mov	r2, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3816+12
	mov	r2, r7
	add	r0, r4, #140
.LPIC880:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3816+16
	add	r3, r4, #120
	mov	r2, #1
	str	r6, [r4, #116]
	str	r6, [r4, #108]
	str	r6, [r4, #112]
.LPIC882:
	add	r0, pc, r0
	strb	r2, [r4, #161]
	add	r0, r0, #240
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	str	r4, [r5, #-1468]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3814
.L3812:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3801:
	mov	r3, #16
	str	r3, [r5, #4]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	bne	.L3815
.L3807:
	mov	r4, #16
	b	.L3804
.L3805:
	mvn	r0, #11
	b	.L3812
.L3814:
.L3806:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3816+20
.LPIC883:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3812
.L3817:
	.align	2
.L3816:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC884+8))
	.word	.LANCHOR4-(.LPIC877+8)
	.word	.LC220-(.LPIC878+8)
	.word	.LC221-(.LPIC880+8)
	.word	.LANCHOR0-(.LPIC882+8)
	.word	.LC228-(.LPIC883+8)
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L3839
	strd	r6, [sp, #8]
	ldr	r7, .L3839+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC885:
	add	r7, pc, r7
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3826
	mov	r2, #428
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3836
.L3819:
	ldr	lr, .L3839+8
	mov	r5, #0
	mov	r1, #10
	ldr	ip, .L3839+12
	mov	r3, r5
	movt	r1, 2
	ldr	r0, .L3839+16
	str	r5, [sp]
	mov	r2, #1
.LPIC888:
	add	lr, pc, lr
.LPIC886:
	add	ip, pc, ip
	str	lr, [sp, #4]
.LPIC887:
	add	r0, pc, r0
	str	r4, [ip, #2492]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L3828
	ldr	r3, .L3839+20
	mov	r9, #65024
	add	ip, r4, #388
	ldr	r1, .L3839+24
	movt	r9, 65535
	str	r5, [r4, #368]
	str	ip, [r4, #388]
	mov	r2, r4
	add	r0, r4, #152
	str	ip, [r4, #392]
	ldr	r6, .L3839+28
	add	r10, r4, #120
.LPIC889:
	add	r3, pc, r3
	str	r5, [r4, #376]
	add	r8, r4, #104
.LPIC890:
	add	r1, pc, r1
	str	r5, [r4, #372]
	add	fp, r4, #112
	str	r3, [r4, #396]
	str	r5, [r4, #176]
.LPIC892:
	add	r6, pc, r6
	str	r9, [r4, #384]
	sub	r6, r6, #668
	bl	tasklet_init(PLT)
	ldr	r1, .L3839+32
	mov	r2, r4
	add	r0, r4, #132
.LPIC891:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L3839+36
	mov	r2, r6
	add	r0, r4, #180
.LPIC893:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3839+40
	str	r10, [r4, #120]
	add	lr, r4, #244
	ldr	r0, .L3839+44
	str	r10, [r4, #124]
	add	ip, r4, #260
	ldr	r10, .L3839+48
	mov	r3, r5
	mov	r2, r5
	str	r9, [r4, #240]
.LPIC894:
	add	r1, pc, r1
	str	r9, [r4, #256]
	add	r9, r4, #256
.LPIC895:
	add	r0, pc, r0
	str	r8, [r4, #104]
	str	r1, [r4, #252]
	mov	r1, r5
	str	r0, [r4, #268]
	add	r0, r4, #272
	str	r8, [r4, #108]
	add	r8, r4, #216
	str	fp, [r4, #112]
	str	fp, [r4, #116]
	add	fp, r4, #340
	str	lr, [r4, #244]
	str	lr, [r4, #248]
	str	ip, [r4, #260]
	str	ip, [r4, #264]
	bl	init_timer_key(PLT)
	mov	r2, r6
	ldr	r1, .L3839+52
	add	lr, r4, #200
	ldr	r6, [r7, r10]
	add	ip, r4, #224
	add	r3, r4, #316
	str	r5, [r4, #212]
	add	r0, r4, #324
	str	r5, [r4, #208]
	str	r5, [r4, #236]
.LPIC897:
	add	r1, pc, r1
	str	r5, [r4, #232]
	add	r5, r4, #192
	str	lr, [r4, #200]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	lr, [r4, #204]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #316]
	str	r3, [r4, #320]
	str	r6, [r4, #288]
	str	r9, [r4, #292]
	str	r8, [r4, #216]
	str	r8, [r4, #220]
	str	fp, [r4, #340]
	str	fp, [r4, #344]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3839+56
.LPIC898:
	add	r0, pc, r0
	add	r0, r0, #276
	bl	misc_register(PLT)
	subs	r5, r0, #0
	bne	.L3837
	ldr	r0, .L3839+60
	mov	r1, r5
.LPIC902:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L3839+64
	cmp	r0, #0
	ldr	r6, [r7, r3]
	str	r0, [r6]
	beq	.L3824
	cmn	r0, #4096
	bhi	.L3824
	ldr	ip, .L3839+68
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L3839+72
	mov	r1, #292
	ldr	ip, [r7, ip]
.LPIC901:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	subs	r5, r0, #0
	beq	.L3838
.L3824:
	mov	r0, #0
.L3832:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3826:
	mov	r4, #16
	b	.L3819
.L3828:
	mvn	r5, #11
.L3821:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L3832
.L3838:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	str	r5, [r6]
	mov	r0, r5
	b	.L3832
.L3836:
	mvn	r0, #11
	b	.L3832
.L3837:
	ldr	r1, .L3839+76
	ldr	r0, .L3839+80
.LPIC899:
	add	r1, pc, r1
	add	r1, r1, #1456
.LPIC900:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #380]
	bl	destroy_workqueue(PLT)
	b	.L3821
.L3840:
	.align	2
.L3839:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC885+8)
	.word	.LC229-(.LPIC888+8)
	.word	.LANCHOR1-(.LPIC886+8)
	.word	.LC208-(.LPIC887+8)
	.word	rmnet_mux_disconnect_work-(.LPIC889+8)
	.word	rmnet_mux_smd_data_rx_tlet-(.LPIC890+8)
	.word	.LANCHOR4-(.LPIC892+8)
	.word	rmnet_mux_smd_data_tx_tlet-(.LPIC891+8)
	.word	.LC230-(.LPIC893+8)
	.word	rmnet_mux_sdio_data_rx_work-(.LPIC894+8)
	.word	rmnet_mux_open_sdio_work-(.LPIC895+8)
	.word	delayed_work_timer_fn(GOT)
	.word	.LC231-(.LPIC897+8)
	.word	.LANCHOR0-(.LPIC898+8)
	.word	.LC233-(.LPIC902+8)
	.word	dent_rmnet_mux(GOT)
	.word	rmnet_mux_svlte_debug_stats_ops(GOT)
	.word	.LC139-(.LPIC901+8)
	.word	.LANCHOR3-(.LPIC899+8)
	.word	.LC232-(.LPIC900+8)
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3843
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L3843+4
.LPIC903:
	add	r0, pc, r0
	add	r0, r0, #96
.LPIC904:
	add	r4, pc, r4
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #1212]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #1212]
	ldmfd	sp!, {r4, pc}
.L3844:
	.align	2
.L3843:
	.word	.LANCHOR0-(.LPIC903+8)
	.word	.LANCHOR1-(.LPIC904+8)
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3847
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3847+4
	str	lr, [sp, #4]
.LPIC906:
	add	r0, pc, r0
.LPIC907:
	add	r4, pc, r4
	add	r0, r0, #132
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #2500]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #2500]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3848:
	.align	2
.L3847:
	.word	.LANCHOR0-(.LPIC906+8)
	.word	.LANCHOR1-(.LPIC907+8)
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3851
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r4, .L3851+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC909:
	add	r3, pc, r3
	add	r0, r3, #312
.LPIC910:
	add	r4, pc, r4
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-668]
	bl	kfree(PLT)
	ldr	r0, [r5, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #-668]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3852:
	.align	2
.L3851:
	.word	.LANCHOR0-(.LPIC909+8)
	.word	.LANCHOR4-(.LPIC910+8)
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3855
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L3855+4
	str	lr, [sp, #4]
.LPIC912:
	add	r1, pc, r1
	add	r1, r1, #1472
.LPIC913:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L3855+8
.LPIC914:
	add	r0, pc, r0
	add	r0, r0, #168
	bl	misc_deregister(PLT)
	ldr	r3, .L3855+12
	mov	r2, #0
	ldr	r0, [r4, #4]
.LPIC916:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [r3]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L3856:
	.align	2
.L3855:
	.word	.LANCHOR3-(.LPIC912+8)
	.word	.LC234-(.LPIC913+8)
	.word	.LANCHOR0-(.LPIC914+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC916+8))
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L3860
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC917:
	add	r5, pc, r5
	ldr	r4, [r5, #2508]
	cmp	r4, #0
	beq	.L3857
	ldr	r0, .L3860+4
.LPIC918:
	add	r0, pc, r0
	add	r0, r0, #204
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #180]
	bl	destroy_workqueue(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #2508]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3857:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3861:
	.align	2
.L3860:
	.word	.LANCHOR1-(.LPIC917+8)
	.word	.LANCHOR0-(.LPIC918+8)
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3864
	str	lr, [sp, #4]
.LPIC920:
	add	r4, pc, r4
	add	r0, r4, #348
	bl	misc_deregister(PLT)
	add	r0, r4, #384
	bl	misc_deregister(PLT)
	ldr	r3, .L3864+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC922:
	add	r3, pc, r3
	ldr	r0, [r3, #2400]
	b	kfree(PLT)
.L3865:
	.align	2
.L3864:
	.word	.LANCHOR0-(.LPIC920+8)
	.word	.LANCHOR1-(.LPIC922+8)
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3868
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r4, .L3868+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC923:
	add	r3, pc, r3
.LPIC924:
	add	r4, pc, r4
	add	r0, r3, #240
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-1468]
	bl	kfree(PLT)
	mov	r3, #0
	ldr	r0, [r5, #4]
	str	r3, [r4, #-1468]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3869:
	.align	2
.L3868:
	.word	.LANCHOR0-(.LPIC923+8)
	.word	.LANCHOR4-(.LPIC924+8)
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3872
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r2, .L3872+4
	str	lr, [sp, #4]
.LPIC929:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC926:
	add	r2, pc, r2
	ldr	r4, [r2, #2492]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r0, .L3872+8
.LPIC928:
	add	r0, pc, r0
	add	r0, r0, #276
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #128]
	bl	smd_close(PLT)
	ldr	r0, [r4, #380]
	bl	destroy_workqueue(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L3873:
	.align	2
.L3872:
	.word	dent_rmnet_mux(GOT_PREL)+(.-(.LPIC929+8))
	.word	.LANCHOR1-(.LPIC926+8)
	.word	.LANCHOR0-(.LPIC928+8)
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3879
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L3879+4
	str	lr, [sp, #4]
	ldr	r4, .L3879+8
.LPIC930:
	add	r1, pc, r1
.LPIC931:
	add	r0, pc, r0
	add	r1, r1, #1504
.LPIC932:
	add	r4, pc, r4
	bl	printk(PLT)
	ldr	r3, [r4, #-664]
	cmp	r3, #0
	beq	.L3876
	ldr	r0, [r4, #-660]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #-660]
.L3876:
	ldr	r0, .L3879+12
	mov	r4, #0
	ldr	r3, .L3879+16
.LPIC934:
	add	r0, pc, r0
.LPIC933:
	add	r3, pc, r3
	add	r0, r0, #420
	str	r4, [r3, #-664]
	bl	misc_deregister(PLT)
	ldr	r3, .L3879+20
.LPIC935:
	add	r3, pc, r3
	str	r4, [r3, #2584]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3880:
	.align	2
.L3879:
	.word	.LANCHOR3-(.LPIC930+8)
	.word	.LC235-(.LPIC931+8)
	.word	.LANCHOR4-(.LPIC932+8)
	.word	.LANCHOR0-(.LPIC934+8)
	.word	.LANCHOR4-(.LPIC933+8)
	.word	.LANCHOR1-(.LPIC935+8)
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3881
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3881
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3881
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete(PLT)
.L3881:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L3893
	cmp	r1, #0
	mov	r9, r1
	beq	.L3939
.L3895:
	ldr	r3, .L3944
	mov	r2, #0
	add	fp, r10, #228
	mov	r1, r2
	add	r7, r10, #100
	add	r8, r10, #292
	add	r6, sp, #15
	str	r2, [r9, #4]
.LPIC939:
	add	r3, pc, r3
	str	r3, [r9, #28]
.L3927:
	ldr	r4, [fp, #4]!
	ldr	r5, [r7, #4]!
	cmp	r4, #0
	beq	.L3896
	ldr	r3, [r4, #4]
	cmp	r3, #0
	cmpne	r5, #0
	beq	.L3896
	ldr	r2, [r10, #336]
	add	r3, r1, #3
	cmp	r2, r3
	bls	.L3896
	str	fp, [sp]
.L3926:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r5
	bl	snd_rawmidi_transmit(PLT)
	cmp	r0, #1
	bne	.L3940
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r2, [sp, #15]	@ zero_extendqisi2
	mov	r3, r3, asl #4
	cmp	r2, #247
	uxtb	r3, r3
	bhi	.L3941
	cmp	r2, #239
	bls	.L3900
	sub	r1, r2, #241
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L3901
.L3903:
	b	.L3902
	b	.L3904
	b	.L3902
	b	.L3908
	b	.L3908
	b	.L3906
	b	.L3907
	.p2align 1
.L3910:
	ldr	r1, [r9, #4]
	orr	r3, r3, #7
	mvn	fp, #8
	ldr	r2, [r9]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r1, #4
	strb	r3, [r2, r1]
	add	r2, r2, r1
	strb	lr, [r2, #1]
	strb	ip, [r2, #2]
	strb	fp, [r2, #3]
	str	r0, [r9, #4]
.L3908:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
.L3899:
	ldr	r3, [r10, #336]
	add	r2, r1, #3
	cmp	r2, r3
	bcc	.L3926
	ldr	fp, [sp]
.L3896:
	cmp	fp, r8
	bne	.L3927
	cmp	r1, #0
	bne	.L3942
	ldr	r0, [r9]
	bl	kfree(PLT)
	ldr	r0, [sp, #4]
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L3893:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3904:
	mvn	r2, #13
	mov	r3, #2
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3902:
	mov	r3, #1
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3901:
	mvn	r2, #15
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3906:
	ldr	r0, [r9, #4]
	orr	r3, r3, #5
	mov	r1, #0
	ldr	r2, [r9]
	mvn	lr, #9
	add	ip, r0, #4
	strb	r3, [r2, r0]
	add	r3, r2, r0
	strb	lr, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	str	ip, [r9, #4]
	strb	r1, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3941:
	ldr	ip, [r9, #4]
	orr	r3, r3, #15
	mov	lr, #0
	ldr	r0, [r9]
	add	r1, ip, #4
	strb	r3, [r0, ip]
	add	r3, r0, ip
	strb	r2, [r3, #1]
	strb	lr, [r3, #2]
	strb	lr, [r3, #3]
	str	r1, [r9, #4]
	b	.L3899
.L3900:
	tst	r2, #128
	bne	.L3943
	ldrb	r1, [r4, #9]	@ zero_extendqisi2
	sub	r1, r1, #1
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L3938
.L3916:
	b	.L3915
	b	.L3917
	b	.L3918
	b	.L3919
	b	.L3920
	b	.L3921
	.p2align 1
.L3921:
	ldr	r0, [r9, #4]
	orr	r3, r3, #4
	ldr	r1, [r9]
	ldrb	fp, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	add	ip, r0, #4
	strb	r3, [r1, r0]
	add	r1, r1, r0
	mov	r3, #4
	strb	fp, [r1, #1]
	strb	lr, [r1, #2]
	strb	r2, [r1, #3]
	str	ip, [r9, #4]
	strb	r3, [r4, #9]
.L3938:
	ldr	r1, [r9, #4]
	b	.L3899
.L3920:
	mov	r3, #6
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3919:
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3918:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	fp, [r4, #11]	@ zero_extendqisi2
	cmp	lr, #239
	movls	r1, #2
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #3
	strb	r1, [r4, #9]
	ldmia	r9, {r0, ip}
	strb	r3, [r0, ip]
	add	r1, ip, #4
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	fp, [r0, #2]
	strb	r2, [r0, #3]
	str	r1, [r9, #4]
	b	.L3899
.L3917:
	mov	r3, #3
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3915:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	fp, #0
	cmp	lr, #239
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #2
	strhib	r1, [r4, #9]
	ldr	ip, [r9, #4]
	ldr	r0, [r9]
	add	r1, ip, #4
	strb	r3, [r0, ip]
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	r2, [r0, #2]
	strb	fp, [r0, #3]
	str	r1, [r9, #4]
	b	.L3899
.L3943:
	add	r3, r2, #64
	strb	r2, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strlsb	r0, [r4, #9]
	strhib	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3899
.L3940:
	mov	r3, #0
	ldr	fp, [sp]
	str	r3, [r4, #4]
	ldr	r1, [r9, #4]
	b	.L3896
.L3907:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L3909
	cmp	r2, #6
	beq	.L3910
	cmp	r2, #4
	bne	.L3908
	ldr	r1, [r9, #4]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r2, [r9]
	mvn	lr, #8
	add	ip, r1, #4
	strb	r3, [r2, r1]
	add	r3, r2, r1
	strb	lr, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	ip, [r9, #4]
	b	.L3908
.L3909:
	ldr	r1, [r9, #4]
	orr	r3, r3, #6
	mvn	fp, #8
	ldr	r2, [r9]
	mov	ip, #0
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	add	r0, r1, #4
	strb	r3, [r2, r1]
	add	r2, r2, r1
	strb	lr, [r2, #1]
	strb	fp, [r2, #2]
	strb	ip, [r2, #3]
	str	r0, [r9, #4]
	b	.L3908
.L3942:
	ldr	r0, [sp, #4]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	b	.L3893
.L3939:
	ldr	r1, [r0, #336]
	mov	r0, r3
	bl	midi_alloc_ep_req(PLT)
	subs	r9, r0, #0
	bne	.L3895
	ldr	r0, [r10, #84]
	ldr	r1, .L3944+4
	add	r0, r0, #32
.LPIC938:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L3893
.L3945:
	.align	2
.L3944:
	.word	f_midi_complete-(.LPIC939+8)
	.word	.LC236-(.LPIC938+8)
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit(PLT)
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r3, #58
	ldr	r3, [r2, r3, asl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #304
	mov	r0, #0
	str	lr, [sp, #4]
	add	r4, r2, #300
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L3956
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3956:
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	__tasklet_hi_schedule(PLT)
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.type	gen_ndis_query_resp, %function
gen_ndis_query_resp:
	.fnstart
	@ args = 4, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #188
	sub	sp, sp, #188
	ldr	r7, [sp, #224]
	cmp	r7, #0
	beq	.L4002
	ldr	r6, [r7, #8]
	cmp	r6, #0
	beq	.L4002
	ldr	r4, .L4053
	mov	r10, r0, asl #2
	mov	r5, r0, asl #6
	mov	r3, #16
	rsb	r2, r10, r5
	mov	r9, r1
	mov	r1, sp
.LPIC940:
	add	r4, pc, r4
	str	r3, [r6, #20]
	add	r8, r6, #24
	add	r4, r4, r2
	sub	fp, r4, #628
	ldr	r0, [fp, #4]
	bl	dev_get_stats(PLT)
	movw	r3, #278
	movt	r3, 1
	cmp	r9, r3
	beq	.L3991
	bhi	.L3961
	movw	r3, #266
	movt	r3, 1
	cmp	r9, r3
	beq	.L3962
	bls	.L4047
	movw	r3, #270
	movt	r3, 1
	cmp	r9, r3
	beq	.L3971
	bhi	.L3972
	mov	r3, #268
	movt	r3, 1
	cmp	r9, r3
	beq	.L3973
	bhi	.L4048
	ldr	r3, .L4053+4
	rsb	r0, r10, r5
.LPIC948:
	add	r3, pc, r3
	add	r0, r3, r0
	ldr	r3, [r0, #-624]
	cmp	r3, #0
	bne	.L4040
.L3997:
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	mov	r4, #0
	b	.L4000
.L3961:
	movw	r3, #257
	movt	r3, 257
	cmp	r9, r3
	beq	.L3979
	movw	r3, #257
	movt	r3, 257
	cmp	r9, r3
	bls	.L4049
	movw	r3, #261
	movt	r3, 257
	cmp	r9, r3
	beq	.L3994
	bhi	.L3989
	movw	r3, #259
	movt	r3, 257
	cmp	r9, r3
	beq	.L3990
	bhi	.L3991
	ldr	r3, .L4053+8
	rsb	r0, r10, r5
.LPIC955:
	add	r3, pc, r3
	add	r0, r3, r0
	ldr	r3, [r0, #-624]
	cmp	r3, #0
	beq	.L3997
	ldr	r2, [r0, #-632]
.L4041:
	ldr	r1, [r2]	@ unaligned
	mov	r3, #30
	mov	r4, #6
	str	r1, [r6, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L3996
.L4047:
	movw	r3, #259
	movt	r3, 1
	cmp	r9, r3
	beq	.L3964
	bls	.L4050
	movw	r3, #262
	movt	r3, 1
	cmp	r9, r3
	beq	.L3962
	movw	r3, #263
	movt	r3, 1
	cmp	r9, r3
	beq	.L3969
	mov	r3, #260
	movt	r3, 1
	cmp	r9, r3
	bne	.L3959
	ldr	r2, .L4053+12
	rsb	r0, r10, r5
	mov	r3, #28
	mov	r4, #4
.LPIC943:
	add	r2, pc, r2
	add	r0, r2, r0
	ldr	r2, [r0, #-644]
	str	r2, [r6, #24]
	b	.L3996
.L4049:
	movw	r3, #258
	movt	r3, 2
	cmp	r9, r3
	beq	.L3981
	bls	.L4051
	mov	r3, #260
	movt	r3, 2
	cmp	r9, r3
	beq	.L3985
	bcc	.L3986
	movw	r3, #261
	movt	r3, 2
	cmp	r9, r3
	bne	.L3959
	cmp	r0, #0
	beq	.L3997
	ldr	r2, [r0, #48]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3972:
	movw	r3, #275
	movt	r3, 1
	cmp	r9, r3
	beq	.L3976
	mov	r3, #276
	movt	r3, 1
	cmp	r9, r3
	beq	.L3977
	movw	r3, #273
	movt	r3, 1
	cmp	r9, r3
	bne	.L3959
	movw	r2, #1558
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3989:
	movw	r3, #258
	movt	r3, 258
	cmp	r9, r3
	beq	.L3994
	movw	r3, #259
	movt	r3, 258
	cmp	r9, r3
	beq	.L3994
	movw	r3, #257
	movt	r3, 258
	cmp	r9, r3
	bne	.L3959
	cmp	r0, #0
	beq	.L3997
	ldr	r2, [r0, #104]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L4051:
	movw	r3, #514
	movt	r3, 1
	cmp	r9, r3
	bne	.L4052
.L3994:
	mov	r2, #0
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
.L3996:
	mov	r0, #0
.L4000:
	str	r4, [r6, #16]
	str	r3, [r7, #12]
	str	r3, [r6, #4]
.L4038:
	add	sp, sp, #188
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3991:
	mov	r2, #1
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L4050:
	movw	r3, #257
	movt	r3, 1
	cmp	r9, r3
	beq	.L3966
	movw	r3, #258
	movt	r3, 1
	cmp	r9, r3
	beq	.L3994
.L3959:
	ldr	r1, .L4053+16
	mov	r2, r9
	ldr	r0, .L4053+20
.LPIC957:
	add	r1, pc, r1
	add	r1, r1, #1632
.LPIC958:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3997
.L3962:
	ldr	r3, [fp, #4]
	cmp	r3, #0
	beq	.L3997
.L4040:
	ldr	r2, [r3, #356]
	mov	r4, #4
	mov	r3, #28
	str	r2, [r6, #24]
	b	.L3996
.L4052:
	movw	r3, #257
	movt	r3, 2
	cmp	r9, r3
	bne	.L3959
	cmp	r0, #0
	beq	.L3997
	ldr	r1, [r0, #8]
	mov	r3, #28
	mov	r4, #4
	ldr	r2, [r0, #40]
	ldr	r0, [r0, #56]
	rsb	r2, r2, r1
	rsb	r2, r0, r2
	str	r2, [r6, #24]
	b	.L3996
.L3966:
	ldr	r1, .L4053+24
	mov	r2, #112
	mov	r0, r8
	mov	r4, r2
.LPIC941:
	add	r1, pc, r1
	add	r1, r1, #1520
	bl	memcpy(PLT)
	mov	r3, #136
	b	.L3996
.L3964:
	ldr	r2, [r4, #-644]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L4048:
	ldr	r3, .L4053+28
	rsb	r0, r10, r5
.LPIC950:
	add	r3, pc, r3
	add	r0, r3, r0
	ldr	r5, [r0, #-612]
	cmp	r5, #0
	beq	.L3999
	mov	r0, r5
	bl	strlen(PLT)
	mov	r4, r0
	mov	r2, r0
	mov	r1, r5
	mov	r0, r8
	bl	memcpy(PLT)
	add	r3, r4, #24
	b	.L3996
.L3981:
	cmp	r0, #0
	beq	.L3997
	ldr	r1, [r0]
	mov	r3, #28
	mov	r4, #4
	ldr	r2, [r0, #32]
	ldr	r0, [r0, #48]
	rsb	r2, r2, r1
	rsb	r2, r0, r2
	str	r2, [r6, #24]
	b	.L3996
.L3969:
	ldr	r3, .L4053+32
	rsb	r0, r10, r5
.LPIC945:
	add	r3, pc, r3
	add	r0, r3, r0
	ldr	r3, [r0, #-636]
	cmp	r3, #1
	beq	.L3994
	ldr	r2, [r0, #-640]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3977:
	ldr	r2, .L4053+36
	rsb	r0, r10, r5
	mov	r3, #28
	mov	r4, #4
.LPIC952:
	add	r2, pc, r2
	add	r0, r2, r0
	ldr	r2, [r0, #-636]
	str	r2, [r6, #24]
	b	.L3996
.L3986:
	cmp	r0, #0
	beq	.L3997
	ldr	r2, [r0, #40]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3985:
	cmp	r0, #0
	beq	.L3997
	ldr	r2, [r0, #32]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3976:
	mov	r2, #18
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3990:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3973:
	ldr	r2, [r4, #-620]
	mov	r3, #28
	mov	r4, #4
	str	r2, [r6, #24]
	b	.L3996
.L3979:
	ldr	r3, [fp, #4]
	cmp	r3, #0
	beq	.L3997
	ldr	r2, [r4, #-632]
	b	.L4041
.L3971:
	ldr	r2, [r4, #-628]
	mov	r3, #28
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r6, #24]
	b	.L3996
.L4002:
	mvn	r0, #11
	b	.L4038
.L3999:
	str	r5, [r6, #24]
	mov	r3, #28
	mov	r4, #4
	b	.L3996
.L4054:
	.align	2
.L4053:
	.word	.LANCHOR4-(.LPIC940+8)
	.word	.LANCHOR4-(.LPIC948+8)
	.word	.LANCHOR4-(.LPIC955+8)
	.word	.LANCHOR4-(.LPIC943+8)
	.word	.LANCHOR3-(.LPIC957+8)
	.word	.LC237-(.LPIC958+8)
	.word	.LANCHOR3-(.LPIC941+8)
	.word	.LANCHOR4-(.LPIC950+8)
	.word	.LANCHOR4-(.LPIC945+8)
	.word	.LANCHOR4-(.LPIC952+8)
	.fnend
	.size	gen_ndis_query_resp, .-gen_ndis_query_resp
	.align	2
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4095
	ldmib	r4, {r2, r7}
	cmp	r2, #0
	beq	.L4095
	ldr	r3, [r1, #44]
	mov	r5, r1
	cmn	r3, #104
	beq	.L4077
	cmp	r3, #0
	beq	.L4060
	cmn	r3, #108
	beq	.L4077
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r1, [r4, #8]
.L4059:
	ldr	r3, [r1, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #236]
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	ldr	r1, [r4, #24]
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4076
	cmp	r9, #0
	beq	.L4096
	ldr	r0, [r4, #48]
	cmp	r0, #0
	bne	.L4075
.L4076:
	mov	r3, #0
	str	r3, [r5]
.L4071:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
.L4070:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #164]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L4097
.L4055:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4060:
	ldrb	r3, [r1, #26]	@ zero_extendqisi2
	ldr	r2, [r1, #4]
	tst	r3, #2
	ldr	r3, [r7, #244]
	add	r3, r3, r2
	subeq	r3, r3, #1
	str	r3, [r7, #244]
	ldr	r1, [r4, #8]
	b	.L4059
.L4075:
	movw	r1, #32800
	bl	__kmalloc(PLT)
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
	b	.L4071
.L4097:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L4055
	ldr	r0, [r4, #4]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule(PLT)
.L4077:
	mov	r1, r7
	b	.L4059
.L4095:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L4096:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	ldr	r3, [r4, #4]
	cmp	r8, r5
	ldr	r9, [r3, #88]
	beq	.L4094
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L4065
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L4079
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L4098
.L4079:
	mov	r1, #1
.L4066:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L4067
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4067
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L4067
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L4067:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r2, #32
	sub	r1, r5, #36
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L4099
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L4100
.LPIC962:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L4070
.L4065:
	mov	r0, r6
.L4093:
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add(PLT)
.L4094:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	b	.L4070
.L4098:
	ldrh	r1, [r9, #20]
	sdiv	r2, r3, r1
	mls	r1, r1, r2, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L4066
.L4099:
	ldr	r1, .L4100+4
	mov	r2, r0
	ldr	r0, .L4100+8
.LPIC959:
	add	r1, pc, r1
	add	r1, r1, #1648
.LPIC960:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L4093
.L4101:
	.align	2
.L4100:
	.word	jiffies(GOT_PREL)+(.-(.LPIC962+8))
	.word	.LANCHOR3-(.LPIC959+8)
	.word	.LC238-(.LPIC960+8)
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r5, [r0, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L4117
.L4104:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L4106
	ldr	r2, [r0, #112]
	cmp	r2, #0
	beq	.L4106
	blx	r2
.L4106:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4117:
	bl	netif_carrier_off(PLT)
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r4, #1160]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L4104
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L4104
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4141
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #24]
	ldr	lr, [r1, #80]
	.pad #12
	sub	sp, sp, #12
.LPIC970:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	lr, r2
	strhi	lr, [r3]
	bhi	.L4120
	cmp	lr, #0
	beq	.L4135
.L4120:
	cmp	lr, #43
	bls	.L4122
	ldr	ip, [r4, #172]
	ldr	r6, [ip, #4]	@ unaligned
	ldr	r1, [ip, #8]	@ unaligned
	ldr	r5, [ip, #12]	@ unaligned
	cmp	lr, r6
	bcc	.L4123
	add	r3, r1, r5
	add	r3, r3, #8
	cmp	r6, r3
	bcc	.L4123
	ldr	r0, [ip]	@ unaligned
	cmp	r0, #1
	moveq	r8, #0
	beq	.L4129
	b	.L4124
.L4130:
	cmp	r2, r5
	beq	.L4131
	bl	skb_clone(PLT)
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L4140
	bl	skb_pull(PLT)
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim(PLT)
	mov	r1, r6
	mov	r0, r9
	bl	skb_queue_tail(PLT)
	ldr	lr, [r4, #80]
	cmp	lr, #0
	beq	.L4121
	cmp	lr, #43
	bls	.L4122
	ldr	ip, [r4, #172]
	ldr	r6, [ip, #4]	@ unaligned
	ldr	r1, [ip, #8]	@ unaligned
	ldr	r5, [ip, #12]	@ unaligned
	cmp	lr, r6
	add	r7, r1, r5
	bcc	.L4123
	add	r7, r7, #8
	cmp	r6, r7
	bcc	.L4123
	ldr	r0, [ip]	@ unaligned
	cmp	r0, #1
	bne	.L4124
.L4129:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull(PLT)
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r8, r8, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L4130
.L4131:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim(PLT)
.L4121:
	ldr	r3, .L4141+4
	mov	r0, r9
	mov	r1, r4
.LPIC969:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r8, r2
	strgt	r8, [r3]
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L4127:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4135:
	mov	r8, lr
	b	.L4121
.L4123:
	ldr	ip, [ip]	@ unaligned
	mov	r3, r1
	stmia	sp, {r5, lr}
	ldr	r0, .L4141+8
	mov	r2, r6
	mov	r1, ip
.LPIC965:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L4127
.L4122:
	ldr	r0, .L4141+12
	mov	r1, lr
	mov	r2, #44
.LPIC964:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L4127
.L4140:
	ldr	r1, .L4141+16
	ldr	r0, .L4141+20
.LPIC967:
	add	r1, pc, r1
	add	r1, r1, #1664
.LPIC968:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #11
	b	.L4127
.L4124:
	mov	r3, r1
	mov	r1, r0
	ldr	r0, .L4141+24
	str	lr, [sp, #4]
	mov	r2, r6
	str	r5, [sp]
.LPIC966:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L4127
.L4142:
	.align	2
.L4141:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC970+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC969+8))
	.word	.LC240-(.LPIC965+8)
	.word	.LC239-(.LPIC964+8)
	.word	.LANCHOR3-(.LPIC967+8)
	.word	.LC241-(.LPIC968+8)
	.word	.LC240-(.LPIC966+8)
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r1, #172]
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	ip, [r4]	@ zero_extendqisi2
	ldrb	r2, [r4, #3]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	r3, lr, r3, asl #8
	orr	r3, r3, ip
	orr	r3, r3, r2, asl #24
	cmp	r3, #1
	bne	.L4148
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	r0, r1
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [r4, #11]	@ zero_extendqisi2
	mov	ip, ip, asl #16
	orr	r3, ip, r3, asl #8
	orr	r3, r3, r2
	orr	r1, r3, r1, asl #24
	add	r1, r1, #8
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4149
	ldrb	r2, [r4, #14]	@ zero_extendqisi2
	mov	r0, r6
	ldrb	r3, [r4, #13]	@ zero_extendqisi2
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	ldrb	r1, [r4, #15]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r3, r2, r3, asl #8
	orr	r3, r3, ip
	orr	r1, r3, r1, asl #24
	bl	skb_trim(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L4145:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4148:
	mov	r0, r1
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L4145
.L4149:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L4145
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	ldr	r1, .L4151
	ldr	r2, [r3, #44]
.LPIC971:
	add	r1, pc, r1
	b	single_open(PLT)
.L4152:
	.align	2
.L4151:
	.word	rndis_proc_show-(.LPIC971+8)
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r3, [ip, #1]	@ zero_extendqisi2
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4160
	ldr	r1, [ip, #4]
	ldr	r3, .L4168
	cmp	r1, #1
.LPIC973:
	add	r3, pc, r3
	beq	.L4156
.L4166:
	bcc	.L4157
	cmp	r1, #2
	beq	.L4158
	ldr	r6, .L4168+4
.LPIC974:
	add	r6, pc, r6
.L4155:
	ldr	r1, [ip, #16]
	ldr	r7, [ip, #8]
	cmp	r1, #0
	bne	.L4162
.L4167:
	ldr	r1, [ip, #12]
	mov	r5, #100
	ldr	r8, .L4168+8
	mul	r5, r5, r1
.LPIC978:
	add	r8, pc, r8
.L4159:
	ldr	r9, .L4168+12
	ldr	r4, .L4168+16
	ldrb	lr, [ip, #36]	@ zero_extendqisi2
	ldr	r1, .L4168+20
.LPIC983:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
.LPIC982:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC980:
	add	r1, pc, r1
	ldr	r9, [r9]
	str	lr, [sp, #32]
	str	r9, [sp, #36]
	ldr	r4, [r4]
	str	r4, [sp, #28]
	ldr	r4, [ip, #28]
	ldr	r4, [r4, #356]
	add	r4, r4, #80
	mul	lr, lr, r4
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	str	r8, [sp, #12]
	str	r5, [sp, #8]
	str	r7, [sp, #4]
	str	ip, [sp, #16]
	str	r6, [sp]
	bl	seq_printf(PLT)
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4160:
	ldr	r1, [ip, #4]
	ldr	r3, .L4168+24
	cmp	r1, #1
.LPIC972:
	add	r3, pc, r3
	bne	.L4166
.L4156:
	ldr	r1, [ip, #16]
	ldr	r6, .L4168+28
	ldr	r7, [ip, #8]
	cmp	r1, #0
.LPIC976:
	add	r6, pc, r6
	beq	.L4167
.L4162:
	ldr	r8, .L4168+32
	mov	r5, #0
.LPIC979:
	add	r8, pc, r8
	b	.L4159
.L4158:
	ldr	r6, .L4168+36
.LPIC977:
	add	r6, pc, r6
	b	.L4155
.L4157:
	ldr	r6, .L4168+40
.LPIC975:
	add	r6, pc, r6
	b	.L4155
.L4169:
	.align	2
.L4168:
	.word	.LC243-(.LPIC973+8)
	.word	.LC244-(.LPIC974+8)
	.word	.LC248-(.LPIC978+8)
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC983+8))
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC982+8))
	.word	.LC250-(.LPIC980+8)
	.word	.LC242-(.LPIC972+8)
	.word	.LC246-(.LPIC976+8)
	.word	.LC249-(.LPIC979+8)
	.word	.LC247-(.LPIC977+8)
	.word	.LC245-(.LPIC975+8)
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.align	2
	.type	get_qc_ether_addr, %function
get_qc_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r8, [sp, #16]
	subne	r9, r1, #1
	addne	r8, r1, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4175
.L4174:
	ldrb	r0, [r4]	@ zero_extendqisi2
	mov	r6, r4
	cmp	r0, #46
	cmpne	r0, #58
	ldreqb	r0, [r4, #1]	@ zero_extendqisi2
	addeq	r6, r4, #1
	bl	hex_to_bin(PLT)
	mov	r5, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	add	r4, r6, #2
	bl	hex_to_bin(PLT)
	orr	r0, r0, r5, asl #4
	strb	r0, [r9, #1]!
	cmp	r9, r8
	bne	.L4174
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4182
.L4175:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4172:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4182:
	ldrb	lr, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	ldrb	r2, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, lr
	ldrb	lr, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r1
	orr	r3, r3, r2
	orrs	r3, r3, lr
	beq	.L4175
	b	.L4172
	.fnend
	.size	get_qc_ether_addr, .-get_qc_ether_addr
	.align	2
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r10, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldrb	r5, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r5, r5, #1
	beq	.L4229
.L4184:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r10
	mov	r5, #1
	bl	filp_open(PLT)
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L4230
.L4185:
	ldr	r1, [r4, #36]
	ldr	r2, [r4, #12]
	tst	r1, #2
	moveq	r5, #1
	cmp	r2, #0
	beq	.L4188
	ldr	r1, [r2, #32]
	cmp	r1, #0
	beq	.L4188
	ldrh	r2, [r1]
	and	r2, r2, #61440
	sub	r2, r2, #24576
	tst	r2, #53248
	bne	.L4188
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L4191
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L4231
.L4192:
	ldr	r0, [r2, #12]
	cmp	r0, #0
	beq	.L4232
.L4193:
	ldr	r2, [r1, #32]
	ldr	r2, [r2]
.L4228:
	ldr	r0, [r2, #104]
	tst	r0, #1
	bne	.L4218
#APP
@ 165 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldrd	r8, [r2, #96]
#APP
@ 221 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldr	lr, [r2, #104]
	cmp	lr, r0
	bne	.L4228
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4233
	ldrb	r2, [fp, #24]	@ zero_extendqisi2
	tst	r2, #8
	bne	.L4234
	ldr	r2, [r1, #312]
	cmp	r2, #0
	beq	.L4201
	ldr	r2, [r2, #88]
	ldr	r2, [r2, #492]
	cmp	r2, #0
	moveq	r2, #512
	beq	.L4202
	add	r2, r2, #776
	ldrh	r2, [r2]
	cmp	r2, #0
	moveq	r2, #512
.L4202:
	mov	r1, #8
	str	r2, [fp, #44]
.L4203:
	mov	r2, r2, lsr #1
	add	r1, r1, #1
	cmp	r2, #256
	bhi	.L4203
	str	r1, [fp, #40]
.L4204:
	mov	r6, r8, lsr r1
	rsb	r2, r1, #32
	mov	r7, r9, asr r1
	orr	r6, r6, r9, asl r2
	subs	r0, r1, #32
	orrpl	r6, r6, r9, asr r0
	mov	r2, #1
	mov	r3, #0
	b	.L4200
.L4188:
	ldr	r1, .L4236
	mov	r2, r10
	add	r0, fp, #48
	mvn	r10, #21
.LPIC985:
	add	r1, pc, r1
	bl	_dev_info(PLT)
.L4190:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close(PLT)
	mov	r0, r10
.L4226:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4229:
	mov	r1, #2
	mov	r2, r5
	movt	r1, 2
	mov	r0, r10
	bl	filp_open(PLT)
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	beq	.L4184
	cmn	r4, #4096
	bls	.L4185
.L4230:
	ldr	r1, .L4236+4
	mov	r2, r10
	add	r0, fp, #48
.LPIC984:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r4
	b	.L4226
.L4234:
	mov	r2, #11
	mov	r6, r8, lsr #11
	mov	r7, r9, asr r2
	orr	r6, r6, r9, asl #21
	str	r2, [fp, #40]
	movw	r2, #65502
	movt	r2, 255
	mov	r3, #0
	cmp	r2, r6
	mov	r1, #2048
	sbcs	r3, r3, r7
	str	r1, [fp, #44]
	blt	.L4199
	mov	r2, #300
	mov	r3, #0
.L4200:
	cmp	r6, r2
	sbcs	r3, r7, r3
	blt	.L4235
.L4205:
	add	r2, r4, #28
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldrb	r2, [fp, #24]	@ zero_extendqisi2
	mov	r10, #0
	str	r4, [fp]
	strd	r8, [fp, #8]
	strd	r6, [fp, #16]
	bfi	r2, r5, #1, #1
	strb	r2, [fp, #24]
	b	.L4190
.L4235:
	ldr	r1, .L4236+8
	mov	r2, r10
	add	r0, fp, #48
	mvn	r10, #524
.LPIC990:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4190
.L4231:
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L4192
.L4191:
	ldr	r1, .L4236+12
	mov	r2, r10
	add	r0, fp, #48
	mvn	r10, #21
.LPIC986:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4190
.L4232:
	ldr	r2, [r2, #20]
	cmp	r2, #0
	moveq	r5, #1
	b	.L4193
.L4233:
	ldr	r1, .L4236+16
	mov	r2, r10
	add	r0, fp, #48
	mov	r10, r8
.LPIC987:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4190
.L4199:
	ldr	r1, .L4236+20
	add	r6, fp, #48
	mov	r2, r10
	mov	r0, r6
	mov	r7, #0
.LPIC988:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r1, .L4236+24
	movw	r2, #65502
	mov	r0, r6
	movt	r2, 255
	movw	r6, #65502
	movt	r6, 255
.LPIC989:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4205
.L4218:
#APP
@ 147 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	b	.L4228
.L4201:
	mov	r2, #9
	mov	r0, #512
	mov	r1, r2
	str	r0, [fp, #44]
	str	r2, [fp, #40]
	b	.L4204
.L4237:
	.align	2
.L4236:
	.word	.LC252-(.LPIC985+8)
	.word	.LC251-(.LPIC984+8)
	.word	.LC257-(.LPIC990+8)
	.word	.LC253-(.LPIC986+8)
	.word	.LC254-(.LPIC987+8)
	.word	.LC255-(.LPIC988+8)
	.word	.LC256-(.LPIC989+8)
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4246
	ldr	r0, .L4246+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, .L4246+8
.LPIC991:
	add	r5, pc, r5
	add	r1, r5, #1680
.LPIC992:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L4246+12
.LPIC994:
	add	r4, pc, r4
.LPIC993:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r4, #2496]
	cmp	r3, #0
	beq	.L4245
	ldr	r0, .L4246+16
.LPIC997:
	add	r0, pc, r0
	add	r0, r0, #456
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #2496]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L4240
	mov	r0, r3
	bl	vfree(PLT)
	ldr	r0, [r4, #2496]
.L4240:
	bl	kfree(PLT)
	ldr	r3, .L4246+20
	mov	r2, #0
.LPIC1000:
	add	r3, pc, r3
	str	r2, [r3, #2496]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4245:
	ldr	r0, .L4246+24
	add	r1, r5, #1712
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC996:
	add	r0, pc, r0
	b	printk(PLT)
.L4247:
	.align	2
.L4246:
	.word	.LANCHOR3-(.LPIC991+8)
	.word	.LC258-(.LPIC992+8)
	.word	.LANCHOR1-(.LPIC994+8)
	.word	.LC259-(.LPIC993+8)
	.word	.LANCHOR0-(.LPIC997+8)
	.word	.LANCHOR1-(.LPIC1000+8)
	.word	.LC260-(.LPIC996+8)
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4263
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r0, .L4263+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC1001:
	add	r1, pc, r1
	add	r1, r1, #1728
.LPIC1002:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L4263+8
.LPIC1003:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L4263+12
.LPIC1021:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L4254
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L4260
.L4249:
	ldr	r5, .L4263+16
	mov	r6, #0
	add	r0, r4, #144
	ldr	r1, .L4263+20
	str	r6, [r4, #88]
.LPIC1006:
	add	r5, pc, r5
	sub	r5, r5, #592
.LPIC1007:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L4263+24
	mov	r2, r5
	add	r0, r4, #156
.LPIC1009:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L4263+28
	mov	r2, r5
	add	r0, r4, #200
.LPIC1011:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r1, r4, #128
	add	ip, r4, #120
	str	r6, [r4, #116]
	add	r2, r4, #136
	mov	r3, #262144
	str	r6, [r4, #108]
	mov	lr, #4096
	str	r1, [r4, #128]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r6, [r4, #112]
	str	r6, [r4, #216]
	str	ip, [r4, #120]
	str	ip, [r4, #124]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	lr, [r4, #192]
	str	r3, [r4, #196]
	bl	vmalloc(PLT)
	cmp	r0, r6
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L4261
	mov	r3, #1
	ldr	r2, [r4, #196]
	add	r0, r4, #168
	bl	__kfifo_init(PLT)
	ldr	r0, .L4263+32
	ldr	r3, .L4263+36
.LPIC1015:
	add	r0, pc, r0
.LPIC1014:
	add	r3, pc, r3
	add	r0, r0, #456
	str	r4, [r3, #2496]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L4262
.L4250:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4254:
	mov	r4, #16
	b	.L4249
.L4262:
	ldr	r1, .L4263+40
	mov	r2, r5
	ldr	r0, .L4263+44
.LPIC1016:
	add	r1, pc, r1
.LPIC1017:
	add	r0, pc, r0
	add	r1, r1, #1760
	bl	printk(PLT)
.L4252:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L4253
	bl	vfree(PLT)
.L4253:
	ldr	r3, .L4263+48
	mov	r2, #0
	mov	r0, r4
.LPIC1018:
	add	r3, pc, r3
	str	r2, [r3, #2496]
	bl	kfree(PLT)
	ldr	r1, .L4263+52
	ldr	r0, .L4263+56
.LPIC1019:
	add	r1, pc, r1
.LPIC1020:
	add	r0, pc, r0
	add	r1, r1, #1760
	bl	printk(PLT)
	mov	r0, r5
	b	.L4250
.L4261:
	ldr	r1, .L4263+60
	mvn	r5, #11
	ldr	r0, .L4263+64
.LPIC1012:
	add	r1, pc, r1
	add	r1, r1, #1760
.LPIC1013:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4252
.L4260:
	ldr	r0, .L4263+68
.LPIC1005:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	b	.L4250
.L4264:
	.align	2
.L4263:
	.word	.LANCHOR3-(.LPIC1001+8)
	.word	.LC261-(.LPIC1002+8)
	.word	.LC262-(.LPIC1003+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1021+8))
	.word	.LANCHOR4-(.LPIC1006+8)
	.word	.LC220-(.LPIC1007+8)
	.word	.LC221-(.LPIC1009+8)
	.word	.LC264-(.LPIC1011+8)
	.word	.LANCHOR0-(.LPIC1015+8)
	.word	.LANCHOR1-(.LPIC1014+8)
	.word	.LANCHOR3-(.LPIC1016+8)
	.word	.LC266-(.LPIC1017+8)
	.word	.LANCHOR1-(.LPIC1018+8)
	.word	.LANCHOR3-(.LPIC1019+8)
	.word	.LC267-(.LPIC1020+8)
	.word	.LANCHOR3-(.LPIC1012+8)
	.word	.LC265-(.LPIC1013+8)
	.word	.LC263-(.LPIC1005+8)
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r5, .L4278
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
.LPIC1022:
	add	r5, pc, r5
	ldr	r3, [r5, #2496]
	cmp	r3, #0
	beq	.L4275
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L4276
	ldr	r1, .L4278+4
	mov	r0, r2
	add	r2, sp, #4
.LPIC1027:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r4, [sp, #4]
	mov	r4, r4, asl #16
	mov	r0, r4
	bl	vmalloc(PLT)
	subs	r7, r0, #0
	beq	.L4277
	ldr	ip, [r5, #2496]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L4270
	bl	vfree(PLT)
	ldr	ip, [r5, #2496]
.L4270:
	ldr	r5, [sp, #4]
	str	r4, [ip, #196]
	mov	r2, r4
	mov	r0, #0
	mov	lr, ip
	str	r7, [ip, #188]
	mov	r1, r7
	mov	r3, #1
	str	r0, [ip, #172]
	mov	r4, r5, asl #10
	str	r4, [ip, #192]
	str	r0, [lr, #168]!
	mov	r0, lr
	bl	__kfifo_init(PLT)
.L4267:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4275:
	ldr	r1, .L4278+8
	ldr	r0, .L4278+12
.LPIC1023:
	add	r1, pc, r1
	add	r1, r1, #1776
.LPIC1024:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4267
.L4277:
	ldr	r1, .L4278+16
	ldr	r0, .L4278+20
.LPIC1028:
	add	r1, pc, r1
	add	r1, r1, #1776
.LPIC1029:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4267
.L4276:
	ldr	r1, .L4278+24
	ldr	r0, .L4278+28
.LPIC1025:
	add	r1, pc, r1
	add	r1, r1, #1776
.LPIC1026:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4267
.L4279:
	.align	2
.L4278:
	.word	.LANCHOR1-(.LPIC1022+8)
	.word	.LC270-(.LPIC1027+8)
	.word	.LANCHOR3-(.LPIC1023+8)
	.word	.LC268-(.LPIC1024+8)
	.word	.LANCHOR3-(.LPIC1028+8)
	.word	.LC271-(.LPIC1029+8)
	.word	.LANCHOR3-(.LPIC1025+8)
	.word	.LC269-(.LPIC1026+8)
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4290
	mov	r3, #0
	add	r2, sp, #8
	mov	r4, r0
	mov	r0, r6
	str	r3, [r2, #-4]!
.LPIC1032:
	add	r1, pc, r1
	bl	sscanf(PLT)
	mov	ip, r4
	ldr	r3, [sp, #4]
	ldr	r2, [ip, #508]!
	cmp	ip, r2
	sub	r2, r2, #120
	beq	.L4288
	cmp	r3, #0
	bne	.L4285
.L4283:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	ip, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4283
.L4288:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4285:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	lr, [r2, #120]
	orr	r1, r1, #32
	cmp	ip, lr
	strb	r1, [r2, #22]
	sub	r2, lr, #120
	bne	.L4285
	b	.L4288
.L4291:
	.align	2
.L4290:
	.word	.LC270-(.LPIC1032+8)
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4296
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1033:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4294
	ldr	r3, .L4296+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC1034:
	add	r3, pc, r3
	strb	r2, [r3, #398]
.L4293:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4294:
	mvn	r0, #0
	b	.L4293
.L4297:
	.align	2
.L4296:
	.word	.LC78-(.LPIC1033+8)
	.word	.LANCHOR2-(.LPIC1034+8)
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4302
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1035:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4300
	ldr	r3, .L4302+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC1036:
	add	r3, pc, r3
	strb	r2, [r3, #397]
.L4299:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4300:
	mvn	r0, #0
	b	.L4299
.L4303:
	.align	2
.L4302:
	.word	.LC78-(.LPIC1035+8)
	.word	.LANCHOR2-(.LPIC1036+8)
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4308
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1037:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4306
	ldr	r3, .L4308+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC1038:
	add	r3, pc, r3
	strb	r2, [r3, #396]
.L4305:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4306:
	mvn	r0, #0
	b	.L4305
.L4309:
	.align	2
.L4308:
	.word	.LC78-(.LPIC1037+8)
	.word	.LANCHOR2-(.LPIC1038+8)
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4314
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1039:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4312
	ldr	r2, .L4314+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC1040:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #12]	@ movhi
.L4311:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4312:
	mvn	r0, #0
	b	.L4311
.L4315:
	.align	2
.L4314:
	.word	.LC209-(.LPIC1039+8)
	.word	.LANCHOR2-(.LPIC1040+8)
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4320
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1041:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4318
	ldr	r2, .L4320+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC1042:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #10]	@ movhi
.L4317:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4318:
	mvn	r0, #0
	b	.L4317
.L4321:
	.align	2
.L4320:
	.word	.LC209-(.LPIC1041+8)
	.word	.LANCHOR2-(.LPIC1042+8)
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4326
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC1043:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4324
	ldr	r2, .L4326+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC1044:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #8]	@ movhi
.L4323:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4324:
	mvn	r0, #0
	b	.L4323
.L4327:
	.align	2
.L4326:
	.word	.LC209-(.LPIC1043+8)
	.word	.LANCHOR2-(.LPIC1044+8)
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L4331
	ldr	r2, [r5, #96]
	mov	r0, r6
	ldr	r1, .L4334
	add	r2, r2, #218
.LPIC1045:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	beq	.L4333
.L4331:
	mvn	r0, #21
.L4330:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4333:
	ldr	r1, .L4334+4
	ldr	r2, [r5, #96]
	ldr	r0, .L4334+8
.LPIC1046:
	add	r1, pc, r1
	add	r1, r1, #1808
	add	r2, r2, #218
.LPIC1047:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	b	.L4330
.L4335:
	.align	2
.L4334:
	.word	.LC208-(.LPIC1045+8)
	.word	.LANCHOR3-(.LPIC1046+8)
	.word	.LC272-(.LPIC1047+8)
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L4339
	ldr	r2, [r5, #96]
	mov	r0, r6
	ldr	r1, .L4342
	add	r2, r2, #209
.LPIC1048:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	beq	.L4341
.L4339:
	mvn	r0, #21
.L4338:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4341:
	ldr	r1, .L4342+4
	ldr	r2, [r5, #96]
	ldr	r0, .L4342+8
.LPIC1049:
	add	r1, pc, r1
	add	r1, r1, #1840
	add	r2, r2, #209
.LPIC1050:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	b	.L4338
.L4343:
	.align	2
.L4342:
	.word	.LC208-(.LPIC1048+8)
	.word	.LANCHOR3-(.LPIC1049+8)
	.word	.LC273-(.LPIC1050+8)
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4347
	ldr	r2, [r3, #96]
	mov	r0, r5
	ldr	r1, .L4349
	add	r2, r2, #180
.LPIC1051:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4347
	mov	r0, r4
.L4346:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4347:
	mvn	r0, #21
	b	.L4346
.L4350:
	.align	2
.L4349:
	.word	.LC274-(.LPIC1051+8)
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r2, [r0, #4]
	mov	r0, r5
	ldr	r1, .L4355
	add	r3, r2, #5
	add	r5, r2, #4
	add	lr, r2, #3
	add	ip, r2, #2
.LPIC1052:
	add	r1, pc, r1
	str	r3, [sp, #12]
	add	r3, r2, #1
	str	r5, [sp, #8]
	stmia	sp, {ip, lr}
	bl	sscanf(PLT)
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4356:
	.align	2
.L4355:
	.word	.LC210-(.LPIC1052+8)
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4361
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1053:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streqb	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4362:
	.align	2
.L4361:
	.word	.LC270-(.LPIC1053+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4367
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1054:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4368:
	.align	2
.L4367:
	.word	.LC275-(.LPIC1054+8)
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4373
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1055:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4371
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4370:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4371:
	mvn	r0, #21
	b	.L4370
.L4374:
	.align	2
.L4373:
	.word	.LC270-(.LPIC1055+8)
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4377
	ldr	r1, .L4380
	add	r2, r2, #13
	mov	r0, r5
.LPIC1056:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4376:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4377:
	mvn	r0, #21
	b	.L4376
.L4381:
	.align	2
.L4380:
	.word	.LC276-(.LPIC1056+8)
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	mov	r6, r2
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4384
	add	r2, sp, #4
	ldr	r4, [r0, #4]
	mov	r0, r6
.LPIC1057:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4385:
	.align	2
.L4384:
	.word	.LC270-(.LPIC1057+8)
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r8, [sp, #16]
	ldr	r3, .L4441
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r1, #172]
	.pad #44
	sub	sp, sp, #44
	ldrb	lr, [r0, #180]	@ zero_extendqisi2
.LPIC1058:
	add	r3, pc, r3
	ldr	r6, [r0, #176]
	ldr	r9, [r3, #16]
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	lr, #0
	ldrb	r0, [r1]	@ zero_extendqisi2
	movne	r3, #18
	moveq	r3, #14
	ldrb	r10, [r1, #3]	@ zero_extendqisi2
	movne	r8, #4
	moveq	r8, #0
	mov	ip, ip, asl #16
	ldr	lr, [r6]
	orr	r2, ip, r2, asl #8
	orr	r2, r2, r0
	orr	r2, r2, r10, asl #24
	cmp	lr, r2
	beq	.L4388
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+4
	ldr	r2, [r4, #80]
	ldr	r3, [r3, #24]
.LPIC1059:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	ldr	r6, [r4, #172]
	mov	r2, #0
	mov	lr, #32
	ldr	r1, .L4441+8
	mov	ip, #1
	mov	r3, lr
	ldr	r0, .L4441+12
	str	r2, [sp, #12]
	mov	r2, ip
	str	ip, [sp]
	stmib	sp, {r6, lr}
.LPIC1060:
	add	r1, pc, r1
.LPIC1061:
	add	r0, pc, r0
	bl	print_hex_dump(PLT)
.L4389:
	mov	r0, r7
	bl	skb_queue_purge(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
.L4431:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4388:
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r0, [r1, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r0, r0, ip, asl #8
	cmp	r0, r2
	beq	.L4390
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+16
	ldr	r3, [r3, #24]
.LPIC1062:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4390:
	ldr	ip, [r6, #24]
	cmp	ip, #1
	beq	.L4392
	cmp	ip, #2
	bne	.L4430
	ldrb	r2, [r1, #10]	@ zero_extendqisi2
	ldrb	fp, [r1, #9]	@ zero_extendqisi2
	ldrb	lr, [r1, #8]	@ zero_extendqisi2
	ldrb	r10, [r1, #11]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, fp, asl #8
	orr	r2, r2, lr
	orr	r2, r2, r10, asl #24
.L4394:
	cmp	r9, r2
	bcc	.L4435
	ldr	r2, [r6, #28]
	add	lr, r1, #8
	add	r9, lr, ip, lsl #1
	cmp	r2, #1
	beq	.L4397
	cmp	r2, #2
	bne	.L4430
	ldrb	r10, [r9, #2]	@ zero_extendqisi2
	ldrb	fp, [r9, #1]	@ zero_extendqisi2
	ldrb	ip, [lr, ip, asl #1]	@ zero_extendqisi2
	ldrb	lr, [r9, #3]	@ zero_extendqisi2
	mov	r2, r10, asl #16
	orr	r2, r2, fp, asl #8
	orr	r2, r2, ip
	orr	r2, r2, lr, asl #24
.L4399:
	ands	ip, r2, #3
	movne	ip, #1
	cmp	r0, r2
	movls	r0, #0
	andhi	r0, ip, #1
	cmp	r0, #0
	bne	.L4436
	add	r10, r1, r2
	ldrb	r1, [r1, r2]	@ zero_extendqisi2
	ldrb	r0, [r10, #2]	@ zero_extendqisi2
	ldrb	r2, [r10, #1]	@ zero_extendqisi2
	ldrb	lr, [r10, #3]	@ zero_extendqisi2
	ldr	ip, [r6, #4]
	mov	r0, r0, asl #16
	orr	r2, r0, r2, asl #8
	orr	r2, r2, r1
	orr	r2, r2, lr, asl #24
	cmp	ip, r2
	beq	.L4401
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+20
	ldr	r3, [r3, #24]
.LPIC1065:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4392:
	ldrb	lr, [r1, #9]	@ zero_extendqisi2
	ldrb	r2, [r1, #8]	@ zero_extendqisi2
	orr	r2, r2, lr, asl #8
	b	.L4394
.L4430:
#APP
@ 463 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
.L4435:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+24
	ldr	r3, [r3, #24]
.LPIC1063:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4397:
	ldrb	r9, [r9, #1]	@ zero_extendqisi2
	ldrb	r2, [lr, ip, asl #1]	@ zero_extendqisi2
	orr	r2, r2, r9, asl #8
	b	.L4399
.L4401:
	ldrb	ip, [r10, #5]	@ zero_extendqisi2
	ldrb	r2, [r10, #4]	@ zero_extendqisi2
	ldr	r0, [r6, #12]
	ldr	r1, [r6, #20]
	orr	r2, r2, ip, asl #8
	add	ip, r0, r1, lsl #3
	cmp	r2, ip
	bcc	.L4402
	ldr	lr, [r6, #16]
	udiv	ip, r2, lr
	mls	ip, lr, ip, r2
	cmp	ip, #0
	bne	.L4402
	ldr	fp, [r6, #32]
	cmp	r1, #1
	add	r10, r10, #6
	ldr	ip, [r6, #40]
	ldr	lr, [r6, #36]
	add	ip, ip, fp
	add	fp, ip, lr
	add	lr, r10, fp, lsl #1
	beq	.L4405
	cmp	r1, #2
	bne	.L4430
	add	ip, lr, #4
	ldrb	r9, [lr, #2]	@ zero_extendqisi2
	ldrb	r10, [r10, fp, asl #1]	@ zero_extendqisi2
	str	ip, [sp, #20]
	ldrb	ip, [lr, #6]	@ zero_extendqisi2
	ldrb	fp, [lr, #1]	@ zero_extendqisi2
	mov	r9, r9, asl #16
	str	r10, [sp, #16]
	ldrb	r10, [lr, #5]	@ zero_extendqisi2
	mov	ip, ip, asl #16
	orr	r9, r9, fp, asl #8
	ldr	fp, [sp, #16]
	str	ip, [sp, #24]
	ldrb	ip, [lr, #4]	@ zero_extendqisi2
	orr	r9, r9, fp
	str	ip, [sp, #28]
	ldr	ip, [sp, #24]
	ldr	fp, [sp, #28]
	orr	ip, ip, r10, asl #8
	ldrb	r10, [lr, #3]	@ zero_extendqisi2
	ldrb	lr, [lr, #7]	@ zero_extendqisi2
	orr	fp, ip, fp
	mov	ip, #4
	orr	r9, r9, r10, asl #24
	orr	fp, fp, lr, asl #24
	str	r9, [sp, #16]
.L4407:
	rsb	r2, r0, r2
	mov	r10, r3
	str	r7, [sp, #24]
	cmp	fp, r10
	str	r6, [sp, #32]
	str	r2, [sp, #28]
	ldr	r2, [sp, #20]
	str	r4, [sp, #20]
	add	ip, r2, ip
	mov	r7, ip
	bcc	.L4437
.L4408:
	ldrb	r2, [r5, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4438
.L4409:
	cmp	r1, #1
	beq	.L4412
	cmp	r1, #2
	bne	.L4430
	ldrb	r1, [r7, #2]	@ zero_extendqisi2
	add	r0, r7, #4
	ldrb	lr, [r7, #1]	@ zero_extendqisi2
	ldrb	r2, [r7, #6]	@ zero_extendqisi2
	ldrb	r6, [r7, #5]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	ldrb	r4, [r7]	@ zero_extendqisi2
	ldrb	ip, [r7, #7]	@ zero_extendqisi2
	orr	r1, r1, lr, asl #8
	mov	r2, r2, asl #16
	ldrb	lr, [r7, #4]	@ zero_extendqisi2
	orr	r2, r2, r6, asl #8
	ldrb	r6, [r7, #3]	@ zero_extendqisi2
	orr	r1, r1, r4
	orr	r2, r2, lr
	orr	r9, r2, ip, asl #24
	orr	r6, r1, r6, asl #24
	mov	r1, #4
.L4414:
	cmp	r6, #0
	cmpne	r9, #0
	add	r7, r0, r1
	moveq	r3, #1
	movne	r3, #0
	str	r3, [sp, #36]
	beq	.L4415
	mov	r1, #32
	ldr	r0, [sp, #20]
	bl	skb_clone(PLT)
	subs	r4, r0, #0
	beq	.L4420
	ldr	r1, [sp, #16]
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4421
	rsb	r1, r8, fp
	mov	r0, r4
	bl	skb_trim(PLT)
	ldr	r0, [sp, #24]
	mov	r1, r4
	bl	skb_queue_tail(PLT)
	ldr	r3, [sp, #32]
	ldr	r2, [sp, #28]
	ldr	r1, [r3, #20]
	mov	r3, r1, asl #2
	rsb	r2, r3, r2
	cmp	r3, r2
	str	r2, [sp, #28]
	bcs	.L4439
	mov	fp, r9
	str	r6, [sp, #16]
	cmp	fp, r10
	bcs	.L4408
.L4437:
	ldr	r3, [r5, #20]
	mov	r2, fp
	mvn	r5, #21
	ldr	r1, .L4441+28
	ldr	r4, [sp, #20]
	ldr	r7, [sp, #24]
	ldr	r3, [r3, #24]
.LPIC1067:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4402:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+32
	ldr	r3, [r3, #24]
.LPIC1066:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4436:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+36
	ldr	r3, [r3, #24]
.LPIC1064:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4405:
	ldrb	r10, [r10, fp, asl #1]	@ zero_extendqisi2
	add	ip, lr, #2
	ldrb	fp, [lr, #1]	@ zero_extendqisi2
	ldrb	r9, [lr, #3]	@ zero_extendqisi2
	str	ip, [sp, #20]
	mov	ip, #2
	ldrb	lr, [lr, #2]	@ zero_extendqisi2
	orr	r10, r10, fp, asl #8
	orr	fp, lr, r9, asl #8
	str	r10, [sp, #16]
	b	.L4407
.L4412:
	mov	r0, r7
	ldrb	r6, [r7, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	lr, [r0], #2	@ zero_extendqisi2
	ldrb	r9, [r7, #3]	@ zero_extendqisi2
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	orr	r6, lr, r6, asl #8
	orr	r9, r2, r9, asl #8
	b	.L4414
.L4438:
	ldr	r3, [sp, #20]
	rsb	r2, r8, fp
	mvn	r0, #0
	ldr	r1, [r3, #172]
	ldr	r3, [sp, #16]
	add	lr, r3, fp
	rsb	lr, r8, lr
	add	r4, r1, lr
	ldrb	r9, [r1, lr]	@ zero_extendqisi2
	add	r1, r1, r3
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	r6, [r4, #1]	@ zero_extendqisi2
	ldrb	r4, [r4, #3]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r6, asl #8
	orr	lr, lr, r9
	orr	r4, lr, r4, asl #24
	bl	crc32_le(PLT)
	mvn	r0, r0
	cmp	r0, r4
	bne	.L4410
	ldr	r3, [sp, #32]
	ldr	r1, [r3, #20]
	b	.L4409
.L4415:
	add	r1, sp, #16
	ldmia	r1, {r1, r4, r7}
	mov	r0, r4
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4440
	rsb	r1, r8, fp
	mov	r0, r4
	bl	skb_trim(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	skb_queue_tail(PLT)
	mov	r0, #0
	b	.L4431
.L4439:
	ldr	r0, [sp, #36]
	b	.L4431
.L4421:
	ldr	r4, [sp, #20]
	mvn	r5, #74
	ldr	r7, [sp, #24]
	b	.L4389
.L4440:
	mvn	r5, #74
	b	.L4389
.L4420:
	ldr	r4, [sp, #20]
	mvn	r5, #21
	ldr	r7, [sp, #24]
	b	.L4389
.L4410:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4441+40
	ldr	r4, [sp, #20]
	ldr	r7, [sp, #24]
	ldr	r3, [r3, #24]
.LPIC1068:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4389
.L4442:
	.align	2
.L4441:
	.word	.LANCHOR2-(.LPIC1058+8)
	.word	.LC277-(.LPIC1059+8)
	.word	.LC278-(.LPIC1060+8)
	.word	.LC279-(.LPIC1061+8)
	.word	.LC280-(.LPIC1062+8)
	.word	.LC283-(.LPIC1065+8)
	.word	.LC281-(.LPIC1063+8)
	.word	.LC285-(.LPIC1067+8)
	.word	.LC284-(.LPIC1066+8)
	.word	.LC282-(.LPIC1064+8)
	.word	.LC286-(.LPIC1068+8)
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4488
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	ldrb	r3, [r0, #180]	@ zero_extendqisi2
.LPIC1069:
	add	r2, pc, r2
	ldr	r5, [r0, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	r0, [r2, #12]
	ldr	r1, [r1, #80]
	cmp	r3, #0
	movne	r3, #4
	moveq	r3, #0
	ldr	r10, [r5, #8]
	ldr	r7, [r5, #20]
	mov	r8, r3
	sub	r6, r0, #1
	ldr	ip, [r5, #12]
	str	r3, [sp, #8]
	rsb	r0, r0, #0
	ldrh	r3, [r2, #8]
	add	r6, r6, r10
	ldrh	lr, [r2, #10]
	and	r6, r6, r0
	ldr	r2, [r9, #112]
	add	r7, ip, r7, lsl #3
	sub	r4, r3, #1
	add	r7, r7, r6
	rsb	r3, r3, #0
	add	r4, r4, r7
	and	r3, r3, r4
	add	r4, r3, lr
	add	r3, r4, r1
	add	r3, r3, r8
	cmp	r2, r3
	bcc	.L4482
	bhi	.L4483
.L4469:
	mov	r3, #0
	mov	r2, r3
	str	r3, [sp, #4]
	str	r3, [sp]
.L4447:
	mov	r3, #32
	mov	r1, r4
	mov	r0, fp
	bl	skb_copy_expand(PLT)
	mov	r8, r0
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	cmp	r8, #0
	beq	.L4484
	mov	r1, r4
	mov	r0, r8
	bl	skb_push(PLT)
	cmp	r4, #0
	mov	fp, r0
	bne	.L4485
.L4449:
	ldr	r3, [r5]
	mov	r2, r3, lsr #16
	strb	r3, [fp]
	ubfx	r1, r3, #8, #8
	mov	r3, r2, lsr #8
	strb	r1, [fp, #1]
	ldr	r1, [sp, #4]
	strb	r2, [fp, #2]
	strb	r3, [fp, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [fp, #4]
	strb	r2, [fp, #5]
	ldr	r2, [r5, #24]
	ldr	r3, [r8, #80]
	cmp	r2, #1
	add	r3, r1, r3
	beq	.L4451
	cmp	r2, #2
	bne	.L4480
	mov	r1, r3, lsr #16
	ubfx	r0, r3, #8, #8
	strb	r3, [fp, #8]
	mov	r3, r1, lsr #8
	strb	r0, [fp, #9]
	strb	r1, [fp, #10]
	strb	r3, [fp, #11]
.L4453:
	ldr	ip, [r5, #28]
	add	r3, fp, #8
	rsb	r6, r10, r6
	ldr	r1, [r5, #8]
	add	r0, r3, r2, lsl #1
	cmp	ip, #1
	add	r1, r6, r1
	beq	.L4455
	cmp	ip, #2
	bne	.L4480
	mov	lr, r1, lsr #16
	ubfx	r10, r1, #8, #8
	mov	fp, lr, lsr #8
	strb	lr, [r0, #2]
	strb	fp, [r0, #3]
	strb	r1, [r3, r2, asl #1]
	strb	r10, [r0, #1]
.L4457:
	ldr	r2, [r5, #4]
	add	r6, r6, ip, lsl #1
	uxth	fp, r4
	add	r3, r0, r6
	rsb	r7, r7, r4
	add	r10, r3, #6
	mov	lr, r2, lsr #16
	ubfx	r1, r2, #8, #8
	mov	ip, lr, lsr #8
	strb	lr, [r3, #2]
	strb	ip, [r3, #3]
	strb	r2, [r0, r6]
	strb	r1, [r3, #1]
	ldr	r2, [r5, #8]
	rsb	r2, r2, fp
	rsb	r7, r7, r2
	uxth	r7, r7
	mov	r2, r7, lsr #8
	strb	r7, [r3, #4]
	strb	r2, [r3, #5]
	ldr	r6, [r5, #32]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r3, [r5, #40]
	ldr	r2, [r5, #36]
	cmp	r1, #0
	add	r3, r3, r6
	add	r6, r3, r2
	add	r7, r10, r6, lsl #1
	bne	.L4486
.L4458:
	ldr	r3, [r5, #20]
	cmp	r3, #1
	beq	.L4460
	cmp	r3, #2
	bne	.L4480
	mov	r2, r4, lsr #16
	mov	fp, fp, lsr #8
	mov	r1, r2, lsr #8
	strb	r2, [r7, #2]
	strb	r1, [r7, #3]
	strb	r4, [r10, r6, asl #1]
	strb	fp, [r7, #1]
.L4462:
	ldr	r1, [r5, #20]
	add	r0, r7, r3, lsl #1
	ldr	r2, [r8, #80]
	cmp	r1, #1
	rsb	r4, r4, r2
	beq	.L4464
	cmp	r1, #2
	bne	.L4480
	mov	r2, r4, lsr #16
	ubfx	r1, r4, #8, #8
	mov	ip, r2, lsr #8
	strb	r2, [r0, #2]
	strb	ip, [r0, #3]
	strb	r4, [r7, r3, asl #1]
	strb	r1, [r0, #1]
.L4466:
	ldr	r3, [sp]
	cmp	r3, #0
	moveq	r0, r8
	bne	.L4487
.L4446:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4480:
#APP
@ 445 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
.L4483:
	ldr	r2, [r9, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L4469
	ldr	r0, .L4488+4
	mov	r3, #1
	mov	r8, r3
	str	r3, [sp, #4]
.LPIC1072:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r8, [sp]
	mov	r2, r8
	b	.L4447
.L4451:
	ubfx	r1, r3, #8, #8
	strb	r3, [fp, #8]
	strb	r1, [fp, #9]
	b	.L4453
.L4485:
	mov	r1, r4
	bl	__memzero(PLT)
	b	.L4449
.L4455:
	ubfx	lr, r1, #8, #8
	strb	r1, [r3, r2, asl #1]
	strb	lr, [r0, #1]
	b	.L4457
.L4460:
	mov	fp, fp, lsr #8
	strb	r4, [r10, r6, asl #1]
	strb	fp, [r7, #1]
	b	.L4462
.L4486:
	ldr	r2, [r8, #80]
	mvn	r0, #0
	ldr	r1, [r8, #172]
	rsb	r2, r4, r2
	add	r1, r1, r4
	bl	crc32_le(PLT)
	ldr	r3, [r8, #80]
	mvn	r9, r0
	ldr	r1, [sp, #8]
	mov	ip, r9, lsr #16
	ldr	lr, [r8, #172]
	mov	r0, ip, lsr #8
	str	r3, [sp, #8]
	ubfx	r3, r9, #8, #8
	mov	r2, r0
	mov	r0, r8
	str	r3, [sp, #12]
	ldr	r3, [sp, #8]
	add	r3, lr, r3
	strb	r2, [r3, #3]
	ldr	r2, [sp, #8]
	strb	ip, [r3, #2]
	strb	r9, [lr, r2]
	ldrb	r2, [sp, #12]	@ zero_extendqisi2
	strb	r2, [r3, #1]
	bl	skb_put(PLT)
	b	.L4458
.L4464:
	ubfx	r2, r4, #8, #8
	strb	r4, [r7, r3, asl #1]
	strb	r2, [r0, #1]
	b	.L4466
.L4482:
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L4446
.L4484:
	ldr	r0, .L4488+8
.LPIC1073:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L4446
.L4487:
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	skb_put(PLT)
	mov	r1, #1
	bl	__memzero(PLT)
	ldr	r1, .L4488+12
	ldr	r0, .L4488+16
	ldr	r2, [r8, #80]
.LPIC1074:
	add	r1, pc, r1
.LPIC1075:
	add	r0, pc, r0
	add	r1, r1, #1872
	bl	printk(PLT)
	mov	r0, r8
	b	.L4446
.L4489:
	.align	2
.L4488:
	.word	.LANCHOR2-(.LPIC1069+8)
	.word	.LC287-(.LPIC1072+8)
	.word	.LC288-(.LPIC1073+8)
	.word	.LANCHOR3-(.LPIC1074+8)
	.word	.LC289-(.LPIC1075+8)
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4492
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #0
	ldr	r3, .L4492+4
	.pad #12
	sub	sp, sp, #12
	mov	r1, #2
	mov	r2, sp
	str	ip, [sp, #4]
.LPIC1077:
	add	r0, pc, r0
	ldr	r0, [r0, #156]
.LPIC1076:
	add	r3, pc, r3
	str	r3, [sp]
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4493:
	.align	2
.L4492:
	.word	.LANCHOR0-(.LPIC1077+8)
	.word	.LC290-(.LPIC1076+8)
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L4498
	mov	r2, #0
	ldr	r4, .L4498+4
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	ldr	ip, .L4498+8
	ldr	r3, .L4498+12
	str	r2, [sp, #4]
	ldr	r0, .L4498+16
.LPIC1081:
	add	r1, pc, r1
	str	r2, [sp, #12]
.LPIC1080:
	add	r4, pc, r4
	add	r1, r1, #1888
.LPIC1078:
	add	ip, pc, ip
	ldrb	r2, [r4, #-592]	@ zero_extendqisi2
.LPIC1079:
	add	r3, pc, r3
.LPIC1082:
	add	r0, pc, r0
	str	ip, [sp]
	str	r3, [sp, #8]
	bl	printk(PLT)
	ldrb	r3, [r4, #-592]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	ldr	r3, .L4498+20
	addeq	r2, sp, #8
	movne	r2, sp
.LPIC1084:
	add	r3, pc, r3
	ldr	r0, [r3, #336]
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4499:
	.align	2
.L4498:
	.word	.LANCHOR3-(.LPIC1081+8)
	.word	.LANCHOR4-(.LPIC1080+8)
	.word	.LC291-(.LPIC1078+8)
	.word	.LC292-(.LPIC1079+8)
	.word	.LC293-(.LPIC1082+8)
	.word	.LANCHOR0-(.LPIC1084+8)
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4501
	ldr	r0, [r3]
	bl	sec_get_ss_host_available(PLT)
	mov	r4, r0
	bl	get_host_os_type(PLT)
	cmp	r0, #1
	cmpeq	r4, #1
	mov	r3, r0
	movne	r6, #1
	beq	.L4506
.L4502:
	ldr	r1, .L4507
	mov	r2, r4
	ldr	r0, .L4507+4
.LPIC1087:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1088:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L4503:
	ldr	r1, .L4507+8
	mov	r2, r6
	mov	r0, r5
.LPIC1091:
	add	r1, pc, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf(PLT)
.L4501:
	ldr	r1, .L4507+12
	mvn	r6, #0
	ldr	r0, .L4507+16
.LPIC1089:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1090:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L4503
.L4506:
	ldr	r1, .L4507+20
	str	r0, [sp, #4]
	mov	r6, #0
	ldr	r0, .L4507+24
.LPIC1085:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1086:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	b	.L4502
.L4508:
	.align	2
.L4507:
	.word	.LANCHOR3-(.LPIC1087+8)
	.word	.LC295-(.LPIC1088+8)
	.word	.LC78-(.LPIC1091+8)
	.word	.LANCHOR3-(.LPIC1089+8)
	.word	.LC296-(.LPIC1090+8)
	.word	.LANCHOR3-(.LPIC1085+8)
	.word	.LC294-(.LPIC1086+8)
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4510
	ldr	r0, [r3]
	bl	sec_get_ss_host_available(PLT)
	mov	r5, r0
	bl	get_host_os_type(PLT)
	cmp	r0, #1
	cmpeq	r5, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L4515
.L4511:
	ldr	r1, .L4516
	mov	r2, r5
	ldr	r0, .L4516+4
.LPIC1094:
	add	r1, pc, r1
	add	r1, r1, #1904
.LPIC1095:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L4512:
	ldr	r1, .L4516+8
	mov	r2, r4
	mov	r0, r6
.LPIC1098:
	add	r1, pc, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf(PLT)
.L4510:
	ldr	r1, .L4516+12
	mvn	r4, #0
	ldr	r0, .L4516+16
.LPIC1096:
	add	r1, pc, r1
	add	r1, r1, #1904
.LPIC1097:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L4512
.L4515:
	ldr	r1, .L4516+20
	str	r0, [sp, #4]
	mov	r4, #1
	ldr	r0, .L4516+24
.LPIC1092:
	add	r1, pc, r1
	add	r1, r1, #1904
.LPIC1093:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	b	.L4511
.L4517:
	.align	2
.L4516:
	.word	.LANCHOR3-(.LPIC1094+8)
	.word	.LC295-(.LPIC1095+8)
	.word	.LC78-(.LPIC1098+8)
	.word	.LANCHOR3-(.LPIC1096+8)
	.word	.LC296-(.LPIC1097+8)
	.word	.LANCHOR3-(.LPIC1092+8)
	.word	.LC294-(.LPIC1093+8)
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4520
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4523
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1099:
	add	r5, pc, r5
	add	r5, r5, #28
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4520:
	mvn	r0, #21
	bx	lr
.L4524:
	.align	2
.L4523:
	.word	.LANCHOR1-(.LPIC1099+8)
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4527
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4530
	mov	r1, r2
	mov	r2, #256
	mov	r5, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1101:
	add	r4, pc, r4
	sub	r4, r4, #1168
	sub	r4, r4, #12
	mov	r0, r4
	bl	strlcpy(PLT)
	mov	r0, r4
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4527:
	mvn	r0, #21
	bx	lr
.L4531:
	.align	2
.L4530:
	.word	.LANCHOR4-(.LPIC1101+8)
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4534
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4537
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1103:
	add	r5, pc, r5
	sub	r5, r5, #924
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4534:
	mvn	r0, #21
	bx	lr
.L4538:
	.align	2
.L4537:
	.word	.LANCHOR4-(.LPIC1103+8)
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L4546
	mov	r5, r2
	ldr	ip, .L4546+4
	strd	r6, [sp, #8]
	mov	r6, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #264
	sub	sp, sp, #264
.LPIC1107:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1106:
	add	ip, pc, ip
	ldr	r7, [ip, #16]
	ldr	r3, [r4]
	sub	r8, r7, #496
	mov	r0, r8
	str	r3, [sp, #260]
	bl	mutex_lock(PLT)
	ldrb	r3, [r7, #-504]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4544
	mov	r1, r5
	add	r5, sp, #4
	mov	r2, #256
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	mov	r1, r0
	mov	r2, #256
	sub	r0, r7, #324
	bl	strlcpy(PLT)
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mov	r0, r6
.L4541:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4545
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4544:
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4541
.L4545:
	bl	__stack_chk_fail(PLT)
.L4547:
	.align	2
.L4546:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1107+8))
	.word	.LANCHOR1-(.LPIC1106+8)
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 560
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4603
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #32]
	strd	r10, [sp, #24]
	.pad #564
	sub	sp, sp, #564
	str	r3, [sp, #16]
.LPIC1121:
	ldr	r3, [pc, r1]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #556]
	bl	dev_get_drvdata(PLT)
	add	r3, r0, #24
	add	r2, r0, #508
	mov	r8, r0
	mov	r0, r3
	str	r3, [sp, #12]
	str	r2, [sp, #8]
	bl	mutex_lock(PLT)
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L4597
	ldr	r7, [r8, #508]
	ldr	r3, [sp, #8]
	cmp	r3, r7
	sub	r7, r7, #120
	movne	r10, r3
	beq	.L4552
.L4554:
	mov	r9, r7
	ldr	r4, [r9, #112]!
	cmp	r4, r9
	beq	.L4556
.L4553:
	mov	r0, r4
	ldr	r3, [r4, #-4]!
	str	r5, [r3, #20]
	bl	list_del(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r4, [r7, #112]
	cmp	r9, r4
	bne	.L4553
.L4556:
	ldr	r3, [r7, #120]
	str	r9, [r7, #112]
	str	r9, [r7, #116]
	cmp	r10, r3
	sub	r7, r3, #120
	bne	.L4554
.L4552:
	add	r4, sp, #44
	mov	r2, #256
	mov	r1, r6
	mov	r0, r4
	bl	strlcpy(PLT)
	mov	r0, r4
	mov	r10, #0
	bl	strim(PLT)
	ldr	r3, [sp, #8]
	cmp	r0, #0
	str	r0, [sp, #36]
	ldr	r2, .L4603+4
	str	r3, [sp, #4]
	ldr	r3, .L4603+8
.LPIC1119:
	add	r2, pc, r2
	add	r2, r2, #1952
	add	r2, r2, #8
.LPIC1117:
	add	r3, pc, r3
	add	r3, r3, #1952
	str	r2, [sp, #24]
	add	r3, r3, #8
	str	r3, [sp, #28]
	beq	.L4598
.L4569:
	ldr	r1, .L4603+12
	add	r0, sp, #36
.LPIC1109:
	add	r1, pc, r1
	bl	strsep(PLT)
	cmp	r0, #0
	str	r0, [sp, #32]
	beq	.L4558
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4559
	sub	r7, r3, #120
	str	r3, [sp, #4]
.L4558:
	ldr	r9, .L4603+16
	cmp	r0, #0
	ldr	r5, .L4603+20
.LPIC1114:
	add	r9, pc, r9
.LPIC1115:
	add	r5, pc, r5
	beq	.L4599
.L4568:
	mov	r1, r9
	add	r0, sp, #32
	bl	strsep(PLT)
	add	fp, sp, #300
	mov	r6, r0
	mov	r2, #256
	mov	r0, fp
	add	r1, r8, #196
	bl	strlcpy(PLT)
	add	r4, sp, #560
	str	fp, [r4, #-520]!
.L4565:
	mov	r1, r5
	mov	r0, r4
	bl	strsep(PLT)
	subs	r1, r0, #0
	beq	.L4563
	mov	r0, r6
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L4564
.L4563:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L4565
	mov	r2, r6
	mov	r1, r7
	mov	r0, r8
	bl	android_enable_function(PLT)
	cmp	r0, #0
	bne	.L4600
.L4567:
	ldr	r0, [sp, #32]
	cmp	r0, #0
	bne	.L4568
.L4599:
	ldr	r0, [sp, #36]
	cmp	r0, #0
	bne	.L4569
.L4598:
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4572
	ldr	r5, [sp, #4]
	mov	r6, r2
.L4571:
	mov	r0, r3
	sub	r4, r3, #120
	bl	list_del(PLT)
	ldr	r3, [r8, #516]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r8, #516]
	bl	kfree(PLT)
	ldr	r3, [r5]
	cmp	r6, r3
	bne	.L4571
.L4572:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	ldr	r0, [sp, #16]
.L4550:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #556]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L4601
	add	sp, sp, #564
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4564:
	cmp	r10, #0
	bne	.L4567
	ldr	r2, .L4603+24
	mov	r1, r7
	mov	r0, r8
.LPIC1116:
	add	r2, pc, r2
	bl	android_enable_function(PLT)
	subs	r2, r0, #0
	moveq	r10, #1
	beq	.L4567
	ldr	r0, .L4603+28
	ldr	r1, [sp, #28]
.LPIC1118:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4567
.L4559:
	ldr	r3, .L4603+32
.LPIC1122:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L4576
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L4602
.L4561:
	ldr	r3, [r8, #516]
	mvn	ip, #63
	mov	r0, #48
	ldr	r2, .L4603+36
	ldr	r1, [r8]
	add	r3, r3, #1
.LPIC1113:
	add	r2, pc, r2
	str	r3, [r8, #516]
	add	r3, r7, #112
	str	r2, [r7, #12]
	ldr	r2, [sp, #8]
	str	r1, [r7]
	ldr	r1, [r8, #516]
	strb	r0, [r7, #23]
	add	r0, r7, #120
	str	r3, [r7, #112]
	str	r3, [r7, #116]
	strb	ip, [r7, #22]
	strb	r1, [r7, #20]
	ldr	r1, [r8, #512]
	bl	__list_add(PLT)
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4558
.L4576:
	mov	r7, #16
	b	.L4561
.L4602:
	ldr	r2, .L4603+40
	mvn	r7, #11
	ldr	r0, .L4603+44
.LPIC1110:
	add	r2, pc, r2
	add	r2, r2, #1936
.LPIC1112:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4558
.L4597:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4550
.L4600:
	mov	r3, r0
	ldr	r0, .L4603+48
	mov	r2, r6
	ldr	r1, [sp, #24]
.LPIC1120:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4567
.L4601:
	bl	__stack_chk_fail(PLT)
.L4604:
	.align	2
.L4603:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1121+8))
	.word	.LANCHOR3-(.LPIC1119+8)
	.word	.LANCHOR3-(.LPIC1117+8)
	.word	.LC297-(.LPIC1109+8)
	.word	.LC299-(.LPIC1114+8)
	.word	.LC299-(.LPIC1115+8)
	.word	.LC300-(.LPIC1116+8)
	.word	.LC301-(.LPIC1118+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1122+8))
	.word	android_unbind_config-(.LPIC1113+8)
	.word	.LANCHOR3-(.LPIC1110+8)
	.word	.LC298-(.LPIC1112+8)
	.word	.LC302-(.LPIC1120+8)
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4667
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, #0
	strd	r6, [sp, #8]
	ldr	ip, .L4667+4
	mov	r5, r0
	strd	r8, [sp, #16]
	ldr	r1, .L4667+8
	str	r10, [sp, #24]
	ldr	r2, .L4667+12
	str	lr, [sp, #28]
.LPIC1123:
	add	r3, pc, r3
	.pad #56
	sub	sp, sp, #56
	ldr	r8, [r0, #-172]
.LPIC1125:
	add	ip, pc, ip
	str	r3, [sp, #8]
	ldr	lr, .L4667+16
.LPIC1126:
	add	r1, pc, r1
	ldr	r3, .L4667+20
.LPIC1127:
	add	r2, pc, r2
	str	r4, [sp, #12]
	str	r4, [sp, #20]
	add	r7, r8, #60
	str	r4, [sp, #28]
.LPIC1124:
	add	lr, pc, lr
	mov	r0, r7
	str	ip, [sp, #24]
.LPIC1128:
	add	r3, pc, r3
	str	r1, [sp, #32]
	str	lr, [sp, #16]
	str	r3, [sp, #48]
	str	r2, [sp, #40]
	str	r4, [sp, #36]
	str	r4, [sp, #44]
	str	r4, [sp, #52]
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r5, #-129]	@ zero_extendqisi2
	mov	r10, r0
	ldrb	r9, [r5, #-130]	@ zero_extendqisi2
	cmp	r3, r9
	ldr	r3, [r8, #12]
	beq	.L4606
	cmp	r3, r4
	beq	.L4607
	ldr	r1, .L4667+24
	mov	r2, #3
	sub	r0, r5, #128
.LPIC1129:
	add	r1, pc, r1
	bl	strncmp(PLT)
	cmp	r0, r4
	beq	.L4608
	cmp	r9, r4
	moveq	r4, #1
	bne	.L4609
.L4610:
	mov	r2, #4
	add	r6, sp, #40
.L4625:
	ldr	r3, .L4667+28
	strb	r9, [r5, #-129]
	mov	r1, r10
	ldrb	ip, [r5, #-132]	@ zero_extendqisi2
	mov	r0, r7
.LPIC1151:
	add	r3, pc, r3
	strb	ip, [r5, #-131]
	str	r2, [r3, #-588]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmn	r4, #1
	beq	.L4632
	ldr	r3, [r5, #-136]
	add	r7, sp, #16
	cmp	r3, #0
	beq	.L4628
.L4626:
	ldr	r2, .L4667+32
.LPIC1131:
	add	r2, pc, r2
	ldr	r2, [r2, #420]
	cmp	r4, r2
	beq	.L4628
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4628
	cmp	r4, #0
	sub	r0, r5, #120
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request(PLT)
	ldr	r3, .L4667+36
.LPIC1132:
	add	r3, pc, r3
	str	r4, [r3, #420]
.L4628:
	cmp	r6, r7
	beq	.L4627
.L4617:
	add	r3, sp, #24
	cmp	r6, r3
	beq	.L4664
.L4620:
	ldr	r3, .L4667+40
.LPIC1153:
	add	r3, pc, r3
.L4660:
	ldr	r3, [r3, #-588]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4622
	ldr	r0, [r5, #-168]
	mov	r2, r6
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
.L4623:
	ldr	r3, .L4667+44
.LPIC1139:
	add	r3, pc, r3
	ldr	r2, [r3, #-588]
	str	r2, [r3, #-584]
.L4622:
	ldr	r2, .L4667+48
	ldr	r0, .L4667+52
	ldr	r3, [r6]
.LPIC1141:
	add	r2, pc, r2
	add	r2, r2, #1968
.LPIC1143:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
.L4605:
	add	sp, sp, #56
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4608:
	cmp	r9, #0
	mvn	r4, #0
	beq	.L4610
.L4609:
	mov	r2, #3
	add	r6, sp, #32
	b	.L4625
.L4665:
	mov	r6, r7
.L4618:
	ldr	r2, .L4667+56
	ldr	r0, .L4667+60
.LPIC1135:
	add	r2, pc, r2
	add	r2, r2, #1968
.LPIC1137:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	ldr	r0, [r5, #-168]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
.L4632:
	ldr	r3, .L4667+64
.LPIC1138:
	add	r3, pc, r3
	ldr	r3, [r3, #-588]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4622
	ldr	r0, [r5, #-168]
	add	r7, sp, #16
	mov	r2, r6
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	cmp	r6, r7
	bne	.L4623
	b	.L4633
.L4606:
	cmp	r3, #0
	beq	.L4607
	ldr	r3, .L4667+68
	mov	r1, #2
	add	r6, sp, #24
	ldrb	r2, [r5, #-132]	@ zero_extendqisi2
.LPIC1130:
	add	r3, pc, r3
	str	r1, [r3, #-588]
.L4611:
	strb	r2, [r5, #-131]
	mov	r1, r10
	mov	r0, r7
	strb	r9, [r5, #-129]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L4658
	add	r7, sp, #16
	cmp	r6, r7
	bne	.L4617
.L4627:
	ldr	r3, .L4667+72
.LPIC1133:
	add	r3, pc, r3
	ldr	r2, [r3, #-584]
	cmp	r2, #0
	bne	.L4665
	ldr	r3, [r3, #-588]
	sub	r3, r3, #3
	cmp	r3, #1
	movls	r6, r7
	bls	.L4622
	ldr	r0, [r5, #-168]
	mov	r2, r7
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
.L4633:
	ldr	r0, [r5, #-168]
	add	r2, sp, #48
	mov	r1, #2
	mov	r6, r7
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	b	.L4623
.L4664:
	ldr	r3, .L4667+76
.LPIC1134:
	add	r3, pc, r3
	ldr	r2, [r3, #-584]
	cmp	r2, #2
	bne	.L4660
	b	.L4618
.L4607:
	ldrb	r4, [r5, #-132]	@ zero_extendqisi2
	ldrb	r2, [r5, #-131]	@ zero_extendqisi2
	cmp	r4, r2
	beq	.L4638
	cmp	r4, #0
	beq	.L4666
	ldr	r3, .L4667+80
	mov	r6, #1
	mov	r2, #3
	ldr	r1, .L4667+84
	sub	r0, r5, #128
.LPIC1148:
	add	r3, pc, r3
.LPIC1149:
	add	r1, pc, r1
	str	r6, [r3, #-588]
	bl	strncmp(PLT)
	adds	r4, r0, #0
	strb	r6, [r5, #-131]
	mov	r0, r7
	mov	r1, r10
	strb	r9, [r5, #-129]
	movne	r4, #1
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #-136]
	add	r7, sp, #16
	cmp	r3, #0
	movne	r6, r7
	bne	.L4626
	b	.L4627
.L4638:
	mov	r6, #0
	b	.L4611
.L4666:
	ldr	r3, .L4667+88
	strb	r4, [r5, #-131]
	mov	r1, r10
	strb	r9, [r5, #-129]
	mov	r0, r7
.LPIC1147:
	add	r3, pc, r3
	str	r4, [r3, #-588]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #-136]
	add	r6, sp, #8
	cmp	r3, #0
	beq	.L4620
	add	r7, sp, #16
	b	.L4626
.L4658:
	ldr	r2, .L4667+92
	ldr	r1, [r8, #12]
	ldrb	ip, [r5, #-131]	@ zero_extendqisi2
	ldr	r0, .L4667+96
.LPIC1144:
	add	r2, pc, r2
	ldrb	r3, [r5, #-132]	@ zero_extendqisi2
	add	r2, r2, #1968
	str	r1, [sp, #4]
	add	r2, r2, #8
	str	ip, [sp]
	mov	r1, r2
.LPIC1146:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4605
.L4668:
	.align	2
.L4667:
	.word	.LC303-(.LPIC1123+8)
	.word	.LC305-(.LPIC1125+8)
	.word	.LC306-(.LPIC1126+8)
	.word	.LC307-(.LPIC1127+8)
	.word	.LC304-(.LPIC1124+8)
	.word	.LC308-(.LPIC1128+8)
	.word	.LC309-(.LPIC1129+8)
	.word	.LANCHOR4-(.LPIC1151+8)
	.word	.LANCHOR2-(.LPIC1131+8)
	.word	.LANCHOR2-(.LPIC1132+8)
	.word	.LANCHOR4-(.LPIC1153+8)
	.word	.LANCHOR4-(.LPIC1139+8)
	.word	.LANCHOR3-(.LPIC1141+8)
	.word	.LC311-(.LPIC1143+8)
	.word	.LANCHOR3-(.LPIC1135+8)
	.word	.LC310-(.LPIC1137+8)
	.word	.LANCHOR4-(.LPIC1138+8)
	.word	.LANCHOR4-(.LPIC1130+8)
	.word	.LANCHOR4-(.LPIC1133+8)
	.word	.LANCHOR4-(.LPIC1134+8)
	.word	.LANCHOR4-(.LPIC1148+8)
	.word	.LC309-(.LPIC1149+8)
	.word	.LANCHOR4-(.LPIC1147+8)
	.word	.LANCHOR3-(.LPIC1144+8)
	.word	.LC312-(.LPIC1146+8)
	.fnend
	.size	android_work, .-android_work
	.align	2
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, [r1, #44]
	ldr	r0, [r1, #32]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L4672
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	ldr	r2, [r1]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #8]
	mov	r1, ip
	str	lr, [sp]
	bl	hid_report_raw_event(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4672:
	ldr	r0, .L4673
	mov	r1, ip
.LPIC1154:
	add	r0, pc, r0
	b	printk(PLT)
.L4674:
	.align	2
.L4673:
	.word	.LC313-(.LPIC1154+8)
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4709
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC1155:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r7, [r3, #2500]
	add	r9, sp, #16
	str	r9, [sp, #16]
	str	r9, [sp, #20]
	add	r6, r7, #88
	mov	r8, r7
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r8, #1776]!
	mov	r10, r0
	cmp	r5, r8
	ldr	r4, [r5]
	bne	.L4680
	b	.L4681
.L4679:
	cmp	r8, r4
	ldr	r3, [r4]
	mov	r5, r4
	beq	.L4681
.L4695:
	mov	r4, r3
.L4680:
	ldr	r2, [r5, #28]
	ldr	r3, [r5, #24]
	cmp	r2, r3
	bne	.L4679
	mov	r0, r5
	bl	__list_del_entry(PLT)
	ldr	r2, [sp, #16]
	mov	r0, r5
	mov	r1, r9
	bl	__list_add(PLT)
	cmp	r8, r4
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L4695
.L4681:
	ldr	r2, [r7, #1784]
	add	r3, r7, #1776
	add	r3, r3, #8
	cmp	r2, r3
	beq	.L4706
	ldr	r1, [r7, #1788]
	add	r8, sp, #32
	str	r2, [r8, #-8]!
	str	r1, [sp, #28]
	str	r8, [r2, #4]
	ldr	r2, [sp, #28]
	str	r8, [r2]
	str	r3, [r7, #1784]
	str	r3, [r7, #1788]
.L4682:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r4, [sp, #16]
	cmp	r4, r9
	ldr	r5, [r4]
	beq	.L4692
	ldr	r2, .L4709+4
	add	r3, r7, #1760
	ldr	fp, .L4709+8
	add	r3, r3, #8
.LPIC1159:
	add	r2, pc, r2
.LPIC1156:
	add	fp, pc, fp
	str	r2, [sp, #8]
	ldr	r2, .L4709+12
.LPIC1158:
	add	r2, pc, r2
	str	r2, [sp, #12]
	add	r2, fp, #492
	stmia	sp, {r2, r8}
	mov	r8, r3
	b	.L4691
.L4686:
	ldr	r3, [sp]
	str	r2, [r0, #36]
	ldr	r1, [fp, #156]
	str	r2, [r0, #40]
	str	r4, [r0, #3848]
	str	r3, [r0, #3548]
	mov	r3, #3
	str	r1, [r0, #3200]
	strh	r3, [r0, #32]	@ movhi
	bl	hid_add_device(PLT)
	cmp	r0, #0
	streq	r10, [r4, #8]
	bne	.L4707
.L4688:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	mov	r0, r4
	bl	__list_del_entry(PLT)
	mov	r0, r4
	mov	r1, r8
	ldr	r2, [r7, #1768]
	bl	__list_add(PLT)
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L4690:
	cmp	r5, r9
	ldr	r3, [r5]
	mov	r4, r5
	beq	.L4708
	mov	r5, r3
.L4691:
	bl	hid_allocate_device(PLT)
	cmn	r0, #4096
	mov	r10, r0
	mvn	r2, #0
	bls	.L4686
	cmp	r0, #0
	beq	.L4688
.L4687:
	mov	r1, r4
	ldr	r0, [sp, #8]
	bl	printk(PLT)
	ldr	r0, [r4, #20]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L4690
.L4708:
	ldr	r8, [sp, #4]
.L4692:
	ldr	r4, [sp, #24]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L4675
.L4694:
	mov	r0, r4
	bl	list_del(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4693
	bl	hid_destroy_device(PLT)
.L4693:
	ldr	r0, [r4, #20]
	bl	kfree(PLT)
	mov	r0, r4
	mov	r4, r5
	bl	kfree(PLT)
	cmp	r5, r8
	ldr	r5, [r5]
	bne	.L4694
.L4675:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4706:
	add	r8, sp, #24
	str	r8, [sp, #24]
	str	r8, [sp, #28]
	b	.L4682
.L4707:
	mov	r1, r0
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	mov	r0, r10
	bl	hid_destroy_device(PLT)
	b	.L4687
.L4710:
	.align	2
.L4709:
	.word	.LANCHOR1-(.LPIC1155+8)
	.word	.LC315-(.LPIC1159+8)
	.word	.LANCHOR0-(.LPIC1156+8)
	.word	.LC314-(.LPIC1158+8)
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r2, [r3, #24]
	ldr	r1, [r3, #20]
	bl	hid_parse_report(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	dev_get_drvdata(PLT)
	mov	r7, r0
	bl	down_read(PLT)
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4714
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path(PLT)
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L4716
	bl	strlen(PLT)
	mov	r6, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove(PLT)
	add	r4, r6, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r6]
	strb	r3, [r5, r4]
.L4716:
	mov	r0, r7
	bl	up_read(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4714:
	mov	r4, r0
	strb	r0, [r5]
	b	.L4716
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	add	r2, sp, #4
	mov	r0, r5
	mov	r1, #2
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4724
.L4719:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4724:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4725
.L4720:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4719
.L4725:
	ldr	r2, [sp, #4]
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r7, #-24]
	b	.L4720
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	add	r2, sp, #4
	mov	r0, r5
	mov	r1, #2
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4732
.L4727:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4732:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4733
.L4728:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4727
.L4733:
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r7, #-24]
	b	.L4728
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldrb	r3, [r5, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L4735
	ldr	r3, [r5, #-48]
	cmp	r3, #0
	mvnne	r0, #15
	bne	.L4756
.L4735:
	cmp	r4, #0
	bne	.L4758
	mov	r0, r6
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4741
	bl	fput(PLT)
	mov	r3, #14848
	str	r4, [r5, #-48]
	movt	r3, 2
	str	r3, [r5, #-12]
.L4741:
	mov	r0, r6
	bl	up_write(PLT)
.L4742:
	mov	r0, r4
.L4756:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4758:
	sub	r3, r4, #1
	mov	r0, r6
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	streqb	r2, [r7, r3]
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4744
	bl	fput(PLT)
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r5, #-48]
	str	r3, [r5, #-12]
.L4744:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4741
	mov	r1, r7
	sub	r0, r5, #48
	bl	fsg_lun_open(PLT)
	subs	r7, r0, #0
	bne	.L4740
	mov	r3, #10240
	movt	r3, 6
	str	r3, [r5, #-12]
	b	.L4741
.L4740:
	mov	r0, r6
	bl	up_write(PLT)
	cmp	r7, #0
	movlt	r0, r7
	blt	.L4756
	b	.L4742
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, r6, r7, r8, r9, r10, fp, lr}
	str	r4, [sp, #-32]!
	ldr	ip, .L4767
	mov	r2, r1
	strd	r10, [sp, #20]
	ldr	fp, .L4767+4
	mov	r4, r1
	strd	r6, [sp, #4]
	strd	r8, [sp, #12]
	str	lr, [sp, #28]
	ldr	r10, [r0]
.LPIC1161:
	add	ip, pc, ip
.LPIC1167:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
	.pad #256
	sub	sp, sp, #256
	add	r1, ip, #1984
	ldr	r0, .L4767+8
	add	r1, r1, #8
	ldr	r3, [fp]
.LPIC1162:
	add	r0, pc, r0
	str	r3, [sp, #252]
	bl	printk(PLT)
	cmp	r10, #0
	moveq	r0, r10
	beq	.L4760
	ldr	r8, .L4767+12
	mov	r3, r4
	add	lr, sp, #12
	ldr	r2, .L4767+16
	add	r4, sp, #132
	mov	r1, #120
	mov	r0, r4
	str	lr, [sp]
.LPIC1163:
	add	r8, pc, r8
	ldrd	r6, [r8]
.LPIC1164:
	add	r2, pc, r2
	strd	r6, [sp, #12]
	ldrd	r6, [r8, #8]
	ldrd	r8, [r8, #16]
	strd	r6, [sp, #20]
	strd	r8, [sp, #28]
	bl	snprintf(PLT)
	ldr	r0, [r10, #356]
	mov	r3, #0
	str	r4, [sp, #4]
	str	r3, [sp, #8]
	cmp	r0, r3
	beq	.L4761
.L4762:
	add	r0, r10, #40
	mov	r2, sp
	mov	r1, #2
	bl	kobject_uevent_env(PLT)
	mov	r0, #0
.L4760:
	ldr	r2, [sp, #252]
	ldr	r3, [fp]
	cmp	r2, r3
	bne	.L4766
	add	sp, sp, #256
	@ sp needed
	ldr	r4, [sp]
	ldrd	r6, [sp, #4]
	ldrd	r8, [sp, #12]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4761:
	ldr	r2, .L4767+20
	ldr	r1, .L4767+24
.LPIC1165:
	add	r2, pc, r2
.LPIC1166:
	add	r1, pc, r1
	sub	r2, r2, #580
	bl	__class_create(PLT)
	cmn	r0, #4096
	str	r0, [r10, #356]
	mvnhi	r0, #0
	bls	.L4762
	b	.L4760
.L4766:
	bl	__stack_chk_fail(PLT)
.L4768:
	.align	2
.L4767:
	.word	.LANCHOR3-(.LPIC1161+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1167+8))
	.word	.LC316-(.LPIC1162+8)
	.word	.LC317-(.LPIC1163+8)
	.word	.LC318-(.LPIC1164+8)
	.word	.LANCHOR4-(.LPIC1165+8)
	.word	.LC319-(.LPIC1166+8)
	.fnend
	.size	send_message, .-send_message
	.align	2
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4779
.L4770:
#APP
@ 689 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r2, #0
	mov	r3, #1
	str	r2, [r6, #28]
	str	r3, [r6, #4]
#APP
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4771
	bl	wake_up_process(PLT)
.L4771:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4779:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4770
	blx	r3
	b	.L4770
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4790
.L4781:
#APP
@ 668 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	str	r3, [r6, #20]
	str	r3, [r6, #4]
#APP
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4782
	bl	wake_up_process(PLT)
.L4782:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4790:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4781
	blx	r3
	b	.L4781
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, sp
	strd	r6, [sp, #8]
	ldr	r7, .L4804
	bic	r5, r3, #8128
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	bic	r5, r5, #63
	mov	r9, #1
	str	lr, [sp, #28]
.LPIC1169:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	b	.L4796
.L4792:
	str	r9, [r0]
#APP
@ 819 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #12]
	mov	r0, r6
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4797
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L4803
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L4796:
	ldr	r2, [r7]
	ldr	r0, [r5, #12]
	cmp	r2, #0
	beq	.L4792
	bl	freezing_slow_path(PLT)
	cmp	r0, #0
	mov	r0, #0
	beq	.L4802
	bl	__refrigerator(PLT)
.L4802:
	ldr	r0, [r5, #12]
	b	.L4792
.L4797:
	mvn	r4, #3
.L4794:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq(PLT)
	str	r5, [r8, #148]
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 836 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4803:
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r2, [r3, #12]
	b	.L4794
.L4805:
	.align	2
.L4804:
	.word	system_freezing_cnt(GOT_PREL)+(.-(.LPIC1169+8))
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
#APP
@ 858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r6, [r0, #32]
	ldr	r1, [r0, #16]
	ldrd	r2, [r0, #24]
	cmp	r6, #0
	str	r1, [sp, #4]
	sbcs	r1, r7, #0
	strd	r2, [sp, #8]
	blt	.L4807
	mov	r3, sp
	mov	r5, #0
	bic	r9, r3, #8128
	mov	r8, r0
	mov	r10, r5
	bic	r9, r9, #63
	b	.L4808
.L4845:
	ldr	r3, .L4847
	add	r1, r5, #42
	mov	lr, #0
	add	r1, r8, r1, lsl #2
	mov	r2, #208
	eor	r5, r5, #1
	ldr	r4, [r1, #-200]
.LPIC1172:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	mov	r1, r4
	ldr	r3, [r3]
	str	r3, [r4, #4]
	ldr	r0, [r8, #-104]
	str	lr, [r8, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4841
	cmp	fp, #0
	beq	.L4814
	add	r3, sp, #8
	ldr	r2, [r10, #48]
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	bne	.L4841
.L4814:
	cmp	r4, #0
	beq	.L4816
	ldr	r2, [r8, #-24]
	ldr	r3, [r8, #-96]
	cmp	r2, #0
	bne	.L4818
	cmp	r3, #2
	beq	.L4842
.L4818:
	cmp	r3, #3
	cmpne	r3, #0
	beq	.L4843
.L4821:
	ldr	r2, [r4, #4]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r7, r1
	bge	.L4823
	ldr	r0, [r4, #48]
	mov	r1, #0
	mov	r3, r6
	cmp	r0, r6
	sbcs	ip, r1, r7
	movlt	r3, r0
	str	r3, [r4, #48]
.L4825:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L4827:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L4816:
	mov	r10, r4
.L4808:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r4, #1
	movlt	r4, #0
	adds	fp, r10, #0
	movne	fp, #1
	orrs	r3, fp, r4
	beq	.L4844
	cmp	r4, #0
	bne	.L4845
	cmp	fp, #0
	beq	.L4832
	add	r3, sp, #8
	ldr	r2, [r10, #48]
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	beq	.L4816
.L4841:
	ldr	r3, [r8, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r5, #4
	mvnne	r5, #4
	strne	r3, [r8, #-96]
.L4813:
	str	r5, [r8, #52]
#APP
@ 946 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L4806:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4823:
	mov	r1, #0
	mvn	r0, #0
	ldr	r3, [r4, #48]
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L4827
	b	.L4825
.L4832:
	mov	r4, fp
	b	.L4816
.L4842:
	ldr	r1, .L4847+4
	add	r3, sp, #32
	add	fp, sp, #20
	ldr	r0, [r9, #12]
	sub	r10, r8, #68
	str	r2, [sp, #20]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
.LPIC1171:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #24]
	b	.L4820
.L4846:
	bl	schedule(PLT)
.L4820:
	mov	r2, #1
	mov	r1, fp
	mov	r0, r10
	bl	prepare_to_wait(PLT)
	ldr	r3, [r8, #-24]
	cmp	r3, #0
	bne	.L4819
	ldr	r3, [r8, #-96]
	cmp	r3, #2
	bne	.L4819
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4846
.L4819:
	mov	r1, fp
	mov	r0, r10
	bl	finish_wait(PLT)
	ldr	r3, [r8, #-96]
	cmp	r3, #3
	cmpne	r3, #0
	bne	.L4821
.L4843:
	ldr	r2, [r8, #-24]
	cmp	r3, #0
	mvneq	r5, #4
	mvnne	r5, #124
	cmp	r2, #0
	bne	.L4813
	ldr	r0, [r8, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4813
.L4844:
	mov	r5, r3
	b	.L4813
.L4807:
	mvn	r3, #21
	str	r3, [r0, #52]
	b	.L4806
.L4848:
	.align	2
.L4847:
	.word	mtp_rx_req_len(GOT_PREL)+(.-(.LPIC1172+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1171+8))
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all(PLT)
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L4852
	str	lr, [sp, #4]
.LPIC1173:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L4852+4
.LPIC1174:
	add	r0, pc, r0
	add	r0, r0, #520
	bl	unregister_filesystem(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L4853:
	.align	2
.L4852:
	.word	.LC320-(.LPIC1173+8)
	.word	.LANCHOR0-(.LPIC1174+8)
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4862
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC1179:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4855
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L4859
.L4858:
	ldr	r0, .L4862+4
.LPIC1176:
	add	r0, pc, r0
	add	r0, r0, #520
	bl	register_filesystem(PLT)
	subs	r4, r0, #0
	bne	.L4857
	ldr	r0, .L4862+8
.LPIC1177:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
.L4860:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4855:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L4858
.L4857:
	ldr	r0, .L4862+12
	mov	r1, r4
.LPIC1178:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L4860
.L4859:
	mvn	r0, #11
	b	.L4860
.L4863:
	.align	2
.L4862:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1179+8))
	.word	.LANCHOR0-(.LPIC1176+8)
	.word	.LC321-(.LPIC1177+8)
	.word	.LC322-(.LPIC1178+8)
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4866
	bx	lr
.L4866:
	ldr	ip, [r0, #332]
	add	r2, r0, #336
	mov	r0, #4
	ldr	r1, [r3, #200]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #152]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r0, #184]
	.pad #8
	sub	sp, sp, #8
	cmp	r2, #0
	beq	.L4875
	ldr	r0, [r0]
	ldr	r1, [r4, #192]
	ldr	r3, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L4876
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L4876
.L4877:
	mov	lr, #0
	str	lr, [sp]
	ldr	ip, [ip, #4]
	blx	ip
.L4875:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #184]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4876:
	ldr	ip, .L4885
.LPIC1181:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4877
.L4886:
	.align	2
.L4885:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC1181+8))
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	ldr	ip, [r0]
	cmp	r2, #0
	bne	.L4887
	ldr	r2, [r1, #48]
	cmp	r2, #7
	bne	.L4890
	ldr	r3, [r1]
	ldr	r1, [r3]	@ unaligned
	str	r1, [ip, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [ip, #164]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [ip, #166]
.L4887:
	bx	lr
.L4890:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report(PLT)
	subs	r4, r0, #0
	beq	.L4897
.L4892:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4897:
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	cmp	r0, #0
	movne	r4, r0
	bne	.L4892
	mov	r1, #45
	mov	r0, r5
	bl	hid_connect(PLT)
	subs	r3, r0, #0
	beq	.L4892
	ldr	r2, [r5, #3548]
	mov	r4, r3
	mov	r0, r5
	ldr	r3, [r2, #4]
	blx	r3
	b	.L4892
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.align	2
	.type	ep_matches.part.12, %function
ep_matches.part.12:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L4959
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
.LPIC1183:
	add	r6, pc, r6
	ands	r4, ip, #3
	beq	.L4901
	ldr	r7, [r1, #4]
	ldrb	ip, [r7]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L4955
.L4901:
	mov	r0, #0
.L4948:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4955:
	mov	r8, r3
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	mov	r5, r1
	mov	r9, r0
	mov	r10, r2
	cmp	r3, #45
	beq	.L4902
	mov	r1, #45
	mov	r0, r7
	bl	strrchr(PLT)
	subs	fp, r0, #0
	beq	.L4903
	cmp	r4, #2
	beq	.L4905
	cmp	r4, #3
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	bne	.L4949
	cmp	r3, #115
	beq	.L4901
	ldr	r0, .L4959+4
	ldr	r1, [r9, #28]
.LPIC1182:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L4907
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4901
.L4907:
	ldr	r3, .L4959+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L4920
	ldrh	r2, [r10, #4]	@ unaligned
	cmp	r2, #0
	bne	.L4956
	mov	r7, r2
	b	.L4918
.L4949:
	cmp	r3, #115
	bne	.L4901
.L4908:
	ldr	r3, .L4959+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4902
.L4920:
	ldrsb	r3, [r10, #2]
	cmp	r3, #0
	blt	.L4957
	cmp	r2, #116
	bne	.L4901
.L4902:
	sub	r7, r4, #2
	clz	r7, r7
	mov	r7, r7, lsr #5
	cmp	r8, #0
	moveq	r3, #0
	andne	r3, r7, #1
	cmp	r3, #0
	beq	.L4910
	ldr	r3, [r9, #20]
	cmp	r3, #4
	bls	.L4910
	ldrb	r3, [r8, #3]	@ zero_extendqisi2
	ldrh	r2, [r5, #22]
	and	r3, r3, #31
	cmp	r3, r2
	bgt	.L4901
.L4910:
	ldrh	r3, [r10, #4]	@ unaligned
	cmp	r3, #0
	movne	r2, r3
	bne	.L4911
.L4918:
	ldrh	r3, [r5, #20]
	mov	r2, r3
	strh	r3, [r10, #4]	@ unaligned
.L4911:
	cmp	r4, #1
	ubfx	r3, r2, #0, #11
	beq	.L4913
	cmp	r4, #3
	bne	.L4912
.L4914:
	ldr	r0, [r9, #20]
	cmp	r3, #64
	movhi	r1, #1
	movls	r1, #0
	cmp	r0, #2
	movhi	r1, #0
	cmp	r1, #0
	bne	.L4901
.L4913:
	ldrh	r1, [r5, #20]
	cmp	r1, r3
	bcc	.L4901
	ldr	r1, [r9, #20]
	cmp	r1, #2
	movhi	r1, #0
	movls	r1, #1
	cmp	r3, #1024
	movcc	r3, #0
	andcs	r3, r1, #1
	cmp	r3, #0
	bne	.L4901
	tst	r2, #6144
	moveq	r1, #0
	andne	r1, r1, #1
	cmp	r1, #0
	bne	.L4901
.L4912:
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	ldr	r2, .L4959+8
	bic	r3, r3, #127
	uxtb	r0, r3
	strb	r0, [r10, #2]
	ldr	r3, [r5, #4]
	ldr	r1, [r6, r2]
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	ldrb	r2, [r1, r2]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L4958
	ldr	r2, .L4959+12
.LPIC1184:
	add	r2, pc, r2
	ldr	r3, [r2, #-580]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r2, #-580]
	bhi	.L4901
	orr	r3, r0, r3
	uxtb	r0, r3
	strb	r0, [r10, #2]
.L4916:
	cmp	r8, #0
	movne	r8, #0
	andeq	r8, r7, #1
	cmp	r8, #0
	beq	.L4917
	ldrh	r3, [r5, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r10, #4]	@ unaligned
.L4917:
	strb	r0, [r5, #25]
	mov	r0, #1
	b	.L4948
.L4905:
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4901
	b	.L4908
.L4903:
	mov	r0, r7
	bl	strlen(PLT)
	add	fp, r7, r0
	b	.L4908
.L4958:
	add	r0, r3, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul(PLT)
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	orr	r0, r0, r3
	uxtb	r0, r0
	strb	r0, [r10, #2]
	b	.L4916
.L4957:
	cmp	r2, #110
	bne	.L4901
	b	.L4902
.L4956:
	ubfx	r3, r2, #0, #11
	mov	r7, #0
	b	.L4914
.L4960:
	.align	2
.L4959:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1183+8)
	.word	.LC323-(.LPIC1182+8)
	.word	_ctype(GOT)
	.word	.LANCHOR4-(.LPIC1184+8)
	.fnend
	.size	ep_matches.part.12, .-ep_matches.part.12
	.align	2
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #80
	mov	r4, r0
	mov	r0, r5
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #212]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L4971
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L4971
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L4972
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L4972
.L4973:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	ip, [ip, #8]
	blx	ip
.L4974:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4972:
	ldr	ip, .L4985
.LPIC1188:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4973
.L4971:
	ldr	r0, .L4985+4
.LPIC1187:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L4974
.L4986:
	.align	2
.L4985:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC1188+8))
	.word	.LC324-(.LPIC1187+8)
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_read_complete
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4990
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #48]
	add	r2, r4, #28
	mov	r0, #4
	ldr	ip, .L4991
	add	r3, r3, #1
.LPIC1191:
	add	ip, pc, ip
	ldr	r1, [ip, #2596]
	str	r3, [r4, #48]
	bl	queue_work_on(PLT)
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L4990:
	ldr	r1, .L4991+4
	ldr	r0, .L4991+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1189:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #2000
	ldr	lr, [sp, #20]
.LPIC1190:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #24
	b	printk(PLT)
.L4992:
	.align	2
.L4991:
	.word	.LANCHOR1-(.LPIC1191+8)
	.word	.LANCHOR3-(.LPIC1189+8)
	.word	.LC22-(.LPIC1190+8)
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.global	gsdio_ctrl_wq
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L4995
	bx	lr
.L4995:
	ldr	r1, .L4996
	ldr	r0, .L4996+4
.LPIC1192:
	add	r1, pc, r1
	add	r1, r1, #2016
.LPIC1193:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4997:
	.align	2
.L4996:
	.word	.LANCHOR3-(.LPIC1192+8)
	.word	.LC22-(.LPIC1193+8)
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L5011
	cmp	r1, #0
	beq	.L5001
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L5001
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L5001:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L5000:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5011:
	ldr	r1, .L5012
	ldr	r0, .L5012+4
.LPIC1194:
	add	r1, pc, r1
	add	r1, r1, #2032
.LPIC1195:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, #8
	b	.L5000
.L5013:
	.align	2
.L5012:
	.word	.LANCHOR3-(.LPIC1194+8)
	.word	.LC325-(.LPIC1195+8)
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L5020
.LPIC1196:
	add	r3, pc, r3
	ldr	ip, [r3, #1216]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L5018
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1220]
	cmp	r3, #0
	beq	.L5019
	ldr	r1, [r3, #88]
	cmp	r2, r1
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L5018:
	ldr	r3, .L5020+4
	mov	r2, r1
	ldr	r0, .L5020+8
.LPIC1197:
	add	r3, pc, r3
	add	r1, r3, #2048
.LPIC1198:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5019:
	ldr	r1, .L5020+12
	ldr	r0, .L5020+16
.LPIC1200:
	add	r1, pc, r1
	add	r1, r1, #2048
.LPIC1201:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5021:
	.align	2
.L5020:
	.word	.LANCHOR1-(.LPIC1196+8)
	.word	.LANCHOR3-(.LPIC1197+8)
	.word	.LC26-(.LPIC1198+8)
	.word	.LANCHOR3-(.LPIC1200+8)
	.word	.LC22-(.LPIC1201+8)
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L5028
.LPIC1202:
	add	r3, pc, r3
	ldr	ip, [r3, #2056]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L5026
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #2060]
	cmp	r3, #0
	beq	.L5027
	ldr	r1, [r3, #92]
	cmp	r2, r1
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L5026:
	ldr	r3, .L5028+4
	mov	r2, r1
	ldr	r0, .L5028+8
.LPIC1203:
	add	r3, pc, r3
	add	r1, r3, #2080
.LPIC1204:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5027:
	ldr	r1, .L5028+12
	ldr	r0, .L5028+16
.LPIC1206:
	add	r1, pc, r1
	add	r1, r1, #2080
.LPIC1207:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5029:
	.align	2
.L5028:
	.word	.LANCHOR1-(.LPIC1202+8)
	.word	.LANCHOR3-(.LPIC1203+8)
	.word	.LC26-(.LPIC1204+8)
	.word	.LANCHOR3-(.LPIC1206+8)
	.word	.LC22-(.LPIC1207+8)
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L5037
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L5038
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L5039
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L5035
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L5035:
	mvn	r0, #94
.L5032:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5039:
	ldr	r1, .L5040
	ldr	r0, .L5040+4
.LPIC1212:
	add	r1, pc, r1
	add	r1, r1, #2112
.LPIC1213:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5032
.L5038:
	ldr	r1, .L5040+8
	ldr	r0, .L5040+12
.LPIC1210:
	add	r1, pc, r1
	add	r1, r1, #2112
.LPIC1211:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5032
.L5037:
	ldr	r1, .L5040+16
	ldr	r0, .L5040+20
.LPIC1208:
	add	r1, pc, r1
	add	r1, r1, #2112
.LPIC1209:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5032
.L5041:
	.align	2
.L5040:
	.word	.LANCHOR3-(.LPIC1212+8)
	.word	.LC328-(.LPIC1213+8)
	.word	.LANCHOR3-(.LPIC1210+8)
	.word	.LC327-(.LPIC1211+8)
	.word	.LANCHOR3-(.LPIC1208+8)
	.word	.LC326-(.LPIC1209+8)
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L5044
	mov	r3, #1
	str	r3, [r0, #124]
	bx	lr
.L5044:
	ldr	r1, .L5045
	mov	r2, r0
	ldr	r0, .L5045+4
.LPIC1214:
	add	r1, pc, r1
	add	r1, r1, #2128
.LPIC1215:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5046:
	.align	2
.L5045:
	.word	.LANCHOR3-(.LPIC1214+8)
	.word	.LC329-(.LPIC1215+8)
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L5066
	ldr	r3, [r0, #120]
	mov	r2, #0
	str	r2, [r0, #124]
	cmp	r3, r2
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L5051
	blx	r3
.L5051:
	ldr	r3, [r5, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r5, #112]
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5067
.L5052:
	add	r8, r5, #132
	add	r7, r5, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r4, r7
	beq	.L5056
.L5055:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #144]
	cmp	r4, r7
	bne	.L5055
.L5056:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r5, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L5067:
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L5068
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5066:
	ldr	r1, .L5069
	mov	r2, r0
	ldr	r0, .L5069+4
.LPIC1216:
	add	r1, pc, r1
	add	r1, r1, #2144
.LPIC1217:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5068:
	ldr	r1, .L5069+8
	mov	r2, r0
	ldr	r0, .L5069+12
.LPIC1218:
	add	r1, pc, r1
	add	r1, r1, #2144
.LPIC1219:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5052
.L5070:
	.align	2
.L5069:
	.word	.LANCHOR3-(.LPIC1216+8)
	.word	.LC329-(.LPIC1217+8)
	.word	.LANCHOR3-(.LPIC1218+8)
	.word	.LC330-(.LPIC1219+8)
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L5075
	ldr	ip, [r3, #96]
	cmp	ip, #0
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	lr, [r3, #116]	@ zero_extendqisi2
	ldr	r3, .L5076
	ldr	r2, [r1, #48]
	ldr	r1, [r1]
	mov	r0, lr, asl #5
.LPIC1222:
	add	r3, pc, r3
	sub	r0, r0, lr, asl #3
	ldr	lr, [sp], #4
	add	r3, r3, r0
	ldrb	r0, [r3, #2524]	@ zero_extendqisi2
	bx	ip
.L5075:
	ldr	r1, .L5076+4
	ldr	r0, .L5076+8
.LPIC1220:
	add	r1, pc, r1
	add	r1, r1, #2160
.LPIC1221:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5077:
	.align	2
.L5076:
	.word	.LANCHOR1-(.LPIC1222+8)
	.word	.LANCHOR3-(.LPIC1220+8)
	.word	.LC331-(.LPIC1221+8)
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L5089
	ldr	r5, .L5089+4
	str	r6, [sp, #8]
	mov	r6, r1
	ldr	r0, .L5089+8
	str	lr, [sp, #12]
.LPIC1223:
	add	r4, pc, r4
	add	r4, r4, #2192
.LPIC1225:
	add	r5, pc, r5
.LPIC1224:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	ldr	r3, [r5, #2584]
	cmp	r3, #0
	beq	.L5087
	add	r2, r3, #92
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	r1, r0, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L5081
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L5089+12
	mov	r1, r4
.LPIC1229:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L5084:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5081:
	ldr	r0, .L5089+16
	mov	r1, r4
.LPIC1236:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2584]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L5088
.L5083:
	ldr	r1, .L5089+20
	mov	r4, #0
	str	r3, [r6, #124]
	ldr	r0, .L5089+24
	str	r4, [r3, #232]
.LPIC1233:
	add	r1, pc, r1
.LPIC1234:
	add	r0, pc, r0
	add	r1, r1, #2192
	bl	printk(PLT)
	mov	r0, r4
	b	.L5084
.L5087:
	ldr	r0, .L5089+28
	mov	r1, r4
.LPIC1227:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5084
.L5088:
	ldr	r0, .L5089+32
	mov	r1, r4
.LPIC1231:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2584]
	b	.L5083
.L5090:
	.align	2
.L5089:
	.word	.LANCHOR3-(.LPIC1223+8)
	.word	.LANCHOR1-(.LPIC1225+8)
	.word	.LC332-(.LPIC1224+8)
	.word	.LC64-(.LPIC1229+8)
	.word	.LC335-(.LPIC1236+8)
	.word	.LANCHOR3-(.LPIC1233+8)
	.word	.LC334-(.LPIC1234+8)
	.word	.LC333-(.LPIC1227+8)
	.word	.LC185-(.LPIC1231+8)
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5100
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC1238:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	cmp	r3, #0
	beq	.L5092
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L5092
	ldr	r1, .L5100+4
	mov	r0, r2
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrh	r2, [r3, #20]
.LPIC1241:
	add	r1, pc, r1
	b	sprintf(PLT)
.L5092:
	ldr	r1, .L5100+8
	ldr	r0, .L5100+12
.LPIC1239:
	add	r1, pc, r1
	add	r1, r1, #2192
.LPIC1240:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5101:
	.align	2
.L5100:
	.word	.LANCHOR1-(.LPIC1238+8)
	.word	.LC78-(.LPIC1241+8)
	.word	.LANCHOR3-(.LPIC1239+8)
	.word	.LC268-(.LPIC1240+8)
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5111
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC1242:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	cmp	r3, #0
	beq	.L5103
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L5103
	ldr	r1, .L5111+4
	mov	r0, r2
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrh	r2, [r3, #20]
.LPIC1245:
	add	r1, pc, r1
	b	sprintf(PLT)
.L5103:
	ldr	r1, .L5111+8
	ldr	r0, .L5111+12
.LPIC1243:
	add	r1, pc, r1
.LPIC1244:
	add	r0, pc, r0
	add	r1, r1, #2240
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5112:
	.align	2
.L5111:
	.word	.LANCHOR1-(.LPIC1242+8)
	.word	.LC78-(.LPIC1245+8)
	.word	.LANCHOR3-(.LPIC1243+8)
	.word	.LC268-(.LPIC1244+8)
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5119
.LPIC1246:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	cmp	r3, #0
	beq	.L5117
	ldr	r3, [r3, #192]
	mov	r0, r2
	ldr	r1, .L5119+4
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movge	r2, r3
.LPIC1249:
	add	r1, pc, r1
	mov	r2, r2, asr #10
	b	sprintf(PLT)
.L5117:
	ldr	r1, .L5119+8
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L5119+12
	str	lr, [sp, #4]
.LPIC1247:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1248:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5120:
	.align	2
.L5119:
	.word	.LANCHOR1-(.LPIC1246+8)
	.word	.LC78-(.LPIC1249+8)
	.word	.LANCHOR3-(.LPIC1247+8)
	.word	.LC268-(.LPIC1248+8)
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5122
	ldr	r1, .L5124
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	ldrh	r2, [r3, #19]	@ unaligned
.LPIC1250:
	add	r1, pc, r1
	b	sprintf(PLT)
.L5122:
	ldr	r3, .L5124+4
	mov	r0, r4
	ldr	r1, .L5124+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1251:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC1252:
	add	r1, pc, r1
	ldrh	r2, [r3, #2]
	b	sprintf(PLT)
.L5125:
	.align	2
.L5124:
	.word	.LC209-(.LPIC1250+8)
	.word	.LANCHOR2-(.LPIC1251+8)
	.word	.LC209-(.LPIC1252+8)
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L5133
	mov	r0, r2
	ldr	r4, .L5133+4
	str	r6, [sp, #8]
	mov	r5, r2
	str	lr, [sp, #12]
	ldr	r1, .L5133+8
	.pad #8
	sub	sp, sp, #8
.LPIC1257:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC1258:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1254:
	add	r1, pc, r1
	ldrh	lr, [r3]
	ldrh	r2, [r4]
	str	lr, [sp]
	mov	r3, r2, lsr #8
	uxtb	r2, r2
	bl	sprintf(PLT)
	ldrh	r3, [r4]
	mov	r6, r0
	cmp	r3, #0
	bne	.L5132
.L5127:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5132:
	ldr	r1, .L5133+12
	mov	r2, r5
	ldr	r0, .L5133+16
.LPIC1255:
	add	r1, pc, r1
	add	r1, r1, #2304
.LPIC1256:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5127
.L5134:
	.align	2
.L5133:
	.word	terminal_mode_vendor_id(GOT_PREL)+(.-(.LPIC1257+8))
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC1258+8))
	.word	.LC336-(.LPIC1254+8)
	.word	.LANCHOR3-(.LPIC1255+8)
	.word	.LC337-(.LPIC1256+8)
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L5135
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L5143
.L5135:
	bx	lr
.L5143:
	ldr	r1, .L5144
	mvn	r2, #18
	ldr	r0, .L5144+4
.LPIC1259:
	add	r1, pc, r1
	add	r1, r1, #2336
.LPIC1260:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5145:
	.align	2
.L5144:
	.word	.LANCHOR3-(.LPIC1259+8)
	.word	.LC338-(.LPIC1260+8)
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.section	.init.text
	.align	2
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L5150
	mov	r1, #10
	mov	r2, #1
	ldr	r0, .L5150+4
	movt	r1, 2
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r3, r4
.LPIC1262:
	add	ip, pc, ip
.LPIC1261:
	add	r0, pc, r0
	str	r4, [sp]
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L5150+8
	cmp	r0, r4
.LPIC1263:
	add	r3, pc, r3
	str	r0, [r3, #-1488]
	movne	r0, r4
	bne	.L5147
	ldr	r2, .L5150+12
	ldr	r0, .L5150+16
.LPIC1264:
	add	r2, pc, r2
	add	r2, r2, #2352
.LPIC1266:
	add	r0, pc, r0
	add	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #11
.L5147:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L5151:
	.align	2
.L5150:
	.word	.LC339-(.LPIC1262+8)
	.word	.LC208-(.LPIC1261+8)
	.word	.LANCHOR4-(.LPIC1263+8)
	.word	.LANCHOR3-(.LPIC1264+8)
	.word	.LC340-(.LPIC1266+8)
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L5153
	ldr	r3, .L5173
	mov	ip, #84
.LPIC1267:
	add	r3, pc, r3
	mla	r3, ip, r1, r3
	ldr	ip, [r3, #708]
	cmp	ip, #0
	beq	.L5153
	cmp	r0, #0
	beq	.L5171
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	beq	.L5155
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
.L5155:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L5152
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L5172
.L5152:
	bx	lr
.L5153:
	ldr	r3, .L5173+4
	mov	r2, r1
	ldr	r0, .L5173+8
.LPIC1270:
	add	r3, pc, r3
	add	r1, r3, #2368
.LPIC1271:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5172:
	ldr	r0, [ip]
	b	smd_tiocmset(PLT)
.L5171:
	ldr	r1, .L5173+12
	ldr	r0, .L5173+16
.LPIC1268:
	add	r1, pc, r1
	add	r1, r1, #2368
.LPIC1269:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5174:
	.align	2
.L5173:
	.word	.LANCHOR1-(.LPIC1267+8)
	.word	.LANCHOR3-(.LPIC1270+8)
	.word	.LC26-(.LPIC1271+8)
	.word	.LANCHOR3-(.LPIC1268+8)
	.word	.LC341-(.LPIC1269+8)
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.init.text
	.align	2
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L5181
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, #0
	ldr	r3, .L5181+4
	ldr	r6, .L5181+8
	ldr	r4, .L5181+12
.LPIC1280:
	add	r2, pc, r2
	ldr	lr, .L5181+16
	add	r7, r2, #16
	ldr	ip, .L5181+20
.LPIC1272:
	add	r3, pc, r3
	ldr	r1, .L5181+24
.LPIC1273:
	add	r6, pc, r6
	add	r0, r3, #16
.LPIC1275:
	add	r4, pc, r4
	str	r7, [r2, #16]
.LPIC1277:
	add	lr, pc, lr
	str	r7, [r2, #20]
.LPIC1279:
	add	ip, pc, ip
	str	r4, [r3, #572]
.LPIC1284:
	add	r1, pc, r1
	str	r6, [r3, #568]
	str	lr, [r3, #576]
	str	ip, [r3, #580]
	str	r5, [r1, #-576]
	bl	platform_driver_register(PLT)
	subs	r4, r0, #0
	beq	.L5176
	ldr	r2, .L5181+28
	ldr	r0, .L5181+32
.LPIC1286:
	add	r2, pc, r2
	add	r2, r2, #2400
.LPIC1288:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
.L5176:
	mov	r0, r4
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L5182:
	.align	2
.L5181:
	.word	.LANCHOR1-(.LPIC1280+8)
	.word	.LANCHOR0-(.LPIC1272+8)
	.word	android_setup-(.LPIC1273+8)
	.word	android_disconnect-(.LPIC1275+8)
	.word	android_suspend-(.LPIC1277+8)
	.word	android_resume-(.LPIC1279+8)
	.word	.LANCHOR4-(.LPIC1284+8)
	.word	.LANCHOR3-(.LPIC1286+8)
	.word	.LC342-(.LPIC1288+8)
	.fnend
	.size	init, .-init
	.text
	.align	2
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5188
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L5188+4
	str	lr, [sp, #4]
.LPIC1289:
	add	r3, pc, r3
	ldr	r4, [r3, #2496]
.LPIC1290:
	add	r0, pc, r0
	bl	printk(PLT)
	cmp	r4, #0
	beq	.L5187
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up(PLT)
	mov	r0, #0
.L5185:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5187:
	ldr	r1, .L5188+8
	ldr	r0, .L5188+12
.LPIC1291:
	add	r1, pc, r1
.LPIC1292:
	add	r0, pc, r0
	add	r1, r1, #2416
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5185
.L5189:
	.align	2
.L5188:
	.word	.LANCHOR1-(.LPIC1289+8)
	.word	.LC343-(.LPIC1290+8)
	.word	.LANCHOR3-(.LPIC1291+8)
	.word	.LC344-(.LPIC1292+8)
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L5192
	bx	lr
.L5192:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L5195
	bx	lr
.L5195:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #-152]
	mov	r10, r0
	cmp	r8, #0
	beq	.L5199
	ldr	r2, [r4, #-112]
	sub	r3, r4, #112
	str	r3, [sp, #4]
	cmp	r3, r2
	beq	.L5199
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #8]
	cmp	r3, r5
	cmpne	r5, #0
	beq	.L5199
	ldr	r3, .L5215
	mov	fp, #0
.LPIC1296:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [sp, #12]
	b	.L5201
.L5205:
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #8]
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L5199
.L5201:
	ldr	r2, [r4, #-96]
	ldr	r3, [sp, #12]
	sub	r2, r2, #1
	str	r2, [r4, #-96]
	ldmia	r5, {r1, r2}
	str	fp, [r5]
	str	fp, [r5, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r2, [r5, #172]
	mov	r0, r6
	sub	r9, r6, #36
	str	r2, [r6, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r6, #-32]
	ldr	r2, [r4, #32]
	ldr	r1, [r3]
	add	r2, r2, #1
	cmp	r2, r1
	str	r2, [r4, #32]
	ldrb	r2, [r6, #-10]	@ zero_extendqisi2
	bfceq	r2, #0, #1
	orrne	r2, r2, #1
	streqb	r2, [r6, #-10]
	strneb	r2, [r6, #-10]
	streq	fp, [r4, #32]
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r10, r0
	bne	.L5214
	ldr	r2, [r4, #48]
	ldr	r1, [r4, #-112]
	ldr	r3, [sp, #4]
	add	r2, r2, #1
	cmp	r3, r1
	str	r2, [r4, #48]
	bne	.L5205
.L5199:
	mov	r1, r10
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L5214:
	ldr	r1, .L5215+4
	ldr	r0, .L5215+8
.LPIC1294:
	add	r1, pc, r1
	add	r1, r1, #2432
.LPIC1295:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L5199
.L5216:
	.align	2
.L5215:
	.word	ghsuart_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1296+8))
	.word	.LANCHOR3-(.LPIC1294+8)
	.word	.LC345-(.LPIC1295+8)
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-112]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5219
	blx	r3
.L5219:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	ip, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #-208]
	mov	r2, #208
	ldr	r1, [r4, #-204]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5264
.L5220:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5221
	blx	r3
.L5221:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5222
	blx	r3
.L5222:
	sub	r0, r4, #68
	bl	cancel_work_sync(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	bne	.L5265
.L5239:
	mov	r1, r6
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L5264:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L5266
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5265:
	ldr	r7, [r4, #-172]
	sub	r8, r4, #172
	cmp	r7, r8
	movne	r9, #0
	beq	.L5228
.L5227:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #-164]
	mov	r1, r10
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r9, [r7, #-36]
	ldr	r0, [r4, #-216]
	bl	rmnet_sdio_free_req(PLT)
	ldr	r7, [r4, #-172]
	cmp	r7, r8
	bne	.L5227
.L5228:
	ldr	r7, [r4, #-144]
	sub	r8, r4, #144
	cmp	r7, r8
	movne	r9, #0
	beq	.L5226
.L5231:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #-136]
	mov	r1, r10
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r9, [r7, #-36]
	ldr	r0, [r4, #-212]
	bl	rmnet_sdio_free_req(PLT)
	ldr	r7, [r4, #-144]
	cmp	r7, r8
	bne	.L5231
.L5226:
	ldr	r7, [r4, #-196]
	sub	r8, r4, #196
	cmp	r7, r8
	beq	.L5230
.L5234:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r7, [r4, #-196]
	cmp	r7, r8
	bne	.L5234
.L5230:
	ldr	r7, [r4, #-184]
	sub	r8, r4, #184
	cmp	r7, r8
	beq	.L5233
.L5236:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r7, [r4, #-184]
	cmp	r7, r8
	bne	.L5236
.L5233:
	ldr	r1, .L5268
	mov	r3, #0
	sub	r9, r4, #160
	ldr	r0, .L5268+4
	mov	r8, r3
	str	r3, [r4, #-108]
.LPIC1299:
	add	r1, pc, r1
	add	r1, r1, #2464
.LPIC1300:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5235
.L5261:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
.L5235:
	ldr	r3, [r4, #-160]
	cmp	r3, r9
	cmpne	r3, #0
	mov	r0, r3
	movne	r7, #1
	moveq	r7, #0
	bne	.L5261
	sub	r8, r4, #132
	b	.L5237
.L5267:
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldmia	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
.L5237:
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	cmpne	r3, #0
	mov	r0, r3
	bne	.L5267
	b	.L5239
.L5266:
	ldr	r1, .L5268+8
	mov	r2, r0
	ldr	r0, .L5268+12
.LPIC1297:
	add	r1, pc, r1
	add	r1, r1, #2464
.LPIC1298:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5220
.L5269:
	.align	2
.L5268:
	.word	.LANCHOR3-(.LPIC1299+8)
	.word	.LC346-(.LPIC1300+8)
	.word	.LANCHOR3-(.LPIC1297+8)
	.word	.LC330-(.LPIC1298+8)
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_connect_work
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L5275
	mov	r5, r0
	ldr	r2, .L5275+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #52]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, .L5275+8
.LPIC1306:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1302:
	add	r2, pc, r2
	ldr	r6, [r5, #-444]
	add	r2, r2, #2480
	add	r2, r2, #8
.LPIC1304:
	add	r0, pc, r0
	ldr	r3, [r4]
	mov	r1, r2
	str	ip, [sp]
	bl	printk(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	ble	.L5271
	ldr	r3, [r5, #52]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r5, #52]
	ble	.L5274
.L5271:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5270
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L5270:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5274:
	mov	r0, #50
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L5275+12
	mov	r3, r0
	mov	r2, r5
	mov	r0, #4
.LPIC1305:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L5276:
	.align	2
.L5275:
	.word	speaker_status(GOT_PREL)+(.-(.LPIC1306+8))
	.word	.LANCHOR3-(.LPIC1302+8)
	.word	.LC347-(.LPIC1304+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1305+8))
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.align	2
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5286
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1307:
	add	r5, pc, r5
	ldr	r7, [r5, #284]
	cmp	r7, #0
	ldreq	r6, [r0]
	beq	.L5279
	ldr	r4, [r5, #308]
	mov	r2, #9
	ldr	r6, [r0]
	ldr	r3, [r4, #120]
	mov	r1, r6
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5280
	cmp	r7, #1
	bls	.L5279
	ldr	r4, [r5, #412]
	mov	r2, #9
	mov	r1, r6
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5280
.L5279:
	ldr	r1, .L5286+4
	mov	r2, r6
	ldr	r0, .L5286+8
.LPIC1311:
	add	r1, pc, r1
.LPIC1312:
	add	r0, pc, r0
	add	r1, r1, #2512
	bl	printk(PLT)
	mvn	r0, #18
.L5281:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5280:
	ldr	r3, .L5286+12
	mov	r2, #1
	movw	r0, #10000
	str	r2, [r4, #112]
.LPIC1310:
	add	r3, pc, r3
	ldr	r5, [r3, #2596]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r4, #124
	mov	r0, #4
	mov	r1, r5
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
	b	.L5281
.L5287:
	.align	2
.L5286:
	.word	.LANCHOR1-(.LPIC1307+8)
	.word	.LANCHOR3-(.LPIC1311+8)
	.word	.LC348-(.LPIC1312+8)
	.word	.LANCHOR1-(.LPIC1310+8)
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #8]
	tst	r3, #2
	bne	.L5297
.L5288:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5297:
	ldr	ip, .L5298
	mov	r5, r0
	mov	r2, r4
	ldr	r0, [r4, #4]
	sub	r3, r5, #76
	mov	r1, #0
.LPIC1313:
	add	ip, pc, ip
	str	ip, [sp]
	bl	smd_named_open_on_edge(PLT)
	cmp	r0, #0
	beq	.L5288
	cmn	r0, #11
	bne	.L5292
	ldr	r3, .L5298+4
	mov	r0, #250
.LPIC1314:
	add	r3, pc, r3
	ldr	r4, [r3, #-1184]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r5
	mov	r0, #4
	mov	r1, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work_on(PLT)
.L5292:
	ldr	r1, .L5298+8
	mov	r3, r0
	ldr	r0, .L5298+12
	ldr	r2, [r4, #4]
.LPIC1315:
	add	r1, pc, r1
.LPIC1316:
	add	r0, pc, r0
	add	r1, r1, #2528
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk(PLT)
.L5299:
	.align	2
.L5298:
	.word	gsmd_notify-(.LPIC1313+8)
	.word	.LANCHOR4-(.LPIC1314+8)
	.word	.LANCHOR3-(.LPIC1315+8)
	.word	.LC152-(.LPIC1316+8)
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close(PLT)
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit(PLT)
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5312
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5312:
	ldr	r1, .L5313
	mov	r2, r0
	ldr	r0, .L5313+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1317:
	add	r1, pc, r1
	add	r1, r1, #2544
.LPIC1318:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5314:
	.align	2
.L5313:
	.word	.LANCHOR3-(.LPIC1317+8)
	.word	.LC349-(.LPIC1318+8)
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5324
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5324:
	ldr	r1, .L5325
	mov	r2, r0
	ldr	r0, .L5325+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1319:
	add	r1, pc, r1
.LPIC1320:
	add	r0, pc, r0
	add	r1, r1, #2576
	b	printk(PLT)
.L5326:
	.align	2
.L5325:
	.word	.LANCHOR3-(.LPIC1319+8)
	.word	.LC349-(.LPIC1320+8)
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L5341
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
.LPIC1327:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L5331
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5332
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L5328
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L5339
.L5330:
	ldr	r1, .L5341+4
	mov	ip, #65024
	mov	r3, r4
	ldr	r0, .L5341+8
	movt	ip, 65535
	ldr	r2, .L5341+12
	str	ip, [r3], #4
.LPIC1322:
	add	r1, pc, r1
	str	r3, [r4, #4]
.LPIC1324:
	add	r0, pc, r0
	str	r3, [r4, #8]
.LPIC1323:
	add	r2, pc, r2
	str	r1, [r4, #12]
	add	r0, r0, #312
	str	r4, [r2, #-668]
	bl	misc_register(PLT)
	cmp	r0, #0
	bne	.L5340
.L5337:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5331:
	mov	r4, #16
.L5328:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L5330
.L5332:
	mvn	r0, #11
	b	.L5337
.L5339:
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L5337
.L5340:
	ldr	r1, .L5341+16
	ldr	r0, .L5341+20
.LPIC1325:
	add	r1, pc, r1
.LPIC1326:
	add	r0, pc, r0
	add	r1, r1, #2608
	bl	printk(PLT)
	mov	r0, #0
	b	.L5337
.L5342:
	.align	2
.L5341:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1327+8))
	.word	ncm_work-(.LPIC1322+8)
	.word	.LANCHOR0-(.LPIC1324+8)
	.word	.LANCHOR4-(.LPIC1323+8)
	.word	.LANCHOR3-(.LPIC1325+8)
	.word	.LC350-(.LPIC1326+8)
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L5361
.LPIC1328:
	add	r0, pc, r0
	ldr	r0, [r0, #-572]
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r3
	ldr	r3, .L5361+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC1336:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [sp, #16]
	str	r1, [sp, #12]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L5350
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L5360
.L5345:
	ldr	r4, .L5361+8
.LPIC1330:
	add	r4, pc, r4
	add	r0, r4, #3520
	add	r0, r0, #12
	bl	_raw_read_lock_irqsave(PLT)
	ldr	r3, [r4, #3528]
	str	r0, [sp, #20]
	add	ip, r3, #1
	and	r8, ip, #31
	cmp	r3, r8
	beq	.L5352
	ldr	fp, .L5361+12
	mov	r5, #0
	sub	r6, r4, #568
.LPIC1333:
	add	fp, pc, fp
	b	.L5348
.L5347:
	ldr	r3, [r4, #3528]
	add	r8, r8, #1
	and	r8, r8, #31
	cmp	r8, r3
	beq	.L5346
.L5348:
	add	r9, r6, r8, lsl #7
	mov	r1, #128
	mov	r0, r9
	bl	strnlen(PLT)
	cmp	r0, #0
	beq	.L5347
	rsb	r1, r5, #4096
	add	r0, r7, r5
	mov	r3, r9
	mov	r2, fp
	bl	scnprintf(PLT)
	add	r5, r5, r0
	b	.L5347
.L5352:
	mov	r5, #0
.L5346:
	ldr	r0, .L5361+16
	ldr	r1, [sp, #20]
.LPIC1335:
	add	r0, pc, r0
	add	r0, r0, #3520
	add	r0, r0, #12
	bl	_raw_read_unlock_irqrestore(PLT)
	ldrd	r0, [sp, #12]
	mov	r2, r10
	mov	r3, r7
	str	r5, [sp]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r4
.L5344:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5350:
	mov	r7, #16
	b	.L5345
.L5360:
	mvn	r0, #11
	b	.L5344
.L5362:
	.align	2
.L5361:
	.word	.LANCHOR4-(.LPIC1328+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1336+8))
	.word	.LANCHOR4-(.LPIC1330+8)
	.word	.LC84-(.LPIC1333+8)
	.word	.LANCHOR4-(.LPIC1335+8)
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	beq	.L5363
	ldr	r3, [r0, #-84]
	cmp	r3, #0
	beq	.L5363
	ldr	r3, [r0, #92]
	tst	r3, #2
	bne	.L5374
.L5363:
	bx	lr
.L5374:
	ldr	r1, .L5375
	mvn	r3, #18
	ldr	r2, [r0, #68]
	ldr	r0, .L5375+4
.LPIC1337:
	add	r1, pc, r1
	add	r1, r1, #2624
.LPIC1338:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5376:
	.align	2
.L5375:
	.word	.LANCHOR3-(.LPIC1337+8)
	.word	.LC351-(.LPIC1338+8)
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5379
	sub	r0, r0, #20
	mov	r1, #300
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5391
.L5379:
	ldr	r1, .L5392
	ldr	r0, .L5392+4
.LPIC1341:
	add	r1, pc, r1
.LPIC1342:
	add	r0, pc, r0
.L5390:
	add	r1, r1, #2640
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	r1, r1, #12
	add	sp, sp, #8
	b	printk(PLT)
.L5391:
	ldr	r1, .L5392+8
	ldr	r0, .L5392+12
.LPIC1339:
	add	r1, pc, r1
.LPIC1340:
	add	r0, pc, r0
	b	.L5390
.L5393:
	.align	2
.L5392:
	.word	.LANCHOR3-(.LPIC1341+8)
	.word	.LC353-(.LPIC1342+8)
	.word	.LANCHOR3-(.LPIC1339+8)
	.word	.LC352-(.LPIC1340+8)
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5396
	mov	r1, #300
	sub	r0, r0, #84
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5410
.L5396:
	ldr	r1, .L5411
	mvn	r3, #18
	ldr	r0, .L5411+4
	ldr	r2, [r4, #68]
	ldr	lr, [sp, #4]
.LPIC1345:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
	add	r1, r1, #2672
.LPIC1346:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5410:
	ldr	r1, .L5411+8
	ldr	r0, .L5411+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1343:
	add	r1, pc, r1
	add	r1, r1, #2672
.LPIC1344:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5412:
	.align	2
.L5411:
	.word	.LANCHOR3-(.LPIC1345+8)
	.word	.LC354-(.LPIC1346+8)
	.word	.LANCHOR3-(.LPIC1343+8)
	.word	.LC352-(.LPIC1344+8)
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.type	str_to_xport.part.59, %function
str_to_xport.part.59:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L5422
	mov	r2, #12
	mov	r1, r4
	str	lr, [sp, #4]
.LPIC1347:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #6
	bne	.L5421
.L5414:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5421:
	ldr	r0, .L5422+4
	mov	r2, #12
	mov	r1, r4
.LPIC1348:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5414
	ldr	r0, .L5422+8
	mov	r2, #12
	mov	r1, r4
.LPIC1349:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5414
	ldr	r0, .L5422+12
	mov	r2, #12
	mov	r1, r4
.LPIC1350:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5414
	ldr	r0, .L5422+16
	mov	r1, r4
	mov	r2, #12
.LPIC1351:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #10
	movne	r0, #0
	b	.L5414
.L5423:
	.align	2
.L5422:
	.word	.LC5-(.LPIC1347+8)
	.word	.LC6-(.LPIC1348+8)
	.word	.LC7-(.LPIC1349+8)
	.word	.LC8-(.LPIC1350+8)
	.word	.LC355-(.LPIC1351+8)
	.fnend
	.size	str_to_xport.part.59, .-str_to_xport.part.59
	.align	2
	.type	ffs_data_put.part.66, %function
ffs_data_put.part.66:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
	.fnend
	.size	ffs_data_put.part.66, .-ffs_data_put.part.66
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.100, %function
_snd_pcm_hw_param_set.constprop.100:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L5426
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L5443
	ldr	r0, [r0, #40]
	adds	r5, r0, #0
	movne	r5, #1
.L5427:
	mov	r6, r1, lsr #5
	and	r3, r1, #31
	mov	r7, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	add	r0, r4, #36
	ldr	r2, [r6, #36]
	and	r7, r2, r7, asl r3
	bl	__memzero(PLT)
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L5429
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L5429
.L5430:
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L5439:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5426:
	ldr	r0, [r0, #40]
	cmp	r0, #0
	moveq	r5, r0
	beq	.L5427
	sub	r3, r0, #1
	tst	r3, r0
	movne	r5, #1
	moveq	r5, #0
	b	.L5427
.L5443:
	mov	r5, #1
	b	.L5427
.L5429:
	cmp	r5, #0
	movne	r0, #1
	bne	.L5430
	mov	r0, r5
	b	.L5439
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.100, .-_snd_pcm_hw_param_set.constprop.100
	.align	2
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5461
	mov	r2, #1
	ldr	r0, .L5461+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1352:
	add	r5, pc, r5
	add	r5, r5, #2688
.LPIC1353:
	add	r0, pc, r0
	add	r5, r5, #12
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, .L5461+8
.LPIC1377:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5451
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5459
.L5445:
	ldr	r6, .L5461+12
	mov	r5, #0
	add	ip, r4, #208
	ldr	r1, .L5461+16
	add	r3, r4, #216
	add	r0, r4, #108
	str	ip, [r4, #208]
	str	ip, [r4, #212]
.LPIC1355:
	add	r6, pc, r6
	str	r3, [r4, #216]
	add	r7, r6, #3536
	str	r3, [r4, #220]
.LPIC1358:
	add	r1, pc, r1
	strb	r5, [r4, #136]
	mov	r2, r7
	str	r5, [r4, #204]
	str	r4, [r6, #-660]
	str	r5, [r6, #-656]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5461+20
	add	r0, r4, #120
	mov	r2, r7
.LPIC1360:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, [r6, #-664]
	str	r5, [r4, #92]
	ldr	r0, .L5461+24
	str	r5, [r4, #96]
	ldr	r3, .L5461+28
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	add	r2, r2, #1
.LPIC1364:
	add	r0, pc, r0
.LPIC1363:
	add	r3, pc, r3
	add	r0, r0, #420
	str	r2, [r6, #-664]
	str	r4, [r3, #2584]
	bl	misc_register(PLT)
	subs	r4, r0, #0
	bne	.L5460
	ldr	r1, .L5461+32
	ldr	r0, .L5461+36
	ldr	r2, [r6, #-664]
.LPIC1370:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1371:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L5450:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5451:
	mov	r4, #16
	b	.L5445
.L5459:
	ldr	r0, .L5461+40
	mov	r1, r5
	mvn	r4, #11
.LPIC1366:
	add	r0, pc, r0
	bl	printk(PLT)
.L5449:
	ldr	r1, .L5461+44
	ldr	r5, .L5461+48
	ldr	r0, .L5461+52
.LPIC1372:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1374:
	add	r5, pc, r5
.LPIC1373:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [r5, #-664]
	cmp	r3, #0
	beq	.L5450
	ldr	r0, [r5, #-660]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r5, #-660]
	b	.L5450
.L5460:
	ldr	r1, .L5461+56
	ldr	r0, .L5461+60
.LPIC1367:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1368:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5449
.L5462:
	.align	2
.L5461:
	.word	.LANCHOR3-(.LPIC1352+8)
	.word	.LC356-(.LPIC1353+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1377+8))
	.word	.LANCHOR4-(.LPIC1355+8)
	.word	.LC220-(.LPIC1358+8)
	.word	.LC221-(.LPIC1360+8)
	.word	.LANCHOR0-(.LPIC1364+8)
	.word	.LANCHOR1-(.LPIC1363+8)
	.word	.LANCHOR3-(.LPIC1370+8)
	.word	.LC359-(.LPIC1371+8)
	.word	.LC357-(.LPIC1366+8)
	.word	.LANCHOR3-(.LPIC1372+8)
	.word	.LANCHOR4-(.LPIC1374+8)
	.word	.LC360-(.LPIC1373+8)
	.word	.LANCHOR3-(.LPIC1367+8)
	.word	.LC358-(.LPIC1368+8)
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5476
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1398:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5469
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5474
.L5464:
	mov	r1, #0
	ldr	r5, .L5476+4
	add	r2, r4, #120
	ldr	r7, .L5476+8
	add	r0, r4, #128
	ldr	r3, .L5476+12
	str	r1, [r4, #92]
	ldr	r1, .L5476+16
	str	r2, [r4, #120]
.LPIC1380:
	add	r5, pc, r5
	str	r2, [r4, #124]
.LPIC1382:
	add	r7, pc, r7
	add	r5, r5, #3536
.LPIC1379:
	add	r3, pc, r3
	mov	r2, r5
.LPIC1381:
	add	r1, pc, r1
	add	r8, r7, #384
	str	r4, [r3, #2400]
	bl	__init_waitqueue_head(PLT)
	mov	r0, r8
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5475
	ldr	r1, .L5476+20
	mov	r2, r5
	add	r0, r4, #160
.LPIC1394:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5476+24
	mov	r2, r5
	add	r0, r4, #172
.LPIC1396:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r3, r4, #192
	add	r0, r7, #348
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5468
	mov	r0, r6
.L5471:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5469:
	mov	r4, #16
	b	.L5464
.L5474:
	mvn	r0, #11
	b	.L5471
.L5468:
	ldr	r5, .L5476+28
	ldr	r0, .L5476+32
.LPIC1387:
	add	r5, pc, r5
	add	r1, r5, #2736
.LPIC1388:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L5476+36
	mov	r2, r6
	add	r1, r5, #2736
.LPIC1390:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	misc_deregister(PLT)
.L5467:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L5476+40
.LPIC1392:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L5471
.L5475:
	ldr	r5, .L5476+44
	ldr	r0, .L5476+48
.LPIC1383:
	add	r5, pc, r5
	add	r1, r5, #2704
.LPIC1384:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L5476+52
	mov	r2, r6
	add	r1, r5, #2736
.LPIC1386:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5467
.L5477:
	.align	2
.L5476:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1398+8))
	.word	.LANCHOR4-(.LPIC1380+8)
	.word	.LANCHOR0-(.LPIC1382+8)
	.word	.LANCHOR1-(.LPIC1379+8)
	.word	.LC231-(.LPIC1381+8)
	.word	.LC364-(.LPIC1394+8)
	.word	.LC365-(.LPIC1396+8)
	.word	.LANCHOR3-(.LPIC1387+8)
	.word	.LC232-(.LPIC1388+8)
	.word	.LC362-(.LPIC1390+8)
	.word	.LC363-(.LPIC1392+8)
	.word	.LANCHOR3-(.LPIC1383+8)
	.word	.LC232-(.LPIC1384+8)
	.word	.LC361-(.LPIC1386+8)
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.section	.text.unlikely
	.align	2
	.type	acm_cdc_notify.constprop.115, %function
acm_cdc_notify.constprop.115:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5482
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #20
	sub	sp, sp, #20
	add	r5, sp, #2
	mov	r4, r0
	mov	fp, r1
	mov	r0, r5
	ldr	r10, [r4, #152]
.LPIC1401:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	mov	r1, #10
	mov	r8, #32
	add	r7, r4, #148
	ldr	r2, [r3]
	mov	r6, r3
	str	r2, [sp, #12]
	bl	__memzero(PLT)
	ldr	r9, [r4, #156]
	mov	ip, #0
	mov	r2, #10
	mvn	r1, #94
	mov	lr, #2
	str	ip, [r4, #156]
	mov	r0, r7
	strb	ip, [r4, #147]
	ldr	r3, [r9]
	str	r2, [r9, #4]
	strb	r1, [r3]
	strb	r8, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strh	r1, [r3, #4]	@ unaligned
	ldrh	ip, [fp]	@ unaligned
	ldr	r1, [r5, #4]	@ unaligned
	strh	ip, [sp, #2]	@ unaligned
	ldr	ip, [r5]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	ldrh	r1, [r5, #8]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [fp]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r10, #8]
	mov	r2, r8
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r5, #0
	bge	.L5479
	ldr	r0, [r4, #20]
	mov	r3, r5
	ldr	r1, .L5482+4
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1400:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r9, [r4, #156]
.L5479:
	ldr	r2, [sp, #12]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	beq	.L5480
	bl	__stack_chk_fail(PLT)
.L5480:
	add	sp, sp, #20
	@ sp needed
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L5483:
	.align	2
.L5482:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1401+8))
	.word	.LC366-(.LPIC1400+8)
	.fnend
	.size	acm_cdc_notify.constprop.115, .-acm_cdc_notify.constprop.115
	.text
	.align	2
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5506
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1402:
	add	r3, pc, r3
	ldr	ip, [r3, #2056]
	cmp	r0, #0
	cmpne	r1, ip
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L5503
	mov	r0, #84
	mla	r3, r0, r1, r3
	ldr	r4, [r3, #2232]
	cmp	r4, #0
	beq	.L5504
	ldr	r3, [r4, #196]
	cmp	r2, r3
	beq	.L5484
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L5484
	tst	r2, #1
	bne	.L5505
.L5484:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5505:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5484
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L5484
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L5503:
	ldr	r3, .L5506+4
	mov	r2, r1
	ldr	r0, .L5506+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1403:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	add	r1, r3, #2768
	ldr	lr, [sp, #20]
.LPIC1404:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L5504:
	ldr	r1, .L5506+12
	ldr	r0, .L5506+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1406:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #2768
	ldr	lr, [sp, #20]
.LPIC1407:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L5507:
	.align	2
.L5506:
	.word	.LANCHOR1-(.LPIC1402+8)
	.word	.LANCHOR3-(.LPIC1403+8)
	.word	.LC26-(.LPIC1404+8)
	.word	.LANCHOR3-(.LPIC1406+8)
	.word	.LC22-(.LPIC1407+8)
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L5509
	ldr	r3, .L5537
	mov	r4, r2
	mov	r2, #84
.LPIC1408:
	add	r3, pc, r3
	mla	r3, r2, r0, r3
	ldr	r6, [r3, #708]
	cmp	r6, #0
	beq	.L5509
	ldr	r3, .L5537+4
	mov	r7, r1
.LPIC1415:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r5, [r3, #24]
	cmp	r5, #0
	beq	.L5535
	mov	r0, r5
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L5518
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L5519
	cmn	r5, #4096
	str	r4, [r5, #4]
	bhi	.L5518
.L5513:
	mov	r1, r7
	mov	r2, r4
	add	r7, r6, #108
	bl	memcpy(PLT)
	str	r4, [r5, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #8]
	mov	r8, r0
	ands	r4, r4, #1
	beq	.L5536
	add	r0, r5, #8
	add	r2, r6, #40
	ldr	r1, [r6, #44]
	bl	__list_add(PLT)
	ldr	r3, .L5537+8
	add	r2, r6, #68
	mov	r0, #4
	mov	r4, #0
.LPIC1411:
	add	r3, pc, r3
	ldr	r1, [r3, #-1464]
	bl	queue_work_on(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5529
.L5509:
	ldr	r1, .L5537+12
	mov	r2, r0
	mvn	r4, #18
	ldr	r0, .L5537+16
.LPIC1413:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1414:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L5529:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5536:
	ldr	r0, [r5]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5529
.L5535:
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r5, #16]
	strne	r4, [r5, #20]
	movne	r5, #16
	bne	.L5513
	mov	r5, #16
.L5519:
	mov	r0, r5
	bl	kfree(PLT)
.L5518:
	ldr	r1, .L5537+20
	mvn	r4, #11
	ldr	r0, .L5537+24
.LPIC1409:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1410:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5529
.L5538:
	.align	2
.L5537:
	.word	.LANCHOR1-(.LPIC1408+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1415+8))
	.word	.LANCHOR4-(.LPIC1411+8)
	.word	.LANCHOR3-(.LPIC1413+8)
	.word	.LC26-(.LPIC1414+8)
	.word	.LANCHOR3-(.LPIC1409+8)
	.word	.LC367-(.LPIC1410+8)
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L5570
	mov	r6, r2
	ldr	r2, .L5571
.LPIC1421:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r4, [r2, #24]
	cmp	r4, #0
	beq	.L5542
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5553
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5554
	cmn	r4, #4096
	str	r6, [r4, #4]
	bhi	.L5553
.L5545:
	mov	r1, r7
	mov	r2, r6
	bl	memcpy(PLT)
	str	r6, [r4, #4]
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L5546
	ldr	r3, [r5, #124]
	cmp	r3, #0
	bne	.L5547
.L5546:
	ldr	r0, [r4]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, #0
.L5560:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5547:
	add	r6, r5, #132
	add	r7, r5, #144
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r2, r7
	ldr	r1, [r5, #148]
	add	r0, r4, #8
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r4, [r5, #140]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #120]
	cmp	r4, #0
	cmpne	r3, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L5548
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L5548
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r5, #152]
	bne	.L5548
	ldr	r2, [r4]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r6
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r8, [r2, #2]
	strb	r8, [r2, #3]
	ldrh	r3, [r5, #112]
	strb	r8, [r2, #6]
	strb	r8, [r2, #7]
	strh	r3, [r2, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #136]
	mov	r2, #32
	ldr	r1, [r5, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5560
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r5, #144]
	mov	r9, r0
	cmp	r7, r8
	beq	.L5551
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L5552
	sub	r4, r4, #1
	mov	r0, r8
	sub	r7, r8, #8
	str	r4, [r5, #152]
	bl	list_del(PLT)
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L5551:
	mov	r0, r6
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5560
.L5548:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5560
.L5542:
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r6, [r4, #20]
	movne	r4, #16
	bne	.L5545
	mov	r4, #16
.L5554:
	mov	r0, r4
	bl	kfree(PLT)
.L5553:
	ldr	r1, .L5571+4
	ldr	r0, .L5571+8
.LPIC1419:
	add	r1, pc, r1
	add	r1, r1, #2832
.LPIC1420:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L5560
.L5552:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L5560
.L5570:
	ldr	r1, .L5571+12
	mov	r2, r0
	mov	r3, r7
	ldr	r0, .L5571+16
.LPIC1416:
	add	r1, pc, r1
	add	r1, r1, #2832
.LPIC1417:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5560
.L5572:
	.align	2
.L5571:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1421+8))
	.word	.LANCHOR3-(.LPIC1419+8)
	.word	.LC367-(.LPIC1420+8)
	.word	.LANCHOR3-(.LPIC1416+8)
	.word	.LC368-(.LPIC1417+8)
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r6, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L5587
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L5588
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5588:
	ldr	r3, .L5589
	mov	r5, r1
.LPIC1425:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L5576
	mov	r0, r7
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L5579
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L5581
	cmn	r7, #4096
	bhi	.L5579
.L5580:
	ldr	r1, [r5]
	mov	r2, r6
	add	r5, r4, #188
	bl	memcpy(PLT)
	mov	r0, r5
	str	r6, [r7, #4]
	bl	_raw_spin_lock(PLT)
	add	r2, r4, #108
	ldr	r1, [r4, #112]
	add	r0, r7, #8
	bl	__list_add(PLT)
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L5576:
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7, #16]
	mov	r7, #16
	bne	.L5580
.L5581:
	mov	r0, r7
	bl	kfree(PLT)
.L5579:
	ldr	r0, [r8]
	ldr	r1, .L5589+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1424:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5587:
	ldr	r0, [r8]
	ldr	r1, .L5589+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1422:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5590:
	.align	2
.L5589:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1425+8))
	.word	.LC369-(.LPIC1424+8)
	.word	.LC122-(.LPIC1422+8)
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.type	rmnet_smd_alloc_qmi.constprop.143, %function
rmnet_smd_alloc_qmi.constprop.143:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L5605
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1427:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, #24]
	cmp	r0, #0
	beq	.L5597
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L5593
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L5603
.L5600:
	mov	r2, #2048
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	mov	r0, r5
	beq	.L5604
.L5599:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5597:
	ldr	r0, [r4, #44]
	mov	r5, #16
	cmp	r0, #0
	bne	.L5600
.L5603:
	mov	r3, #16
	mov	r0, r5
	str	r3, [r5]
	b	.L5599
.L5604:
	bl	kfree(PLT)
.L5593:
	mvn	r0, #11
	b	.L5599
.L5606:
	.align	2
.L5605:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1427+8))
	.fnend
	.size	rmnet_smd_alloc_qmi.constprop.143, .-rmnet_smd_alloc_qmi.constprop.143
	.align	2
	.type	ffs_do_descs.constprop.129, %function
ffs_do_descs.constprop.129:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	moveq	r4, #1
	str	lr, [sp, #12]
	movne	r4, #0
	beq	.L5627
	cmp	r2, #1
	bls	.L5613
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L5613
	mov	lr, r2
.L5612:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	addls	pc, pc, ip, asl #2
	b	.L5613
.L5615:
	b	.L5614
	b	.L5616
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5617
	b	.L5613
	b	.L5618
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5619
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5613
	b	.L5620
	.p2align 1
.L5614:
	cmp	r3, #9
	beq	.L5639
.L5613:
	mvn	r0, #21
.L5634:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5618:
	cmp	r3, #8
	bne	.L5613
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L5623
.L5638:
	ldrh	r6, [r5, #176]
	uxth	ip, ip
	cmp	r6, ip
	strcch	ip, [r5, #176]	@ movhi
.L5623:
	adds	r1, r1, r3
	add	r4, r4, #1
	moveq	ip, #1
	movne	ip, #0
	rsb	lr, r3, lr
	cmp	r0, r4
	movne	r3, ip
	orreq	r3, ip, #1
	cmp	r3, #0
	bne	.L5640
	cmp	lr, #1
	bls	.L5613
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	lr, r3
	bcs	.L5612
	b	.L5613
.L5617:
	cmp	r3, #5
	beq	.L5623
	b	.L5613
.L5620:
	cmp	r3, #6
	beq	.L5623
	b	.L5613
.L5616:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L5613
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L5613
	ldrh	r6, [r5, #180]
	cmp	ip, r6
	strgth	ip, [r5, #180]	@ movhi
	b	.L5623
.L5619:
	cmp	r3, #9
	beq	.L5623
	b	.L5613
.L5639:
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #178]
	cmp	r6, ip
	addls	ip, ip, #1
	strlsh	ip, [r5, #178]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L5638
	b	.L5623
.L5640:
	rsb	r0, lr, r2
	b	.L5634
.L5627:
	mov	r0, #0
	b	.L5634
	.fnend
	.size	ffs_do_descs.constprop.129, .-ffs_do_descs.constprop.129
	.align	2
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L5643
	cmp	r0, #3
	beq	.L5644
	cmp	r0, #1
	beq	.L5646
	mov	r0, #0
	bx	lr
.L5646:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strlsh	r2, [r3, #178]	@ movhi
	bx	lr
.L5644:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strgth	r2, [r3, #180]	@ movhi
	bx	lr
.L5643:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strcch	r2, [r3, #176]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #196]
	ldr	r5, [r3]
	bl	flush_workqueue(PLT)
	ldr	r0, .L5672
	ldr	r1, [r5, #28]
.LPIC1428:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r1, r0, #0
	beq	.L5671
.L5648:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L5652
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5653
	bl	kfree(PLT)
	ldr	r3, [r5, #20]
.L5652:
	cmp	r3, #2
	bls	.L5647
.L5653:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5647
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L5647:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5671:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L5648
.L5673:
	.align	2
.L5672:
	.word	.LC370-(.LPIC1428+8)
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r1, #108
	strd	r8, [sp, #16]
	mov	r8, r1
	add	r9, r1, #96
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L5675:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r8, #96]
	mov	r6, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	beq	.L5676
	bl	list_del(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L5678
	ldr	r6, [r8, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5675
.L5676:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5678:
	ldr	r0, [r8, #84]
	bl	snd_card_free_when_closed(PLT)
	mov	r3, #0
	str	r3, [r8, #84]
	str	r3, [r8, #88]
	str	r3, [r8, #92]
	str	r3, [r8, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L5727
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r7, .L5727+4
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r6, [r0, #172]
.LPIC1429:
	add	r7, pc, r7
	ldr	r8, [r0, #176]
	ldr	r3, [r7, r3]
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L5718
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L5694
	cmp	r9, #1
	beq	.L5719
	ldr	r4, [r0, #184]
	cmp	r4, #0
	beq	.L5703
	ldr	r1, .L5727+8
	ldr	r0, .L5727+12
.LPIC1453:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1454:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	add	r0, r4, #8
	add	r2, r5, #204
	ldr	r1, [r5, #208]
	bl	__list_add(PLT)
	ldr	r3, .L5727+16
	add	r2, r5, #188
	mov	r0, #4
	ldr	r3, [r7, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	mov	r3, #0
	mov	r4, r3
	str	r3, [r5, #184]
.L5699:
	strb	r9, [r5, #249]
.L5686:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5718:
	cmp	r9, #1
	beq	.L5720
	add	r10, r0, #212
	add	r7, r0, #236
	mov	r0, r10
	mov	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
.L5692:
	ldr	r4, [r5, #236]
	cmp	r7, r4
	sub	r6, r4, #8
	mov	r0, r4
	beq	.L5721
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L5692
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	str	r8, [r4, #-8]
	mov	r0, r6
	bl	kfree(PLT)
	b	.L5692
.L5721:
	mov	r1, fp
	mov	r0, r10
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5690:
	strb	r9, [r5, #248]
	b	.L5686
.L5703:
	ldr	r1, .L5727+20
	ldr	r0, .L5727+24
.LPIC1455:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1456:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5699
.L5719:
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r1, [r6, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L5722
	ldr	r7, .L5727+28
	str	r5, [r6]
.LPIC1443:
	add	r7, pc, r7
	ldr	r0, [r7, #228]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	str	r0, [r5, #184]
	bhi	.L5697
	ldr	r3, [r7, #428]
	cmp	r3, #0
	ble	.L5699
	ldr	r8, .L5727+32
	mov	r7, r4
	ldr	r10, .L5727+36
.LPIC1447:
	add	r8, pc, r8
.LPIC1449:
	add	r10, pc, r10
	b	.L5698
.L5724:
	ldr	r0, [r8, #432]
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r6
	mov	r1, r4
	str	r3, [r4]
	beq	.L5701
	ldr	r3, [r8, #432]
	str	r5, [r4, #32]
	str	r10, [r4, #28]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5723
	ldr	r3, [r8, #428]
	cmp	r3, r7
	ble	.L5699
.L5698:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	bne	.L5724
.L5700:
	ldr	r1, .L5727+40
	mvn	r4, #11
	ldr	r0, .L5727+44
.LPIC1432:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1433:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5720:
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r1, [r8, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L5725
	str	r5, [r8]
	mov	r1, #32
	mov	r0, r8
	str	r4, [r5, #216]
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5700
	ldr	r6, .L5727+48
	movw	r1, #32800
.LPIC1434:
	add	r6, pc, r6
	ldr	r0, [r6, #424]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5701
	ldr	r3, .L5727+52
	str	r5, [r4, #32]
	mov	r1, r4
	ldr	ip, [r6, #424]
	mov	r2, #32
	mov	r0, r8
.LPIC1438:
	add	r3, pc, r3
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r4, [r5, #244]
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5726
.L5689:
	ldr	r3, .L5727+16
	add	r2, r5, #220
	mov	r0, #4
	ldr	r3, [r7, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L5690
.L5697:
	ldr	r1, .L5727+56
	mvn	r4, #11
	ldr	r0, .L5727+60
.LPIC1445:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1446:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5723:
	ldr	r1, .L5727+64
	mov	r3, r4
	ldr	r0, .L5727+68
	ldr	r2, [r6, #4]
.LPIC1450:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1451:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5699
.L5701:
	ldr	r1, .L5727+72
	mvn	r4, #11
	ldr	r0, .L5727+76
.LPIC1435:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1436:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5694:
	ldr	ip, .L5727+80
	mov	r2, r1
	mov	r3, #0
	ldr	r0, .L5727+84
	mov	r4, r3
.LPIC1457:
	add	ip, pc, ip
	add	r1, ip, #2864
.LPIC1458:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5722:
	ldr	r1, .L5727+88
	ldr	r0, .L5727+92
.LPIC1441:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1442:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5726:
	ldr	r1, .L5727+96
	mov	r3, r4
	ldr	r0, .L5727+100
	ldr	r2, [r8, #4]
.LPIC1439:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1440:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5689
.L5725:
	ldr	r1, .L5727+104
	ldr	r0, .L5727+108
.LPIC1430:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1431:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L5686
.L5728:
	.align	2
.L5727:
	.word	uac1_ac_header_desc(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1429+8)
	.word	.LANCHOR3-(.LPIC1453+8)
	.word	.LC377-(.LPIC1454+8)
	.word	system_wq(GOT)
	.word	.LANCHOR3-(.LPIC1455+8)
	.word	.LC378-(.LPIC1456+8)
	.word	.LANCHOR2-(.LPIC1443+8)
	.word	.LANCHOR2-(.LPIC1447+8)
	.word	f_audio_complete-(.LPIC1449+8)
	.word	.LANCHOR3-(.LPIC1432+8)
	.word	.LC372-(.LPIC1433+8)
	.word	.LANCHOR2-(.LPIC1434+8)
	.word	f_audio_complete-(.LPIC1438+8)
	.word	.LANCHOR3-(.LPIC1445+8)
	.word	.LC36-(.LPIC1446+8)
	.word	.LANCHOR3-(.LPIC1450+8)
	.word	.LC376-(.LPIC1451+8)
	.word	.LANCHOR3-(.LPIC1435+8)
	.word	.LC373-(.LPIC1436+8)
	.word	.LANCHOR3-(.LPIC1457+8)
	.word	.LC379-(.LPIC1458+8)
	.word	.LANCHOR3-(.LPIC1441+8)
	.word	.LC375-(.LPIC1442+8)
	.word	.LANCHOR3-(.LPIC1439+8)
	.word	.LC374-(.LPIC1440+8)
	.word	.LANCHOR3-(.LPIC1430+8)
	.word	.LC371-(.LPIC1431+8)
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r3, .L5732
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
.LPIC1459:
	add	r3, pc, r3
	ldr	r4, [r3, #2500]
	cmn	r2, #108
	bne	.L5730
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
.L5730:
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	add	r2, r4, #1648
	mov	r7, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	add	r2, r2, #8
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1664
	ldrd	r6, [sp, #8]
	mov	r3, #0
	ldrd	r4, [sp]
	add	r0, r0, #12
	mov	r2, #1
	ldr	r8, [sp, #16]
	mov	r1, #3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L5733:
	.align	2
.L5732:
	.word	.LANCHOR1-(.LPIC1459+8)
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r4, r2, #1
	strd	r6, [sp, #8]
	mvn	r4, r4, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mvn	r4, r4, asl #10
	str	lr, [sp, #32]
	ldr	r9, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r4, #1
	str	r3, [sp, #4]
	ldr	r5, [r9, #32]
	ldr	r6, [r9, #36]
	cmp	r5, #0
	bne	.L5759
.L5736:
	mov	r3, sp
	str	r2, [sp, #8]
	mov	r4, r0
	bic	fp, r3, #8128
	mov	r2, r6
	str	r1, [sp, #12]
	bic	fp, fp, #63
.L5737:
	ldr	r2, [r2, #92]
	cmp	r2, #2
	bne	.L5777
	ldr	r10, [r9, #40]
	cmp	r10, #0
	beq	.L5778
.L5756:
	ldrb	r8, [r9, #53]	@ zero_extendqisi2
	adds	r8, r8, #0
	movne	r8, #1
	cmp	r8, #0
	beq	.L5743
	ldrb	r2, [r9, #54]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5779
.L5744:
	ldr	r2, [r4, #32]
	mov	r0, r9
	tst	r2, #2048
	beq	.L5745
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L5764
.L5748:
	ldr	r0, [r9, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r9, #40]
	cmp	r2, r10
	bne	.L5746
	cmp	r8, #0
	bne	.L5780
	ldr	r0, .L5786
	mov	r2, #32
	ldr	r7, [r10, #4]
	ldr	r3, [sp, #4]
.LPIC1463:
	add	r0, pc, r0
	str	r5, [r7]
	mov	r1, r7
	str	r3, [r7, #4]
	str	r0, [r7, #28]
	str	r8, [r6, #68]!
	str	r6, [r7, #32]
	ldr	r0, [r10]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	mov	r4, r0
	ldr	r0, [r9, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r4, #0
	blt	.L5766
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [r9, #36]
	add	r0, r0, #24
	bne	.L5781
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r9, #40]
	ldr	r0, [r9, #36]
	cmp	r10, r2
	beq	.L5782
	add	r0, r0, #24
	mvn	r7, #18
	bl	_raw_spin_unlock_irq(PLT)
.L5751:
	mov	r0, r9
	bl	mutex_unlock(PLT)
.L5739:
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r7
.L5772:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5743:
	cmp	r5, #0
	bne	.L5744
	movw	r1, #32976
	ldr	r0, [sp, #4]
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	bne	.L5744
	mvn	r0, #11
	b	.L5772
.L5745:
	bl	mutex_lock_interruptible(PLT)
	subs	r7, r0, #0
	beq	.L5748
	b	.L5739
.L5778:
	ldr	r2, [r4, #32]
	tst	r2, #2048
	bne	.L5764
	ldr	r2, [r9, #32]
	cmp	r2, #0
	bne	.L5761
	ldr	r1, .L5786+4
	add	r7, sp, #20
	add	r8, r9, #20
	ldr	r0, [fp, #12]
	str	r2, [sp, #20]
	add	r2, sp, #32
	str	r2, [sp, #32]
.LPIC1464:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #36]
	strd	r0, [sp, #24]
	b	.L5742
.L5783:
	bl	schedule(PLT)
.L5742:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r8
	bl	prepare_to_wait(PLT)
	ldr	r10, [r9, #40]
	cmp	r10, #0
	bne	.L5740
	ldr	r2, [fp, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L5783
	mov	r1, r7
	mov	r0, r8
	mov	r7, #65024
	bl	finish_wait(PLT)
	movt	r7, 65535
	b	.L5739
.L5777:
	ldr	r0, .L5786+8
	movw	r1, #786
	mvn	r7, #18
.LPIC1460:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5739
.L5746:
	ldr	r0, [r9, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	mutex_unlock(PLT)
	ldr	r2, [r9, #36]
	b	.L5737
.L5782:
	ldr	r7, [r10, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	ble	.L5751
	ldr	r3, [sp, #8]
	cmp	r3, r7
	mvncc	r7, #74
	bcc	.L5751
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r7; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	mvnne	r7, #13
	bne	.L5751
	mov	r2, r7
	mov	r0, r3
	mov	r1, r5
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r7, #13
	b	.L5751
.L5780:
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L5784
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5758:
	ldr	r0, [r9, #36]
	mvn	r7, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5751
.L5761:
	mvn	r7, #18
	b	.L5739
.L5766:
	mvn	r7, #4
	b	.L5751
.L5781:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r9, #40]
	cmp	r10, r2
	beq	.L5785
.L5753:
	ldr	r0, [r9, #36]
	mvn	r7, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5751
.L5764:
	mvn	r7, #10
	b	.L5739
.L5759:
	mvn	r0, #18
	b	.L5772
.L5779:
	mvn	r7, #21
	b	.L5739
.L5784:
	ldr	r0, .L5786+12
	movw	r1, #861
.LPIC1462:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5758
.L5785:
	ldr	r0, [r10]
	mov	r1, r7
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L5753
.L5740:
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait(PLT)
	b	.L5756
.L5787:
	.align	2
.L5786:
	.word	ffs_epfile_io_complete-(.LPIC1463+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1464+8))
	.word	.LC18-(.LPIC1460+8)
	.word	.LC18-(.LPIC1462+8)
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5793
.L5792:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5792
.L5793:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5791
.L5796:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5796
.L5791:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5795
.L5799:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5799
.L5795:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5798
.L5800:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5800
.L5798:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill(PLT)
	add	r0, r4, #264
	bl	tasklet_kill(PLT)
	add	r0, r4, #348
	bl	tasklet_kill(PLT)
	add	r0, r4, #328
	bl	tasklet_kill(PLT)
	ldr	r0, [r4, #388]
	bl	flush_workqueue(PLT)
	mov	r0, r4
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	str	r3, [r4, #88]
	bl	destroy_workqueue(PLT)
	ldr	r3, .L5808
.LPIC1466:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L5809:
	.align	2
.L5808:
	.word	dent_smd(GOT_PREL)+(.-(.LPIC1466+8))
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.align	2
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r4, [r1, #32]
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #96
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L5810
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L5810
	ldr	r3, [r5, #48]
	ldr	r1, [r4, #128]
	ldr	r2, [r4, #124]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L5817
.L5812:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send(PLT)
.L5810:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5817:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed(PLT)
	str	r6, [r4, #128]
	b	.L5812
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5824
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1467:
	add	r3, pc, r3
	ldr	r4, [r3, #2400]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #92
	strne	r3, [r4, #148]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L5825:
	.align	2
.L5824:
	.word	.LANCHOR1-(.LPIC1467+8)
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5834
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5828
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L5828
	add	r0, r5, #36
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	bl	__list_add(PLT)
	ldr	r3, .L5835
	add	r2, r4, #28
	mov	r0, #4
.LPIC1470:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	bl	queue_work_on(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L5828:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L5834:
	ldr	r1, .L5835+4
	ldr	r0, .L5835+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1468:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #2880
	ldr	lr, [sp, #20]
.LPIC1469:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #24
	b	printk(PLT)
.L5836:
	.align	2
.L5835:
	.word	.LANCHOR4-(.LPIC1470+8)
	.word	.LANCHOR3-(.LPIC1468+8)
	.word	.LC22-(.LPIC1469+8)
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5867
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1471:
	add	r5, pc, r5
	ldr	r7, [r5, #1636]
	cmp	r7, #0
	beq	.L5838
	ldr	r4, [r5, #1640]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5839
	cmp	r7, #1
	bls	.L5838
	ldr	r4, [r5, #1744]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5839
	cmp	r7, #2
	beq	.L5838
	ldr	r4, [r5, #1848]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5839
	cmp	r7, #3
	beq	.L5838
	ldr	r4, [r5, #1952]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5839
.L5838:
	ldr	r1, .L5867+4
	mvn	r2, #21
	ldr	r0, .L5867+8
.LPIC1476:
	add	r1, pc, r1
	add	r1, r1, #2896
.LPIC1477:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
.L5841:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5839:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L5841
	add	r2, r4, #88
	ldr	r1, [r4, #84]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, #0
	b	.L5841
.L5868:
	.align	2
.L5867:
	.word	.LANCHOR1-(.LPIC1471+8)
	.word	.LANCHOR3-(.LPIC1476+8)
	.word	.LC97-(.LPIC1477+8)
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5900
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1478:
	add	r5, pc, r5
	ldr	r7, [r5, #1216]
	cmp	r7, #0
	beq	.L5870
	ldr	r4, [r5, #1220]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5871
	cmp	r7, #1
	bls	.L5870
	ldr	r4, [r5, #1324]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5871
	cmp	r7, #2
	beq	.L5870
	ldr	r4, [r5, #1428]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5871
	cmp	r7, #3
	beq	.L5870
	ldr	r4, [r5, #1532]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5871
.L5870:
	ldr	r1, .L5900+4
	mvn	r2, #21
	ldr	r0, .L5900+8
.LPIC1483:
	add	r1, pc, r1
.LPIC1484:
	add	r0, pc, r0
	add	r1, r1, #2928
	bl	printk(PLT)
	mvn	r0, #21
.L5873:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5871:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L5874
	add	r2, r4, #16
	ldr	r1, [r4, #12]
	mov	r0, #4
	bl	queue_work_on(PLT)
.L5874:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5873
.L5901:
	.align	2
.L5900:
	.word	.LANCHOR1-(.LPIC1478+8)
	.word	.LANCHOR3-(.LPIC1483+8)
	.word	.LC97-(.LPIC1484+8)
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L5914
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5904
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L5904
	cmp	r3, #0
	bne	.L5915
.L5906:
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #44]!
	bl	__list_add(PLT)
	ldr	r3, .L5916
	add	r2, r4, #52
	mov	r0, #4
.LPIC1489:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	bl	queue_work_on(PLT)
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock(PLT)
.L5904:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L5914:
	ldr	r1, .L5916+4
	ldr	r0, .L5916+8
.LPIC1485:
	add	r1, pc, r1
	add	r1, r1, #2944
.LPIC1486:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk(PLT)
.L5915:
	ldr	r1, .L5916+12
	str	r3, [sp, #4]
	mov	r2, r4
	ldr	r3, [r6, #4]
	ldr	r0, .L5916+16
.LPIC1487:
	add	r1, pc, r1
	add	r1, r1, #2944
	str	r3, [sp]
	ldr	r3, [r4]
	add	r1, r1, #4
.LPIC1488:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5906
.L5917:
	.align	2
.L5916:
	.word	.LANCHOR4-(.LPIC1489+8)
	.word	.LANCHOR3-(.LPIC1485+8)
	.word	.LC22-(.LPIC1486+8)
	.word	.LANCHOR3-(.LPIC1487+8)
	.word	.LC89-(.LPIC1488+8)
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L5933
	cmp	r3, #0
	beq	.L5918
	ldr	r3, [r3, #8]
	mov	r2, #32
	ldr	r1, [r0, #40]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	bne	.L5934
.L5918:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5933:
	cmp	r3, #0
	beq	.L5918
	ldr	r3, [r3, #12]
	mov	r2, #32
	ldr	r1, [r0, #36]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5918
	ldr	r1, .L5935
	mov	r2, r0
	ldr	r0, .L5935+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1490:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1491:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5934:
	ldr	r1, .L5935+8
	mov	r2, r0
	ldr	r0, .L5935+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1492:
	add	r1, pc, r1
	add	r1, r1, #2992
.LPIC1493:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L5936:
	.align	2
.L5935:
	.word	.LANCHOR3-(.LPIC1490+8)
	.word	.LC214-(.LPIC1491+8)
	.word	.LANCHOR3-(.LPIC1492+8)
	.word	.LC214-(.LPIC1493+8)
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.type	ghsuart_data_free_buffers, %function
ghsuart_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #72
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #8]
	mov	r8, r0
	cmp	r6, #0
	bne	.L5961
.L5948:
	mov	r1, r8
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L5961:
	ldr	r3, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r3
	beq	.L5944
.L5943:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r9, r3
	bne	.L5943
.L5944:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5942
.L5945:
	ldr	r2, [r4, #64]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #56]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5945
.L5942:
	mov	r1, r8
	mov	r0, r7
	add	r7, r4, #104
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #12]
	mov	r8, r0
	cmp	r6, #0
	beq	.L5948
	ldr	r3, [r4, #80]
	add	r9, r4, #80
	cmp	r3, r9
	beq	.L5950
.L5949:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #80]
	cmp	r3, r9
	bne	.L5949
.L5950:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5948
.L5951:
	ldr	r2, [r4, #96]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L5951
	b	.L5948
	.fnend
	.size	ghsuart_data_free_buffers, .-ghsuart_data_free_buffers
	.align	2
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5991
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
.LPIC1494:
	add	r3, pc, r3
	ldr	r1, [r3, #2228]
	cmp	r2, r1
	bcs	.L5989
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2232]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5965
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5965
	blx	r3
.L5965:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5966
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5966
	blx	r3
.L5966:
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5990
.L5968:
	ldr	r1, .L5991+4
	add	r5, r4, #188
	ldr	r0, .L5991+8
	ldr	r2, [r4, #180]
.LPIC1498:
	add	r1, pc, r1
	add	r1, r1, #3024
.LPIC1499:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit(PLT)
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
.L5964:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5990:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5968
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L5968
	mov	r0, r6
	blx	r3
	b	.L5968
.L5989:
	ldr	r1, .L5991+12
	ldr	r0, .L5991+16
.LPIC1495:
	add	r1, pc, r1
.LPIC1496:
	add	r0, pc, r0
	add	r1, r1, #3024
	bl	printk(PLT)
	mvn	r0, #21
	b	.L5964
.L5992:
	.align	2
.L5991:
	.word	.LANCHOR1-(.LPIC1494+8)
	.word	.LANCHOR3-(.LPIC1498+8)
	.word	.LC380-(.LPIC1499+8)
	.word	.LANCHOR3-(.LPIC1495+8)
	.word	.LC97-(.LPIC1496+8)
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.type	ghsic_data_free_buffers, %function
ghsic_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #48
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #8]
	mov	r8, r0
	cmp	r6, #0
	bne	.L6017
.L6004:
	mov	r1, r8
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L6017:
	ldr	r3, [r4, #24]
	add	r9, r4, #24
	cmp	r9, r3
	beq	.L6000
.L5999:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #24]
	cmp	r9, r3
	bne	.L5999
.L6000:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5998
.L6001:
	ldr	r2, [r4, #40]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #32]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6001
.L5998:
	mov	r1, r8
	mov	r0, r7
	add	r7, r4, #80
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #12]
	mov	r8, r0
	cmp	r6, #0
	beq	.L6004
	ldr	r3, [r4, #56]
	add	r9, r4, #56
	cmp	r3, r9
	beq	.L6006
.L6005:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #56]
	cmp	r3, r9
	bne	.L6005
.L6006:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6004
.L6007:
	ldr	r2, [r4, #72]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #64]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6007
	b	.L6004
	.fnend
	.size	ghsic_data_free_buffers, .-ghsic_data_free_buffers
	.align	2
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L6059
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1500:
	add	r5, pc, r5
	ldr	r7, [r5, #1636]
	cmp	r7, #0
	beq	.L6019
	ldr	r4, [r5, #1640]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6020
	cmp	r7, #1
	bls	.L6019
	ldr	r4, [r5, #1744]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6020
	cmp	r7, #2
	beq	.L6019
	ldr	r4, [r5, #1848]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6020
	cmp	r7, #3
	beq	.L6019
	ldr	r4, [r5, #1952]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6020
.L6019:
	ldr	r1, .L6059+4
	mvn	r2, #21
	ldr	r0, .L6059+8
.LPIC1505:
	add	r1, pc, r1
	add	r1, r1, #3040
.LPIC1506:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
.L6022:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6020:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L6023
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6023
	blx	r3
.L6023:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6024
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6024
	blx	r3
.L6024:
	add	r0, r4, #120
	add	r5, r4, #180
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	add	r0, r4, #88
	bl	cancel_work_sync(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L6022
.L6060:
	.align	2
.L6059:
	.word	.LANCHOR1-(.LPIC1500+8)
	.word	.LANCHOR3-(.LPIC1505+8)
	.word	.LC97-(.LPIC1506+8)
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L6074
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #100]
	ldr	r7, [r1, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r5, #20]
	str	r3, [r5, #4]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L6073
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #20]
	str	r2, [r5, #4]
	beq	.L6073
	cmn	r3, #95
	bne	.L6065
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L6073
.L6065:
	ldr	r0, [r4, #84]
	ldr	r1, .L6075
	ldr	r2, [r6, #4]
	add	r0, r0, #32
.LPIC1510:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L6073:
	mov	r0, #1
.L6071:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6074:
	ldr	r2, .L6075+4
	mov	r3, #796
	ldr	r0, [r0]
	ldr	r1, .L6075+8
.LPIC1507:
	add	r2, pc, r2
	add	r2, r2, #3056
	add	r0, r0, #32
.LPIC1508:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L6075+12
	movw	r1, #550
.LPIC1509:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r0, r4
	b	.L6071
.L6076:
	.align	2
.L6075:
	.word	.LC198-(.LPIC1510+8)
	.word	.LANCHOR3-(.LPIC1507+8)
	.word	.LC196-(.LPIC1508+8)
	.word	.LC197-(.LPIC1509+8)
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L6091
	b	.L6082
.L6096:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L6082
.L6091:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L6096
	mov	r0, r3
.L6081:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6082:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	beq	.L6097
	ldr	r0, [r7, #28]
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
.L6083:
	tst	r3, #4
	movne	r0, #2
	bne	.L6084
	adds	r0, r0, #0
	movne	r0, #1
.L6084:
	ldr	r3, [r6]
	movw	r2, #21333
	ldr	r1, .L6098
	movt	r2, 21314
	str	r2, [r3]
	ldr	ip, [r5, #132]
.LPIC1511:
	add	r1, pc, r1
	ldr	r2, [r1, #3536]
	str	ip, [r3, #4]
	ldr	ip, [r5, #136]
	cmp	r2, #0
	str	ip, [r3, #8]
	beq	.L6085
	ldr	r2, [r5, #136]
	mov	ip, #0
	str	ip, [r1, #3536]
.L6085:
	str	r2, [r3, #8]
	mov	r2, #13
	mov	r1, r6
	strb	r0, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r0, r5
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer(PLT)
	cmp	r0, #0
	beq	.L6090
	ldr	r3, [r6, #8]
	mov	r0, #0
	str	r3, [r5, #60]
	b	.L6081
.L6097:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r0, #9472
	movt	r0, 5
	tst	r3, #16
	movne	r0, #0
	b	.L6083
.L6090:
	mvn	r0, #4
	b	.L6081
.L6099:
	.align	2
.L6098:
	.word	.LANCHOR4-(.LPIC1511+8)
	.fnend
	.size	send_status, .-send_status
	.align	2
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r10, #28]
	bne	.L6155
	mov	r4, r0
	ldr	r0, [r10]
	add	r0, r0, #20
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r10]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r10]
	add	r0, r0, #20
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L6158
	ldrb	r2, [r4, #79]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	ldrb	r0, [r4, #77]	@ zero_extendqisi2
	ldrb	r1, [r4, #81]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	r5, [r4, #80]	@ zero_extendqisi2
	orr	r3, r2, r3, asl #24
	tst	r0, #231
	mvnne	r0, #21
	orr	r3, r3, r1
	orr	r5, r3, r5, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r10, #28]
	bne	.L6155
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L6159
.L6104:
	ldrd	r2, [r10, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r10, #28]
	bge	.L6155
	ldr	r3, [r10, #40]
	ldr	r7, [r4, #128]
	sub	r1, r3, #32
	rsb	r2, r3, #32
	mov	r9, r5, asl r1
	cmp	r7, #0
	mov	r8, r5, asl r3
	orr	r9, r9, r5, lsr r2
	beq	.L6114
	ldr	r3, .L6164
	mov	fp, #1
	strd	r8, [sp, #24]
	str	r7, [sp, #40]
	str	fp, [sp, #32]
	strd	r8, [sp, #16]
.LPIC1515:
	add	r3, pc, r3
	str	r7, [sp, #36]
	str	r3, [sp, #52]
	ldr	r3, .L6164+4
.LPIC1514:
	add	r3, pc, r3
	str	r3, [sp, #48]
	ldr	r3, .L6164+8
.LPIC1513:
	add	r3, pc, r3
	str	r3, [sp, #44]
.L6108:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, fp, #1
	cmp	r3, #0
	beq	.L6109
	ldrd	r2, [r10, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	blt	.L6110
	ldr	r3, [r10, #40]
	mov	r2, #8448
	mov	r7, r1
	movt	r2, 5
	mov	fp, #0
	str	r2, [r10, #28]
	mov	r2, r0, lsr r3
	str	fp, [sp, #32]
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, r7, asl r3
	movpl	r3, r7
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	str	r2, [r10, #32]
	orr	r3, r3, #64
	strb	r3, [r10, #24]
	b	.L6108
.L6109:
	ldr	r5, [r4, #64]
	ldr	r2, [r5, #4]
	cmp	r2, #0
	bne	.L6115
	ldr	r3, [sp, #32]
	cmp	r3, #0
	beq	.L6114
.L6116:
	mov	r0, r4
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L6108
.L6155:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6115:
	cmp	r2, #1
	bne	.L6116
	ldr	r2, [r4, #136]
	cmp	r2, #0
	beq	.L6116
#APP
@ 1354 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #8]
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L6160
	mov	r7, #0
	ldrd	r0, [r10, #8]
	mov	r9, r7
	ldrd	r6, [sp, #24]
	ldr	r2, [r2, #48]
	subs	r6, r0, r6
	sbc	r7, r1, r7
	cmp	r6, r2
	sbcs	r3, r7, r9
	blt	.L6161
.L6119:
	ldr	r6, [r10, #44]
	ldr	r3, [r5, #12]
	rsb	r6, r6, #0
	cmp	r2, r3
	andls	r6, r6, r2
	andhi	r6, r6, r3
	cmp	r6, #0
	bne	.L6162
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcs	.L6108
.L6135:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L6155
.L6110:
	mov	r7, r1
	ldr	r1, [sp, #36]
	mov	r6, r0
	ldr	r2, [r4, #140]
	mov	r0, r4
	cmp	r1, #16384
	movcc	r3, r1
	movcs	r3, #16384
	adds	r6, r6, r3
	rsb	r2, r3, r2
	adc	r7, r7, #0
	subs	r1, r1, r3
	str	r2, [r4, #140]
	str	r1, [sp, #36]
	movne	r1, #1
	moveq	r1, #0
	str	r3, [r5, #12]
	str	r1, [sp, #32]
	ldr	r1, [r4, #108]
	strd	r6, [sp, #16]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	rsbne	r3, r2, r3
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer(PLT)
	cmp	r0, #0
	beq	.L6114
	ldr	r3, [r5, #8]
	ldr	r2, [sp, #32]
	str	r3, [r4, #60]
	and	fp, r2, #1
	b	.L6108
.L6162:
	ldrd	r0, [sp, #24]
	add	r3, sp, #64
	mov	r2, r6
	strd	r0, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r10]
	bl	vfs_write(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L6137
	cmp	r0, #0
	blt	.L6138
	cmp	r6, r0
	bls	.L6122
	ldr	r3, [r10, #44]
	ldrd	r8, [sp, #24]
	ldr	r2, [r4, #136]
	rsb	r3, r3, #0
	and	r3, r3, r0
	adds	r8, r8, r3
	mov	r0, r3
	adc	r9, r9, r3, asr #31
	rsb	r3, r3, r2
	ldr	r2, [sp, #40]
	cmp	r6, r0
	str	r3, [r4, #136]
	strd	r8, [sp, #24]
	rsb	r2, r0, r2
	str	r2, [sp, #40]
	bls	.L6123
.L6121:
	ldr	r3, [r10, #40]
	movw	r2, #3074
	movt	r2, 3
	str	r2, [r10, #28]
	mov	r2, r8, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, r9, asl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	ldr	r1, [sp, #48]
	str	r2, [r10, #32]
	mov	r2, #1
	orr	r3, r3, #64
	str	r2, [r1, #3536]
	strb	r3, [r10, #24]
.L6123:
	cmp	r6, r0
	beq	.L6163
.L6157:
.L6126:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #12]
	ldr	r3, [r3, #48]
	cmp	r3, r2
	bcc	.L6135
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L6108
.L6114:
	mvn	r0, #4
	b	.L6155
.L6161:
	ldrd	r6, [sp, #24]
	strd	r0, [sp, #8]
	add	r0, r10, #48
	ldr	r1, [sp, #44]
	strd	r6, [sp]
	bl	dev_err(PLT)
	ldr	r2, [r10, #8]
	rsb	r2, r6, r2
	b	.L6119
.L6159:
	tst	r0, #8
	beq	.L6104
	ldr	r0, [r10]
	add	r0, r0, #20
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r10]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r10]
	add	r0, r0, #20
	bl	_raw_spin_unlock(PLT)
	b	.L6104
.L6158:
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	orr	r3, r3, #167772160
	orr	r3, r3, r2, asl #16
	orr	r5, r3, r5, asl #8
	bic	r5, r5, #-16777216
	b	.L6104
.L6122:
	ldrd	r8, [sp, #24]
	ldr	r3, [r4, #136]
	ldr	r2, [sp, #40]
	adds	r8, r8, r0
	adc	r9, r9, r0, asr #31
	rsb	r3, r0, r3
	rsb	r2, r0, r2
	cmp	r6, r0
	str	r3, [r4, #136]
	strd	r8, [sp, #24]
	str	r2, [sp, #40]
	bne	.L6157
.L6163:
	ldr	r3, [sp, #52]
	ldr	r3, [r3, #3540]
	cmp	r3, #0
	bne	.L6157
	ldr	r3, [sp, #52]
	ldr	r3, [r3, #3536]
	cmp	r3, #0
	bne	.L6114
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L6157
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L6157
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L6157
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L6157
	ldr	r3, [sp, #36]
	cmp	r3, #0
	bne	.L6157
	ldr	r2, [sp, #52]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3540]
	bl	send_status(PLT)
	b	.L6157
.L6138:
	mov	r0, r3
	ldrd	r8, [sp, #24]
	b	.L6121
.L6137:
	mvn	r0, #3
	b	.L6155
.L6160:
	ldr	r3, [r10, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r4, [sp, #24]
	movt	r2, 4
	str	r2, [r10, #28]
	subs	r1, r3, #32
	mov	r2, r4, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, asl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	str	r2, [r10, #32]
	orr	r3, r3, #64
	strb	r3, [r10, #24]
	b	.L6155
.L6165:
	.align	2
.L6164:
	.word	.LANCHOR4-(.LPIC1515+8)
	.word	.LANCHOR4-(.LPIC1514+8)
	.word	.LC381-(.LPIC1513+8)
	.fnend
	.size	do_write, .-do_write
	.align	2
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r7, [r0, #104]
	cmp	r3, #8
	beq	.L6204
	ldrb	r1, [r0, #79]	@ zero_extendqisi2
	ldrb	r3, [r0, #78]	@ zero_extendqisi2
	ldrb	r2, [r0, #81]	@ zero_extendqisi2
	ldrb	lr, [r0, #77]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	ldrb	ip, [r0, #80]	@ zero_extendqisi2
	orr	r3, r1, r3, asl #24
	tst	lr, #231
	orr	r3, r3, r2
	mvnne	r0, #21
	orr	r3, r3, ip, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r7, #28]
	bne	.L6200
.L6168:
	ldrd	r4, [r7, #16]
	mov	r9, #0
	cmp	r3, r4
	sbcs	r2, r9, r5
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r7, #28]
	bge	.L6200
	ldr	r2, [r7, #40]
	ldr	r10, [r0, #128]
	sub	ip, r2, #32
	rsb	r1, r2, #32
	mov	r9, r3, asl ip
	cmp	r10, #0
	mov	r8, r3, asl r2
	orr	r9, r9, r3, lsr r1
	beq	.L6171
	mov	r3, sp
	mov	r5, r0
	bic	fp, r3, #8128
	add	r4, r0, #44
	bic	fp, fp, #63
.L6182:
	ldrd	r2, [r7, #8]
	mov	r0, r4
	strd	r2, [sp]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L6194
	b	.L6176
.L6205:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L6176
.L6194:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L6205
	mov	r0, r3
.L6200:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6176:
	ldrd	r2, [sp]
	subs	r2, r2, r8
	sbc	r3, r3, r9
	cmp	r10, #16384
	movcc	r1, r10
	movcs	r1, #16384
	str	r1, [sp]
	mov	r1, #0
	str	r1, [sp, #4]
	ldrd	r0, [sp]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L6206
.L6173:
	ldr	r3, [sp]
	mov	r0, r4
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L6207
	add	r3, sp, #24
	ldr	r2, [sp]
	strd	r8, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read(PLT)
	ldr	r3, [fp, #12]
	mov	r2, r0
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L6185
	cmp	r0, #0
	blt	.L6178
	ldr	r3, [sp, #12]
	cmp	r3, r0
	bls	.L6179
	ldr	r1, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r1, r1, #0
	and	r2, r2, r1
	rsb	r3, r2, r3
	adds	r8, r8, r2
	adc	r9, r9, r2, asr #31
	rsb	r10, r2, r10
	str	r2, [sp]
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [sp]
	mov	r3, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r2, [r1, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp, #12]
	ldr	r2, [sp]
	cmp	r3, r2
	bhi	.L6183
.L6180:
	cmp	r10, #0
	beq	.L6171
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer(PLT)
	cmp	r0, #0
	beq	.L6171
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L6182
.L6206:
	strd	r2, [sp]
	b	.L6173
.L6204:
	ldrb	r2, [r0, #79]	@ zero_extendqisi2
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r1, [r0, #78]	@ zero_extendqisi2
	orr	r2, r2, #134217728
	orr	r3, r2, r3, asl #16
	orr	r3, r3, r1, asl #8
	bic	r3, r3, #-16777216
	b	.L6168
.L6179:
	ldr	r3, [r5, #136]
	adds	r8, r8, r2
	mov	r0, r4
	adc	r9, r9, r2, asr #31
	rsb	r10, r2, r10
	str	r2, [sp]
	rsb	r3, r2, r3
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [sp]
	mov	r3, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r2, [r1, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6180
.L6178:
	mov	r0, r4
	str	r3, [sp]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [sp]
	mov	r2, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
.L6183:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	mvn	r0, #4
	movt	r2, 3
	str	r2, [r7, #28]
	mov	r2, r8, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, r9, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	b	.L6200
.L6171:
	mvn	r0, #4
	b	.L6200
.L6185:
	mvn	r0, #3
	b	.L6200
.L6207:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r7, #28]
	mov	r2, r8, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, r9, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #4
	b	.L6200
	.fnend
	.size	do_read, .-do_read
	.align	2
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6214
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1518:
	add	r3, pc, r3
	ldr	r4, [r3, #2508]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	strne	r3, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L6215:
	.align	2
.L6214:
	.word	.LANCHOR1-(.LPIC1518+8)
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6222
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1519:
	add	r3, pc, r3
	ldr	r4, [r3, #2508]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	strne	r3, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L6223:
	.align	2
.L6222:
	.word	.LANCHOR1-(.LPIC1519+8)
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #88
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #-128]
	mov	r7, r0
	cmp	r6, #0
	beq	.L6228
	sub	r2, r4, #112
	ldr	r9, .L6254
	movw	r3, #16960
	movt	r3, 15
	str	r2, [sp, #4]
	ldr	r2, .L6254+4
	str	r3, [sp, #12]
.LPIC1524:
	add	r9, pc, r9
.LPIC1521:
	add	r2, pc, r2
	str	r2, [sp, #8]
.L6227:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r2, r3
	beq	.L6228
.L6236:
	mov	r3, r4
	ldr	fp, [r3, #-104]!
	cmp	fp, r3
	cmpne	fp, #0
	beq	.L6228
	ldr	r3, [r4, #-96]
	mov	r1, #0
	ldr	r2, .L6254+8
	sub	r3, r3, #1
.LPIC1526:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [r4, #-96]
	ldmia	fp, {r0, r3}
	str	r1, [fp]
	str	r1, [fp, #4]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	r10, [r4, #-112]
	str	fp, [r10, #-4]
	ldrb	r3, [r10, #-10]	@ zero_extendqisi2
	sub	r8, r10, #36
	ldr	r0, [fp, #172]
	orr	r3, r3, #2
	str	r0, [r10, #-36]
	ldr	r0, [fp, #80]
	strb	r3, [r10, #-10]
	str	r0, [r10, #-32]
	ldr	r3, [r4, #48]
	mov	r0, r10
	ldr	r2, [r2]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #48]
	ldrb	r3, [r10, #-10]	@ zero_extendqisi2
	bfieq	r3, r1, #0, #1
	orrne	r3, r3, #1
	streqb	r3, [r10, #-10]
	strneb	r3, [r10, #-10]
	streq	r1, [r4, #48]
	bl	list_del(PLT)
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #-572]
	cmp	r3, #0
	bne	.L6252
.L6231:
	mov	r1, r7
	str	r3, [fp, #44]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r2, #208
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L6253
	ldr	r3, [r4, #56]
	ldr	r2, [r9, #316]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L6227
	ldr	r2, [r4, #-96]
	ldr	r3, [r9, #436]
	cmp	r2, r3
	bhi	.L6227
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L6227
	ldr	r3, [r4, #64]
	ldr	r2, [r4, #-96]
	add	r3, r3, #1
	str	r2, [r4, #80]
	ldr	r2, [sp, #4]
	str	r3, [r4, #64]
	ldr	r3, [r4, #-112]
	cmp	r2, r3
	bne	.L6236
.L6228:
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6252:
	add	r0, sp, #16
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	ldr	r1, [sp, #12]
	ubfx	r3, r3, #0, #12
	mla	r3, r1, r3, r2
	b	.L6231
.L6253:
	ldr	r1, .L6254+12
	ldr	r0, .L6254+16
.LPIC1522:
	add	r1, pc, r1
	add	r1, r1, #3072
.LPIC1523:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r10
	ldr	r2, [r4, #-112]
	bl	__list_add(PLT)
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	b	.L6228
.L6255:
	.align	2
.L6254:
	.word	.LANCHOR2-(.LPIC1524+8)
	.word	.LANCHOR4-(.LPIC1521+8)
	.word	ghsic_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1526+8))
	.word	.LANCHOR3-(.LPIC1522+8)
	.word	.LC345-(.LPIC1523+8)
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6261
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L6261
	ldr	r1, [r5, #-48]
	ldr	r2, .L6314
	sub	r1, r1, #1
.LPIC1531:
	add	r2, pc, r2
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r3, [r2, #-572]
	cmp	r3, #0
	bne	.L6308
.L6262:
	mov	r1, r8
	str	r3, [r4, #40]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, .L6314+4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, .L6314+8
.LPIC1527:
	add	r7, pc, r7
	add	r7, r7, #3104
.LPIC1528:
	add	r0, pc, r0
	add	r7, r7, #4
	add	r0, r0, #440
	mov	r1, r7
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6309
.L6260:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any(PLT)
.L6261:
.L6259:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r5, #-108]
	mov	r10, r0
	cmp	r7, #0
	beq	.L6265
	movw	r3, #16960
	sub	r2, r5, #64
	ldr	fp, .L6314+12
	movt	r3, 15
	ldr	r8, .L6314+16
	str	r2, [sp, #8]
	ldr	r2, .L6314+20
	str	r3, [sp, #20]
	ldr	r3, .L6314+24
.LPIC1532:
	add	fp, pc, fp
.LPIC1534:
	add	r8, pc, r8
.LPIC1533:
	add	r2, pc, r2
.LPIC1536:
	add	r3, pc, r3
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	b	.L6269
.L6266:
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [r8, #468]
	mov	r1, #208
	bl	__alloc_skb(PLT)
	subs	r9, r0, #0
	beq	.L6310
	ldr	r2, [r9, #172]
	str	r10, [r9, #28]
	ldr	r3, [sp, #16]
	str	r2, [r4, #-36]
	ldr	r2, [r8, #468]
	str	r9, [r4, #-4]
	str	r2, [r4, #-32]
	ldr	ip, [r3, #-572]
	cmp	ip, #0
	bne	.L6311
.L6268:
	str	ip, [r9, #32]
	ldr	ip, [r7, #8]
	mov	r2, #208
	ldr	r1, [sp]
	mov	r0, r7
	ldr	ip, [ip, #16]
	blx	ip
	str	r0, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp, #4]
	mov	r10, r0
	cmp	r2, #0
	bne	.L6312
.L6269:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	beq	.L6265
	ldr	r4, [r5, #-64]
	ldr	r3, [sp, #8]
	mov	r0, r4
	cmp	r4, r3
	sub	r3, r4, #36
	str	r3, [sp]
	beq	.L6265
	ldr	r2, [r5, #-48]
	ldr	r3, [fp, #464]
	cmp	r2, r3
	bhi	.L6265
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #12]
	ldr	r10, [r3, #-572]
	cmp	r10, #0
	beq	.L6266
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #24]
	ldr	ip, [sp, #28]
	ldr	r2, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r10, r2, r3, ip
	b	.L6266
.L6311:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r2, [sp, #24]
	ldr	ip, [sp, #28]
	ldr	r3, [sp, #20]
	ubfx	r2, r2, #0, #12
	mla	ip, r3, r2, ip
	b	.L6268
.L6312:
	ldr	r8, .L6314+28
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	ldr	r0, .L6314+32
.LPIC1537:
	add	r8, pc, r8
	add	r8, r8, #3120
.LPIC1538:
	add	r0, pc, r0
	add	r8, r8, #12
	add	r0, r0, #472
	mov	r1, r8
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6313
.L6270:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	beq	.L6271
	ldr	r2, [r5, #-64]
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	__list_add(PLT)
.L6265:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6308:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r2, [sp, #24]
	movw	r3, #16960
	ldr	r1, [sp, #28]
	movt	r3, 15
	ubfx	r2, r2, #0, #12
	mla	r3, r3, r2, r1
	b	.L6262
.L6310:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	ldr	r2, [r5, #-64]
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	__list_add(PLT)
	b	.L6265
.L6271:
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6265
.L6313:
	ldr	r0, .L6314+36
	mov	r1, r8
.LPIC1540:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6270
.L6309:
	ldr	r0, .L6314+40
	mov	r1, r7
	mvn	r2, #18
.LPIC1530:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6260
.L6315:
	.align	2
.L6314:
	.word	.LANCHOR4-(.LPIC1531+8)
	.word	.LANCHOR3-(.LPIC1527+8)
	.word	.LANCHOR2-(.LPIC1528+8)
	.word	.LANCHOR2-(.LPIC1532+8)
	.word	.LANCHOR2-(.LPIC1534+8)
	.word	.LANCHOR4-(.LPIC1533+8)
	.word	.LANCHOR4-(.LPIC1536+8)
	.word	.LANCHOR3-(.LPIC1537+8)
	.word	.LANCHOR2-(.LPIC1538+8)
	.word	.LC151-(.LPIC1540+8)
	.word	.LC88-(.LPIC1530+8)
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6336
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r2, #29537
	strd	r6, [sp, #8]
	mov	ip, #12
	mov	r6, r1
	strd	r8, [sp, #16]
	movt	r2, 2660
	mov	r8, #0
	str	lr, [sp, #28]
	mov	lr, #4096
	mov	r5, r0
	str	r10, [sp, #24]
	ldr	r7, [r1, #20]
.LPIC1541:
	add	r3, pc, r3
	mov	r1, #1
	.pad #8
	sub	sp, sp, #8
	str	r0, [r7, #192]
	str	r8, [r6, #20]
	str	r7, [r0, #616]
	str	lr, [r0, #16]
	strb	ip, [r0, #13]
	str	r2, [r0, #56]
	str	r3, [r0, #36]
	str	r1, [r0, #628]
	ldrh	r3, [r6, #12]
	strh	r3, [r6]	@ movhi
	bl	new_inode(PLT)
	subs	r4, r0, #0
	beq	.L6317
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r4, #40]
	ldrh	ip, [r6]
	ldr	r0, .L6336+4
	ldr	r1, .L6336+8
	ldrd	r2, [sp]
	strh	ip, [r4]	@ movhi
	ldr	ip, [r6, #4]
.LPIC1547:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
.LPIC1546:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	ip, [r4, #4]
	ldr	ip, [r6, #8]
	str	r8, [r4, #328]
	str	r0, [r4, #200]
	str	r1, [r4, #24]
	str	ip, [r4, #8]
	strd	r2, [r4, #52]
	strd	r2, [r4, #60]
	strd	r2, [r4, #68]
.L6317:
	mov	r0, r4
	bl	d_make_root(PLT)
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L6321
	ldr	r1, .L6336+12
	ldr	r6, [r5, #616]
.LPIC1543:
	add	r1, pc, r1
	bl	d_alloc_name(PLT)
	subs	r10, r0, #0
	beq	.L6321
	mov	r0, r5
	bl	new_inode(PLT)
	subs	r4, r0, #0
	beq	.L6322
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r4, #40]
	ldrh	r2, [r6, #196]
	mov	r1, r4
	ldr	r3, .L6336+16
	mov	r0, r10
	ldrd	r8, [sp]
	strh	r2, [r4]	@ movhi
	ldr	r2, [r6, #200]
.LPIC1544:
	add	r3, pc, r3
	adds	r3, r3, #104
	str	r2, [r4, #4]
	ldr	r2, [r6, #204]
	strne	r3, [r4, #200]
	str	r7, [r4, #328]
	strd	r8, [r4, #52]
	str	r2, [r4, #8]
	strd	r8, [r4, #60]
	strd	r8, [r4, #68]
	bl	d_instantiate(PLT)
	mov	r0, r10
	bl	d_rehash(PLT)
	mov	r0, #0
.L6334:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6322:
	mov	r0, r10
	bl	dput(PLT)
.L6321:
	mvn	r0, #11
	b	.L6334
.L6337:
	.align	2
.L6336:
	.word	.LANCHOR6-(.LPIC1541+8)
	.word	simple_dir_operations(GOT_PREL)+(.-(.LPIC1547+8))
	.word	simple_dir_inode_operations(GOT_PREL)+(.-(.LPIC1546+8))
	.word	.LC382-(.LPIC1543+8)
	.word	.LANCHOR6-(.LPIC1544+8)
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.99, %function
_snd_pcm_hw_param_set.constprop.99:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L6339
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6356
	ldr	r0, [r0, #8]
	adds	r5, r0, #0
	movne	r5, #1
.L6340:
	mov	r6, r1, lsr #5
	and	r3, r1, #31
	mov	r7, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	add	r0, r4, #4
	ldr	r2, [r6, #4]
	and	r7, r2, r7, asl r3
	bl	__memzero(PLT)
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6342
	ldr	r3, [r4, #8]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L6342
.L6343:
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L6352:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6339:
	ldr	r0, [r0, #8]
	cmp	r0, #0
	moveq	r5, r0
	beq	.L6340
	sub	r3, r0, #1
	tst	r3, r0
	movne	r5, #1
	moveq	r5, #0
	b	.L6340
.L6356:
	mov	r5, #1
	b	.L6340
.L6342:
	cmp	r5, #0
	movne	r0, #1
	bne	.L6343
	mov	r0, r5
	b	.L6352
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.99, .-_snd_pcm_hw_param_set.constprop.99
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.101, %function
_snd_pcm_hw_param_set.constprop.101:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L6358
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L6358:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.101, .-_snd_pcm_hw_param_set.constprop.101
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.102, %function
_snd_pcm_hw_param_set.constprop.102:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L6364
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L6364:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.102, .-_snd_pcm_hw_param_set.constprop.102
	.align	2
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	rsb	r3, ip, r3
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L6370
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	bne	.L6382
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
.L6370:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6382:
	cmp	r3, #1
	strb	r6, [ip]
	beq	.L6372
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L6370
.L6372:
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
	b	.L6370
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #32
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r10
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r8, r0
	cmp	r3, #0
	bne	.L6407
.L6384:
	add	r9, r8, #36
.L6389:
	ldr	r4, [r8, #36]
	cmp	r4, r9
	beq	.L6408
.L6390:
	mov	r0, r4
	sub	r7, r4, #28
	bl	list_del(PLT)
	add	r5, r4, #8
	b	.L6387
.L6388:
	bl	list_del(PLT)
	ldr	r3, [fp, #-36]
	cmp	r3, #0
	bne	.L6409
.L6387:
	ldr	fp, [r4, #8]
	cmp	fp, r5
	mov	r0, fp
	sub	r6, fp, #72
	bne	.L6388
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L6389
	mov	r0, r7
	blx	r3
	ldr	r4, [r8, #36]
	cmp	r4, r9
	bne	.L6390
.L6408:
	ldr	r3, .L6410
.LPIC1549:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L6391
	mov	r0, r8
	blx	r3
.L6391:
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L6392
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	ldr	r1, [r8, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L6392:
	ldr	r1, .L6410+4
	mov	r0, r10
.LPIC1550:
	add	r1, pc, r1
	add	r1, r1, #644
	bl	device_remove_file(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r10
	mov	r1, #0
	bl	dev_set_drvdata(PLT)
	ldr	r3, .L6410+8
	mov	r2, #0
.LPIC1551:
	add	r3, pc, r3
	str	r2, [r3, #24]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6409:
	mov	r1, r6
	mov	r0, r7
	blx	r3
	b	.L6387
.L6407:
	ldr	r0, .L6410+12
	movw	r1, #1556
.LPIC1548:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6384
.L6411:
	.align	2
.L6410:
	.word	.LANCHOR1-(.LPIC1549+8)
	.word	.LANCHOR0-(.LPIC1550+8)
	.word	.LANCHOR1-(.LPIC1551+8)
	.word	.LC383-(.LPIC1548+8)
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #12]
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L6433
	cmp	r4, #0
	beq	.L6414
	tst	r3, #1
	beq	.L6415
	mov	r3, sp
	add	r8, r5, #1648
	bic	r9, r3, #8128
	mov	r6, r1
	add	r8, r8, #8
	bic	r9, r9, #63
	add	r7, r5, #88
.L6416:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #1656]
	mov	r10, r0
	cmp	r8, r3
	beq	.L6417
	mov	r0, r3
	sub	fp, r3, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	beq	.L6429
.L6418:
	cmp	r4, #16384
	movhi	r10, #16384
	movhi	r2, #0
	bhi	.L6424
	ldr	r2, [r5, #92]
	mov	r10, r4
	ldrh	r1, [r2, #20]
	sdiv	r2, r4, r1
	mls	r2, r1, r2, r4
	clz	r2, r2
	mov	r2, r2, lsr #5
.L6424:
	ldrb	r1, [fp, #26]	@ zero_extendqisi2
	ldr	r0, [fp]
	bfi	r1, r2, #1, #1
	strb	r1, [fp, #26]
	ldr	r2, [r9, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r6, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L6456
	mov	r1, r10
	mvn	r4, #13
	bl	__memzero(PLT)
.L6427:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r8
	ldr	r1, [r5, #1660]
	add	r0, fp, #36
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L6450:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6456:
	mov	r2, r10
	mov	r1, r6
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L6457
	str	r10, [fp, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, fp
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	blt	.L6439
	subs	r4, r4, r10
	add	r6, r6, r10
	beq	.L6414
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6416
.L6415:
	mvn	r3, #4
	str	r3, [sp, #12]
	b	.L6414
.L6417:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6429:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L6434
	ldr	r2, .L6459
	mov	r3, #0
	add	r0, sp, #20
	ldr	r1, [r9, #12]
	add	r10, r5, #1664
	str	r3, [sp, #20]
	add	r3, sp, #32
	add	r10, r10, #12
	str	r0, [sp, #8]
.LPIC1553:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #32]
	str	r1, [sp, #24]
	mov	r1, r0
	str	r3, [sp, #36]
	str	r2, [sp, #28]
	b	.L6423
.L6458:
	bl	schedule(PLT)
	ldr	r1, [sp, #8]
.L6423:
	mov	r2, #1
	mov	r0, r10
	bl	prepare_to_wait(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #1656]
	mov	r1, r0
	cmp	r8, r2
	mov	r0, r2
	sub	fp, r2, #36
	beq	.L6420
	str	r1, [sp, #4]
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	bne	.L6421
.L6430:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L6453
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6458
	mov	r3, #65024
	movt	r3, 65535
.L6453:
	ldr	r1, [sp, #8]
	mov	r0, r10
	str	r3, [sp, #12]
	bl	finish_wait(PLT)
	b	.L6414
.L6434:
	str	r3, [sp, #12]
.L6414:
	ldr	r0, [sp, #12]
	b	.L6450
.L6420:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6430
.L6439:
	mvn	r4, #4
	b	.L6427
.L6421:
	ldr	r1, [sp, #8]
	mov	r0, r10
	bl	finish_wait(PLT)
	b	.L6418
.L6433:
	mvn	r0, #18
	b	.L6450
.L6457:
	mvn	r4, #13
	b	.L6427
.L6460:
	.align	2
.L6459:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1553+8))
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r1, r6, #100
	ldrh	ip, [r6, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	ip, #0
	beq	.L6467
	add	lr, r1, ip
	mov	r3, r1
	mov	ip, r1
.L6465:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #5
	strneb	r2, [ip]
	addne	ip, ip, #1
	cmp	r3, lr
	bne	.L6465
	rsb	ip, r1, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L6463:
	add	ip, r6, ip
	strh	r3, [r6, #104]	@ movhi
	mov	r0, #5
	mov	r1, #3
	mov	r2, #1
	strb	r0, [ip, #100]
	mov	r0, r4
	bl	__wake_up_locked(PLT)
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6467:
	mov	r3, #1
	b	.L6463
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #-28]
	add	r5, r7, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #96]
	mov	r6, r0
	add	r1, r7, #100
	ldrh	ip, [r7, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r7, #96]
	cmp	ip, #0
	beq	.L6476
	add	r4, r1, ip
	mov	r3, r1
	mov	ip, r1
.L6474:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	lr, r2, #5
	cmp	lr, #1
	strhib	r2, [ip]
	addhi	ip, ip, #1
	cmp	r3, r4
	bne	.L6474
	rsb	ip, r1, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L6472:
	add	ip, r7, ip
	strh	r3, [r7, #104]	@ movhi
	mov	r0, #6
	mov	r1, #3
	mov	r2, #1
	strb	r0, [ip, #100]
	mov	r0, r5
	bl	__wake_up_locked(PLT)
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6476:
	mov	r3, #1
	b	.L6472
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ubfx	r0, r1, #8, #8
	mov	r5, #29440
	str	lr, [sp, #20]
	movw	ip, #29441
	movw	lr, #29442
	strd	r6, [sp, #8]
	movt	r5, 32772
	movt	ip, 32772
	str	r8, [sp, #16]
	movt	lr, 32772
	.pad #40
	sub	sp, sp, #40
	mov	r3, #0
	cmp	r0, #115
	stmib	sp, {r5, ip, lr}
	str	r3, [sp, #16]
	bne	.L6514
	mov	r6, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L6515
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L6516
	cmp	r1, #0
	bge	.L6517
	ldr	r2, .L6525
.LPIC1562:
	add	r2, pc, r2
	ldr	r4, [r2, #2496]
	cmp	r4, #0
	beq	.L6518
	cmp	r1, ip
	beq	.L6486
	cmp	r1, lr
	beq	.L6487
	cmp	r1, r5
	beq	.L6519
.L6504:
	mov	r0, #0
.L6509:
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6487:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r6, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r0, #4
	beq	.L6520
.L6499:
	ldr	r4, .L6525+4
	mov	r2, r0
	ldr	r0, .L6525+8
.LPIC1574:
	add	r4, pc, r4
	add	r1, r4, #3168
.LPIC1575:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L6525+12
	add	r1, r4, #3152
	mvn	r2, #13
.LPIC1577:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6509
.L6519:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, #16
	beq	.L6521
.L6489:
	ldr	r1, .L6525+16
	mov	r2, r0
	ldr	r0, .L6525+20
.LPIC1565:
	add	r1, pc, r1
.LPIC1566:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6509
.L6486:
	ldr	r2, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r2
	beq	.L6522
.L6512:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r4, #212]
	bic	r3, r3, #8128
	movne	r2, #1
	moveq	r2, #2
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, #4
	beq	.L6523
.L6496:
	ldr	r4, .L6525+24
	mov	r2, r0
	ldr	r0, .L6525+28
.LPIC1570:
	add	r4, pc, r4
	add	r1, r4, #3168
.LPIC1571:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L6525+32
	add	r1, r4, #3152
	mvn	r2, #13
.LPIC1573:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6509
.L6521:
	mov	r0, r6
	mov	r2, #16
	add	r1, sp, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L6504
	b	.L6489
.L6520:
	mov	r0, r6
	mov	r2, #4
	add	r1, sp, #20
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L6509
	b	.L6499
.L6522:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L6491
	ldr	r2, .L6525+36
	mov	r1, sp
	str	r3, [sp, #20]
	bic	r5, r1, #8128
	add	r3, sp, #32
	bic	r5, r5, #63
	add	r7, r4, #200
	ldr	r1, [r5, #12]
	add	r8, sp, #20
	str	r3, [sp, #32]
.LPIC1578:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #36]
	str	r1, [sp, #24]
	str	r2, [sp, #28]
	b	.L6494
.L6524:
	bl	schedule(PLT)
.L6494:
	mov	r2, #1
	mov	r1, r8
	mov	r0, r7
	bl	prepare_to_wait(PLT)
	ldr	r2, [r4, #212]
	ldr	r3, [r4, #100]
	cmp	r2, r3
	bne	.L6492
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L6493
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6524
.L6492:
	mov	r1, r8
	mov	r0, r7
	bl	finish_wait(PLT)
	ldr	r2, [r4, #100]
	b	.L6512
.L6523:
	mov	r0, r6
	mov	r2, #4
	add	r1, sp, #20
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L6509
	b	.L6496
.L6493:
	mov	r1, r8
	mov	r0, r7
	bl	finish_wait(PLT)
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L6491:
	ldr	r1, .L6525+40
	ldr	r0, .L6525+44
.LPIC1568:
	add	r1, pc, r1
.LPIC1569:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #3
	b	.L6509
.L6517:
	ldr	r1, .L6525+48
	ldr	r0, .L6525+52
.LPIC1560:
	add	r1, pc, r1
.LPIC1561:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6509
.L6516:
	ldr	r1, .L6525+56
	ldr	r0, .L6525+60
.LPIC1558:
	add	r1, pc, r1
.LPIC1559:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6509
.L6515:
	ldr	r1, .L6525+64
	ldr	r0, .L6525+68
.LPIC1556:
	add	r1, pc, r1
.LPIC1557:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #24
	b	.L6509
.L6514:
	ldr	r1, .L6525+72
	mov	r2, r0
	ldr	r0, .L6525+76
.LPIC1554:
	add	r1, pc, r1
.LPIC1555:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6509
.L6518:
	ldr	r1, .L6525+80
	ldr	r0, .L6525+84
.LPIC1563:
	add	r1, pc, r1
.LPIC1564:
	add	r0, pc, r0
	add	r1, r1, #3152
	bl	printk(PLT)
	mvn	r0, #18
	b	.L6509
.L6526:
	.align	2
.L6525:
	.word	.LANCHOR1-(.LPIC1562+8)
	.word	.LANCHOR3-(.LPIC1574+8)
	.word	.LC390-(.LPIC1575+8)
	.word	.LC392-(.LPIC1577+8)
	.word	.LANCHOR3-(.LPIC1565+8)
	.word	.LC388-(.LPIC1566+8)
	.word	.LANCHOR3-(.LPIC1570+8)
	.word	.LC390-(.LPIC1571+8)
	.word	.LC391-(.LPIC1573+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1578+8))
	.word	.LANCHOR3-(.LPIC1568+8)
	.word	.LC389-(.LPIC1569+8)
	.word	.LANCHOR3-(.LPIC1560+8)
	.word	.LC387-(.LPIC1561+8)
	.word	.LANCHOR3-(.LPIC1558+8)
	.word	.LC386-(.LPIC1559+8)
	.word	.LANCHOR3-(.LPIC1556+8)
	.word	.LC385-(.LPIC1557+8)
	.word	.LANCHOR3-(.LPIC1554+8)
	.word	.LC384-(.LPIC1555+8)
	.word	.LANCHOR3-(.LPIC1563+8)
	.word	.LC268-(.LPIC1564+8)
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, r2
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r1
	add	r2, sp, #4
	mov	r1, #2
	mov	r4, r3
	bl	kstrtouint(PLT)
	cmp	r0, #0
	bne	.L6528
	ldr	r2, [sp, #4]
	cmp	r2, #0
	beq	.L6535
.L6529:
	ldrb	r1, [r5, #-24]	@ zero_extendqisi2
	mov	r0, r4
	bfi	r1, r2, #7, #1
	strb	r1, [r5, #-24]
.L6528:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6535:
	ldrb	r3, [r5, #-24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L6529
	ldr	r0, [r5, #-48]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L6529
	mov	r1, #1
	bl	vfs_fsync(PLT)
	ldr	r2, [sp, #4]
	b	.L6529
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L6551
	mov	r6, #0
	mov	r0, r5
	str	r6, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L6552
	tst	r3, #4
	bne	.L6553
.L6539:
	tst	r3, #1
	bne	.L6554
.L6540:
	add	r2, r4, #172
	ldr	r1, [r4, #196]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
.L6554:
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L6540
.L6551:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6553:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
	tst	r3, #1
	beq	.L6540
	b	.L6554
.L6552:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfi	r2, r6, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
	tst	r3, #4
	beq	.L6539
	b	.L6553
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	strd	r6, [sp, #8]
	add	r9, r9, #8
	add	r7, r1, #88
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L6556:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L6557
	bl	list_del(PLT)
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6567
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6556
.L6557:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6567:
	add	r5, r4, #1680
	mov	r9, r5
	add	r5, r5, #4
	add	r9, r9, #12
.L6560:
	ldr	r6, [r5, #4]!
	ldr	r8, [r4, #96]
	cmp	r6, #0
	beq	.L6559
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6559:
	cmp	r5, r9
	bne	.L6560
	ldr	r0, .L6576
	mov	r9, r4
.LPIC1579:
	add	r0, pc, r0
	add	r0, r0, #660
	bl	hid_unregister_driver(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r9, #1768]!
	mov	r8, r0
	cmp	r9, r6
	ldr	r5, [r6]
	addne	r10, r4, #1776
	addne	r10, r10, #8
	bne	.L6564
	b	.L6565
.L6569:
	mov	r5, r3
.L6564:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	ldr	r2, [r4, #1784]
	mov	r1, r10
	bl	__list_add(PLT)
	cmp	r9, r5
	ldr	r3, [r5]
	mov	r6, r5
	bne	.L6569
.L6565:
	mov	r9, r4
	ldr	r6, [r9, #1776]!
	cmp	r6, r9
	ldr	r5, [r6]
	addne	r10, r4, #1776
	addne	r10, r10, #8
	bne	.L6566
	b	.L6563
.L6570:
	mov	r5, r3
.L6566:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	ldr	r2, [r4, #1784]
	mov	r1, r10
	bl	__list_add(PLT)
	cmp	r5, r9
	ldr	r3, [r5]
	mov	r6, r5
	bne	.L6570
.L6563:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L6576+4
	add	r2, r4, #1744
	mov	r0, #4
	ldrd	r4, [sp]
	add	r2, r2, #8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
.LPIC1581:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3]
	b	queue_work_on(PLT)
.L6577:
	.align	2
.L6576:
	.word	.LANCHOR0-(.LPIC1579+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1581+8))
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r5, r3
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6586
.L6581:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6586:
	ldr	r0, .L6587
	ldrh	r2, [r4, #170]
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC1582:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.115(PLT)
	mov	r5, r0
	b	.L6581
.L6588:
	.align	2
.L6587:
	.word	.LC393-(.LPIC1582+8)
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #148
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6593
.L6591:
	mov	r1, r6
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6593:
	ldr	r0, .L6594
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
.LPIC1583:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.115(PLT)
	b	.L6591
.L6595:
	.align	2
.L6594:
	.word	.LC393-(.LPIC1583+8)
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #148
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6600
.L6598:
	mov	r1, r6
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6600:
	ldr	r0, .L6601
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
.LPIC1584:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.115(PLT)
	b	.L6598
.L6602:
	.align	2
.L6601:
	.word	.LC393-(.LPIC1584+8)
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-28]
	ldr	r3, [r4, #92]
	cmp	r3, #2
	bne	.L6615
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L6605
	cmp	r3, #2
	beq	.L6606
	mvn	r0, #94
.L6624:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6606:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r8, [r0, #-20]	@ zero_extendqisi2
	cmp	r8, #0
	beq	.L6619
.L6608:
	add	r5, r4, #116
	mov	r7, r1
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #96]
	mov	r6, r0
	ldr	r3, [r7, #4]	@ unaligned
	ldr	r2, [r7]	@ unaligned
	ldrh	ip, [r4, #104]
	cmp	r1, #1
	add	r1, r4, #100
	strd	r2, [r4, #108]
	moveq	r3, #2
	strh	r8, [r4, #112]	@ movhi
	streq	r3, [r4, #96]
	cmp	ip, #0
	beq	.L6620
	add	lr, r1, ip
	mov	r3, r1
	mov	ip, r1
.L6613:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #4
	strneb	r2, [ip]
	addne	ip, ip, #1
	cmp	r3, lr
	bne	.L6613
	rsb	ip, r1, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L6611:
	add	ip, r4, ip
	strh	r3, [r4, #104]	@ movhi
	mov	r0, #4
	mov	r2, #1
	mov	r1, #3
	strb	r0, [ip, #100]
	mov	r0, r5
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L6624
.L6605:
	ldrh	ip, [r4, #178]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r5, [r0, #-4]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L6619
	mov	r2, r5
.L6609:
	mov	r0, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L6607
	cmp	r3, lr
	beq	.L6627
.L6607:
	subs	ip, ip, #1
	bne	.L6609
.L6619:
	mvn	r0, #32
	b	.L6624
.L6627:
	rsb	r0, r5, r0
	mov	r0, r0, asr #1
	cmp	r0, #0
	mov	r8, r0
	bge	.L6608
	b	.L6624
.L6615:
	mvn	r0, #18
	b	.L6624
.L6620:
	mov	r3, #1
	b	.L6611
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	cmn	r3, #104
	ldr	r8, [r5, #84]
	beq	.L6630
	cmp	r3, #0
	beq	.L6631
	cmn	r3, #108
	beq	.L6630
	ldr	r2, [r0, #4]
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r0, [r8]
	ldr	r1, .L6657
	stmia	sp, {ip, lr}
	add	r0, r0, #32
.LPIC1587:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #320]
	tst	r3, #2
	beq	.L6633
	add	r6, r5, #188
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
.L6638:
	ldr	r3, .L6657+4
	ldr	r2, [r5, #328]
.LPIC1590:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	cmp	r2, r3
	bcs	.L6655
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L6639
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r2, #32
	ldr	r0, [r6, #160]
	mov	r1, r4
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r4]
	str	r6, [r4, #32]
	str	ip, [r4, #4]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6656
.L6628:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6630:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L6631:
	ldr	r1, [r1, #48]
	mov	r0, r7
	bl	skb_put(PLT)
	ldr	r3, [r5, #320]
	tst	r3, #2
	beq	.L6633
	add	r6, r5, #188
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #176]
	add	r1, r5, #172
	add	r2, r5, #236
	mov	r0, #4
	stmia	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r5, #180]
	str	r7, [r5, #176]
	ldr	r1, [r5, #200]
	add	r3, r3, #1
	str	r3, [r5, #180]
	bl	queue_work_on(PLT)
	b	.L6638
.L6655:
	add	r0, r4, #36
	add	r2, r5, #160
	ldr	r1, [r5, #164]
	bl	__list_add(PLT)
	ldr	r3, [r5, #168]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r5, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6656:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6636:
	ldr	r0, [r8]
	mov	r2, r7
	ldr	r1, .L6657+8
	add	r0, r0, #32
.LPIC1589:
	add	r1, pc, r1
	bl	dev_err(PLT)
	add	r0, r4, #36
	add	r2, r5, #160
	ldr	r1, [r5, #164]
	bl	__list_add(PLT)
	ldr	r3, [r5, #168]
	add	r3, r3, #1
	str	r3, [r5, #168]
	b	.L6628
.L6639:
	mvn	r7, #11
	b	.L6636
.L6633:
	ldr	r1, .L6657+12
	ldr	r0, .L6657+16
.LPIC1585:
	add	r1, pc, r1
	add	r1, r1, #3200
.LPIC1586:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r6
	mov	r1, r4
	str	r3, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_sdio_free_req(PLT)
.L6658:
	.align	2
.L6657:
	.word	.LC125-(.LPIC1587+8)
	.word	sdio_rx_fctrl_en_thld(GOT_PREL)+(.-(.LPIC1590+8))
	.word	.LC127-(.LPIC1589+8)
	.word	.LANCHOR3-(.LPIC1585+8)
	.word	.LC146-(.LPIC1586+8)
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	str	r3, [r4, #372]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6661
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L6661:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [r4, #100]
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6662
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6662:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6663
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L6663:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r2, r4, #384
	ldr	r1, [r4, #380]
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6690
.L6675:
	tst	r3, #2
	beq	.L6676
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L6676:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L6678
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L6678
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L6678:
	mov	r1, r6
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6690:
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	b	.L6675
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #84]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	fp, [r1, #2]	@ unaligned
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	beq	.L6734
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r3, #8582
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	orr	r0, ip, r2, asl #8
	cmp	r0, r3
	beq	.L6695
	ble	.L6735
	movw	r3, #41344
	cmp	r0, r3
	beq	.L6700
	ble	.L6736
	movw	r3, #41347
	cmp	r0, r3
	beq	.L6703
	movw	r3, #41349
	cmp	r0, r3
	bne	.L6694
	cmp	r7, #3
	movhi	r3, #0
	movls	r3, #1
	cmp	fp, #0
	orrne	r3, r3, #1
	cmp	r3, #0
	bne	.L6710
	ldrb	r1, [r5, #196]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L6737
.L6731:
	mov	r5, r3
	b	.L6707
.L6735:
	movw	r3, #8453
	cmp	r0, r3
	beq	.L6697
	movw	r3, #8580
	cmp	r0, r3
	beq	.L6698
	cmp	r0, #8448
	beq	.L6738
.L6694:
	ldr	r1, .L6744
	mov	r3, ip
	str	r7, [sp, #8]
	ldr	r0, .L6744+4
	str	r9, [sp, #4]
	mov	r5, fp
	str	fp, [sp]
.LPIC1606:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC1607:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
.L6707:
	ldr	r1, .L6744+8
	mov	r3, r2
	str	r7, [sp, #12]
	ldr	r0, .L6744+12
	str	r9, [sp, #8]
	mvn	r2, #94
	str	r5, [sp, #4]
	str	ip, [sp]
.LPIC1610:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC1611:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #94
.L6727:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6698:
	cmp	r7, #0
	bne	.L6710
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	cmp	r3, r9
	beq	.L6739
.L6710:
	mov	r5, fp
	b	.L6707
.L6703:
	cmp	r7, #1
	movhi	r3, #0
	movls	r3, #1
	cmp	fp, #0
	orrne	r3, r3, #1
	cmp	r3, #0
	bne	.L6710
	ldrb	r1, [r5, #196]	@ zero_extendqisi2
	cmp	r1, r9
	bne	.L6731
	ldr	r2, .L6744+16
	cmp	r7, #2
	mov	r9, #2
	ldr	r1, [r5, #200]
	movle	r10, #0
	movgt	r10, #1
	ldr	r0, [r6]
.LPIC1603:
	add	r2, pc, r2
	add	r2, r2, #496
	subs	r2, r1, r2
	strb	r3, [r0, #1]
	movne	r2, #1
	strb	r2, [r0]
	b	.L6705
.L6736:
	movw	r3, #41217
	cmp	r0, r3
	bne	.L6694
	cmp	fp, #0
	bne	.L6740
	add	r3, r5, #204
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r10, [r5, #216]!
	cmp	r10, r5
	beq	.L6741
	mov	r0, r10
	sub	r5, r10, #8
	bl	list_del(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	ldmdb	r10, {r1, r2}
	ldr	r0, [r6]
	cmp	r7, r2
	movcc	r9, r7
	movcs	r9, r2
	mov	r2, r9
	bl	memcpy(PLT)
	cmp	r5, #0
	beq	.L6709
	ldr	r0, [r10, #-8]
	cmp	r9, r7
	movge	r10, #0
	movlt	r10, #1
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
.L6705:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r9, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, r10, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L6724
	mov	r0, r5
	b	.L6727
.L6700:
	clz	r10, r7
	mov	r10, r10, lsr #5
	cmp	fp, #0
	orrne	r10, r10, #1
	cmp	r10, #0
	bne	.L6710
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	cmp	r3, r9
	movne	r5, r10
	bne	.L6707
	ldr	r1, .L6744+20
	cmp	r7, #28
	movls	r9, r7
	movhi	r9, #28
	ldr	r0, [r6]
	mov	r2, r9
	movhi	r10, #1
	movls	r10, #0
.LPIC1599:
	add	r1, pc, r1
	add	r1, r1, #28
	bl	memcpy(PLT)
	b	.L6705
.L6738:
	ldr	r3, .L6744+24
	str	r5, [r6, #32]
	mov	r9, r7
	mov	r10, #0
.LPIC1594:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6705
.L6697:
	ldr	r3, .L6744+28
	adds	r10, r7, #0
	str	r5, [r6, #32]
	movne	r10, #1
	mov	r9, #0
.LPIC1593:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6705
.L6695:
	sub	r3, r7, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L6742
	cmp	fp, #0
	bne	.L6710
	ldrb	r3, [r5, #196]	@ zero_extendqisi2
	cmp	r3, r9
	bne	.L6710
	ldr	r3, .L6744+32
	str	r5, [r6, #32]
	mov	r9, r7
	mov	r10, fp
.LPIC1602:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6705
.L6739:
	cmp	fp, #0
	beq	.L6722
	cmp	fp, #1
	bne	.L6743
	ldr	r3, .L6744+36
	mov	r9, r7
	mov	r10, r7
.LPIC1605:
	add	r3, pc, r3
	add	r3, r3, #540
	str	r3, [r5, #200]
	b	.L6705
.L6737:
	ldr	r2, [r5, #224]
	cmp	r7, #4
	mov	r9, #4
	ldr	r3, [r6]
	movle	r10, #0
	movgt	r10, #1
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L6705
.L6709:
	cmp	r9, r7
	movge	r10, #0
	movlt	r10, #1
	b	.L6705
.L6743:
	mov	r9, r7
	mov	r10, r7
	b	.L6705
.L6722:
	ldr	r3, .L6744+40
	mov	r9, fp
	mov	r10, fp
.LPIC1604:
	add	r3, pc, r3
	add	r3, r3, #496
	str	r3, [r5, #200]
	b	.L6705
.L6724:
	ldr	r1, .L6744+44
	str	r5, [sp]
	ldr	r0, .L6744+48
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
.LPIC1608:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC1609:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	b	.L6727
.L6734:
	ldr	r1, .L6744+52
	ldr	r0, .L6744+56
.LPIC1591:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC1592:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #106
	b	.L6727
.L6742:
	ldr	r1, .L6744+60
	mov	r2, r7
	mov	r5, fp
	ldr	r0, .L6744+64
.LPIC1600:
	add	r1, pc, r1
.LPIC1601:
	add	r0, pc, r0
.L6730:
	add	r1, r1, #3232
	add	r1, r1, #8
	bl	printk(PLT)
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	b	.L6707
.L6741:
	ldr	r1, .L6744+68
	mov	r5, fp
	ldr	r0, .L6744+72
.LPIC1597:
	add	r1, pc, r1
	add	r1, r1, #3232
.LPIC1598:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	b	.L6707
.L6740:
	ldr	r1, .L6744+76
	mov	r2, r7
	mov	r5, fp
	ldr	r0, .L6744+80
.LPIC1595:
	add	r1, pc, r1
.LPIC1596:
	add	r0, pc, r0
	b	.L6730
.L6745:
	.align	2
.L6744:
	.word	.LANCHOR3-(.LPIC1606+8)
	.word	.LC398-(.LPIC1607+8)
	.word	.LANCHOR3-(.LPIC1610+8)
	.word	.LC400-(.LPIC1611+8)
	.word	.LANCHOR2-(.LPIC1603+8)
	.word	.LANCHOR2-(.LPIC1599+8)
	.word	fmbim_cmd_complete-(.LPIC1594+8)
	.word	fmbim_reset_cmd_complete-(.LPIC1593+8)
	.word	mbim_ep0out_complete-(.LPIC1602+8)
	.word	.LANCHOR2-(.LPIC1605+8)
	.word	.LANCHOR2-(.LPIC1604+8)
	.word	.LANCHOR3-(.LPIC1608+8)
	.word	.LC399-(.LPIC1609+8)
	.word	.LANCHOR3-(.LPIC1591+8)
	.word	.LC394-(.LPIC1592+8)
	.word	.LANCHOR3-(.LPIC1600+8)
	.word	.LC397-(.LPIC1601+8)
	.word	.LANCHOR3-(.LPIC1597+8)
	.word	.LC396-(.LPIC1598+8)
	.word	.LANCHOR3-(.LPIC1595+8)
	.word	.LC395-(.LPIC1596+8)
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0, #272]
	.pad #28
	sub	sp, sp, #28
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L6747
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L6788
.L6749:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6747:
	ldr	r0, [r4, #4]
	mov	r2, #0
	strb	r3, [r4, #16]
	str	r2, [r4, #12]
	cmp	r0, r2
	beq	.L6750
	ldr	r3, [r0, #120]
	cmp	r3, r2
	beq	.L6751
	blx	r3
.L6751:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, r1
	rsb	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6757
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6752
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, r1
	rsb	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6752
	mov	r0, r4
	add	r7, r4, #108
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L6789
	mov	r3, sp
	movw	r9, #1500
	bic	r6, r3, #8128
	mov	r3, #0
	bic	r6, r6, #63
	add	r8, sp, #4
	ldr	r1, [r6, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
.LPIC1614:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
.L6756:
	mov	r2, #1
	mov	r1, r8
	mov	r0, r7
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6787
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, r1
	rsb	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6787
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #12]
	mov	r0, r9
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6760
	bl	schedule_timeout(PLT)
	subs	r9, r0, #0
	bne	.L6756
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
.L6787:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
.L6760:
	mov	r1, r8
	mov	r0, r7
	bl	finish_wait(PLT)
.L6759:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6750
.L6757:
	ldr	r3, [r4, #104]
	str	r3, [r4, #100]
.L6758:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	mov	r1, r2
	str	ip, [r5, #272]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up(PLT)
	b	.L6749
.L6788:
	ldr	r0, .L6789+4
	movw	r1, #905
.LPIC1612:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6749
.L6752:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6759
.L6750:
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L6758
.L6790:
	.align	2
.L6789:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1614+8))
	.word	.LC401-(.LPIC1612+8)
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r3, #103
	beq	.L6793
	ble	.L6819
	cmn	r3, #75
	beq	.L6796
	cmp	r3, #0
	bne	.L6792
	ldr	r1, [r1, #48]
	mov	r0, r6
	bl	skb_put(PLT)
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L6798
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L6799
	mov	r1, r6
	ldr	r3, [r4, #84]
	add	r2, r4, #52
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L6820
	cmn	r0, #75
	beq	.L6821
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L6803
	b	.L6804
.L6796:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L6792:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L6803:
	add	r6, r4, #16
.L6818:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #28]!
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L6822
	add	r2, r4, #104
	mov	r0, #4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC1617:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #-1488]
	b	queue_work_on(PLT)
.L6819:
	cmn	r3, #108
	beq	.L6795
	cmn	r3, #104
	bne	.L6792
.L6795:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6804:
	add	r6, r4, #16
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #28]!
	bl	__list_add(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6793:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L6795
	ldr	r3, .L6822+4
	add	r2, r4, #88
	mov	r0, #4
.LPIC1618:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	cmp	r0, #0
	bne	.L6795
	mov	r2, r0
	ldr	r0, .L6822+8
	ldr	r1, [r4, #8]
.LPIC1616:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6795
.L6798:
	mov	r1, r6
	add	r0, r4, #52
	add	r6, r4, #16
	bl	skb_queue_tail(PLT)
	b	.L6818
.L6820:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L6801:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6804
.L6821:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	b	.L6801
.L6799:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	b	.L6801
.L6823:
	.align	2
.L6822:
	.word	.LANCHOR4-(.LPIC1617+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1618+8))
	.word	.LC402-(.LPIC1616+8)
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r4, r1, #88
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L6825:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #116]
	mov	r7, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L6826
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6833
	ldr	r7, [r6, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6825
.L6826:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6833:
	add	r7, r6, #164
	add	r9, r6, #172
.L6829:
	ldr	r5, [r7, #4]!
	ldr	r8, [r6, #96]
	cmp	r5, #0
	beq	.L6828
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6828:
	cmp	r7, r9
	bne	.L6829
	add	r9, r6, #124
.L6830:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #124]
	mov	r7, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L6831
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6835
	ldr	r7, [r6, #100]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6830
.L6831:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6835:
	mov	r3, #0
	str	r3, [r6, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r3, [r4, #364]
	ldr	r1, [r4, #84]
	cmp	r3, #0
	beq	.L6866
	cmn	r2, #104
	beq	.L6846
	cmp	r2, #0
	beq	.L6847
	cmn	r2, #108
	beq	.L6846
	ldr	r0, [r1]
	ldr	r1, .L6868
	add	r0, r0, #32
.LPIC1619:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L6847:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #104]
	add	r2, r4, #104
	cmp	r3, r2
	beq	.L6867
	ldr	r1, [r4, #108]
	add	r0, r5, #36
	bl	__list_add(PLT)
.L6851:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L6846:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	add	r2, r4, #104
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
	b	.L6851
.L6866:
	mov	r6, r0
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L6867:
	mov	r2, r3
	add	r0, r5, #36
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L6851
	bl	__tasklet_schedule(PLT)
	b	.L6851
.L6869:
	.align	2
.L6868:
	.word	.LC403-(.LPIC1619+8)
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L6871
	ldrb	r7, [r4, #147]	@ zero_extendqisi2
	str	r5, [r4, #156]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L6870
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6877
.L6874:
	mov	r1, r5
.L6876:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6870:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6871:
	str	r5, [r4, #156]
	b	.L6876
.L6877:
	ldr	r0, .L6878
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
.LPIC1620:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.115(PLT)
	b	.L6874
.L6879:
	.align	2
.L6878:
	.word	.LC393-(.LPIC1620+8)
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #4
	add	r6, r0, #8
	mov	r0, r7
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	beq	.L6882
	ldr	r2, [r4, #12]
	cmp	r2, #0
	bne	.L6901
.L6882:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r1, r8
	mov	r0, r7
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L6901:
	ldr	r3, [r4, #28]
	add	r10, r4, #28
	ldr	r9, [r2, #84]
	cmp	r10, r3
	beq	.L6883
.L6884:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #28]
	cmp	r10, r3
	bne	.L6884
	ldr	r2, [r4, #12]
.L6883:
	ldr	r3, [r4, #52]
	add	r9, r4, #52
	ldr	r10, [r2, #88]
	cmp	r3, r9
	beq	.L6889
.L6888:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #52]
	cmp	r3, r9
	bne	.L6888
.L6889:
	ldr	r3, [r4, #36]
	add	r5, r4, #36
	cmp	r3, r5
	cmpne	r3, #0
	movne	r9, #0
	beq	.L6887
.L6891:
	ldr	r2, [r4, #44]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldmia	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #36]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6891
.L6887:
	ldr	r3, [r4, #60]
	add	r5, r4, #60
	cmp	r3, r5
	cmpne	r3, #0
	movne	r9, #0
	beq	.L6882
.L6892:
	ldr	r2, [r4, #68]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldmia	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #60]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6892
	b	.L6882
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6929
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1621:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r3, #2404]
	cmp	r7, #0
	ble	.L6926
	ldr	r3, .L6929+4
	mov	r4, #0
	mov	r6, r0
	ldr	fp, .L6929+8
	mov	r5, r4
	mov	r9, r4
	mov	r8, r4
.LPIC1623:
	add	r3, pc, r3
.LPIC1622:
	add	fp, pc, fp
	str	r3, [sp, #4]
	ldr	r3, .L6929+12
.LPIC1624:
	add	r3, pc, r3
	str	r3, [sp, #8]
.L6908:
	mov	r2, #20
	ldr	r1, [r6]
	mov	r0, fp
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6928
.L6904:
	add	r5, r5, #1
	add	r4, r4, #84
	cmp	r5, r7
	blt	.L6908
.L6926:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6928:
	ldr	r3, [sp, #4]
	add	r3, r3, #2400
	add	r3, r3, #8
	ldr	r7, [r4, r3]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #12]
	ldr	r0, [sp]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ldrned	r8, [r3, #84]
.L6905:
	ldr	r0, [sp]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #12]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6906
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6906
	mov	r0, r8
	blx	r3
.L6906:
	cmp	r9, #0
	beq	.L6907
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6907
	mov	r0, r9
	blx	r3
.L6907:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers(PLT)
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit(PLT)
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldr	r3, [sp, #8]
	ldr	r7, [r3, #2404]
	b	.L6904
.L6930:
	.align	2
.L6929:
	.word	.LANCHOR1-(.LPIC1621+8)
	.word	.LANCHOR1-(.LPIC1623+8)
	.word	.LC211-(.LPIC1622+8)
	.word	.LANCHOR1-(.LPIC1624+8)
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	bl	dev_get_drvdata(PLT)
	mov	r8, r0
	mov	r0, #0
	bl	set_string_mode(PLT)
	ldr	r1, .L6952
	add	r5, r8, #60
	ldr	r0, .L6952+4
.LPIC1625:
	add	r1, pc, r1
	add	r1, r1, #3248
.LPIC1626:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L6932
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	movne	r7, #0
	beq	.L6938
.L6937:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6936
	blx	r3
.L6936:
	str	r7, [r4, #80]
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L6937
.L6938:
	ldr	r3, .L6952+8
	mov	r2, #0
	str	r2, [r8, #12]
	str	r2, [r8, #56]
.LPIC1627:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L6939
.L6934:
	mov	r0, r8
	blx	r3
.L6940:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L6939
	ldr	r0, [r8]
	ldr	r1, .L6952+12
	add	r0, r0, #32
.LPIC1629:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r3, #0
	str	r3, [r8, #56]
.L6939:
	mov	r1, r6
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6932:
	ldr	r3, .L6952+16
.LPIC1628:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L6934
	b	.L6940
.L6953:
	.align	2
.L6952:
	.word	.LANCHOR3-(.LPIC1625+8)
	.word	.LC404-(.LPIC1626+8)
	.word	.LANCHOR1-(.LPIC1627+8)
	.word	.LC405-(.LPIC1629+8)
	.word	.LANCHOR1-(.LPIC1628+8)
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L6993
.L6955:
	sub	r6, r4, #16
	sub	r8, r4, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #-192]
	mov	r7, r0
	cmp	r8, r5
	movne	r9, #0
	beq	.L6960
.L6959:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-296]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-192]
	cmp	r8, r5
	bne	.L6959
.L6960:
	ldr	r5, [r4, #-168]
	sub	r8, r4, #168
	cmp	r8, r5
	movne	r9, #0
	beq	.L6958
.L6963:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-292]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r8, r5
	bne	.L6963
.L6958:
	ldr	r3, [r4, #-184]
	sub	r5, r4, #184
	cmp	r5, r3
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6962
.L6966:
	ldr	r2, [r4, #-176]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-184]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6966
.L6962:
	ldr	r3, [r4, #-160]
	sub	r5, r4, #160
	cmp	r5, r3
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6965
.L6967:
	ldr	r2, [r4, #-152]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-160]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6967
.L6965:
	ldr	r5, [r4, #-280]
	sub	r9, r4, #280
	cmp	r9, r5
	beq	.L6982
.L6968:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-296]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-280]
	cmp	r9, r5
	bne	.L6968
.L6982:
	ldr	r5, [r4, #-272]
	sub	r9, r4, #272
	cmp	r9, r5
	beq	.L6973
.L6972:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-272]
	cmp	r9, r5
	bne	.L6972
.L6973:
	ldr	r5, [r4, #-264]
	sub	r9, r4, #264
	cmp	r9, r5
	beq	.L6971
.L6976:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-264]
	cmp	r9, r5
	bne	.L6976
.L6971:
	ldr	r5, [r4, #-68]
	sub	r9, r4, #68
	cmp	r9, r5
	beq	.L6975
.L6979:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	ldr	r3, [r4, #-48]
	ldr	r5, [r4, #-68]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-48]
	bne	.L6979
.L6975:
	ldr	r5, [r4, #-44]
	sub	r9, r4, #44
	cmp	r9, r5
	beq	.L6978
.L6980:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	ldr	r3, [r4, #-36]
	ldr	r5, [r4, #-44]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-36]
	bne	.L6980
.L6978:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L6993:
	sub	r0, r0, #232
	bl	tasklet_kill(PLT)
	sub	r0, r4, #252
	bl	tasklet_kill(PLT)
	b	.L6955
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L7008
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7009
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7010
.L6999:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L7008:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7011
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L6999
	ldr	r1, .L7012
	mov	r2, r0
	ldr	r0, .L7012+4
.LPIC1632:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC1633:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L6999
.L7010:
	ldr	r1, .L7012+8
	mov	r2, r0
	ldr	r0, .L7012+12
.LPIC1636:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC1637:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6999
.L7009:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7012+16
	ldr	r0, .L7012+20
.LPIC1634:
	add	r1, pc, r1
.LPIC1635:
	add	r0, pc, r0
	add	r1, r1, #1392
.L7007:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L7011:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7012+24
	ldr	r0, .L7012+28
.LPIC1630:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC1631:
	add	r0, pc, r0
	add	r1, r1, #8
	b	.L7007
.L7013:
	.align	2
.L7012:
	.word	.LANCHOR3-(.LPIC1632+8)
	.word	.LC214-(.LPIC1633+8)
	.word	.LANCHOR3-(.LPIC1636+8)
	.word	.LC214-(.LPIC1637+8)
	.word	.LANCHOR3-(.LPIC1634+8)
	.word	.LC24-(.LPIC1635+8)
	.word	.LANCHOR3-(.LPIC1630+8)
	.word	.LC24-(.LPIC1631+8)
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp]
	cmp	r4, #0
	beq	.L7042
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L7043
	add	r10, r4, #100
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L7044
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L7050
	ldr	r0, .L7050+4
.LPIC1642:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1643:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #15
.L7039:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7044:
	ldr	r5, .L7050+8
	ldr	r6, .L7050+12
.LPIC1644:
	add	r5, pc, r5
	add	r5, r5, #3264
.LPIC1645:
	add	r6, pc, r6
	add	r5, r5, #12
.L7018:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7023
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L7024
.L7023:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7045
	add	r6, r4, #204
	add	r5, r4, #208
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #208]
	mov	r1, r0
	cmp	r5, r7
	bne	.L7026
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L7031
.L7027:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #208]
	mov	r1, r0
	cmp	r7, r5
	bne	.L7026
.L7031:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L7027
	ldr	r2, .L7050+16
	mov	r3, #0
	add	r7, sp, #12
	ldr	r1, [r9, #12]
	add	r8, r4, #108
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC1653:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L7030
.L7046:
	bl	schedule(PLT)
.L7030:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r8
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L7028
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7046
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait(PLT)
	ldr	r1, .L7050+20
	ldr	r0, .L7050+24
.LPIC1651:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1652:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L7039
.L7028:
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait(PLT)
	b	.L7027
.L7026:
	ldr	r3, [r7, #-4]
	sub	r5, r7, #8
	cmp	fp, r3
	bcc	.L7047
	mov	r0, r7
	str	r1, [sp, #4]
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r7, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp]
	bic	r3, r3, #63
	ldr	r1, [r7, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L7048
.L7033:
	cmp	r2, #0
	ldreq	r4, [r7, #-4]
	bne	.L7049
.L7035:
	cmp	r5, #0
	moveq	r0, r4
	beq	.L7039
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L7039
.L7048:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L7033
.L7045:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #4
	b	.L7039
.L7024:
	mov	r1, r5
	mov	r0, r6
	bl	printk(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7018
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7018
	ldr	r2, .L7050+28
	mov	r1, sp
	str	r3, [sp, #12]
	bic	r8, r1, #8128
	add	r3, sp, #24
	bic	r8, r8, #63
	add	r7, sp, #12
	ldr	r1, [r8, #12]
	add	r9, r4, #108
	str	r3, [sp, #24]
.LPIC1654:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
.L7022:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r9
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L7020
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L7020
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L7021
	bl	schedule(PLT)
	b	.L7022
.L7047:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L7050+32
	mov	r3, fp
	ldr	r0, .L7050+36
	ldr	r2, [r7, #-4]
.LPIC1647:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1648:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L7039
.L7049:
	ldr	r1, .L7050+40
	mvn	r4, #11
	ldr	r0, .L7050+44
.LPIC1649:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1650:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7035
.L7043:
	ldr	r1, .L7050+48
	mov	r3, #4096
	ldr	r0, .L7050+52
.LPIC1640:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1641:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L7039
.L7042:
	ldr	r1, .L7050+56
	ldr	r0, .L7050+60
.LPIC1638:
	add	r1, pc, r1
	add	r1, r1, #3264
.LPIC1639:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L7039
.L7021:
	mov	r1, r7
	mov	r0, r9
	bl	finish_wait(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L7039
.L7020:
	mov	r1, r7
	mov	r0, r9
	bl	finish_wait(PLT)
	b	.L7018
.L7051:
	.align	2
.L7050:
	.word	.LANCHOR3-(.LPIC1642+8)
	.word	.LC407-(.LPIC1643+8)
	.word	.LANCHOR3-(.LPIC1644+8)
	.word	.LC408-(.LPIC1645+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1653+8))
	.word	.LANCHOR3-(.LPIC1651+8)
	.word	.LC411-(.LPIC1652+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1654+8))
	.word	.LANCHOR3-(.LPIC1647+8)
	.word	.LC409-(.LPIC1648+8)
	.word	.LANCHOR3-(.LPIC1649+8)
	.word	.LC410-(.LPIC1650+8)
	.word	.LANCHOR3-(.LPIC1640+8)
	.word	.LC406-(.LPIC1641+8)
	.word	.LANCHOR3-(.LPIC1638+8)
	.word	.LC182-(.LPIC1639+8)
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #364]
	ldr	r9, [r4, #84]
	cmp	r8, #0
	beq	.L7071
	cmn	r3, #104
	beq	.L7055
	cmp	r3, #0
	beq	.L7056
	cmn	r3, #108
	beq	.L7055
	ldr	r2, [r0, #4]
	add	r6, r4, #368
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r0, [r9]
	ldr	r1, .L7074
	stmia	sp, {ip, lr}
	add	r0, r0, #32
.LPIC1655:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
.L7057:
	ldr	r3, .L7074+4
	ldr	r2, [r4, #312]
.LPIC1656:
	add	r3, pc, r3
	ldr	r3, [r3, #584]
	cmp	r2, r3
	bcs	.L7072
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L7061
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r2, #32
	ldr	r0, [r6, #160]
	mov	r1, r5
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r5]
	str	r6, [r5, #32]
	str	ip, [r5, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L7073
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7056:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stmia	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on(PLT)
	b	.L7057
.L7055:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
.L7070:
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L7071:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	str	r8, [r5]
	mov	r0, r8
	b	.L7070
.L7072:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add(PLT)
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L7073:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L7059:
	ldr	r0, [r9]
	mov	r2, r7
	ldr	r1, .L7074+8
	add	r0, r0, #32
.LPIC1657:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__list_add(PLT)
.L7061:
	mvn	r7, #11
	b	.L7059
.L7075:
	.align	2
.L7074:
	.word	.LC412-(.LPIC1655+8)
	.word	.LANCHOR2-(.LPIC1656+8)
	.word	.LC413-(.LPIC1657+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r3, [ip, #8]
	ldr	r0, [ip, #52]
	cmp	r3, #0
	beq	.L7101
	ldr	r3, [ip, #56]
	mov	r2, #0
	add	r3, r3, #1
	str	r3, [ip, #56]
	str	r2, [r0, #32]
	str	r2, [r0, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L7083
	cmp	r3, #255
	bne	.L7099
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L7099
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L7090
	orrs	r3, r6, r5
	bne	.L7090
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L7081
	ldr	r2, [r5, #168]
	mov	r1, #2
	ldr	r3, [r5, #56]
	str	r1, [r5, #112]
	cmp	r2, #0
	str	r3, [r5, #116]
	beq	.L7081
	mov	r0, #10
	bl	send_sig_info(PLT)
.L7081:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r4, #88]
	movw	r3, #32767
	movw	r2, #1255
	ldr	r4, [r1, #4]
	cmp	r4, #0
	movne	r4, r3
	moveq	r4, r2
	b	.L7094
.L7099:
	mvn	r4, #94
.L7094:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7083:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L7099
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L7090
	cmp	r6, #1
	cmpeq	r5, #0
	bne	.L7090
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L7094
	ldr	r2, [r5, #48]
	mov	r3, r0
	ldr	r1, .L7102
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
.LPIC1661:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_warn(PLT)
	b	.L7094
.L7090:
	mvn	r4, #32
	b	.L7094
.L7101:
	ldr	r2, .L7102+4
	movw	r3, #706
	mvn	r4, #94
	ldr	r0, [ip]
	ldr	r1, .L7102+8
.LPIC1658:
	add	r2, pc, r2
	add	r2, r2, #3280
	add	r0, r0, #32
.LPIC1659:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L7102+12
	movw	r1, #550
.LPIC1660:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L7094
.L7103:
	.align	2
.L7102:
	.word	.LC198-(.LPIC1661+8)
	.word	.LANCHOR3-(.LPIC1658+8)
	.word	.LC196-(.LPIC1659+8)
	.word	.LC197-(.LPIC1660+8)
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #173]
	strb	r3, [r0, #172]
	cmp	r5, #0
	beq	.L7104
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r2, #32
	mov	r1, r5
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L7104:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #172]
	strb	ip, [r0, #173]
	cmp	r5, ip
	beq	.L7109
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r2, #32
	mov	r1, r5
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L7109:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #153]
	strb	r3, [r0, #152]
	cmp	r5, #0
	beq	.L7114
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r2, #32
	mov	r1, r5
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L7114:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #152]
	strb	ip, [r0, #153]
	cmp	r5, ip
	beq	.L7119
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r2, #32
	mov	r1, r5
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L7119:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-152]
	cmp	r3, #6
	beq	.L7155
	cmp	r3, #7
	beq	.L7156
.L7127:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7157
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L7158
	ldr	r3, .L7166
	str	r7, [r0, #32]
	mov	r9, #0
	ldr	r2, [r4, #-172]
	mov	r1, #32
.LPIC1670:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-164]
	ldr	r2, [r4, #-172]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, r1
	str	r3, [r2, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-168]
	cmp	r3, r9
	beq	.L7159
	str	r7, [r3, #32]
	ldr	r3, .L7166+4
	mov	r0, r6
	ldr	r2, [r4, #-168]
.LPIC1673:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-160]
	ldr	r2, [r4, #-168]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7160
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7161
.L7133:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
.L7132:
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L7162
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L7163
.L7136:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L7135:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L7164
.L7124:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7164:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L7124
	ldr	r0, .L7166+8
	mov	r1, r7
.LPIC1682:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L7124
	ldr	r1, .L7166+12
	mov	r2, r0
	ldr	r0, .L7166+16
.LPIC1683:
	add	r1, pc, r1
.LPIC1684:
	add	r0, pc, r0
	b	.L7153
.L7157:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r1, r8
	mov	r0, r6
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L7155:
	bl	usb_bam_reset_complete(PLT)
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L7165
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	beq	.L7127
	ldr	r1, .L7166+20
	mov	r2, r0
	ldr	r0, .L7166+24
.LPIC1664:
	add	r1, pc, r1
.LPIC1665:
	add	r0, pc, r0
.L7153:
	add	r1, r1, #3296
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L7158:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L7166+28
	ldr	r0, .L7166+32
.LPIC1668:
	add	r1, pc, r1
.LPIC1669:
	add	r0, pc, r0
.L7154:
	add	r1, r1, #3296
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L7162:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7166+36
	ldr	r0, .L7166+40
.LPIC1678:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC1679:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L7135
.L7161:
	ldr	r1, .L7166+44
	mov	r2, r0
	ldr	r0, .L7166+48
.LPIC1676:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC1677:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L7133
.L7160:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L7166+52
	ldr	r0, .L7166+56
.LPIC1674:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC1675:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L7132
.L7156:
	ldr	r1, .L7166+60
	ldr	r0, .L7166+64
.LPIC1666:
	add	r1, pc, r1
.LPIC1667:
	add	r0, pc, r0
	b	.L7154
.L7163:
	ldr	r1, .L7166+68
	mov	r2, r0
	ldr	r0, .L7166+72
.LPIC1680:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC1681:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L7136
.L7159:
	ldr	r1, .L7166+76
	ldr	r0, .L7166+80
.LPIC1671:
	add	r1, pc, r1
.LPIC1672:
	add	r0, pc, r0
	b	.L7154
.L7165:
	ldr	r1, .L7166+84
	mov	r2, r0
	ldr	r0, .L7166+88
.LPIC1662:
	add	r1, pc, r1
.LPIC1663:
	add	r0, pc, r0
	b	.L7153
.L7167:
	.align	2
.L7166:
	.word	gbam_endless_rx_complete-(.LPIC1670+8)
	.word	gbam_endless_tx_complete-(.LPIC1673+8)
	.word	gbam_peer_reset_cb-(.LPIC1682+8)
	.word	.LANCHOR3-(.LPIC1683+8)
	.word	.LC418-(.LPIC1684+8)
	.word	.LANCHOR3-(.LPIC1664+8)
	.word	.LC415-(.LPIC1665+8)
	.word	.LANCHOR3-(.LPIC1668+8)
	.word	.LC417-(.LPIC1669+8)
	.word	.LANCHOR3-(.LPIC1678+8)
	.word	.LC24-(.LPIC1679+8)
	.word	.LANCHOR3-(.LPIC1676+8)
	.word	.LC214-(.LPIC1677+8)
	.word	.LANCHOR3-(.LPIC1674+8)
	.word	.LC24-(.LPIC1675+8)
	.word	.LANCHOR3-(.LPIC1666+8)
	.word	.LC416-(.LPIC1667+8)
	.word	.LANCHOR3-(.LPIC1680+8)
	.word	.LC214-(.LPIC1681+8)
	.word	.LANCHOR3-(.LPIC1671+8)
	.word	.LC417-(.LPIC1672+8)
	.word	.LANCHOR3-(.LPIC1662+8)
	.word	.LC414-(.LPIC1663+8)
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L7170
	cmn	r3, #104
	beq	.L7170
.L7169:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #148]
	ldr	r0, [r3, #24]
	beq	.L7168
	ldrb	r2, [r5, #152]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L7174
	bcc	.L7168
	cmp	r2, #2
	bne	.L7173
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7187
.L7176:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #152]
.L7173:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	ip, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #148]
.L7168:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7170:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L7169
.L7174:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #152]
	b	.L7173
.L7187:
	ldr	lr, [r2, #16]
	mov	r0, #28672
	mov	r2, #0
	movt	r0, 148
	movt	r2, 6500
	cmp	lr, #3
	movne	r2, r0
	b	.L7176
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L7204
	mov	r7, r0
.LPIC1685:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r6, r3, #520
	bne	.L7192
	b	.L7189
.L7203:
	ldr	r3, [r6, #520]
	cmp	r3, r2
	sub	r6, r3, #520
	beq	.L7189
.L7192:
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	bne	.L7203
.L7189:
	mov	r0, r4
	bl	composite_disconnect(PLT)
	ldr	r3, .L7204+4
.LPIC1688:
	add	r3, pc, r3
	ldr	r5, [r3, #2500]
	add	r9, r5, #88
	mov	r8, r5
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r8, #1768]!
	str	r0, [sp, #4]
	cmp	r10, r8
	ldr	r4, [r10]
	addne	fp, r5, #1776
	addne	fp, fp, #8
	bne	.L7196
	b	.L7197
.L7199:
	mov	r4, r2
.L7196:
	mov	r0, r10
	bl	list_del(PLT)
	mov	r0, r10
	ldr	r2, [r5, #1784]
	mov	r1, fp
	bl	__list_add(PLT)
	cmp	r8, r4
	ldr	r2, [r4]
	mov	r10, r4
	bne	.L7199
.L7197:
	mov	r8, r5
	ldr	r10, [r8, #1776]!
	cmp	r10, r8
	ldr	r4, [r10]
	addne	fp, r5, #1776
	addne	fp, fp, #8
	bne	.L7198
	b	.L7195
.L7200:
	mov	r4, r2
.L7198:
	mov	r0, r10
	bl	list_del(PLT)
	mov	r0, r10
	ldr	r2, [r5, #1784]
	mov	r1, fp
	bl	__list_add(PLT)
	cmp	r8, r4
	ldr	r2, [r4]
	mov	r10, r4
	bne	.L7200
.L7195:
	ldr	r4, .L7204+8
	mov	r0, r9
	add	r7, r7, #60
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r5, #1744
	mov	r0, #4
.LPIC1690:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	add	r2, r2, #8
	ldr	r1, [r4]
	bl	queue_work_on(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r5, r0
	ldr	r1, [r4]
	add	r2, r6, #180
	mov	r0, #4
	strb	r3, [r6, #48]
	bl	queue_work_on(PLT)
	mov	r1, r5
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7205:
	.align	2
.L7204:
	.word	.LANCHOR1-(.LPIC1685+8)
	.word	.LANCHOR1-(.LPIC1688+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1690+8))
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #72]
	cmp	r1, #3
	addls	pc, pc, r1, asl #2
	b	.L7206
.L7209:
	b	.L7208
	b	.L7210
	b	.L7211
	b	.L7212
	.p2align 1
.L7212:
	ldr	r0, [r5]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L7206
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L7206
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L7211:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L7285
	ldr	r7, [r3, #88]
	mov	r1, r0
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7230
	mov	r0, r7
	blx	r3
.L7230:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7231
	mov	r0, r6
	blx	r3
.L7231:
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L7232
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r5, r9
	beq	.L7237
.L7236:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r5, r9
	bne	.L7236
.L7237:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r9, r5
	beq	.L7235
.L7240:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L7240
.L7235:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r9, r5
	beq	.L7239
.L7241:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L7241
.L7239:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L7232:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L7242
	ldr	r1, [r4, #164]
	blx	r3
.L7242:
	mov	r0, r8
.L7284:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock(PLT)
.L7210:
	add	r3, r4, #4
	add	r1, r5, #8
	mov	r0, #0
	mov	r5, r3
	str	r3, [sp, #4]
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L7215
	ldr	r3, [r4, #72]
	add	r7, r4, #12
	mov	r6, #8
	ldr	r1, [r4, #160]
	mov	r9, #2048
	ldr	fp, .L7294
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb(PLT)
	ldr	r3, [r4, #68]
.LPIC1698:
	add	fp, pc, fp
	ldr	r8, [r3, #92]
	b	.L7220
.L7288:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7286
.L7219:
	str	fp, [r5, #28]
	add	r0, r5, #36
	ldr	r2, [r4, #12]
	mov	r1, r7
	bl	__list_add(PLT)
	subs	r6, r6, #1
	beq	.L7221
.L7220:
	ldr	r3, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, .L7294+4
	mov	r2, #2048
	mov	r1, #32
	beq	.L7287
.LPIC1709:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r9, [r5, #4]
	ldr	r3, [r3, #44]
	subs	r0, r3, #0
	bne	.L7288
	mov	r3, #16
	str	r3, [r5]
	b	.L7219
.L7208:
	ldr	r0, [r5]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	bne	.L7289
.L7213:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	bne	.L7290
.L7206:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7286:
	ldr	r1, .L7294+8
	ldr	r0, .L7294+12
.LPIC1696:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1697:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L7217:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L7221
	ldr	r1, .L7294+16
	ldr	r0, .L7294+20
.LPIC1706:
	add	r1, pc, r1
	add	r1, r1, #3328
.LPIC1707:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L7215:
	ldr	r0, [sp, #4]
	b	.L7284
.L7290:
	ldr	r3, .L7294+24
	add	r2, r4, #28
	mov	r0, #4
.LPIC1692:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L7289:
	ldr	r3, .L7294+28
	add	r2, r4, #52
	mov	r0, #4
.LPIC1691:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	bl	queue_work_on(PLT)
	b	.L7213
.L7221:
	ldr	r3, [r4, #68]
	add	r9, r4, #44
	mov	r5, #8
	ldr	fp, .L7294+32
	mov	r8, #2048
	ldr	r6, [r3, #88]
.LPIC1703:
	add	fp, pc, fp
	b	.L7226
.L7293:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r10]
	beq	.L7291
.L7225:
	str	fp, [r10, #28]
	add	r0, r10, #36
	ldr	r2, [r4, #44]
	mov	r1, r9
	bl	__list_add(PLT)
	subs	r5, r5, #1
	beq	.L7227
.L7226:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r10, r0, #0
	ldr	ip, .L7294+36
	mov	r2, #2048
	mov	r1, #32
	beq	.L7292
.LPIC1708:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	r8, [r10, #4]
	ldr	ip, [ip, #44]
	subs	r0, ip, #0
	bne	.L7293
	mov	r2, #16
	str	r2, [r10]
	b	.L7225
.L7227:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L7285:
	mov	r1, r0
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7287:
	ldr	r1, .L7294+40
	ldr	r0, .L7294+44
.LPIC1693:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1694:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7217
.L7291:
	ldr	r1, .L7294+48
	ldr	r0, .L7294+52
.LPIC1701:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1702:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r2, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L7223:
	ldr	r3, [r4, #44]
	cmp	r9, r3
	bne	.L7227
	ldr	r3, [r4, #68]
	ldr	r5, [r3, #92]
	b	.L7247
.L7228:
	bl	list_del(PLT)
	ldr	r0, [r6, #-36]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r8
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L7247:
	ldr	r6, [r4, #12]
	cmp	r7, r6
	mov	r0, r6
	sub	r8, r6, #36
	bne	.L7228
	ldr	r1, .L7294+56
	ldr	r0, .L7294+60
.LPIC1704:
	add	r1, pc, r1
	add	r1, r1, #3328
.LPIC1705:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7215
.L7292:
	ldr	r1, .L7294+64
	ldr	r0, .L7294+68
.LPIC1699:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1700:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7223
.L7295:
	.align	2
.L7294:
	.word	gsmd_read_complete-(.LPIC1698+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1709+8))
	.word	.LANCHOR3-(.LPIC1696+8)
	.word	.LC420-(.LPIC1697+8)
	.word	.LANCHOR3-(.LPIC1706+8)
	.word	.LC422-(.LPIC1707+8)
	.word	.LANCHOR4-(.LPIC1692+8)
	.word	.LANCHOR4-(.LPIC1691+8)
	.word	gsmd_write_complete-(.LPIC1703+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1708+8))
	.word	.LANCHOR3-(.LPIC1693+8)
	.word	.LC419-(.LPIC1694+8)
	.word	.LANCHOR3-(.LPIC1701+8)
	.word	.LC420-(.LPIC1702+8)
	.word	.LANCHOR3-(.LPIC1704+8)
	.word	.LC421-(.LPIC1705+8)
	.word	.LANCHOR3-(.LPIC1699+8)
	.word	.LC419-(.LPIC1700+8)
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7317
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r10, [sp, #24]
.LPIC1723:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L7311
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L7316
.L7297:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #404]
	mov	r10, r0
	ldr	r2, [r4, #364]
	ldr	r3, [r4, #400]
	ldr	ip, [r4, #312]
	str	r1, [sp, #60]
	ldr	r1, [r4, #420]
	sub	r2, r2, #1
	ldr	lr, [r4, #412]
	ldr	fp, [r4, #424]
	ldr	r0, [r4, #336]
	str	r1, [sp, #64]
	ldr	r1, [r4, #408]
	str	r1, [sp, #68]
	ldr	r1, [r4, #416]
	str	r1, [sp, #72]
	ldr	r1, [r4, #352]
	str	r1, [sp, #76]
	ldr	r1, [r4, #208]
	str	r1, [sp, #80]
	ldr	r1, [r4, #232]
	str	r1, [sp, #84]
	ldr	r1, [r4, #348]
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L7299
.L7301:
	b	.L7313
	b	.L7302
	b	.L7303
	b	.L7304
	b	.L7305
	b	.L7306
	b	.L7307
	b	.L7308
	b	.L7309
	b	.L7310
	.p2align 1
.L7311:
	mov	r5, #16
	b	.L7297
.L7313:
	ldr	r2, .L7317+4
.LPIC1710:
	add	r2, pc, r2
.L7300:
	ldr	r4, [r4, #356]
	str	ip, [sp, #28]
	ldr	ip, [sp, #84]
	str	r2, [sp, #48]
	ldr	r2, .L7317+8
	str	lr, [sp, #32]
	str	r1, [sp, #44]
	mov	r1, #1024
	str	r0, [sp, #40]
	mov	r0, r5
	str	ip, [sp, #24]
	ldr	ip, [sp, #80]
.LPIC1722:
	add	r2, pc, r2
	str	fp, [sp, #36]
	str	r4, [sp, #52]
	str	ip, [sp, #20]
	ldr	ip, [sp, #76]
	str	ip, [sp, #16]
	ldr	ip, [sp, #72]
	str	ip, [sp, #12]
	ldr	ip, [sp, #68]
	str	ip, [sp, #8]
	ldr	ip, [sp, #64]
	str	ip, [sp, #4]
	ldr	ip, [sp, #60]
	str	ip, [sp]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r3, r5
	mov	r0, r7
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L7298:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7302:
	ldr	r2, .L7317+12
.LPIC1711:
	add	r2, pc, r2
	b	.L7300
.L7303:
	ldr	r2, .L7317+16
.LPIC1712:
	add	r2, pc, r2
	b	.L7300
.L7304:
	ldr	r2, .L7317+20
.LPIC1713:
	add	r2, pc, r2
	b	.L7300
.L7305:
	ldr	r2, .L7317+24
.LPIC1714:
	add	r2, pc, r2
	b	.L7300
.L7306:
	ldr	r2, .L7317+28
.LPIC1715:
	add	r2, pc, r2
	b	.L7300
.L7307:
	ldr	r2, .L7317+32
.LPIC1716:
	add	r2, pc, r2
	b	.L7300
.L7308:
	ldr	r2, .L7317+36
.LPIC1717:
	add	r2, pc, r2
	b	.L7300
.L7309:
	ldr	r2, .L7317+40
.LPIC1718:
	add	r2, pc, r2
	b	.L7300
.L7310:
	ldr	r2, .L7317+44
.LPIC1719:
	add	r2, pc, r2
	b	.L7300
.L7299:
	ldr	r2, .L7317+48
.LPIC1720:
	add	r2, pc, r2
	b	.L7300
.L7316:
	mvn	r0, #11
	b	.L7298
.L7318:
	.align	2
.L7317:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1723+8))
	.word	.LC0-(.LPIC1710+8)
	.word	.LC423-(.LPIC1722+8)
	.word	.LC1-(.LPIC1711+8)
	.word	.LC2-(.LPIC1712+8)
	.word	.LC3-(.LPIC1713+8)
	.word	.LC4-(.LPIC1714+8)
	.word	.LC5-(.LPIC1715+8)
	.word	.LC6-(.LPIC1716+8)
	.word	.LC7-(.LPIC1717+8)
	.word	.LC8-(.LPIC1718+8)
	.word	.LC9-(.LPIC1719+8)
	.word	.LC10-(.LPIC1720+8)
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #168]
	mov	r2, #0
	mov	r1, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #172]
	strb	r2, [r4, #173]
	cmp	r5, r2
	ldr	r1, [r3, #24]
	beq	.L7321
	ldr	r3, [r5]
	mov	ip, #8
	mov	lr, #42
	mov	r0, #16
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	lr, [r3, #1]
	strb	ip, [r3, #6]
	ldr	ip, [r5]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L7322
	ldr	r0, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	r0, #3
	movne	r2, r1
.L7322:
	mov	lr, #1
	mvn	r1, #94
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	mov	r2, #0
	mov	r0, r6
	strb	lr, [r4, #172]
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L7321:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #168]
	mov	r1, #1
	mov	r2, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #173]
	strb	r2, [r4, #172]
	cmp	r5, #0
	ldr	r1, [r3, #24]
	beq	.L7329
	ldr	r3, [r5]
	mov	r2, #0
	mov	ip, #8
	mov	lr, #42
	mov	r0, #16
	strb	lr, [r3, #1]
	strb	ip, [r3, #6]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	ldr	ip, [r5]
	str	r0, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L7330
	ldr	r0, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	r0, #3
	movne	r2, r1
.L7330:
	mov	lr, #1
	mvn	r1, #94
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	mov	r2, #0
	mov	r0, r6
	strb	lr, [r4, #172]
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L7329:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r7
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #368]
	str	r9, [r4, #372]
	str	r9, [r4, #328]
	str	r9, [r4, #364]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r6, [r5]
	beq	.L7340
.L7339:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r6
	ldr	r6, [r6]
	bne	.L7339
.L7340:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r6, [r5]
	movne	r10, #0
	beq	.L7338
.L7343:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L7343
.L7338:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L7342
.L7346:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L7346
.L7342:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L7345
.L7349:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L7349
.L7345:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L7348
.L7351:
	ldr	r2, [r4, #152]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #144]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L7351
.L7348:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L7353
.L7352:
	ldr	r2, [r4, #180]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #172]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L7352
.L7353:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf(PLT)
	add	r2, r4, #204
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_work_on(PLT)
	str	r5, [r4, #332]
	add	r2, r4, #336
	ldr	r1, [r4, #200]
	ldr	r6, [sp, #8]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L7393
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L7367
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L7367
	ldr	r9, .L7396
	mov	r5, #16
	add	r8, r4, #160
.LPIC1724:
	add	r9, pc, r9
.L7368:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L7382
	cmn	r3, #4096
	bhi	.L7392
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L7368
	ldr	r10, .L7396+4
	mov	r5, #200
	add	r9, r4, #132
.LPIC1725:
	add	r10, pc, r10
.L7374:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r9
	add	r0, r3, #36
	beq	.L7382
	cmn	r3, #4096
	bhi	.L7392
	str	r10, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L7374
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r4, #192]
	ldr	r9, [r4, #84]
	cmp	r5, #0
	beq	.L7394
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r5, r8
	beq	.L7376
.L7379:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #168]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb(PLT)
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L7383
	ldr	r3, [r7, #172]
	ldr	r0, [r7, #160]
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r7, #172]
	str	r0, [r7, #160]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r6
	bne	.L7395
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r8, r5
	bne	.L7379
.L7376:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r5, #0
	b	.L7390
.L7367:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7390:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7393:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7390
.L7382:
	mvn	r5, #11
.L7372:
.L7371:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	rmnet_sdio_free_buf(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	str	r3, [r4, #88]
	b	.L7390
.L7395:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.L7377:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	ldr	r1, .L7396+8
	mov	r2, fp
	ldr	r0, [r9]
.LPIC1728:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L7376
.L7383:
	mvn	fp, #11
	b	.L7377
.L7394:
	ldr	r1, .L7396+12
	ldr	r0, .L7396+16
.LPIC1726:
	add	r1, pc, r1
	add	r1, r1, #3344
.LPIC1727:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L7390
.L7392:
	mov	r5, r3
	b	.L7372
.L7397:
	.align	2
.L7396:
	.word	rmnet_sdio_complete_epout-(.LPIC1724+8)
	.word	rmnet_sdio_complete_epin-(.LPIC1725+8)
	.word	.LC127-(.LPIC1728+8)
	.word	.LANCHOR3-(.LPIC1726+8)
	.word	.LC424-(.LPIC1727+8)
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	ldr	r5, [r0, #-168]
	tst	r3, #2
	beq	.L7399
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L7414
.L7399:
	ldr	r2, .L7417
.LPIC1733:
	add	r2, pc, r2
	ldr	r3, [r2, #3544]
	add	r3, r3, #1
	cmp	r3, #90
	str	r3, [r2, #3544]
	ble	.L7402
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L7415
.L7403:
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L7416
.L7398:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7402:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L7416:
	ldr	r0, [r5]
	ldr	r1, .L7417+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	r0, r0, #32
	add	sp, sp, #16
.LPIC1736:
	add	r1, pc, r1
	b	dev_err(PLT)
.L7415:
	ldr	r0, [r5]
	ldr	r1, .L7417+8
	add	r0, r0, #32
.LPIC1735:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7403
.L7414:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io(PLT)
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L7400
	add	r2, r4, #84
	ldr	r1, [r4, #-52]
	mov	r0, #4
	bl	queue_work_on(PLT)
.L7400:
	ldr	r4, .L7417+12
	ldr	r1, .L7417+16
	ldr	r0, .L7417+20
.LPIC1729:
	add	r4, pc, r4
.LPIC1730:
	add	r1, pc, r1
	ldr	r2, [r4, #3544]
.LPIC1731:
	add	r0, pc, r0
	add	r1, r1, #3376
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #3544]
	b	.L7398
.L7418:
	.align	2
.L7417:
	.word	.LANCHOR4-(.LPIC1733+8)
	.word	.LC427-(.LPIC1736+8)
	.word	.LC426-(.LPIC1735+8)
	.word	.LANCHOR4-(.LPIC1729+8)
	.word	.LANCHOR3-(.LPIC1730+8)
	.word	.LC425-(.LPIC1731+8)
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L7427
.LPIC1738:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7422
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L7426
.L7420:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L7421:
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L7422:
	mov	r3, #16
	b	.L7420
.L7426:
	mvn	r0, #11
	b	.L7421
.L7428:
	.align	2
.L7427:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1738+8))
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L7439
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1739:
	add	r3, pc, r3
	ldr	r4, [r3, #1212]
	add	r5, r4, #52
	str	r2, [r4, #12]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L7437
	ldr	r3, .L7439+4
.LPIC1743:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7433
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L7438
.L7431:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L7432:
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L7433:
	mov	r3, #16
	b	.L7431
.L7438:
	mvn	r0, #11
	b	.L7432
.L7437:
	ldr	r1, .L7439+8
	mov	r2, r4
	ldr	r0, .L7439+12
.LPIC1740:
	add	r1, pc, r1
	add	r1, r1, #3392
.LPIC1741:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L7440:
	.align	2
.L7439:
	.word	.LANCHOR1-(.LPIC1739+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1743+8))
	.word	.LANCHOR3-(.LPIC1740+8)
	.word	.LC428-(.LPIC1741+8)
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L7554
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1744:
	add	r1, pc, r1
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r1, #2492]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L7545
	ldr	r1, .L7554+4
	mov	r0, r2
	add	r2, sp, #8
.LPIC1747:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r3, [sp, #8]
	ldr	r5, [r4, #364]
	cmp	r3, #0
	movne	r6, #2
	moveq	r6, #3
	cmp	r5, r6
	beq	.L7546
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #364]
	beq	.L7446
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7447
	blx	r3
.L7447:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7448
	blx	r3
.L7448:
	cmp	r5, #2
	beq	.L7449
	cmp	r5, #3
	bne	.L7446
	add	r0, r4, #152
	add	r8, r4, #368
	bl	tasklet_kill(PLT)
	add	r0, r4, #132
	add	fp, r4, #104
	bl	tasklet_kill(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #104]
	str	r0, [sp, #4]
	cmp	fp, r5
	beq	.L7465
.L7464:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #88]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #104]
	cmp	fp, r5
	bne	.L7464
.L7465:
	ldr	r5, [r4, #112]
	add	fp, r4, #112
	cmp	fp, r5
	beq	.L7463
.L7468:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #112]
	cmp	fp, r5
	bne	.L7468
.L7463:
	ldr	r5, [r4, #120]
	add	fp, r4, #120
	cmp	fp, r5
	beq	.L7467
.L7469:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #120]
	cmp	fp, r5
	bne	.L7469
.L7467:
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7446:
	cmp	r6, #2
	str	r6, [r4, #364]
	beq	.L7503
	cmp	r6, #3
	bne	.L7547
	ldr	r3, [r4, #172]
	ldr	r5, [r4, #84]
	tst	r3, #1
	beq	.L7548
.L7481:
	ldr	fp, .L7554+8
	mov	r9, #8
	mov	r10, #2048
.LPIC1756:
	add	fp, pc, fp
.L7490:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r8, .L7554+12
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L7474
.LPIC1762:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	str	r10, [r5, #4]
	mov	r2, #2048
	mov	r1, #208
	ldr	r3, [r8, #44]
	subs	r0, r3, #0
	beq	.L7487
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7549
.L7488:
	cmn	r5, #4096
	add	r6, r4, #112
	add	r0, r5, #36
	mov	r2, r6
	bhi	.L7474
	str	r10, [r5, #4]
	str	r4, [r5, #32]
	str	fp, [r5, #28]
	ldr	r1, [r4, #116]
	bl	__list_add(PLT)
	subs	r9, r9, #1
	bne	.L7490
	ldr	r10, .L7554+16
	mov	r9, #8
.LPIC1757:
	add	r10, pc, r10
.L7494:
	ldr	fp, [r4, #92]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	beq	.L7474
	mov	r3, #2048
	mov	r1, #208
	mov	r2, r3
	str	r3, [r5, #4]
	ldr	ip, [r8, #44]
	subs	r0, ip, #0
	beq	.L7491
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7550
.L7492:
	cmn	r5, #4096
	add	r2, r4, #104
	add	r0, r5, #36
	bhi	.L7474
	str	r4, [r5, #32]
	str	r10, [r5, #28]
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
	subs	r9, r9, #1
	bne	.L7494
	add	r8, r4, #368
	ldr	r10, [r4, #84]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	b	.L7495
.L7497:
	bl	list_del(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, fp
	mov	r2, #32
	ldr	ip, [r0, #8]
	ldr	r3, [ip, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	fp, #0
	mov	r9, r0
	bne	.L7551
.L7495:
	ldr	r5, [r4, #112]
	cmp	r6, r5
	mov	r0, r5
	sub	fp, r5, #36
	bne	.L7497
.L7496:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7474
.L7547:
	ldr	r1, .L7554+20
	ldr	r0, .L7554+24
.LPIC1759:
	add	r1, pc, r1
.LPIC1760:
	add	r0, pc, r0
	add	r1, r1, #3424
	bl	printk(PLT)
.L7474:
	mov	r0, r7
.L7540:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7503:
	ldr	r8, .L7554+28
	mov	r5, #16
	add	r6, r4, #216
.LPIC1750:
	add	r8, pc, r8
.L7471:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r6
	add	r0, r3, #36
	beq	.L7474
	cmn	r3, #4096
	bhi	.L7474
	str	r8, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add(PLT)
	subs	r5, r5, #1
	bne	.L7471
	ldr	r9, .L7554+32
	mov	r5, #100
	add	r8, r4, #192
.LPIC1751:
	add	r9, pc, r9
.L7476:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L7474
	cmn	r3, #4096
	bhi	.L7474
	str	r9, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add(PLT)
	subs	r5, r5, #1
	bne	.L7476
	ldr	r3, [r4, #372]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L7474
	add	r9, r4, #368
	mov	r0, r9
.L7543:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #216]
	mov	fp, r0
	cmp	r5, r6
	beq	.L7477
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb(PLT)
	mov	r1, r8
	subs	r8, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L7504
	ldr	r3, [r8, #172]
	ldr	r0, [r8, #160]
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r8, #172]
	str	r0, [r8, #160]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r8, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r9
	beq	.L7543
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
.L7478:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	fp, r0
	mov	r2, r10
	ldr	r1, .L7554+36
	ldr	r0, [r3]
.LPIC1761:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r6
	ldr	r1, [r4, #220]
	mov	r0, r5
	bl	__list_add(PLT)
.L7477:
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7474
.L7449:
	add	r9, r4, #368
	add	fp, r4, #192
	mov	r0, r9
	mov	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #192]
	str	r0, [sp, #4]
	str	r8, [r4, #312]
	cmp	r5, fp
	beq	.L7455
.L7454:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r8, [r5, #-36]
	ldr	r5, [r4, #88]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #192]
	cmp	r5, fp
	bne	.L7454
.L7455:
	ldr	r5, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r5
	movne	fp, #0
	beq	.L7453
.L7458:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	fp, [r5, #-36]
	ldr	r5, [r4, #92]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #216]
	cmp	r8, r5
	bne	.L7458
.L7453:
	ldr	r3, [r4, #200]
	add	r5, r4, #200
	cmp	r5, r3
	cmpne	r3, #0
	movne	r8, #0
	beq	.L7457
.L7459:
	ldr	r2, [r4, #208]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #200]
	cmp	r5, r3
	cmpne	r3, #0
	bne	.L7459
.L7457:
	ldr	r3, [r4, #224]
	add	r5, r4, #224
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L7499
.L7460:
	ldr	r2, [r4, #232]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #224]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L7460
.L7499:
	ldr	r1, [sp, #4]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7446
.L7487:
	mov	r3, #16
	str	r3, [r5]
	b	.L7488
.L7548:
	ldr	r0, .L7554+40
	mov	r2, r4
	add	r1, r4, #128
	ldr	r3, .L7554+44
.LPIC1753:
	add	r0, pc, r0
.LPIC1752:
	add	r3, pc, r3
	ldr	r0, [r0, #3548]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L7552
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L7481
	ldr	r2, .L7554+48
	mov	r1, sp
	str	r3, [sp, #12]
	bic	r1, r1, #8128
	add	r3, sp, #24
	bic	r1, r1, #63
	add	r5, r4, #180
	ldr	r1, [r1, #12]
	add	r6, sp, #12
	str	r3, [sp, #24]
.LPIC1763:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L7485
.L7553:
	bl	schedule(PLT)
.L7485:
	mov	r2, #2
	mov	r1, r6
	mov	r0, r5
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L7553
	mov	r1, r6
	mov	r0, r5
	bl	finish_wait(PLT)
	b	.L7481
.L7549:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7474
.L7491:
	mov	r3, #16
	str	r3, [r5]
	b	.L7492
.L7552:
	ldr	r0, [r5]
	ldr	r1, .L7554+52
	add	r0, r0, #32
.LPIC1754:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7474
.L7551:
	ldr	r0, [r10]
	mov	r2, fp
	ldr	r1, .L7554+56
	add	r0, r0, #32
.LPIC1758:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r6
	ldr	r1, [r4, #116]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L7496
.L7550:
	ldr	r2, [fp, #8]
	mov	r1, r5
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7474
.L7504:
	mvn	r10, #11
	b	.L7478
.L7546:
	mov	r0, r5
	bl	xport_to_str(PLT)
	ldr	r1, .L7554+60
	mov	r3, r0
	ldr	r0, .L7554+64
	mov	r2, r3
.LPIC1748:
	add	r1, pc, r1
.LPIC1749:
	add	r0, pc, r0
	add	r1, r1, #3424
	bl	printk(PLT)
	mov	r0, #0
	b	.L7540
.L7545:
	ldr	r1, .L7554+68
	ldr	r0, .L7554+72
.LPIC1745:
	add	r1, pc, r1
.LPIC1746:
	add	r0, pc, r0
	add	r1, r1, #3424
	bl	printk(PLT)
	mvn	r0, #21
	b	.L7540
.L7555:
	.align	2
.L7554:
	.word	.LANCHOR1-(.LPIC1744+8)
	.word	.LC270-(.LPIC1747+8)
	.word	rmnet_mux_smd_complete_epout-(.LPIC1756+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1762+8))
	.word	rmnet_mux_smd_complete_epin-(.LPIC1757+8)
	.word	.LANCHOR3-(.LPIC1759+8)
	.word	.LC432-(.LPIC1760+8)
	.word	rmnet_mux_sdio_complete_epout-(.LPIC1750+8)
	.word	rmnet_mux_sdio_complete_epin-(.LPIC1751+8)
	.word	.LC413-(.LPIC1761+8)
	.word	.LANCHOR4-(.LPIC1753+8)
	.word	rmnet_mux_smd_notify-(.LPIC1752+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1763+8))
	.word	.LC431-(.LPIC1754+8)
	.word	.LC127-(.LPIC1758+8)
	.word	.LANCHOR3-(.LPIC1748+8)
	.word	.LC430-(.LPIC1749+8)
	.word	.LANCHOR3-(.LPIC1745+8)
	.word	.LC429-(.LPIC1746+8)
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r7, #132]
	cmp	r9, #0
	beq	.L7557
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	fp, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	r6, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
.L7559:
	str	r8, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7558
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	fp, [r3]
.L7558:
	subs	r6, r6, #1
	str	fp, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L7559
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r6, [r7, #132]
.L7557:
	ldr	r6, [r7, #92]
	cmp	r6, #2
	bne	.L7556
	mov	r3, #0
	add	r4, r7, #116
	mov	r0, r4
	str	r3, [r7, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #96]
	mov	r5, r0
	add	r0, r7, #100
	ldrh	ip, [r7, #104]
	cmp	r3, #1
	streq	r6, [r7, #96]
	cmp	ip, #0
	beq	.L7566
	add	r1, r0, ip
	mov	r3, r0
	mov	ip, r0
.L7564:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	lr, r2, #5
	cmp	lr, #1
	bhi	.L7565
	strb	r2, [ip]
	add	ip, ip, #1
.L7565:
	cmp	r3, r1
	bne	.L7564
	rsb	ip, r0, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L7562:
	add	ip, r7, ip
	strh	r3, [r7, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [ip, #100]
	mov	r0, r4
	bl	__wake_up_locked(PLT)
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7556:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7566:
	mov	r3, #1
	b	.L7562
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L7596
.LPIC1764:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L7580
	b	.L7577
.L7595:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L7577
.L7580:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L7595
.L7577:
	add	r7, r0, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r3, #0
	bne	.L7581
	ldr	r3, .L7596+4
	mov	r1, #1
	add	r2, r4, #180
	mov	r0, #4
	strb	r1, [r4, #50]
.LPIC1769:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
.L7581:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L7585
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L7585
.L7587:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L7586
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L7586:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L7587
.L7585:
	ldr	r3, .L7596+8
.LPIC1768:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7584
	mov	r0, r6
	blx	r3
.L7584:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7576
	mov	r0, r5
	ldrd	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L7576:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7597:
	.align	2
.L7596:
	.word	.LANCHOR1-(.LPIC1764+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1769+8))
	.word	.LANCHOR1-(.LPIC1768+8)
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
#APP
@ 751 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r6, [r0, #48]
	ldr	r1, [r0, #32]
	ldrd	r2, [r0, #40]
	cmp	r6, #0
	str	r1, [sp, #8]
	sbcs	r1, r7, #0
	strd	r2, [sp, #40]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L7598
	ldr	r4, [r0, #56]
	cmp	r4, #0
	bne	.L7644
.L7601:
	ldr	r3, [r0, #-92]
	mov	r5, r0
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	and	r1, r7, r3, asr #31
	and	r0, r6, r3
	orrs	r3, r0, r1
	moveq	r8, #1
	movne	r8, #0
	cmp	r6, #1
	sbcs	r3, r7, #0
	movlt	r3, r8
	orrge	r3, r8, #1
	cmp	r3, #0
	beq	.L7602
	mov	r3, sp
	sub	r2, r5, #68
	bic	r3, r3, #8128
	sub	r9, r5, #96
	bic	r3, r3, #63
	str	r2, [sp, #4]
	str	r3, [sp, #12]
	b	.L7617
.L7646:
	ldr	r2, [r5, #-80]
	mov	r3, #0
.L7606:
	cmp	r2, #3
	beq	.L7610
.L7648:
	cmp	fp, #0
	beq	.L7618
	ldr	r3, .L7649
	mov	r1, #0
.LPIC1771:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r2, r6
	sbcs	r3, r1, r7
	movge	r2, r6
	cmp	r4, #0
	beq	.L7614
	ldr	r3, [fp]
	mov	r1, #2
	str	r6, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r5, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r5, #64]
	str	r1, [r3, #8]
.L7614:
	ldr	r1, [fp]
	add	r3, sp, #40
	rsb	r2, r4, r2
	ldr	r0, [sp, #8]
	add	r1, r1, r4
	bl	vfs_read(PLT)
	subs	r3, r0, #0
	blt	.L7620
	add	r4, r3, r4
	mov	r2, #208
	mov	r1, fp
	str	r4, [fp, #4]
	ldr	r0, [r5, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7645
	subs	r6, r6, r4
	and	r3, r8, #1
	sbc	r7, r7, r4, asr #31
	cmp	r6, #1
	mov	r4, #0
	sbcs	r2, r7, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L7602
.L7617:
	orrs	r3, r6, r7
	mov	r0, r9
	moveq	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r10, r0
	ldr	ip, [r5, #-68]
	cmp	ip, r3
	beq	.L7604
	mov	r0, ip
	sub	fp, ip, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	bne	.L7646
.L7605:
	ldr	r2, [r5, #-80]
	cmp	r2, #2
	movne	r3, #0
	movne	fp, r3
	bne	.L7606
	ldr	r2, .L7649+4
	mov	r3, #0
	add	r0, sp, #52
	ldr	fp, [sp, #12]
	sub	ip, r5, #40
	strd	r6, [sp, #24]
	str	r0, [sp, #20]
	ldr	r6, [sp, #4]
	mov	r7, ip
	str	ip, [sp, #16]
	mov	r10, r0
.LPIC1772:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r8, [sp, #32]
	ldr	r1, [fp, #12]
	str	r3, [sp, #52]
	add	r3, sp, #64
	str	r4, [sp, #36]
	str	r3, [sp, #64]
	str	r3, [sp, #68]
	str	r1, [sp, #56]
	str	r2, [sp, #60]
	b	.L7609
.L7647:
	bl	schedule(PLT)
.L7609:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r7
	bl	prepare_to_wait(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #-68]
	mov	r8, r0
	cmp	r2, r6
	mov	r0, r2
	sub	r4, r2, #36
	beq	.L7607
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	bne	.L7623
.L7619:
	ldr	r3, [r5, #-80]
	cmp	r3, #2
	bne	.L7624
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7647
	ldrd	r6, [sp, #24]
	mov	r3, #65024
	mov	fp, #0
	ldr	r8, [sp, #32]
	movt	r3, 65535
	ldr	r4, [sp, #36]
.L7608:
	ldrd	r0, [sp, #16]
	str	r3, [sp, #24]
	bl	finish_wait(PLT)
	ldr	r2, [r5, #-80]
	ldr	r3, [sp, #24]
	cmp	r2, #3
	bne	.L7648
.L7610:
	cmp	fp, #0
	mvn	r3, #124
	beq	.L7618
.L7620:
	mov	r0, r9
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	ldr	r2, [sp, #4]
	add	r0, fp, #36
	ldr	r1, [r5, #-64]
	bl	__list_add(PLT)
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #8]
.L7618:
	str	r3, [r5, #68]
#APP
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L7598:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7644:
	adds	r6, r6, #12
	mov	r4, #12
	adc	r7, r7, #0
	b	.L7601
.L7604:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7605
.L7602:
	mov	r3, #0
	str	r3, [r5, #68]
#APP
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	b	.L7598
.L7645:
	ldr	r3, [r5, #-80]
	cmp	r3, #0
	mvneq	r3, #4
	beq	.L7620
	mov	r2, #4
	mvn	r3, #4
	str	r2, [r5, #-80]
	b	.L7620
.L7607:
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7619
.L7623:
	mov	fp, r4
	ldrd	r6, [sp, #24]
	mov	r3, #0
	ldr	r8, [sp, #32]
	ldr	r4, [sp, #36]
	b	.L7608
.L7624:
	mov	fp, #0
	ldrd	r6, [sp, #24]
	ldr	r8, [sp, #32]
	mov	r3, fp
	ldr	r4, [sp, #36]
	b	.L7608
.L7650:
	.align	2
.L7649:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1771+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1772+8))
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	str	r2, [sp, #8]
	add	r9, r6, #88
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #104]
	cmp	r3, #3
	beq	.L7693
	cmp	r3, #0
	beq	.L7694
	mov	r3, #2
	mov	r0, r9
	str	r3, [r6, #104]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r5
	moveq	r8, #1
	movne	r8, #0
	cmp	r5, #0
	moveq	r3, r8
	orrne	r3, r8, #1
	cmp	r3, #0
	beq	.L7674
	mov	r3, sp
	mov	fp, r6
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r3, [sp, #4]
.L7670:
	ldr	r3, [fp, #104]
	cmp	r5, #0
	moveq	r8, #0
	cmp	r3, #2
	bne	.L7675
	mov	r0, r9
	add	r10, fp, #116
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #116]
	mov	r4, r0
	cmp	r10, r3
	beq	.L7657
	mov	r0, r3
	sub	r6, r3, #36
	bl	list_del(PLT)
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L7672
.L7658:
	ldr	r2, .L7699
.LPIC1774:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r4, [r2]
	cmp	r4, r5
	movcs	r4, r5
	cmp	r4, #0
	beq	.L7666
	ldr	r3, [sp, #4]
	ldr	r0, [r6]
	ldr	r2, [r3, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r7, r4; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L7695
	mov	r3, r6
	mov	r6, fp
	mov	fp, r4
	mov	r4, r3
	mov	r1, fp
	bl	__memzero(PLT)
	mvn	r3, #13
	str	r3, [sp, #8]
.L7669:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r1, [r6, #120]
	add	r0, r4, #36
	mov	r2, r10
	bl	__list_add(PLT)
	mov	r1, r5
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7674:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #104]
	cmp	r3, #3
	beq	.L7682
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r6, #104]
.L7671:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r0, [sp, #8]
.L7691:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7695:
	mov	r2, r4
	mov	r1, r7
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7696
.L7666:
	str	r4, [r6, #4]
	mov	r2, #208
	mov	r1, r6
	ldr	r0, [fp, #92]
	ldr	lr, [r0, #8]
	ldr	r3, [lr, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7681
	subs	r5, r5, r4
	and	r3, r8, #1
	orrne	r3, r3, #1
	add	r7, r7, r4
	cmp	r3, #0
	bne	.L7670
	mov	r6, fp
	b	.L7674
.L7657:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7672:
	ldr	r3, [fp, #104]
	cmp	r3, #2
	beq	.L7697
	mov	r3, #0
	mov	r6, fp
	str	r3, [sp, #8]
	b	.L7674
.L7697:
	ldr	r2, .L7699+4
	mov	r3, #0
	add	r0, sp, #36
	ldr	r6, [sp, #4]
	add	ip, fp, #144
	str	r8, [sp, #20]
	str	r0, [sp, #16]
	mov	r4, ip
	mov	r8, r0
	str	ip, [sp, #12]
.LPIC1775:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r7, [sp, #24]
	ldr	r1, [r6, #12]
	str	r3, [sp, #36]
	add	r3, sp, #48
	str	r5, [sp, #28]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	str	r1, [sp, #40]
	str	r2, [sp, #44]
	b	.L7663
.L7698:
	bl	schedule(PLT)
.L7663:
	mov	r2, #1
	mov	r1, r8
	mov	r0, r4
	bl	prepare_to_wait(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #116]
	mov	r7, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r5, r3, #36
	beq	.L7660
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L7661
.L7673:
	ldr	r3, [fp, #104]
	cmp	r3, #2
	bne	.L7677
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7698
	mov	r3, #65024
	mov	r6, fp
	movt	r3, 65535
	str	r3, [sp, #8]
.L7662:
	ldrd	r0, [sp, #12]
	bl	finish_wait(PLT)
	b	.L7674
.L7682:
	mvn	r3, #124
	str	r3, [sp, #8]
	b	.L7671
.L7675:
	mvn	r3, #4
	mov	r6, fp
	str	r3, [sp, #8]
	b	.L7674
.L7681:
	mvn	r3, #4
	mov	r4, r6
	mov	r6, fp
	str	r3, [sp, #8]
	b	.L7669
.L7660:
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7673
.L7661:
	ldrd	r0, [sp, #12]
	mov	r6, r5
	ldr	r8, [sp, #20]
	ldr	r7, [sp, #24]
	ldr	r5, [sp, #28]
	bl	finish_wait(PLT)
	b	.L7658
.L7677:
	mov	r3, #0
	mov	r6, fp
	str	r3, [sp, #8]
	b	.L7662
.L7694:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #18
	b	.L7691
.L7693:
	mov	r3, #1
	mov	r0, r9
	str	r3, [r6, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L7691
.L7696:
	mvn	r3, #13
	mov	r4, r6
	mov	r6, fp
	str	r3, [sp, #8]
	b	.L7669
.L7700:
	.align	2
.L7699:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1774+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1775+8))
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L7717
	cmp	r3, #2
	bhi	.L7718
.L7703:
	ldr	r0, [r6, #16]
	bl	kfree(PLT)
	ldr	r3, [r6, #124]
	cmp	r3, #0
	beq	.L7704
	ldr	r2, [r3, #20]
	cmp	r6, r2
	moveq	r2, #0
	streq	r2, [r3, #20]
.L7704:
	add	r0, r6, #140
	add	r7, r6, #108
	bl	list_del(PLT)
	mov	r9, r6
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #100]!
	mov	r8, r0
	cmp	r3, r9
	ldr	r5, [r3]
	bne	.L7708
	b	.L7709
.L7711:
	mov	r5, r2
.L7708:
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #88]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L7711
.L7709:
	mov	r9, r6
	ldr	r3, [r9, #92]!
	cmp	r3, r9
	ldr	r5, [r3]
	bne	.L7710
	b	.L7707
.L7712:
	mov	r5, r2
.L7710:
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #84]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r2, [r5]
	mov	r3, r5
	bne	.L7712
.L7707:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7717:
	ldr	r0, [r1, #12]
	bl	kfree(PLT)
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L7703
.L7718:
	ldr	r0, [r6, #8]
	bl	kfree(PLT)
	b	.L7703
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	ldr	ip, [r10, #96]
	cmp	ip, #0
	beq	.L7756
	cmp	r2, #0
	mov	r4, r2
	mov	r7, r1
	beq	.L7758
	cmp	r2, #524
	bcs	.L7759
	add	r6, r10, #92
	add	r8, r10, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r10, #192]
	mov	r9, r0
	cmp	r8, r5
	beq	.L7724
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del(PLT)
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L7741
.L7743:
	ldr	r2, [r10, #148]
	cmp	r2, #0
	bne	.L7760
	mov	r3, sp
	ldr	r0, [r5]
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r7, r4; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L7761
	mov	r1, r4
	bl	__memzero(PLT)
.L7732:
	ldr	r2, [r10, #96]
	cmp	r2, #0
	bne	.L7734
	cmp	r5, #0
	ldr	r4, [r10, #104]
	beq	.L7756
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	mvn	r0, #18
	b	.L7751
.L7761:
	mov	r1, r7
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7732
	str	r4, [r5, #4]
	ldr	r0, [r10, #104]
	mov	r2, #208
	mov	r1, r5
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	blt	.L7762
.L7755:
	mov	r0, r4
.L7751:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7734:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	mov	r2, r8
	ldr	r1, [r10, #196]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #13
	b	.L7751
.L7758:
	ldr	r1, .L7765
	ldr	r0, .L7765+4
.LPIC1776:
	add	r1, pc, r1
.LPIC1777:
	add	r0, pc, r0
	add	r1, r1, #3440
	bl	printk(PLT)
.L7756:
	mvn	r0, #18
	b	.L7751
.L7724:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7741:
	ldr	r2, [r10, #148]
	cmp	r2, #0
	bne	.L7745
	ldr	r1, .L7765+8
	mov	r3, sp
	str	r2, [sp, #12]
	bic	r9, r3, #8128
	add	r3, r10, #172
	bic	r9, r9, #63
	add	r2, sp, #24
	ldr	r0, [r9, #12]
	str	r3, [sp]
	add	r3, sp, #12
.LPIC1783:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #24]
	str	r3, [sp, #4]
	str	r2, [sp, #28]
	strd	r0, [sp, #16]
	mov	r1, r3
	b	.L7729
.L7763:
	bl	schedule(PLT)
	ldr	r1, [sp, #4]
.L7729:
	mov	r2, #1
	ldr	r0, [sp]
	bl	prepare_to_wait(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r10, #192]
	mov	fp, r0
	cmp	r8, r2
	mov	r0, r2
	sub	r5, r2, #36
	beq	.L7726
	bl	list_del(PLT)
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L7727
.L7742:
	ldr	r2, [r10, #148]
	cmp	r2, #0
	bne	.L7746
	ldr	r2, [r9, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L7763
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L7751
.L7745:
	mov	r5, #0
	b	.L7743
.L7762:
	mov	r2, #1
	mov	r0, r6
	str	r2, [r10, #148]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	mov	r2, r8
	ldr	r1, [r10, #196]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r10, #96]
	mov	r9, r0
	cmp	r2, #0
	mvnne	r4, #4
	beq	.L7764
.L7737:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7755
.L7746:
	mov	r5, #0
.L7727:
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	b	.L7743
.L7726:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7742
.L7764:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7738:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r10, #192]
	mov	r5, r0
	cmp	r8, r4
	mov	r0, r4
	sub	r7, r4, #36
	beq	.L7739
	bl	list_del(PLT)
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L7754
	ldr	r5, [r10, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r2, [r2, #12]
	blx	r2
	b	.L7738
.L7739:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7754:
	mvn	r4, #18
	b	.L7737
.L7759:
	ldr	r1, .L7765+12
	mov	r3, r2
	movw	r2, #523
	ldr	r0, .L7765+16
.LPIC1778:
	add	r1, pc, r1
.LPIC1779:
	add	r0, pc, r0
	add	r1, r1, #3440
	bl	printk(PLT)
	mvn	r0, #11
	b	.L7751
.L7760:
	ldr	r1, .L7765+20
	ldr	r0, .L7765+24
.LPIC1781:
	add	r1, pc, r1
.LPIC1782:
	add	r0, pc, r0
	add	r1, r1, #3440
	bl	printk(PLT)
	mvn	r0, #4
	b	.L7751
.L7766:
	.align	2
.L7765:
	.word	.LANCHOR3-(.LPIC1776+8)
	.word	.LC171-(.LPIC1777+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1783+8))
	.word	.LANCHOR3-(.LPIC1778+8)
	.word	.LC433-(.LPIC1779+8)
	.word	.LANCHOR3-(.LPIC1781+8)
	.word	.LC434-(.LPIC1782+8)
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	sub	r10, r0, #280
	strd	r8, [sp, #16]
	sub	r9, r0, #276
	mov	r0, r10
	str	lr, [sp, #32]
	strd	r6, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	mov	r0, r9
	cmp	r3, #0
	beq	.L7798
	bl	_raw_spin_unlock(PLT)
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L7799
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7799:
	ldr	r2, .L7804
	sub	r3, r4, #284
	mov	r1, r3
	ldr	r0, [r4, #-260]
	str	r3, [sp, #4]
.LPIC1784:
	add	r2, pc, r2
	bl	msm_bam_dmux_open(PLT)
	subs	r5, r0, #0
	bne	.L7800
	sub	r1, r4, #264
	mov	r0, #1
	bl	_set_bit(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L7801
	ldr	r3, .L7804+4
	sub	r7, r4, #232
	ldr	r6, [r2, #88]
.LPIC1787:
	add	r3, pc, r3
	ldr	r8, [r3, #588]
	cmp	r8, #0
	ble	.L7772
	ldr	fp, .L7804+8
.LPIC1788:
	add	fp, pc, fp
	b	.L7775
.L7773:
	str	fp, [r3, #28]
	ldr	r2, [r4, #-232]
	bl	__list_add(PLT)
	cmp	r8, r5
	beq	.L7772
.L7775:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r5, r5, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	bne	.L7773
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	beq	.L7802
.L7772:
	ldr	r1, [sp]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L7793
	ldr	r3, .L7804+12
	sub	r10, r4, #256
	ldr	r6, [r2, #84]
.LPIC1789:
	add	r3, pc, r3
	ldr	r8, [r3, #592]
	cmp	r8, #0
	ble	.L7777
	ldr	fp, .L7804+16
	mov	r5, #0
.LPIC1790:
	add	fp, pc, fp
	b	.L7780
.L7778:
	str	fp, [r3, #28]
	ldr	r2, [r4, #-256]
	bl	__list_add(PLT)
	cmp	r8, r5
	beq	.L7777
.L7780:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r5, r5, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r10
	add	r0, r3, #36
	bne	.L7778
	ldr	r3, [r4, #-256]
	cmp	r10, r3
	beq	.L7803
.L7777:
	mov	r0, r9
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L7776:
	mov	r0, r1
	sub	r5, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7793:
	ldr	r1, [r4, #-232]
	cmp	r7, r1
	bne	.L7776
.L7786:
	ldr	r1, [sp]
	mov	r0, r9
	b	.L7795
.L7798:
	bl	_raw_spin_unlock(PLT)
	mov	r1, r5
.L7794:
	mov	r0, r10
.L7795:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7802:
	ldr	r1, .L7804+20
	ldr	r0, .L7804+24
.LPIC1791:
	add	r1, pc, r1
	add	r1, r1, #3472
.LPIC1792:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, [sp]
	b	.L7794
.L7803:
	ldr	r1, .L7804+28
	ldr	r0, .L7804+32
.LPIC1793:
	add	r1, pc, r1
	add	r1, r1, #3472
.LPIC1794:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	beq	.L7786
.L7781:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	bne	.L7781
	b	.L7786
.L7801:
	mov	r1, r0
	b	.L7794
.L7800:
	ldr	r1, .L7804+36
	mov	r3, r5
	ldr	r0, .L7804+40
	ldr	r2, [r4, #-260]
.LPIC1785:
	add	r1, pc, r1
.LPIC1786:
	add	r0, pc, r0
	add	r1, r1, #3456
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L7805:
	.align	2
.L7804:
	.word	gbam_notify-(.LPIC1784+8)
	.word	.LANCHOR2-(.LPIC1787+8)
	.word	gbam_epout_complete-(.LPIC1788+8)
	.word	.LANCHOR2-(.LPIC1789+8)
	.word	gbam_epin_complete-(.LPIC1790+8)
	.word	.LANCHOR3-(.LPIC1791+8)
	.word	.LC436-(.LPIC1792+8)
	.word	.LANCHOR3-(.LPIC1793+8)
	.word	.LC437-(.LPIC1794+8)
	.word	.LANCHOR3-(.LPIC1785+8)
	.word	.LC435-(.LPIC1786+8)
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #364]
	ldr	r3, [r4, #84]
	cmp	r7, #0
	beq	.L7831
	cmn	r2, #104
	beq	.L7809
	cmp	r2, #0
	beq	.L7809
	cmn	r2, #108
	beq	.L7809
	ldr	r0, [r3]
	ldr	r1, .L7834
	add	r0, r0, #32
.LPIC1795:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L7809:
	add	r7, r4, #368
	add	r9, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	mov	r2, r9
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #372]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #8]
	bne	.L7832
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7832:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #192]
	str	r0, [sp, #12]
	cmp	r9, r3
	beq	.L7814
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	bne	.L7815
	b	.L7814
.L7816:
	ldr	r3, [r4, #408]
	ldr	r2, [r4, #192]
	add	r3, r3, #1
	cmp	r9, r2
	str	r3, [r4, #408]
	beq	.L7814
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L7814
.L7815:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r8, #0
	beq	.L7816
	ldr	r0, [r4, #372]
	mov	r3, r8
	mov	r8, fp
	mov	fp, r3
	cmp	r0, #0
	bne	.L7833
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
.L7814:
	ldr	r1, [sp, #12]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7831:
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r7
	str	r7, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L7833:
	ldr	r3, [sp, #8]
	mov	r2, fp
	ldr	r1, .L7834+4
	ldr	r0, [r3]
.LPIC1796:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r9
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add(PLT)
	ldr	r2, [sp, #4]
	ldr	r3, [r4, #200]
	str	r2, [r5, #4]
	str	r3, [r5]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L7814
.L7835:
	.align	2
.L7834:
	.word	.LC403-(.LPIC1795+8)
	.word	.LC130-(.LPIC1796+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmn	r2, #1
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-28]
	str	r2, [sp, #4]
	str	r0, [sp]
	beq	.L7837
	ldrh	r0, [r9, #178]
	ldr	r6, [r3, #-4]
	cmp	r0, #0
	beq	.L7861
	uxtb	r1, r1
	mov	r2, r6
.L7840:
	mov	ip, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L7839
	cmp	r3, r1
	beq	.L7885
.L7839:
	subs	r0, r0, #1
	bne	.L7840
.L7861:
	mvn	r0, #32
	b	.L7870
.L7885:
	rsb	r6, r6, ip
	movs	r0, r6, asr #1
	bmi	.L7870
.L7837:
	ldr	r8, [r9, #132]
	cmp	r8, #0
	beq	.L7841
	ldr	r3, [r8, #8]
	mov	r6, #1
	mov	r7, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	r10, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
.L7843:
	str	r6, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7842
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	r7, [r3]
.L7842:
	subs	r10, r10, #1
	str	r7, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L7843
	ldr	r0, [r8, #8]
	mov	r1, fp
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r10, [r9, #132]
.L7841:
	ldr	r6, [r9, #92]
	cmp	r6, #2
	bne	.L7862
	ldr	r3, [sp, #4]
	cmn	r3, #1
	beq	.L7886
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r9, #132]
	ldr	r10, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r5, [r10, #208]
	add	r0, r10, #24
	ldrh	r8, [r10, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	add	r5, r5, #20
	b	.L7852
.L7888:
	str	fp, [r5, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r5, r5, #56
	mov	ip, ip, lsr #7
	strb	ip, [r5, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	rsb	ip, r2, ip
	clz	ip, ip
	mov	ip, ip, lsr #5
	strb	ip, [r5, #-22]
	bl	__wake_up(PLT)
	subs	r8, r8, #1
	beq	.L7887
.L7852:
	ldr	r3, [r10]
	sub	fp, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	movne	r3, r3, lsr #5
	add	r3, r3, #2
	ldr	r7, [fp, r3, asl #2]
	cmp	r7, #0
	beq	.L7850
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	fp, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r5
	mov	r3, r6
	beq	.L7888
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	movlt	r0, r6
	blt	.L7870
.L7859:
	add	r4, r9, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #96]
	mov	r5, r0
	add	lr, r9, #100
	ldrh	r0, [r9, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #96]
	cmp	r0, #0
	beq	.L7866
	add	r0, lr, r0
	mov	r3, lr
	mov	ip, lr
.L7857:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r1, r2, #5
	cmp	r1, #1
	bhi	.L7860
	strb	r2, [ip]
	add	ip, ip, #1
.L7860:
	cmp	r3, r0
	bne	.L7857
	rsb	ip, lr, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L7855:
	add	ip, r9, ip
	strh	r3, [r9, #104]	@ movhi
	mov	r0, #2
	mov	r2, #1
	mov	r1, #3
	strb	r0, [ip, #100]
	mov	r0, r4
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
.L7870:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7886:
	mov	r3, #0
	add	r4, r9, #116
	mov	r0, r4
	str	r3, [r9, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #96]
	mov	r5, r0
	add	r0, r9, #100
	ldrh	r1, [r9, #104]
	cmp	r3, #1
	streq	r6, [r9, #96]
	cmp	r1, #0
	beq	.L7863
	add	r1, r0, r1
	mov	r3, r0
	mov	ip, r0
.L7848:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	lr, r2, #5
	cmp	lr, #1
	bhi	.L7858
	strb	r2, [ip]
	add	ip, ip, #1
.L7858:
	cmp	r3, r1
	bne	.L7848
	rsb	ip, r0, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L7846:
	add	ip, r9, ip
	strh	r3, [r9, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [ip, #100]
	mov	r0, r4
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L7870
.L7850:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #21
	b	.L7870
.L7887:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7859
.L7862:
	mvn	r0, #18
	b	.L7870
.L7866:
	mov	ip, r0
	mov	r3, #1
	b	.L7855
.L7863:
	mov	ip, r1
	mov	r3, #1
	b	.L7846
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7914
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1797:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L7893
	b	.L7890
.L7912:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L7890
.L7893:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L7912
.L7890:
	ldr	r1, .L7914+4
	ldr	r0, .L7914+8
	ldr	r7, .L7914+12
.LPIC1800:
	add	r1, pc, r1
	add	r1, r1, #3488
.LPIC1801:
	add	r0, pc, r0
	add	r1, r1, #4
.LPIC1805:
	add	r7, pc, r7
	bl	printk(PLT)
	ldr	r3, .L7914+16
	mov	r1, #0
	mov	ip, #48
	ldr	r2, .L7914+20
	add	r0, r4, #180
.LPIC1802:
	add	r3, pc, r3
.LPIC1804:
	add	r2, pc, r2
	strb	r1, [r3, #-924]
	strb	r1, [r3, #-1180]
	strb	ip, [r2, #28]
	bl	cancel_work_sync(PLT)
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L7894:
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	beq	.L7913
.L7899:
	ldr	r3, [r5, #8]
	cmp	r3, #0
	beq	.L7894
	ldr	r1, [r3, #288]
	ldr	r0, [r7, #3552]
	bl	device_destroy(PLT)
	ldr	r0, [r5, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #28]
	cmp	r3, #0
	beq	.L7896
	mov	r0, r5
	blx	r3
.L7896:
	ldr	r4, [r5, #16]
	cmp	r4, #0
	beq	.L7894
	ldr	r1, [r4]
	add	r4, r4, #4
	cmp	r1, #0
	beq	.L7894
.L7898:
	ldr	r0, [r5, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r4], #4
	cmp	r1, #0
	bne	.L7898
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	bne	.L7899
.L7913:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7915:
	.align	2
.L7914:
	.word	.LANCHOR1-(.LPIC1797+8)
	.word	.LANCHOR3-(.LPIC1800+8)
	.word	.LC404-(.LPIC1801+8)
	.word	.LANCHOR4-(.LPIC1805+8)
	.word	.LANCHOR4-(.LPIC1802+8)
	.word	.LANCHOR1-(.LPIC1804+8)
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	str	lr, [sp, #28]
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	ldr	r6, [r5, #100]
	cmp	r4, #0
	beq	.L7917
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7917:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	beq	.L7931
.L7918:
	add	r9, r5, #192
	add	r6, r5, #92
.L7919:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #192]
	mov	r7, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r8, r4, #36
	beq	.L7920
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L7922
	ldr	r7, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7919
.L7920:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7922:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #200]
	str	r4, [r5, #96]
	bl	__wake_up(PLT)
	mov	r3, r4
	add	r0, r5, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up(PLT)
	ldrd	r6, [sp, #8]
	mov	r3, r4
	add	r0, r5, #128
	ldrd	r8, [sp, #16]
	mov	r2, #1
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L7931:
	ldr	r4, [r5, #184]
	ldr	r6, [r5, #108]
	cmp	r4, #0
	beq	.L7918
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7918
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7955
	sub	r2, r0, #132
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r3, .L7955+4
	strd	r6, [sp, #8]
	mov	r1, r2
	strd	r8, [sp, #16]
	mov	r4, r0
	str	r10, [sp, #24]
.LPIC1807:
	add	ip, pc, ip
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r7, [r0, #-308]
.LPIC1806:
	add	r3, pc, r3
	ldr	r0, [ip, #792]
	bl	smd_open(PLT)
	subs	r2, r0, #0
	bne	.L7949
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L7936
	ldr	r2, .L7955+8
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #80
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC1816:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L7938
.L7950:
	bl	schedule(PLT)
.L7938:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L7950
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait(PLT)
.L7936:
	ldr	r0, .L7955+12
	sub	r2, r4, #68
	ldr	r3, .L7955+16
	mov	r1, r2
.LPIC1812:
	add	r0, pc, r0
.LPIC1811:
	add	r3, pc, r3
	ldr	r0, [r0, #796]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L7951
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	beq	.L7952
.L7940:
	mov	r3, #1
	sub	r6, r4, #228
	ldr	r10, [r4, #-308]
	mov	r0, r6
	sub	r9, r4, #244
	str	r3, [r4, #-224]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L7943
.L7945:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #-304]
	mov	r1, r8
	mov	r2, #32
	ldr	ip, [r0, #8]
	ldr	r3, [ip, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L7953
.L7943:
	ldr	r5, [r4, #-244]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L7945
.L7944:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7932:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7952:
	ldr	r2, .L7955+20
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #16
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC1815:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L7942
.L7954:
	bl	schedule(PLT)
.L7942:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L7954
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait(PLT)
	b	.L7940
.L7949:
	ldr	r0, [r7]
	ldr	r1, .L7955+24
	add	r0, r0, #32
.LPIC1808:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7932
	sub	r0, r4, #216
	bl	platform_driver_register(PLT)
	subs	r3, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #-136]
	beq	.L7932
	ldr	r0, [r7]
	ldr	r1, .L7955+28
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
.LPIC1809:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7932
.L7953:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L7955+32
	add	r0, r0, #32
.LPIC1814:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r9
	ldr	r1, [r4, #-240]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L7944
.L7951:
	ldr	r0, [r7]
	ldr	r1, .L7955+36
	add	r0, r0, #32
.LPIC1813:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, [r4, #-132]
	bl	smd_close(PLT)
	b	.L7932
.L7956:
	.align	2
.L7955:
	.word	.LANCHOR0-(.LPIC1807+8)
	.word	rmnet_smd_event_notify-(.LPIC1806+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1816+8))
	.word	.LANCHOR0-(.LPIC1812+8)
	.word	rmnet_smd_event_notify-(.LPIC1811+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1815+8))
	.word	.LC438-(.LPIC1808+8)
	.word	.LC439-(.LPIC1809+8)
	.word	.LC127-(.LPIC1814+8)
	.word	.LC431-(.LPIC1813+8)
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	beq	.L7958
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L7960
	ldr	r2, [r7, #-168]
	mov	r1, #6
	ldr	r3, [r7, #-280]
	str	r1, [r7, #-224]
	cmp	r2, #0
	str	r3, [r7, #-220]
	beq	.L7960
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L7960:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	sub	r0, r7, #184
	bl	wait_for_completion(PLT)
.L7958:
	ldr	r4, [r7, #-236]
	cmp	r4, #0
	beq	.L7962
	ldr	r5, [r7, #-244]
	cmp	r5, #0
	beq	.L7968
	ldr	r6, .L7985
	add	r4, r4, #48
.LPIC1817:
	add	r6, pc, r6
	add	r9, r6, #800
	add	r8, r6, #816
.L7965:
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file(PLT)
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file(PLT)
	add	r1, r6, #832
	mov	r0, r4
	bl	device_remove_file(PLT)
	mov	r0, r4
	add	r1, r6, #848
	bl	device_remove_file(PLT)
	ldr	r3, [r4, #-48]
	subs	r0, r3, #0
	beq	.L7964
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r4, #-48]
.L7964:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister(PLT)
	subs	r5, r5, #1
	bne	.L7965
	ldr	r0, [r7, #-236]
.L7963:
	bl	kfree(PLT)
.L7962:
	ldr	r5, [r7, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L7966:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree(PLT)
	cmp	r4, r5
	bne	.L7966
	ldr	r0, [r7, #-268]
	bl	kfree(PLT)
	ldrb	r3, [r7, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L7984
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7984:
	sub	r0, r7, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7968:
	mov	r0, r4
	b	.L7963
.L7986:
	.align	2
.L7985:
	.word	.LANCHOR0-(.LPIC1817+8)
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L8120
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
.LPIC1894:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r0, [r7, #28]
	cmp	r0, #0
	beq	.L8040
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L8108
.L7988:
	mov	r2, #1
	mov	r1, #0
	ldr	r3, .L8120+4
	str	r2, [r4]
	strb	r2, [r4, #10]
	strb	r2, [r4, #9]
.LPIC1843:
	add	r3, pc, r3
	strb	r1, [r4, #8]
	ldr	r0, [r7, #36]
	ldr	r10, [r8]
	str	r3, [sp, #36]
	cmp	r0, r1
	beq	.L8042
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L7993
.L7990:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L8109
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r8, #4]
	str	r8, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc(PLT)
	subs	fp, r0, #0
	beq	.L8006
	ldr	r2, .L8120+8
	add	r9, r5, #28
	str	fp, [r5, #100]
	ldr	r1, .L8120+12
	mov	r0, r9
	mov	r8, fp
.LPIC1844:
	add	r2, pc, r2
	add	r2, r2, #3552
.LPIC1845:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	__init_rwsem(PLT)
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	add	r0, r10, #32
	mov	r1, r9
	ldrb	r2, [fp, #24]	@ zero_extendqisi2
	ldr	ip, .L8120+16
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
.LPIC1846:
	add	ip, pc, ip
	strb	r2, [fp, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [fp, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [fp, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	lr, r2
	strb	r2, [fp, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [fp, #380]
	bfi	lr, r2, #7, #1
	strb	lr, [fp, #24]
	str	r0, [r8, #48]!
	mov	r0, r8
	bl	dev_set_drvdata(PLT)
	ldr	r1, [r4, #68]
	cmp	r1, #0
	beq	.L8110
.L7996:
	mov	r2, #0
	mov	r0, r8
	bl	dev_set_name(PLT)
	mov	r0, r8
	bl	device_register(PLT)
	cmp	r0, #0
	bne	.L8111
	ldr	r9, .L8120+20
	mov	r0, r8
.LPIC1848:
	add	r9, pc, r9
	add	r1, r9, #832
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7998
	add	r1, r9, #848
	mov	r0, r8
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7998
	add	r1, r9, #816
	mov	r0, r8
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7998
	add	r1, r9, #800
	mov	r0, r8
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7998
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L8003
	mov	r0, fp
	bl	fsg_lun_open(PLT)
	cmp	r0, #0
	bne	.L7998
.L8004:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
	mov	r9, r8
.L8005:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace(PLT)
	cmp	r0, #0
	str	r0, [r9]
	beq	.L8006
	cmp	r9, fp
	add	r9, r9, #32
	beq	.L8112
	str	r9, [r9, #-24]
	b	.L8005
.L8003:
	ldrb	r2, [fp, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L8004
	ldr	r0, [r5]
	mvn	r9, #21
	ldr	r1, .L8120+24
	mov	r7, r9
	add	r0, r0, #32
.LPIC1852:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8000
.L7998:
	mov	r7, r0
	mov	r9, r0
.L8000:
	mov	r3, #1
	str	r3, [r5, #92]
.L7995:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release(PLT)
.L8019:
	cmn	r9, #4096
	bhi	.L8032
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r9, #0
	addne	r8, sp, #36
	movne	r5, r9
	bne	.L8033
	b	.L8036
.L8034:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r5, r3
	bcs	.L8036
.L8033:
	ldr	r1, [r7, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r8, r5, asl #2]
	add	r1, r1, r9
	add	r9, r9, #392
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link(PLT)
	cmp	r0, #0
	beq	.L8034
	cmp	r5, #0
	mov	r10, r0
	addne	r8, r8, r5, lsl #2
	beq	.L8038
.L8037:
	ldr	r0, [r6, #8]
	sub	r5, r5, #1
	ldr	r1, [r8, #-4]!
	add	r0, r0, #8
	bl	sysfs_remove_link(PLT)
	cmp	r5, #0
	bne	.L8037
.L8038:
	add	r0, r7, #336
	bl	fsg_common_release(PLT)
.L8105:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r10
.L8102:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8036:
	str	r7, [r4, #96]
	mov	r0, #0
	str	r4, [r6, #4]
	b	.L8102
.L8040:
	mov	r4, #16
	b	.L7988
.L8042:
	mov	r5, #16
	b	.L7990
.L8109:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L7993
	mov	r0, r5
	bl	kfree(PLT)
.L7993:
	mvn	r10, #11
	b	.L8105
.L8110:
	ldr	r1, .L8120+28
.LPIC1821:
	add	r1, pc, r1
	b	.L7996
.L8112:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #104]
	ldrh	r2, [r4, #92]
	cmp	r2, r3
	beq	.L8113
.L8009:
	ldr	r3, [r4, #84]
	add	r0, r5, #180
	cmp	r3, #0
	beq	.L8114
.L8012:
	ldr	r1, [r4, #88]
	cmp	r1, #0
	beq	.L8115
.L8013:
	stmia	sp, {r1, r2}
	ldr	r2, .L8120+32
	mov	r1, #29
.LPIC1880:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r2, .L8120+36
	mov	r1, #0
	ldr	r3, .L8120+40
	strb	r1, [r5, #234]
.LPIC1881:
	add	r2, pc, r2
.LPIC1882:
	add	r3, pc, r3
	ldrd	r0, [r2]
	ldrd	r8, [r3]
	ldrd	r2, [r3, #8]
	str	r0, [r5, #209]	@ unaligned
	str	r1, [r5, #213]	@ unaligned
	str	r8, [r5, #218]	@ unaligned
	str	r9, [r5, #222]	@ unaligned
	str	r2, [r5, #226]	@ unaligned
	str	r3, [r5, #230]	@ unaligned
	ldrb	r0, [r4, #94]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L8014
	ldr	r3, [r5]
	ldr	r0, .L8120+44
	ldr	r1, [r3, #28]
.LPIC1883:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r0, r0, #0
	movne	r0, #1
.L8014:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r1, #0
	mov	r2, #1
	str	r1, [r5, #44]
	str	r2, [r5, #336]
	bfi	r3, r0, #0, #1
	strb	r3, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r1
	beq	.L8116
.L8015:
	ldr	r0, .L8120+48
	mvn	r2, #0
	mov	r1, r5
.LPIC1884:
	add	r0, pc, r0
	bl	kthread_create_on_node(PLT)
	cmn	r0, #4096
	str	r0, [r5, #168]
	movhi	r7, r0
	movhi	r9, r7
	bhi	.L7995
	ldr	r8, .L8120+52
	mov	r3, #0
	add	r0, r5, #156
	ldr	r1, .L8120+56
	str	r3, [r5, #152]
.LPIC1885:
	add	r8, pc, r8
	add	r8, r8, #3552
.LPIC1886:
	add	r1, pc, r1
	add	r8, r8, #4
	mov	r2, r8
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L8120+60
	mov	r2, r8
	add	r0, r5, #16
.LPIC1888:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, [r5]
	ldr	r1, .L8120+64
	add	r0, r0, #32
.LPIC1889:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [r5]
	ldr	r1, .L8120+68
	ldr	r2, [r5, #92]
	add	r0, r0, #32
.LPIC1890:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [r7, #48]
	cmp	r0, #0
	beq	.L8017
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	ldr	r8, [r5, #92]
	mov	r9, r0
	ldr	r7, [r5, #100]
	cmp	r8, #0
	ble	.L8026
	cmp	r0, #0
	beq	.L8117
.L8020:
	ldr	r3, .L8120+72
	add	fp, r7, #48
	str	r4, [sp, #20]
	ldr	r2, .L8120+76
	mov	r4, fp
	str	r6, [sp, #28]
	ldr	r1, .L8120+80
	mov	r7, #0
	str	r5, [sp, #24]
.LPIC1834:
	add	r3, pc, r3
.LPIC1836:
	add	r2, pc, r2
.LPIC1838:
	add	r1, pc, r1
	str	r3, [sp, #16]
	ldr	r3, .L8120+84
	str	r2, [sp, #8]
	ldr	r2, .L8120+88
	str	r1, [sp, #12]
	ldr	r1, .L8120+92
.LPIC1835:
	add	r3, pc, r3
.LPIC1837:
	add	r2, pc, r2
	mov	r10, r3
.LPIC1839:
	add	r1, pc, r1
	mov	r6, r2
	mov	fp, r1
	b	.L8031
.L8119:
	ldr	r1, .L8120+96
.LPIC1841:
	add	r1, pc, r1
.L8030:
	str	r1, [sp]
	ldr	r1, .L8120+100
	add	r7, r7, #1
	str	r0, [sp, #4]
	mov	r0, r4
	add	r4, r4, #392
.LPIC1892:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r8, r7
	beq	.L8118
.L8031:
	ldr	r0, [r4, #-48]
	sub	r5, r4, #48
	cmp	r0, #0
	beq	.L8079
	mov	r2, #4096
	add	r0, r0, #8
	mov	r1, r9
	bl	d_path(PLT)
	mov	r2, #61440
	movt	r2, 65535
	cmp	r0, r2
	movhi	r0, r10
.L8027:
	ldrb	r1, [r5, #24]	@ zero_extendqisi2
	tst	r1, #4
	moveq	r2, r6
	ldrne	r2, [sp, #8]
	tst	r1, #2
	moveq	r3, fp
	ldrne	r3, [sp, #12]
	tst	r1, #8
	beq	.L8119
	ldr	r1, .L8120+104
.LPIC1840:
	add	r1, pc, r1
	b	.L8030
.L8006:
	mvn	r9, #11
	mov	r7, r9
	b	.L7995
.L8111:
	ldr	ip, [r5]
	mov	r3, r0
	mov	r2, #0
	ldr	r1, .L8120+108
	mov	r7, r0
	mov	r9, r0
	add	r0, ip, #32
.LPIC1847:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r3, #0
	mov	r0, r8
	str	r3, [r5, #92]
	bl	put_device(PLT)
	b	.L7995
.L8113:
	ldr	r8, [r10, #28]
	ldr	r0, .L8120+112
	mov	r1, r8
.LPIC1853:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #769
	beq	.L8009
	ldr	r0, .L8120+116
	mov	r1, r8
.LPIC1854:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #770
	beq	.L8009
	ldr	r0, .L8120+120
	mov	r1, r8
.LPIC1855:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #771
	beq	.L8009
	ldr	r0, .L8120+124
	mov	r1, r8
.LPIC1856:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #774
	beq	.L8009
	ldr	r0, .L8120+128
	mov	r1, r8
.LPIC1857:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #776
	beq	.L8009
	ldr	r0, .L8120+132
	mov	r1, r8
.LPIC1858:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #785
	beq	.L8009
	ldr	r0, .L8120+136
	mov	r1, r8
.LPIC1859:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #786
	beq	.L8009
	ldr	r0, .L8120+140
	mov	r1, r8
.LPIC1860:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #787
	beq	.L8009
	ldr	r0, .L8120+144
	mov	r1, r8
.LPIC1861:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #788
	beq	.L8009
	ldr	r0, .L8120+148
	mov	r1, r8
.LPIC1862:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #790
	beq	.L8009
	ldr	r0, .L8120+152
	mov	r1, r8
.LPIC1863:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #792
	beq	.L8009
	ldr	r0, .L8120+156
	mov	r1, r8
.LPIC1864:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #793
	beq	.L8009
	ldr	r0, .L8120+160
	mov	r1, r8
.LPIC1865:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #800
	beq	.L8009
	ldr	r0, .L8120+164
	mov	r1, r8
.LPIC1866:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #801
	beq	.L8009
	ldr	r0, .L8120+168
	mov	r1, r8
.LPIC1867:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #802
	beq	.L8009
	ldr	r0, .L8120+172
	mov	r1, r8
.LPIC1868:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #803
	beq	.L8009
	ldr	r0, .L8120+176
	mov	r1, r8
.LPIC1869:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #804
	beq	.L8009
	ldr	r0, .L8120+180
	mov	r1, r8
.LPIC1870:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #805
	beq	.L8009
	ldr	r0, .L8120+184
	mov	r1, r8
.LPIC1871:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #806
	beq	.L8009
	ldr	r0, .L8120+188
	mov	r1, r8
.LPIC1872:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #807
	beq	.L8009
	ldr	r0, .L8120+192
	mov	r1, r8
.LPIC1873:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #808
	beq	.L8009
	ldr	r0, .L8120+196
	mov	r1, r8
.LPIC1874:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #809
	beq	.L8009
	ldr	r0, .L8120+200
	mov	r1, r8
.LPIC1875:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #816
	beq	.L8009
	ldr	r0, .L8120+204
	mov	r1, r8
.LPIC1876:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #817
	beq	.L8009
	ldr	r0, .L8120+208
	mov	r1, r8
.LPIC1877:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #818
	beq	.L8009
	ldr	r0, .L8120+212
	mov	r1, r8
.LPIC1878:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #819
	beq	.L8009
	ldr	r0, .L8120+216
	mov	r1, r8
.LPIC1879:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #820
	beq	.L8009
	ldr	r0, [r5]
	mov	r2, r8
	ldr	r1, .L8120+220
	add	r0, r0, #32
.LPIC1893:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	movw	r2, #921
	b	.L8009
.L8017:
	ldr	r8, [r5, #92]
	mov	r9, #16
	ldr	r7, [r5, #100]
	cmp	r8, #0
	bgt	.L8020
.L8026:
	mov	r0, r9
	mov	r7, r5
	bl	kfree(PLT)
	ldr	r0, [r5, #168]
	mov	r9, r5
	bl	wake_up_process(PLT)
	b	.L8019
.L8116:
	ldr	r3, .L8120+224
.LPIC1825:
	add	r3, pc, r3
	b	.L8015
.L8115:
	ldr	r1, [r5, #100]
	ldrb	r1, [r1, #24]	@ zero_extendqisi2
	tst	r1, #8
	bne	.L8072
	ldr	r1, .L8120+228
.LPIC1823:
	add	r1, pc, r1
	b	.L8013
.L8114:
	ldr	r3, .L8120+232
.LPIC1822:
	add	r3, pc, r3
	b	.L8012
.L8079:
	ldr	r0, [sp, #16]
	b	.L8027
.L8118:
	ldrd	r4, [sp, #20]
	ldr	r6, [sp, #28]
	b	.L8026
.L8108:
	mvn	r0, #11
	b	.L8102
.L8117:
	ldr	r3, .L8120+236
	strd	r4, [sp, #12]
	add	r7, r7, #48
	ldr	r2, .L8120+240
	str	r6, [sp, #24]
	ldr	r1, .L8120+244
	str	r9, [sp, #20]
	ldr	r0, .L8120+248
	ldr	fp, .L8120+252
.LPIC1826:
	add	r3, pc, r3
	ldr	ip, .L8120+256
.LPIC1828:
	add	r2, pc, r2
	mov	r4, r3
.LPIC1829:
	add	r1, pc, r1
	mov	r5, r2
.LPIC1830:
	add	r0, pc, r0
	mov	r10, r1
.LPIC1827:
	add	fp, pc, fp
	mov	r6, r0
.LPIC1831:
	add	ip, pc, ip
	str	ip, [sp, #8]
.L8025:
	ldr	r0, [r7, #-48]
	mov	r2, r5
	mov	r3, r6
	ldrb	r1, [r7, #-24]	@ zero_extendqisi2
	cmp	r0, #0
	ldr	r0, .L8120+260
	movne	lr, fp
	moveq	lr, r4
	tst	r1, #4
	moveq	r2, r10
	tst	r1, #2
	ldreq	r3, [sp, #8]
	tst	r1, #8
.LPIC1833:
	add	r0, pc, r0
	bne	.L8024
	ldr	r0, .L8120+264
.LPIC1832:
	add	r0, pc, r0
.L8024:
	ldr	r1, .L8120+268
	stmia	sp, {r0, lr}
	add	r9, r9, #1
	mov	r0, r7
	add	r7, r7, #392
.LPIC1891:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r8, r9
	bne	.L8025
	ldrd	r4, [sp, #12]
	ldr	r9, [sp, #20]
	ldr	r6, [sp, #24]
	b	.L8026
.L8072:
	ldr	r1, .L8120+272
.LPIC1824:
	add	r1, pc, r1
	b	.L8013
.L8032:
	mov	r10, r7
	b	.L8105
.L8121:
	.align	2
.L8120:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1894+8))
	.word	.LC450-(.LPIC1843+8)
	.word	.LANCHOR4-(.LPIC1844+8)
	.word	.LC451-(.LPIC1845+8)
	.word	fsg_lun_release-(.LPIC1846+8)
	.word	.LANCHOR0-(.LPIC1848+8)
	.word	.LC453-(.LPIC1852+8)
	.word	.LC440-(.LPIC1821+8)
	.word	.LC479-(.LPIC1880+8)
	.word	.LC480-(.LPIC1881+8)
	.word	.LC443-(.LPIC1882+8)
	.word	.LC460-(.LPIC1883+8)
	.word	fsg_main_thread-(.LPIC1884+8)
	.word	.LANCHOR4-(.LPIC1885+8)
	.word	.LC481-(.LPIC1886+8)
	.word	.LC482-(.LPIC1888+8)
	.word	.LC483-(.LPIC1889+8)
	.word	.LC484-(.LPIC1890+8)
	.word	.LC445-(.LPIC1834+8)
	.word	.LC447-(.LPIC1836+8)
	.word	.LC448-(.LPIC1838+8)
	.word	.LC446-(.LPIC1835+8)
	.word	.LC355-(.LPIC1837+8)
	.word	.LC355-(.LPIC1839+8)
	.word	.LC355-(.LPIC1841+8)
	.word	.LC485-(.LPIC1892+8)
	.word	.LC449-(.LPIC1840+8)
	.word	.LC452-(.LPIC1847+8)
	.word	.LC454-(.LPIC1853+8)
	.word	.LC455-(.LPIC1854+8)
	.word	.LC323-(.LPIC1855+8)
	.word	.LC456-(.LPIC1856+8)
	.word	.LC457-(.LPIC1857+8)
	.word	.LC458-(.LPIC1858+8)
	.word	.LC459-(.LPIC1859+8)
	.word	.LC460-(.LPIC1860+8)
	.word	.LC461-(.LPIC1861+8)
	.word	.LC462-(.LPIC1862+8)
	.word	.LC463-(.LPIC1863+8)
	.word	.LC464-(.LPIC1864+8)
	.word	.LC465-(.LPIC1865+8)
	.word	.LC466-(.LPIC1866+8)
	.word	.LC467-(.LPIC1867+8)
	.word	.LC468-(.LPIC1868+8)
	.word	.LC469-(.LPIC1869+8)
	.word	.LC470-(.LPIC1870+8)
	.word	.LC471-(.LPIC1871+8)
	.word	.LC472-(.LPIC1872+8)
	.word	.LC473-(.LPIC1873+8)
	.word	.LC474-(.LPIC1874+8)
	.word	.LC475-(.LPIC1875+8)
	.word	.LC476-(.LPIC1876+8)
	.word	.LC370-(.LPIC1877+8)
	.word	.LC477-(.LPIC1878+8)
	.word	.LC478-(.LPIC1879+8)
	.word	.LC486-(.LPIC1893+8)
	.word	.LC444-(.LPIC1825+8)
	.word	.LC442-(.LPIC1823+8)
	.word	.LC441-(.LPIC1822+8)
	.word	.LC445-(.LPIC1826+8)
	.word	.LC447-(.LPIC1828+8)
	.word	.LC355-(.LPIC1829+8)
	.word	.LC448-(.LPIC1830+8)
	.word	.LC446-(.LPIC1827+8)
	.word	.LC355-(.LPIC1831+8)
	.word	.LC449-(.LPIC1833+8)
	.word	.LC355-(.LPIC1832+8)
	.word	.LC485-(.LPIC1891+8)
	.word	.LC443-(.LPIC1824+8)
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r4, #148
	strd	r8, [sp, #16]
	add	r9, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r9, r5
	bne	.L8128
	b	.L8127
.L8125:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r5, #12]
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	fp, r3
	bne	.L8135
	ldr	r3, [r4, #436]
	ldr	r1, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add(PLT)
	ldr	r5, [r4, #156]
	cmp	r5, r9
	beq	.L8127
.L8128:
	ldr	r0, [r4, #324]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L8125
	str	r3, [r4, #372]
.L8124:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	b	.L8129
.L8131:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r8, r0
	bne	.L8136
.L8129:
	ldr	r5, [r4, #148]
	cmp	r5, r7
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L8131
.L8130:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8136:
	ldr	r0, [r10]
	mov	r2, r9
	ldr	r1, .L8137
	add	r0, r0, #32
.LPIC1896:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r7
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L8130
.L8127:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L8124
.L8135:
	ldr	r0, [r10]
	ldr	r1, .L8137+4
	add	r0, r0, #32
.LPIC1895:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8124
.L8138:
	.align	2
.L8137:
	.word	.LC127-(.LPIC1896+8)
	.word	.LC487-(.LPIC1895+8)
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #372]
	mov	r8, r0
	cmp	r3, #0
	addeq	r7, r4, #112
	beq	.L8141
	ldr	r5, [r4, #120]
	add	r9, r4, #120
	add	r7, r4, #112
	cmp	r9, r5
	bne	.L8144
	b	.L8143
.L8145:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r5, #12]
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	fp, r3
	bne	.L8155
	ldr	r3, [r4, #400]
	ldr	r1, [r4, #116]
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	__list_add(PLT)
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8141
	ldr	r5, [r4, #120]
	cmp	r5, r9
	beq	.L8143
.L8144:
	ldr	r0, [r4, #128]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L8145
	str	r3, [r4, #176]
.L8141:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	b	.L8148
.L8150:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r8, r0
	bne	.L8156
.L8148:
	ldr	r5, [r4, #112]
	cmp	r5, r7
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L8150
.L8149:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8156:
	ldr	r0, [r10]
	mov	r2, r9
	ldr	r1, .L8157
	add	r0, r0, #32
.LPIC1898:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r7
	ldr	r1, [r4, #116]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L8149
.L8143:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L8141
.L8155:
	ldr	r0, [r10]
	ldr	r1, .L8157+4
	add	r0, r0, #32
.LPIC1897:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8141
.L8158:
	.align	2
.L8157:
	.word	.LC127-(.LPIC1898+8)
	.word	.LC488-(.LPIC1897+8)
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r4, #364]
	ldr	r7, [r4, #84]
	cmp	r2, #0
	beq	.L8182
	cmn	r3, #104
	beq	.L8162
	cmp	r3, #0
	beq	.L8163
	cmn	r3, #108
	beq	.L8162
	ldr	r2, [r0, #4]
	add	r6, r4, #368
	ldr	r0, [r7]
	ldr	lr, [r1, #4]
	ldr	ip, [r1, #48]
	ldr	r1, .L8185
	add	r0, r0, #32
	stmia	sp, {ip, lr}
.LPIC1899:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8181:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #116]
	add	r0, r5, #36
	add	r2, r4, #112
.L8180:
	bl	__list_add(PLT)
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L8163:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L8164
	ldr	r0, [r4, #128]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcs	.L8183
.L8164:
	add	r0, r5, #36
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	b	.L8180
.L8162:
	add	r6, r4, #368
	b	.L8181
.L8182:
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8183:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [r5, #48]
	ldr	r1, [r5]
	ldr	r0, [r4, #128]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L8166
	ldr	r0, [r7]
	ldr	r1, .L8185+4
	add	r0, r0, #32
.LPIC1900:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8166:
	ldr	r3, [r4, #400]
	mov	r0, r6
	add	r9, r4, #112
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	_raw_spin_lock(PLT)
	mov	r2, r9
	ldr	r1, [r4, #116]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L8167
.L8169:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L8184
.L8167:
	ldr	r5, [r4, #112]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L8169
.L8168:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L8184:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L8185+8
	add	r0, r0, #32
.LPIC1901:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r2, r9
	ldr	r1, [r4, #116]
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L8168
.L8186:
	.align	2
.L8185:
	.word	.LC412-(.LPIC1899+8)
	.word	.LC489-(.LPIC1900+8)
	.word	.LC127-(.LPIC1901+8)
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r1, #32]
	ldr	r5, [r1]
	add	r8, r6, #204
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #44]
	cmn	r3, #104
	beq	.L8189
	cmp	r3, #0
	beq	.L8190
	cmn	r3, #108
	beq	.L8189
	ldr	r1, .L8242
	ldr	r0, .L8242+4
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
.LPIC1905:
	add	r1, pc, r1
	add	r1, r1, #3504
.LPIC1906:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L8191:
	ldr	r4, [r6, #160]
	cmp	r4, #0
	beq	.L8204
	ldrb	r3, [r6, #164]	@ zero_extendqisi2
	ldr	r2, [r4]
	cmp	r3, #0
	beq	.L8206
	cmp	r3, #3
	bne	.L8238
	ldr	r3, [r6, #168]
	cmp	r3, #0
	ble	.L8204
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	bne	.L8239
.L8204:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L8189:
	ldr	r1, .L8242+8
	mov	r3, #0
	mov	r9, r6
	ldr	r0, .L8242+12
	strb	r3, [r6, #164]
	str	r3, [r6, #168]
.LPIC1902:
	add	r1, pc, r1
	add	r1, r1, #3504
.LPIC1903:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r9, #208]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L8196
	b	.L8197
.L8209:
	mov	r5, r3
.L8196:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	cmp	r7, #0
	beq	.L8195
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L8195:
	cmp	r5, r9
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L8209
.L8197:
	mov	r10, r6
	ldr	r4, [r10, #216]!
	cmp	r10, r4
	ldr	r5, [r4]
	bne	.L8201
	b	.L8194
.L8211:
	mov	r5, r3
.L8201:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	cmp	r7, #0
	beq	.L8200
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L8200:
	cmp	r10, r5
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L8211
.L8194:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L8242+16
.LPIC1913:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8240
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L8241
.L8198:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L8202:
	mov	r2, r9
	ldr	r1, [r6, #212]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	add	r0, r6, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	b	.L8191
.L8190:
	add	r3, r6, #168
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r3, [r6, #168]
	b	.L8191
.L8238:
	mvn	r3, #94
	add	r5, r6, #168
	strb	r3, [r2]
	ldrb	r3, [r6, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r8
	ldr	r3, [r6, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	beq	.L8204
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8242+20
	mov	r2, r4
	ldr	r0, .L8242+24
.LPIC1911:
	add	r1, pc, r1
	add	r1, r1, #3536
.LPIC1912:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8204
.L8206:
	ldr	r3, [r6, #168]
	cmp	r3, #0
	ble	.L8204
	ldr	r1, .L8242+28
	ldr	r0, .L8242+32
.LPIC1907:
	add	r1, pc, r1
	add	r1, r1, #3536
.LPIC1908:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8204
.L8240:
	mov	r3, #16
	b	.L8198
.L8241:
	mvn	r0, #11
	b	.L8202
.L8239:
	add	r3, r6, #168
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8242+36
	mov	r2, r4
	ldr	r0, .L8242+40
.LPIC1909:
	add	r1, pc, r1
	add	r1, r1, #3536
.LPIC1910:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8204
.L8243:
	.align	2
.L8242:
	.word	.LANCHOR3-(.LPIC1905+8)
	.word	.LC491-(.LPIC1906+8)
	.word	.LANCHOR3-(.LPIC1902+8)
	.word	.LC490-(.LPIC1903+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1913+8))
	.word	.LANCHOR3-(.LPIC1911+8)
	.word	.LC494-(.LPIC1912+8)
	.word	.LANCHOR3-(.LPIC1907+8)
	.word	.LC492-(.LPIC1908+8)
	.word	.LANCHOR3-(.LPIC1909+8)
	.word	.LC493-(.LPIC1910+8)
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	movw	r2, #522
	cmp	r7, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	bhi	.L8274
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8275
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	add	r5, r4, #92
	bic	r8, r8, #63
.L8255:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #96]
	cmp	ip, #0
	beq	.L8260
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8276
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L8249
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8249
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L8249
	ldr	r2, .L8280
	add	r1, sp, #12
	add	r10, r4, #160
	str	r1, [sp, #4]
	ldr	r1, [r8, #12]
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC1921:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L8252
.L8277:
	bl	schedule(PLT)
.L8252:
	mov	r2, #1
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L8250
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8250
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L8250
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8277
	mov	r0, r10
	ldr	r1, [sp, #4]
	bl	finish_wait(PLT)
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r1, r6
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
.L8272:
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8250:
	mov	r0, r10
	ldr	r1, [sp, #4]
	bl	finish_wait(PLT)
.L8249:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8261
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L8278
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L8254
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8255
.L8260:
	mvn	r0, #18
	b	.L8272
.L8261:
	mvn	r0, #4
	b	.L8272
.L8278:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8272
.L8254:
	mov	r3, #1
	cmp	r2, r7
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r8, r2
	movcs	r8, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r1, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L8279
.L8256:
	cmp	r8, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L8258
	ldr	r7, [r4, #184]
	ldr	r4, [r4, #108]
	cmp	r7, r2
	beq	.L8259
	ldr	r0, [r7]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L8259:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8272
.L8258:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	b	.L8272
.L8279:
	mov	r2, r8
	mov	r0, r9
	bl	__copy_to_user(PLT)
	mov	r8, r0
	b	.L8256
.L8276:
	ldr	r1, .L8280+4
	ldr	r0, .L8280+8
.LPIC1918:
	add	r1, pc, r1
.LPIC1919:
	add	r0, pc, r0
	add	r1, r1, #3552
	bl	printk(PLT)
	mov	r3, #1
	mvn	r0, #4
	str	r3, [r4, #148]
	b	.L8272
.L8275:
	ldr	r1, .L8280+12
	ldr	r0, .L8280+16
.LPIC1916:
	add	r1, pc, r1
.LPIC1917:
	add	r0, pc, r0
	add	r1, r1, #3552
	bl	printk(PLT)
	mvn	r0, #4
	b	.L8272
.L8274:
	ldr	r1, .L8280+20
	mov	r3, r7
	ldr	r0, .L8280+24
.LPIC1914:
	add	r1, pc, r1
.LPIC1915:
	add	r0, pc, r0
	add	r1, r1, #3552
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8272
.L8281:
	.align	2
.L8280:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1921+8))
	.word	.LANCHOR3-(.LPIC1918+8)
	.word	.LC496-(.LPIC1919+8)
	.word	.LANCHOR3-(.LPIC1916+8)
	.word	.LC495-(.LPIC1917+8)
	.word	.LANCHOR3-(.LPIC1914+8)
	.word	.LC433-(.LPIC1915+8)
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.type	check_command_size_in_blocks.constprop.126, %function
check_command_size_in_blocks.constprop.126:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r3
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L8331
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r1, [r0, #104]
	.pad #24
	sub	sp, sp, #24
.LPIC1925:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	cmp	r1, #0
	ldr	r3, [r6]
	str	r3, [sp, #20]
	beq	.L8283
	ldr	r2, [r1, #40]
	ldr	r3, [r0, #128]
	mov	r3, r3, asl r2
	str	r3, [r0, #128]
.L8283:
	ldr	ip, [r4, #120]
	mov	r3, #0
	strb	r3, [sp]
	cmp	ip, r3
	bne	.L8327
.L8284:
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r2, #0
	beq	.L8285
	cmp	r2, r3
	bls	.L8286
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, ip
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L8287
	cmp	r3, #0
	bne	.L8290
.L8287:
	ldr	ip, [r4, #72]
	cmp	r7, ip
	beq	.L8289
	bgt	.L8290
.L8289:
	ldr	lr, [r4, #104]
	cmp	lr, #0
	beq	.L8291
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L8292
	ldrb	r2, [lr, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [lr, #36]
	str	r3, [lr, #28]
	str	r3, [lr, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [lr, #24]
	bne	.L8293
.L8292:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L8298
.L8300:
	mov	r2, #1
	add	r1, r4, #76
	mov	r3, r2
.L8297:
	ldrb	r0, [r1, #1]!	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L8295
	ands	r0, r5, r3, asl r2
	beq	.L8328
.L8295:
	add	r2, r2, #1
	cmp	ip, r2
	bgt	.L8297
	cmp	lr, #0
	beq	.L8299
.L8298:
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L8329
.L8299:
	mov	r0, #0
.L8288:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L8330
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8285:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L8287
.L8293:
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [lr, #28]
	strne	r3, [lr, #36]
	beq	.L8292
	b	.L8288
.L8328:
	cmp	lr, #0
	beq	.L8296
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [lr, #28]
	b	.L8288
.L8327:
	ldr	r2, .L8331+4
	mov	r0, sp
	ldr	r1, .L8331+8
	ldr	r3, [r4, #124]
.LPIC1923:
	add	r2, pc, r2
	add	ip, r2, ip
.LPIC1924:
	add	r1, pc, r1
	ldrb	r2, [ip, #564]	@ zero_extendqisi2
	bl	sprintf(PLT)
	ldr	ip, [r4, #120]
	b	.L8284
.L8329:
	mov	r3, #14848
	mvn	r0, #21
	movt	r3, 2
	str	r3, [lr, #28]
	b	.L8288
.L8291:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, lr, #4, #1
	cmp	r2, #3
	cmpne	r2, #18
	strb	r3, [r4, #144]
	bne	.L8296
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	ip, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L8300
	b	.L8299
.L8286:
	cmp	r8, ip
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L8287
.L8290:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L8288
.L8296:
	mvn	r0, #21
	b	.L8288
.L8330:
	bl	__stack_chk_fail(PLT)
.L8332:
	.align	2
.L8331:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1925+8))
	.word	.LANCHOR3-(.LPIC1923+8)
	.word	.LC81-(.LPIC1924+8)
	.fnend
	.size	check_command_size_in_blocks.constprop.126, .-check_command_size_in_blocks.constprop.126
	.align	2
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L8345
	ldr	r3, .L8348
	mov	r6, r1
.LPIC1933:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8340
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L8336
.L8335:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L8346
	add	r8, r4, #368
	str	r7, [r5, #4]
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #356]
	cmp	r3, #0
	bne	.L8338
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5]
	bl	kfree(PLT)
	mov	r0, r5
	ldr	r5, .L8348+4
	bl	kfree(PLT)
	ldr	r3, [r4, #424]
	ldr	r0, .L8348+8
.LPIC1928:
	add	r5, pc, r5
	add	r5, r5, #3568
	add	r3, r3, #1
	mov	r1, r5
.LPIC1929:
	add	r0, pc, r0
	str	r3, [r4, #424]
	add	r0, r0, #596
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L8347
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8338:
	ldr	r0, [r5], #8
	mov	r2, r7
	ldr	r1, [r6]
	bl	memcpy(PLT)
	add	r2, r4, #316
	ldr	r1, [r4, #320]
	mov	r0, r5
	bl	__list_add(PLT)
	ldr	r3, [r4, #336]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #324
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L8340:
	mov	r5, #16
	b	.L8335
.L8345:
	ldr	r0, [r8]
	ldr	r1, .L8348+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1926:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L8346:
	mov	r0, r5
	bl	kfree(PLT)
.L8336:
	ldr	r0, [r8]
	ldr	r1, .L8348+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1932:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L8347:
	ldr	r0, .L8348+20
	mov	r1, r5
	ldr	r2, [r4, #424]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC1931:
	add	r0, pc, r0
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L8349:
	.align	2
.L8348:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1933+8))
	.word	.LANCHOR3-(.LPIC1928+8)
	.word	.LANCHOR2-(.LPIC1929+8)
	.word	.LC497-(.LPIC1926+8)
	.word	.LC499-(.LPIC1932+8)
	.word	.LC498-(.LPIC1931+8)
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8371
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1934:
	add	r3, pc, r3
	ldr	r5, [r3, #1212]
	bhi	.L8369
	ldr	r3, .L8371+4
	mov	r7, r1
.LPIC1940:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L8353
	mov	r0, r6
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L8358
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L8359
	cmn	r6, #4096
	str	r4, [r6, #4]
	bhi	.L8358
.L8356:
	mov	r1, r7
	mov	r2, r4
	add	r7, r5, #52
	bl	memcpy(PLT)
	str	r4, [r6, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r4, [r5, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r4, #0
	beq	.L8370
	add	r2, r5, #44
	add	r0, r6, #8
	ldr	r1, [r5, #48]
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r5, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up(PLT)
	mov	r0, #0
.L8365:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8353:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	strne	r4, [r6, #20]
	movne	r6, #16
	bne	.L8356
	mov	r6, #16
.L8359:
	mov	r0, r6
	bl	kfree(PLT)
.L8358:
	ldr	r1, .L8371+8
	ldr	r0, .L8371+12
.LPIC1937:
	add	r1, pc, r1
	add	r1, r1, #3584
.LPIC1938:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8365
.L8369:
	ldr	r0, .L8371+16
	mov	r1, r2
	mov	r2, #2048
.LPIC1935:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L8365
.L8370:
	ldr	r0, .L8371+20
	mov	r1, r5
.LPIC1939:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r4
	b	.L8365
.L8372:
	.align	2
.L8371:
	.word	.LANCHOR1-(.LPIC1934+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1940+8))
	.word	.LANCHOR3-(.LPIC1937+8)
	.word	.LC367-(.LPIC1938+8)
	.word	.LC500-(.LPIC1935+8)
	.word	.LC501-(.LPIC1939+8)
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r6, [r1, #48]
	cmp	r5, #0
	beq	.L8381
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L8382
	ldr	r3, .L8385
	mov	r4, r1
.LPIC1946:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8379
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L8383
.L8376:
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	movne	r8, r7
	strne	r6, [r7, #4]
	beq	.L8384
.L8377:
	mov	r2, r6
	ldr	r1, [r4]
	add	r4, r5, #204
	bl	memcpy(PLT)
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	add	r2, r5, #208
	ldr	r1, [r5, #212]
	add	r0, r8, #8
	bl	__list_add(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L8379:
	mov	r7, #16
	b	.L8376
.L8383:
	mvn	r3, #0
	mvn	r8, #11
	ldr	r0, [r3, #-11]
	b	.L8377
.L8384:
	mov	r0, r7
	mvn	r8, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L8377
.L8382:
	ldr	r1, .L8385+4
	ldr	r0, .L8385+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1943:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1944:
	add	r0, pc, r0
	add	r1, r1, #3632
	add	sp, sp, #24
	b	printk(PLT)
.L8381:
	ldr	r1, .L8385+12
	ldr	r0, .L8385+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1941:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1942:
	add	r0, pc, r0
	add	r1, r1, #3632
	add	sp, sp, #24
	b	printk(PLT)
.L8386:
	.align	2
.L8385:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1946+8))
	.word	.LANCHOR3-(.LPIC1943+8)
	.word	.LC503-(.LPIC1944+8)
	.word	.LANCHOR3-(.LPIC1941+8)
	.word	.LC502-(.LPIC1942+8)
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r4, #32]
	ldr	r6, [r4, #36]
	cmp	r5, #0
	bne	.L8410
.L8389:
	mov	r10, r2
	mov	r7, r0
	str	r1, [sp, #4]
	mov	r3, r6
.L8390:
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L8428
	ldr	r9, [r4, #40]
	cmp	r9, #0
	beq	.L8429
	ldrb	r3, [r4, #53]	@ zero_extendqisi2
	clz	fp, r3
	mov	fp, fp, lsr #5
	cmp	fp, #0
	beq	.L8393
	ldrb	r2, [r4, #54]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L8430
.L8394:
	ldr	r2, [r7, #32]
	mov	r0, r4
	tst	r2, #2048
	beq	.L8395
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L8414
.L8398:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #40]
	cmp	r9, r2
	bne	.L8396
	cmp	fp, #0
	bne	.L8431
	ldr	r0, .L8436
	mov	r2, #32
	ldr	r7, [r9, #4]
.LPIC1949:
	add	r0, pc, r0
	str	r5, [r7]
	mov	r1, r7
	str	r10, [r7, #4]
	str	r0, [r7, #28]
	str	fp, [r6, #52]!
	str	r6, [r7, #32]
	ldr	r0, [r9]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, #0
	blt	.L8416
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L8432
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #40]
	ldr	r0, [r4, #36]
	cmp	r9, r3
	add	r0, r0, #24
	ldreq	r8, [r9, #24]
	mvnne	r8, #18
	bl	_raw_spin_unlock_irq(PLT)
.L8401:
	mov	r0, r4
	bl	mutex_unlock(PLT)
.L8392:
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r8
.L8420:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8393:
	cmp	r5, #0
	bne	.L8394
	movw	r1, #32976
	mov	r0, r10
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	beq	.L8433
	mov	r2, r10
	ldr	r1, [sp, #4]
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	beq	.L8394
	mvn	r8, #13
	b	.L8392
.L8395:
	bl	mutex_lock_interruptible(PLT)
	subs	r8, r0, #0
	beq	.L8398
	b	.L8392
.L8429:
	ldr	r3, [r7, #32]
	tst	r3, #2048
	mvnne	r8, #10
	mvneq	r8, #18
	b	.L8392
.L8428:
	ldr	r0, .L8436+4
	movw	r1, #786
	mvn	r8, #18
.LPIC1947:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8392
.L8396:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r3, [r4, #36]
	b	.L8390
.L8431:
	ldr	r0, [r9]
	cmp	r0, #0
	beq	.L8434
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L8409:
	ldr	r0, [r4, #36]
	mvn	r8, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8401
.L8434:
	ldr	r0, .L8436+8
	movw	r1, #861
.LPIC1948:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8409
.L8416:
	mvn	r8, #4
	b	.L8401
.L8432:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #40]
	cmp	r9, r3
	beq	.L8435
.L8403:
	ldr	r0, [r4, #36]
	mvn	r8, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8401
.L8410:
	mvn	r0, #18
	b	.L8420
.L8414:
	mvn	r8, #10
	b	.L8392
.L8430:
	mvn	r8, #21
	b	.L8392
.L8435:
	ldr	r0, [r9]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L8403
.L8433:
	mvn	r0, #11
	b	.L8420
.L8437:
	.align	2
.L8436:
	.word	ffs_epfile_io_complete-(.LPIC1949+8)
	.word	.LC18-(.LPIC1947+8)
	.word	.LC18-(.LPIC1948+8)
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L8474
	mov	r3, r3, lsr #5
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r10, [sp, #24]
	ldr	fp, .L8474+4
	mov	r7, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC1953:
	add	r2, pc, r2
	mov	r8, r9
	str	r3, [sp, #12]
	ldr	r3, .L8474+8
.LPIC1952:
	add	fp, pc, fp
	str	r2, [sp, #4]
	str	r9, [sp, #8]
.LPIC1950:
	add	r3, pc, r3
	str	r3, [sp, #16]
	ldr	r3, .L8474+12
.LPIC1951:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L8439:
	ldr	r9, [r4, #8]
	ldr	r10, [sp, #12]
	ldr	r3, [sp, #8]
	cmp	r3, #0
	orrne	r10, r10, #1
	cmp	r9, #0
	beq	.L8441
.L8448:
	mov	r6, #0
.L8444:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L8442
	ldr	r0, [r9, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r8, [r5, #16]
.L8442:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L8443
	ldr	r0, [r9, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r8, [r5, #24]
.L8443:
	cmp	r6, #128
	bne	.L8444
	str	r8, [r4, #8]
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #16
	bl	__wake_up(PLT)
.L8441:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r10, #0
	bfc	r3, #5, #1
	strb	r3, [r4, #144]
	bne	.L8469
	ldr	r9, [sp, #4]
	str	r7, [r4, #8]
.L8450:
	ldr	r6, [r7, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r6, #8]
	mov	r0, r6
	add	r5, r5, r10
	add	r10, r10, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L8472
	ldr	r6, [r7, #104]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L8473
	ldr	r2, [r5, #16]
	cmp	r10, #128
	ldr	r3, [r5]
	str	r3, [r0]
	str	r3, [r2]
	ldr	r3, [r5, #16]
	ldr	r2, [r5, #24]
	str	r5, [r2, #32]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	fp, [r3, #28]
	ldr	r3, [r5, #24]
	str	r9, [r3, #28]
	bne	.L8450
	ldr	r2, [r4, #92]
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	orr	r3, r3, #32
	movne	r2, #0
	movne	r0, #10496
	movne	r1, r2
	strb	r3, [r4, #144]
	movtne	r0, 6
	beq	.L8452
.L8451:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r1, r3
	bcc	.L8451
.L8452:
	mov	r9, #0
.L8466:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8469:
	ldr	r9, [sp, #8]
	b	.L8466
.L8472:
	ldr	r0, [r4]
	mvn	r3, #11
	mov	r10, #1
	ldr	r1, [sp, #16]
	ldr	r2, [r6, #4]
	str	r3, [sp, #8]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r9, [r4, #8]
	cmp	r9, #0
	bne	.L8448
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mov	r6, r9
	ldr	r9, [sp, #8]
	bfi	r3, r6, #5, #1
	strb	r3, [r4, #144]
	b	.L8466
.L8473:
	ldr	r0, [r4]
	mvn	r3, #11
	ldr	r1, [sp, #20]
	ldr	r2, [r6, #4]
	str	r3, [sp, #8]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L8439
.L8475:
	.align	2
.L8474:
	.word	bulk_out_complete-(.LPIC1953+8)
	.word	bulk_in_complete-(.LPIC1952+8)
	.word	.LC504-(.LPIC1950+8)
	.word	.LC504-(.LPIC1951+8)
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r8, [sp, #16]
	add	r8, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #4]
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L8477
	ldr	r3, .L8524
	mov	r7, #0
.LPIC1954:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L8495:
	ldr	r3, [r6, #12]
	add	r7, r7, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8498
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8498
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #324]
	mov	r3, r3, asl #1
.L8478:
	cmp	r7, r3
	bgt	.L8477
	mov	r0, r5
	sub	r9, r5, #36
	bl	__list_del_entry(PLT)
	mov	r1, r4
	mov	r0, r8
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8479
	ldr	r10, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	beq	.L8519
	ldmib	r6, {r1, r3}
	ldrh	r2, [r10, #20]
	ldr	r0, [r6, #72]
	ldr	r4, [r1, #100]
	ldr	r3, [r3, #356]
	cmp	r0, #0
	add	r3, r3, r4
	add	r3, r3, #33
	add	r3, r3, r2
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	rsb	r4, r4, r3
	ldrb	r3, [r1, #104]	@ zero_extendqisi2
	mulne	r4, r0, r4
	cmp	r3, #0
	beq	.L8483
	ldr	r3, [r1, #108]
	cmp	r4, r3
	movcc	r4, r3
.L8483:
	mvn	r3, #0
	mov	r2, #0
	ldr	r1, [sp, #4]
	add	r0, r4, #2
	bl	__alloc_skb(PLT)
	subs	fp, r0, #0
	beq	.L8487
	ldr	lr, [fp, #172]
	mov	r1, r9
	mov	r0, r10
	ldr	r9, [fp, #160]
	ldr	r2, [sp, #4]
	add	lr, lr, #2
	add	r9, r9, #2
	str	lr, [fp, #172]
	str	r9, [fp, #160]
	str	r4, [r5, #-32]
	str	lr, [r5, #-36]
	str	fp, [r5, #-4]
	ldr	ip, [r10, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmn	r0, #12
	mov	r4, r0
	beq	.L8487
	cmp	r0, #0
	bne	.L8521
.L8490:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r5, r3
	bne	.L8495
.L8477:
	mov	r1, r4
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8498:
	mov	r3, #2
	b	.L8478
.L8487:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8522
.L8489:
	cmp	fp, #0
	beq	.L8481
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
.L8481:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r2, [r6, #28]
	mov	r0, r5
	ldr	r1, [sp, #8]
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8523
.L8476:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8522:
	ldr	r1, .L8524+4
	add	r2, r6, #88
	mov	r0, #4
.LPIC1959:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	bl	queue_work_on(PLT)
	cmp	r0, #0
	bne	.L8489
	mov	r2, r0
	ldr	r0, .L8524+8
	ldr	r1, [r6, #8]
.LPIC1956:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8489
.L8479:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r6, #120
	b	.L8481
.L8521:
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	cmp	r4, #0
	bge	.L8490
.L8519:
	add	r4, r6, #120
	b	.L8481
.L8523:
	ldr	r3, .L8524+12
	add	r2, r6, #88
	mov	r0, #4
.LPIC1958:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	subs	r2, r0, #0
	bne	.L8476
	ldr	r0, .L8524+16
	ldr	r1, [r6, #8]
.LPIC1957:
	add	r0, pc, r0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L8525:
	.align	2
.L8524:
	.word	.LANCHOR2-(.LPIC1954+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1959+8))
	.word	.LC402-(.LPIC1956+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1958+8))
	.word	.LC402-(.LPIC1957+8)
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	sub	r5, r4, #88
	str	lr, [sp, #12]
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8526
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L8535
.L8526:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8535:
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #208
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill(PLT)
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L8560
	mov	r5, r0
	strd	r8, [sp, #16]
	ldr	r9, .L8560+4
	ldr	r8, .L8560+8
	strd	r10, [sp, #24]
	ldr	r10, .L8560+12
	strd	r6, [sp, #8]
	sub	r7, r0, #52
	str	lr, [sp, #32]
.LPIC1965:
	add	r3, pc, r3
	.pad #12
	sub	sp, sp, #12
.LPIC1964:
	add	r9, pc, r9
	mov	r6, #0
.LPIC1960:
	add	r8, pc, r8
	add	r9, r9, #3648
	str	r3, [sp, #4]
	add	r8, r8, #3648
.LPIC1967:
	add	r10, pc, r10
	add	r9, r9, #4
	add	r8, r8, #4
	b	.L8538
.L8558:
	ldr	fp, [r4, #80]
	movw	r3, #1500
	sub	r1, fp, #14
	cmp	r1, r3
	bls	.L8542
	ldr	r3, [r5, #-100]
	ldr	r1, .L8560+16
	ldr	r0, [r3]
.LPIC1966:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L8545
	cmp	fp, #13
	bls	.L8543
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bhi	.L8543
	ldr	r1, .L8560+20
	mov	r2, fp
	ldr	r0, .L8560+24
.LPIC1962:
	add	r1, pc, r1
	add	r1, r1, #3648
.LPIC1963:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L8542:
	ldr	r1, [r5, #-96]
	mov	r0, r4
	bl	eth_type_trans(PLT)
	strh	r0, [r4, #102]	@ movhi
	ldr	r2, [r5, #-96]
	mov	r0, r4
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r5, #-96]
	ldr	r1, [r4, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni(PLT)
	mov	r6, r0
.L8538:
	mov	r0, r7
	bl	skb_dequeue(PLT)
	subs	r4, r0, #0
	beq	.L8557
	cmp	r6, #0
	bge	.L8558
	ldr	r3, [r5, #-100]
	mov	r1, r10
	ldr	r0, [r3]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L8545
	ldr	fp, [r4, #80]
.L8543:
	ldr	r0, .L8560+28
	mov	r2, fp
	mov	r1, r8
.LPIC1961:
	add	r0, pc, r0
	bl	printk(PLT)
.L8545:
	ldr	r2, [r5, #-96]
	mov	r1, r9
	ldr	r0, [sp, #4]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r5, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r4, #80]
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	b	.L8538
.L8557:
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L8559
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8559:
	sub	r0, r5, #104
	mov	r1, #208
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill(PLT)
.L8561:
	.align	2
.L8560:
	.word	.LC507-(.LPIC1965+8)
	.word	.LANCHOR3-(.LPIC1964+8)
	.word	.LANCHOR3-(.LPIC1960+8)
	.word	.LC508-(.LPIC1967+8)
	.word	.LC508-(.LPIC1966+8)
	.word	.LANCHOR3-(.LPIC1962+8)
	.word	.LC506-(.LPIC1963+8)
	.word	.LC505-(.LPIC1961+8)
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1152
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r5, [r3, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L8577
.L8564:
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L8566
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L8566
	blx	r2
.L8566:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8577:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill(PLT)
	ldr	r3, [r4, #1160]
	str	r5, [r4, #1188]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8564
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L8564
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L8674
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r5, .L8674+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	ip, [r2]	@ zero_extendqisi2
.LPIC1968:
	add	r3, pc, r3
	.pad #4
	sub	sp, sp, #4
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
.LPIC1969:
	add	r5, pc, r5
	ldrh	r8, [r2, #4]	@ unaligned
	ldrh	r7, [r2, #2]	@ unaligned
	cmp	ip, #64
	ldrh	r9, [r2, #6]	@ unaligned
	ldr	r6, [r3, #2500]
	beq	.L8667
	cmp	ip, #192
	cmpeq	r1, #51
	beq	.L8668
.L8631:
	mvn	r5, #94
.L8656:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8667:
	cmp	r1, #53
	beq	.L8669
	cmp	r1, #52
	beq	.L8670
	cmp	r8, #0
	cmpeq	r1, #58
	bne	.L8583
	cmp	r9, #0
	streq	r7, [r6, #1648]
	beq	.L8581
.L8584:
	cmp	r1, #56
	beq	.L8671
	cmp	r1, #57
	bne	.L8631
	add	r8, r6, #88
	add	r6, r6, #1760
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #8]
	add	r6, r6, #8
	cmp	r6, r5
	bne	.L8626
	b	.L8621
.L8624:
	ldr	r5, [r5]
	cmp	r6, r5
	beq	.L8621
.L8626:
	ldr	r3, [r5, #16]
	cmp	r7, r3
	bne	.L8624
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L8666
	ldr	r2, [r4, #4]
	ldr	r3, .L8674+8
	str	r5, [r2, #32]
	ldr	r2, [r4, #4]
.LPIC1972:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8581
.L8670:
	str	r8, [r6, #1640]
	ldr	r2, [r4]
	ldr	r3, .L8674+12
	ldr	r2, [r2, #4]
.LPIC1970:
	add	r3, pc, r3
	str	r6, [r2]
	ldr	r2, [r4, #4]
	str	r3, [r2, #28]
.L8581:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r9, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L8656
	ldr	r2, .L8674+16
	ldr	r0, [r4]
	ldr	r1, .L8674+20
.LPIC1973:
	add	r2, pc, r2
	add	r2, r2, #3664
	add	r0, r0, #32
.LPIC1974:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	b	.L8656
.L8583:
	cmp	r1, #54
	beq	.L8672
	cmp	r1, #55
	bne	.L8584
	add	r8, r6, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #1768]
	add	ip, r6, #1760
	mov	r9, r0
	add	ip, ip, #8
	cmp	ip, r3
	mov	r10, r3
	bne	.L8606
	b	.L8601
.L8604:
	ldr	r3, [r3]
	cmp	ip, r3
	mov	r10, r3
	beq	.L8601
.L8606:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8604
	cmp	r3, #0
	beq	.L8601
.L8605:
	mov	r0, r10
	bl	__list_del_entry(PLT)
	mov	r1, r6
	mov	r0, r10
	ldr	r2, [r1, #1784]!
	bl	__list_add(PLT)
	mov	r1, r9
	mov	r0, r8
.L8665:
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L8674+24
	add	r2, r6, #1744
	mov	r0, #4
	add	r2, r2, #8
	mov	r9, #0
	ldr	r3, [r5, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L8581
.L8668:
	ldr	r3, [r4, #4]
	mov	r9, #2
	mov	r1, #256
	add	r0, r6, #101
	ldr	r3, [r3]
	strh	r9, [r3]	@ movhi
	bl	__memzero(PLT)
	add	r0, r6, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r6, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r6, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r6, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	add	r0, r6, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	mov	r3, #0
	str	r3, [r6, #1644]
	str	r3, [r6, #1648]
	b	.L8581
.L8669:
	mov	r3, #1
	mov	r0, #200
	mov	r9, #0
	str	r3, [r6, #1644]
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L8674+24
	add	r2, r6, #1696
	mov	r3, r0
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [r5, r1]
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L8581
.L8672:
	cmp	r8, #0
	beq	.L8666
	add	r9, r6, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #1768]
	add	r1, r6, #1760
	mov	r10, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	fp, r3
	bne	.L8592
	b	.L8587
.L8590:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	fp, r3
	beq	.L8587
.L8592:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8590
	cmp	r3, #0
	beq	.L8587
.L8591:
	mov	r0, fp
	bl	__list_del_entry(PLT)
	mov	r1, r6
	mov	r0, fp
	ldr	r2, [r1, #1784]!
	bl	__list_add(PLT)
.L8593:
	ldr	r3, .L8674+28
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8629
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	fp, r0, #0
	beq	.L8599
.L8598:
	movw	r1, #32800
	mov	r0, r8
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [fp, #20]
	beq	.L8673
	mov	r1, r6
	str	r6, [fp, #12]
	mov	r0, fp
	str	r7, [fp, #16]
	str	r8, [fp, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add(PLT)
	mov	r1, r10
	mov	r0, r9
	b	.L8665
.L8671:
	add	r10, r6, #88
	add	r6, r6, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6]
	cmp	r6, r5
	bne	.L8619
	b	.L8613
.L8616:
	ldr	r5, [r5]
	cmp	r6, r5
	beq	.L8613
.L8619:
	ldr	r3, [r5, #16]
	cmp	r7, r3
	bne	.L8616
	mov	r1, r0
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L8666
	ldr	r3, [r5, #28]
	cmp	r8, r3
	bne	.L8666
	ldr	r3, [r5, #24]
	add	r8, r8, r9
	cmp	r8, r3
	bgt	.L8666
	ldr	r2, [r4, #4]
	ldr	r3, .L8674+32
	str	r5, [r2, #32]
	ldr	r2, [r4, #4]
.LPIC1971:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8581
.L8613:
	mov	r1, r0
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8666:
	mvn	r5, #21
	b	.L8656
.L8621:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r5, #21
	b	.L8656
.L8629:
	mov	fp, #16
	b	.L8598
.L8587:
	ldr	fp, [r6, #1776]
	add	r2, r6, #1776
	cmp	r2, fp
	bne	.L8597
	b	.L8593
.L8596:
	ldr	fp, [fp]
	cmp	r2, fp
	beq	.L8593
.L8597:
	ldr	r3, [fp, #16]
	cmp	r7, r3
	bne	.L8596
	cmp	fp, #0
	beq	.L8593
	b	.L8591
.L8601:
	ldr	r3, [r6, #1776]
	add	r1, r6, #1776
	cmp	r1, r3
	mov	r10, r3
	bne	.L8611
	b	.L8607
.L8610:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r10, r3
	beq	.L8607
.L8611:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8610
	cmp	r3, #0
	bne	.L8605
.L8607:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r5, #21
	b	.L8656
.L8673:
	mov	r0, fp
	bl	kfree(PLT)
.L8618:
.L8599:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r5, #11
	b	.L8656
.L8675:
	.align	2
.L8674:
	.word	.LANCHOR1-(.LPIC1968+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1969+8)
	.word	acc_complete_send_hid_event-(.LPIC1972+8)
	.word	acc_complete_set_string-(.LPIC1970+8)
	.word	.LANCHOR3-(.LPIC1973+8)
	.word	.LC509-(.LPIC1974+8)
	.word	system_wq(GOT)
	.word	kmalloc_caches(GOT)
	.word	acc_complete_set_hid_report_desc-(.LPIC1971+8)
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r6, [r2, #24]
	bgt	.L8678
	cmn	r3, #104
	bge	.L8679
	cmn	r3, #108
	bne	.L8677
.L8679:
	ldr	r8, [r0, #92]
	cmp	r8, r4
	beq	.L8717
.L8716:
	ldr	r0, [r5]
.L8687:
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8678:
	cmp	r3, #0
	bne	.L8677
	ldr	r8, [r0, #92]
	cmp	r8, r4
	beq	.L8718
	ldr	r3, [r0, #88]
	cmp	r3, r4
	beq	.L8719
.L8677:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L8720
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8720:
	ldr	ip, [r6]
	ldr	r1, .L8721
	ldr	r3, [r5, #4]
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
.LPIC1977:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L8719:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	f_midi_transmit(PLT)
.L8717:
	ldr	r1, [r5, #48]
	ldr	r0, [r5]
	cmp	r1, #3
	bls	.L8687
	ldr	r9, .L8721+4
	add	r6, r0, #1
	rsb	r7, r0, #6
.LPIC1976:
	add	r9, pc, r9
	b	.L8689
.L8688:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r3, r1
	bcs	.L8716
.L8689:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8688
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, ip, #42
	ldrb	r2, [r3, #3684]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8688
	ldr	r3, [lr, #296]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8688
	mov	r1, r6
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8688
.L8718:
	ldr	r1, [r1, #48]
	ldr	r9, [r5]
	cmp	r1, #3
	bls	.L8677
	ldr	r10, .L8721+8
	add	r7, r9, #1
	rsb	r9, r9, #6
.LPIC1975:
	add	r10, pc, r10
	b	.L8684
.L8683:
	add	r3, r9, r7
	add	r7, r7, #4
	cmp	r3, r1
	bcs	.L8677
.L8684:
	ldrb	r3, [r7, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8683
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r10, r3
	add	r0, ip, #42
	ldrb	r2, [r3, #3684]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8683
	ldr	r3, [lr, #296]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8683
	mov	r1, r7
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8683
.L8722:
	.align	2
.L8721:
	.word	.LC510-(.LPIC1977+8)
	.word	.LANCHOR3-(.LPIC1976+8)
	.word	.LANCHOR3-(.LPIC1975+8)
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r4, fp, #112
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r4]
	add	r0, r0, #1
	strex	ip, r0, [r4]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L8724
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r4]
	sub	r2, r2, #1
	strex	r1, r2, [r4]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L8780:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8724:
	mov	r5, r2
	movw	r2, #19713
	movt	r2, 16416
	mov	r6, r1
	cmp	r1, r2
	bhi	.L8757
	mov	r2, #19712
	movt	r2, 16416
	cmp	r1, r2
	bcs	.L8726
	movw	r2, #19715
	movt	r2, 16392
	cmp	r1, r2
	bne	.L8755
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	bne	.L8739
	mov	r1, r5
	mov	r2, #8
	add	r0, sp, #16
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L8792
	ldr	r6, [sp, #16]
	cmp	r6, #28
	bhi	.L8763
	ldr	r2, [fp, #104]
	cmp	r2, #0
	beq	.L8764
	mov	r0, #1000
	add	r7, fp, #88
	bl	msecs_to_jiffies(PLT)
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [fp, #124]
	add	r8, fp, #124
	mov	r10, r0
	cmp	r8, r5
	beq	.L8742
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L8758
.L8743:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r2, r3, #8128
	ldr	r0, [r5]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds ip, r1, r6; sbcccs ip, ip, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L8793
	cmp	r6, #0
	bne	.L8794
.L8754:
	str	r6, [r5, #4]
	mov	r2, #208
	mov	r1, r5
	ldr	r0, [fp, #100]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	subs	r6, r0, #0
	beq	.L8737
	mov	r0, r7
.L8787:
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	ldr	r1, [fp, #128]
	add	r0, r5, #36
	mov	r2, r8
	bl	__list_add(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8737
.L8757:
	movw	r2, #19716
	movt	r2, 16416
	cmp	r1, r2
	bne	.L8755
.L8726:
	add	r7, fp, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L8795
	cmp	r2, #0
	bne	.L8729
	mov	r0, r7
	mvn	r6, #18
	bl	_raw_spin_unlock_irq(PLT)
.L8737:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r4]
	sub	r2, r2, #1
	strex	r1, r2, [r4]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L8780
.L8755:
	add	r7, fp, #88
	mvn	r6, #21
.L8736:
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	mvneq	r6, #124
	beq	.L8756
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #104]
.L8756:
	mov	r0, r7
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8737
.L8739:
	mov	r1, #8
	add	r0, sp, #16
	bl	__memzero(PLT)
	mvn	r6, #13
	b	.L8737
.L8729:
	mov	r2, #2
	mov	r0, r7
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #32; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	bne	.L8730
	mov	r1, r5
	mov	r2, #32
	add	r0, sp, #24
	bl	__copy_from_user(PLT)
	subs	r8, r0, #0
	bne	.L8796
	ldr	r0, [sp, #24]
	bl	fget(PLT)
	subs	r5, r0, #0
	mvneq	r6, #8
	beq	.L8736
	str	r5, [fp, #216]
	ldrd	r0, [sp, #32]
	strd	r0, [fp, #224]
	ldrd	r0, [sp, #40]
	strd	r0, [fp, #232]
#APP
@ 1028 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	movw	r2, #19716
	movt	r2, 16416
	cmp	r6, r2
	beq	.L8797
	mov	r2, #19712
	movt	r2, 16416
	cmp	r6, r2
	addeq	r2, fp, #184
	addne	r2, fp, #200
	streq	r8, [fp, #240]
.L8734:
	ldr	r1, [fp, #180]
	mov	r0, #4
	bl	queue_work_on(PLT)
	ldr	r0, [fp, #180]
	bl	flush_workqueue(PLT)
	mov	r0, r5
	bl	fput(PLT)
#APP
@ 1052 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldr	r6, [fp, #252]
	b	.L8736
.L8730:
	mov	r1, #32
	add	r0, sp, #24
	bl	__memzero(PLT)
	mvn	r6, #13
	b	.L8736
.L8792:
	mvn	r6, #13
	b	.L8737
.L8796:
	mvn	r6, #13
	b	.L8736
.L8794:
	mov	r1, r6
	bl	__memzero(PLT)
.L8753:
	mov	r0, r7
	mvn	r6, #13
	b	.L8787
.L8795:
	mov	r2, #1
	mov	r0, r7
	mvn	r6, #124
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8737
.L8793:
	mov	r2, r6
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	beq	.L8754
	b	.L8753
.L8742:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8758:
	ldr	r1, .L8799
	mov	r3, sp
	mov	r2, #0
	bic	r10, r3, #8128
	add	r3, fp, #156
	bic	r10, r10, #63
	ldr	r0, [r10, #12]
	str	r3, [sp, #4]
	add	r3, sp, #24
.LPIC1979:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #24]
	add	r2, sp, #36
	str	r3, [sp, #8]
	str	r2, [sp, #36]
	str	r2, [sp, #40]
	strd	r0, [sp, #28]
.L8747:
	ldrd	r0, [sp, #4]
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [fp, #124]
	mov	r1, r0
	cmp	r8, r2
	mov	r0, r2
	sub	r5, r2, #36
	beq	.L8744
	str	r1, [sp, #12]
	bl	list_del(PLT)
	ldr	r1, [sp, #12]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L8745
.L8759:
	ldr	r2, [r10, #12]
	mov	r0, r9
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	bne	.L8786
	bl	schedule_timeout(PLT)
	subs	r9, r0, #0
	bne	.L8747
.L8750:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [fp, #124]
	mov	r9, r0
	cmp	r8, r5
	beq	.L8798
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r0, [sp, #4]
	bl	finish_wait(PLT)
	cmp	r5, #0
	bne	.L8743
.L8788:
	mvn	r6, #61
	b	.L8737
.L8797:
	mov	r1, #1
	add	r2, fp, #184
	str	r1, [fp, #240]
	ldrh	r1, [sp, #48]
	strh	r1, [fp, #244]	@ movhi
	ldr	r1, [sp, #52]
	str	r1, [fp, #248]
	b	.L8734
.L8764:
	mvn	r6, #18
	b	.L8737
.L8763:
	mvn	r6, #21
	b	.L8737
.L8798:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8786:
	ldrd	r0, [sp, #4]
	bl	finish_wait(PLT)
	b	.L8788
.L8744:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8759
.L8745:
	cmp	r9, #0
	beq	.L8750
	ldrd	r0, [sp, #4]
	bl	finish_wait(PLT)
	b	.L8743
.L8800:
	.align	2
.L8799:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1979+8))
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r1, #44]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #84]
	beq	.L8803
	cmp	r2, #0
	beq	.L8803
	cmn	r2, #108
	beq	.L8803
	ldr	r0, [r3]
	ldr	r1, .L8832
	add	r0, r0, #32
.LPIC1980:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8803:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	ldr	r1, [r4, #136]
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #8]
	beq	.L8801
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L8831
.L8801:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8831:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #132]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L8808
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	bne	.L8809
	b	.L8808
.L8810:
	ldr	r3, [r4, #356]
	ldr	r2, [r4, #132]
	add	r3, r3, #1
	cmp	r8, r2
	str	r3, [r4, #356]
	beq	.L8808
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L8808
.L8809:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del(PLT)
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r9, #0
	beq	.L8810
	ldr	r0, [r4, #192]
	mov	r3, r9
	mov	r9, fp
	mov	fp, r3
	cmp	r0, #0
	beq	.L8811
	ldr	r3, [sp, #8]
	mov	r2, fp
	ldr	r1, .L8832+4
	ldr	r0, [r3]
.LPIC1981:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
.L8808:
	ldr	r1, [sp, #12]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8811:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L8808
.L8833:
	.align	2
.L8832:
	.word	.LC129-(.LPIC1980+8)
	.word	.LC130-(.LPIC1981+8)
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	add	r10, r4, #96
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	ip, #0
.L8835:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r5, [r10]
	mov	lr, #0
	teq	r5, #2
	strexeq lr, ip, [r10]

@ 0 "" 2
	cmp	lr, #0
	bne	.L8835
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #2
	beq	.L8867
	mov	r7, r2
	ldr	r2, [r0, #32]
	add	r5, r4, #4
	mov	r8, r0
	str	r1, [fp, #-64]
	mov	r0, r5
	tst	r2, #2048
	bne	.L8897
	bl	mutex_lock_interruptible(PLT)
	cmp	r0, #0
	blt	.L8882
.L8840:
	ldr	r2, [r4, #92]
	cmp	r2, #2
	mvnne	r9, #76
	movne	r8, #0
	beq	.L8898
.L8838:
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r9
.L8882:
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8897:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L8840
	mvn	r0, #10
	b	.L8882
.L8898:
	add	r6, r4, #116
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	ip, #0
.L8841:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r9, [r10]
	mov	r2, #0
	teq	r9, #2
	strexeq r2, ip, [r10]

@ 0 "" 2
	cmp	r2, #0
	bne	.L8841
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r9, #1
	beq	.L8843
	bcc	.L8844
	cmp	r9, #2
	mov	r8, r2
	mvneq	r9, #42
	mvnne	r9, #76
.L8845:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8838
.L8843:
	ldrsb	r1, [r4, #108]
	cmp	r1, #0
	blt	.L8899
	ldrh	r2, [r4, #114]
	mov	r0, r6
	cmp	r7, r2
	movcs	r7, r2
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	beq	.L8875
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L8900
.L8862:
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
.L8863:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r10]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r10]

@ 0 "" 2
	cmp	r1, #0
	bne	.L8863
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #2
	beq	.L8877
	ldr	r10, [r4, #28]
	mov	r0, r6
	ldrh	r2, [r4, #114]
	ldrb	r1, [r10, #26]	@ zero_extendqisi2
	cmp	r7, r2
	movcs	r2, #0
	movcc	r2, #1
	bfi	r1, r2, #1, #1
	strb	r1, [r10, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, #0
	str	r8, [r10]
	str	r7, [r10, #4]
	beq	.L8901
.L8864:
	ldr	r0, [r4]
	mov	ip, #0
	mov	r2, #32
	mov	r1, r10
	str	ip, [r4, #32]
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	subs	r9, r0, #0
	blt	.L8838
	add	r0, r4, #32
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L8902
	ldr	r9, [r4, #48]
	str	r0, [r4, #96]
	cmp	r9, #0
	ble	.L8838
	mov	r2, r7
	ldr	r0, [fp, #-64]
	mov	r1, r8
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r9, #13
	b	.L8838
.L8844:
	movw	r2, #43691
	movt	r2, 43690
	umull	r3, r7, r2, r7
	movs	r3, r7, lsr #3
	str	r3, [fp, #-72]
	beq	.L8871
	ldr	r2, [r8, #32]
	ldrh	r7, [r4, #104]
	tst	r2, #2048
	bne	.L8903
	cmp	r7, #0
	bne	.L8847
	ldr	r0, .L8911
	mov	r3, sp
	str	r7, [fp, #-56]
	bic	r1, r3, #8128
	str	r7, [fp, #-52]
	sub	r8, fp, #44
	bic	r1, r1, #63
	str	r7, [fp, #-48]
	mov	lr, #1
	str	r7, [fp, #-44]
	mov	r9, r1
	add	r3, r4, #120
	str	r7, [fp, #-40]
.LPIC1983:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	mov	r2, r8
	ldr	r1, [r1, #12]
	mov	r10, lr
	str	r3, [fp, #-68]
	str	lr, [fp, #-56]
	str	r8, [fp, #-44]
	str	r8, [fp, #-40]
	str	r0, [fp, #-48]
	str	r1, [fp, #-52]
	b	.L8851
.L8904:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldrh	r2, [r4, #104]
	cmp	r2, #0
	bne	.L8850
	ldr	r2, [fp, #-44]
.L8851:
	cmp	r2, r8
	mov	r0, r8
	ldr	r2, [fp, #-68]
	bne	.L8848
	ldr	r1, [r4, #124]
	bl	__list_add(PLT)
.L8848:
	ldr	r2, [r9, #12]
	str	r10, [r2]
#APP
@ 636 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r9, #12]
	mov	r0, r6
	ldr	r2, [r2, #4]
	ldr	r7, [r2]
	ands	r7, r7, #1
	beq	.L8904
	mov	r0, r8
	mvn	r9, #3
	bl	list_del(PLT)
	mov	r3, sp
	mov	r2, #0
	bic	r3, r3, #8128
	mov	r8, r2
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	str	r2, [r3]
	b	.L8845
.L8903:
	cmp	r7, #0
	bne	.L8847
	mov	r8, r7
	mvn	r9, #10
	b	.L8845
.L8899:
	mov	r0, r6
	str	r2, [fp, #-64]
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r7, [r4, #106]
	ldr	r2, [fp, #-64]
	cmp	r7, #0
	moveq	r8, r7
	mvneq	r9, #2
	beq	.L8838
	ldr	r0, [r4]
	mov	r1, r9
	mov	r8, r2
	mvn	r9, #50
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #24]
	blx	ip
	ldr	r2, [fp, #-64]
	str	r2, [r4, #96]
	b	.L8838
.L8867:
	mvn	r0, #42
	b	.L8882
.L8850:
	mov	r0, r8
	bl	list_del(PLT)
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #12]
	str	r7, [r2]
	ldrh	r7, [r4, #104]
.L8847:
	ldr	r3, [fp, #-72]
	mov	r10, sp
	cmp	r7, r3
	movcc	r8, r7
	movcs	r8, r3
	mov	r9, r8, asl #4
	sub	r9, r9, r8, asl #2
	add	r2, r9, #7
	cmp	r9, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r7, sp
	bne	.L8905
.L8852:
	ldrb	r2, [r4, #100]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r7, #8]
	beq	.L8906
.L8853:
	cmp	r8, #1
	bls	.L8854
	ldrb	r2, [r4, #101]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r7, #20]
	beq	.L8907
.L8855:
	cmp	r8, #2
	beq	.L8854
	ldrb	r2, [r4, #102]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r7, #32]
	beq	.L8908
.L8856:
	cmp	r8, #3
	beq	.L8854
	ldrb	r2, [r4, #103]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r7, #44]
	beq	.L8909
.L8854:
	ldrh	r2, [r4, #104]
	cmp	r8, r2
	movcs	r2, #0
	strcsh	r2, [r4, #104]	@ movhi
	bcc	.L8910
.L8859:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r2, r9
	mov	r1, r7
	ldr	r0, [fp, #-64]
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mov	sp, r10
	moveq	r0, r9
	mvnne	r0, #13
	b	.L8882
.L8877:
	mvn	r9, #42
	b	.L8845
.L8905:
	mov	r1, r9
	mov	r0, sp
	bl	__memzero(PLT)
	b	.L8852
.L8871:
	mov	r8, r3
	mvn	r9, #21
	b	.L8845
.L8910:
	rsb	r2, r8, r2
	add	r1, r4, r8
	uxth	ip, r2
	add	r1, r1, #100
	add	r0, r4, #100
	mov	r2, ip
	strh	ip, [r4, #104]	@ movhi
	bl	memmove(PLT)
	b	.L8859
.L8906:
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r7]	@ unaligned
	str	r1, [r7, #4]	@ unaligned
	str	r2, [r4, #96]
	b	.L8853
.L8909:
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r7, #36]	@ unaligned
	str	r1, [r7, #40]	@ unaligned
	str	r2, [r4, #96]
	b	.L8854
.L8908:
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r7, #24]	@ unaligned
	str	r1, [r7, #28]	@ unaligned
	str	r2, [r4, #96]
	b	.L8856
.L8907:
	ldrd	r0, [r4, #108]
	mov	r2, #1
	str	r0, [r7, #12]	@ unaligned
	str	r1, [r7, #16]	@ unaligned
	str	r2, [r4, #96]
	b	.L8855
.L8900:
	mvn	r9, #11
	b	.L8838
.L8875:
	mov	r8, r7
	b	.L8862
.L8901:
	movw	r2, #47806
	movt	r2, 57005
	str	r2, [r10]
	b	.L8864
.L8902:
	ldr	r3, [r4]
	mov	r1, r10
	mvn	r9, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L8838
.L8912:
	.align	2
.L8911:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1983+8))
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.global	usb_gadget_get_string
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	bne	.L8914
	mov	r1, #4
	mov	ip, #3
	mov	r0, r1
	strb	r1, [r2]
	strb	ip, [r2, #1]
	ldrh	r1, [r3]
	strb	r1, [r2, #2]
	ldrh	r3, [r3]
	mov	r3, r3, lsr #8
	strb	r3, [r2, #3]
	bx	lr
.L8914:
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L8936
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	b	.L8934
.L8937:
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L8918
	adds	r3, r3, #8
	beq	.L8917
.L8934:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	bne	.L8937
.L8917:
	mvn	r0, #21
.L8929:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L8918:
	mov	r0, r4
	mov	r5, r2
	bl	strlen(PLT)
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s(PLT)
	cmp	r0, #0
	blt	.L8917
	add	r3, r0, #1
	mov	r2, #3
	mov	r3, r3, asl #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
	b	.L8929
.L8936:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L8945
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L8950
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L8942
.L8941:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L8951
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L8941
.L8942:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r4, r1
	bhi	.L8946
	mov	r1, ip
	mov	r2, r4
	bl	memcpy(PLT)
	mov	r0, r4
.L8939:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8951:
	mvn	r0, #1
	b	.L8939
.L8946:
	mvn	r0, #21
	b	.L8939
.L8950:
	mvn	r0, #1
	bx	lr
.L8945:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L8956
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L8960
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L8956
	mov	r7, r0
	mov	r3, r0
	b	.L8958
.L8959:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L8956
.L8958:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy(PLT)
	ldr	r1, [r6, #4]!
	rsb	r5, r4, r5
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L8959
	rsb	r0, r7, r3
.L8954:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8956:
	mvn	r0, #21
	b	.L8954
.L8960:
	mov	r0, r1
	b	.L8954
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	bl	dev_get_drvdata(PLT)
	ldrh	fp, [r10, #4]	@ unaligned
	mov	r5, r0
	ldrh	r8, [r10, #6]	@ unaligned
	ldr	r4, [r0, #4]
	ldrh	r9, [r10, #2]	@ unaligned
	uxth	r6, fp
	cmp	r8, #4096
	uxtb	r2, r6
	bhi	.L9225
	ldrb	r1, [r4, #26]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r3, .L9426
	str	r0, [r4, #4]
	bfc	r1, #1, #1
.LPIC1985:
	add	r3, pc, r3
	strb	r1, [r4, #26]
	str	r3, [r4, #28]
	ldr	r3, [r7, #4]
	str	r5, [r3]
	ldrb	r1, [r10, #1]	@ zero_extendqisi2
	cmp	r1, #11
	addls	pc, pc, r1, asl #2
	b	.L8965
.L8967:
	b	.L8966
	b	.L8968
	b	.L8965
	b	.L8968
	b	.L8965
	b	.L8965
	b	.L8969
	b	.L8965
	b	.L8970
	b	.L8971
	b	.L8972
	b	.L8973
	.p2align 1
.L8965:
	ldrb	r3, [r10]	@ zero_extendqisi2
.L8974:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L9151
	cmp	r3, #2
	bne	.L9404
	ldr	ip, [r5, #12]
	and	r3, r6, #128
	and	r6, r6, #15
	orr	r6, r6, r3, lsr #3
	mov	r2, ip
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r0, r3, #72
	beq	.L9153
	ldr	r1, [r3, #8]
	sxtb	r3, r6
	mov	r1, r1, lsr r3
	tst	r1, #1
	bne	.L9156
	mov	r1, #1
	mov	r1, r1, asl r3
	b	.L9157
.L9158:
	ldr	r3, [r3, #8]
	tst	r1, r3
	bne	.L9156
.L9157:
	ldr	r3, [r0, #72]
	cmp	r2, r3
	sub	r0, r3, #72
	bne	.L9158
.L9153:
	cmp	ip, #0
	beq	.L9225
.L9184:
	ldr	r3, [ip, #16]
	cmp	r3, #0
	beq	.L9225
	mov	r1, r10
	mov	r0, ip
	blx	r3
	mov	r6, r0
.L9159:
	movw	r3, #32767
	cmp	r6, r3
	bne	.L9263
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
	b	.L9263
.L8981:
	ldr	r2, [r7, #20]
	cmp	r2, #2
	bls	.L9225
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bls	.L8978
.L9225:
	mvn	r6, #94
.L9263:
	mov	r0, r6
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9151:
	ldr	ip, [r5, #12]
	clz	r3, ip
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9153
	add	r2, r2, #12
	ldr	r0, [ip, r2, asl #2]
	cmp	r0, #0
	beq	.L9184
.L9154:
	ldr	r3, [r0, #52]
	cmp	r3, #0
	beq	.L9153
	mov	r1, r10
	blx	r3
	mov	r6, r0
	b	.L9159
.L9404:
	ldr	ip, [r5, #12]
	b	.L9153
.L8973:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L8974
	ldr	r1, [r5, #12]
	clz	r3, r1
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9225
	add	r2, r2, #12
	ldr	r0, [r1, r2, asl #2]
	cmp	r0, #0
	beq	.L9225
	cmp	r9, #0
	beq	.L9137
	ldr	r3, [r0, #40]
	cmp	r3, #0
	beq	.L9225
.L9138:
	mov	r1, r6
	mov	r2, r9
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L9405
.L9036:
	movw	r3, #32767
	subs	r2, r6, r3
	movne	r2, #1
	cmp	r6, #0
	movlt	r2, #0
	cmp	r2, #0
	bne	.L9181
	rsb	r3, r3, r6
	cmp	r8, #0
	clz	r3, r3
	mov	r3, r3, lsr #5
	moveq	r3, #0
.L9171:
	cmp	r3, #0
	beq	.L9263
	cmp	r5, #0
	movweq	r6, #32767
	beq	.L9263
	ldr	r3, .L9426+4
	movw	r1, #1500
	movw	r6, #32767
	ldr	r2, .L9426+8
	ldr	r0, .L9426+12
.LPIC2009:
	add	r3, pc, r3
	add	r3, r3, #3712
.LPIC2010:
	add	r2, pc, r2
.LPIC2011:
	add	r0, pc, r0
	add	r3, r3, #12
	bl	warn_slowpath_fmt(PLT)
	b	.L9263
.L8971:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8974
	add	r3, r5, #60
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #12]
	ldr	fp, [r5]
	cmp	r3, #0
	beq	.L9103
	ldrb	r3, [r3, #20]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L9406
	cmp	r9, #0
	beq	.L9407
.L9173:
	mov	r6, r5
	ldr	r10, [r6, #36]!
	sub	r10, r10, #28
.L9106:
	add	r3, r10, #28
	mov	r0, r9
	cmp	r3, r6
	beq	.L9408
	ldrb	r3, [r10, #20]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L9110
	bl	check_config(PLT)
	cmp	r0, #0
	bne	.L9110
	ldr	r10, [r10, #28]
	sub	r10, r10, #28
	b	.L9106
.L8972:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #129
	bne	.L8974
	ldr	r1, [r5, #12]
	clz	r3, r1
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9225
	add	r2, r2, #12
	ldr	r0, [r1, r2, asl #2]
	cmp	r0, #0
	beq	.L9225
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L9140
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L9263
	uxtb	r3, r6
.L9140:
	ldr	r2, [r4]
	adds	r9, r8, #0
	movne	r9, #1
	cmp	r9, r8
	movge	r8, #0
	movlt	r8, #1
	strb	r3, [r2]
	b	.L9149
.L8966:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L8965
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #129
	bne	.L8974
	ldr	r3, [r4]
	mov	r0, #0
	strb	r0, [r3]
	strb	r0, [r3, #1]
	ldr	r0, [r5, #12]
	clz	r3, r0
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9394
	add	r2, r2, #12
	ldr	r0, [r0, r2, asl #2]
	cmp	r0, #0
	beq	.L9394
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L9221
	blx	r3
	cmp	r0, #0
	uxtbge	r1, r0
	ubfxge	r3, r0, #8, #8
	blt	.L9394
.L9144:
	ldr	r2, [r4]
	cmp	r8, #2
	mov	r9, #2
	movle	r8, #0
	movgt	r8, #1
	strb	r1, [r2]
	strb	r3, [r2, #1]
	b	.L9149
.L8968:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L8965
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L8974
	cmp	r9, #0
	bne	.L9225
	ldr	r1, [r5, #12]
	clz	r3, r1
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9225
	add	r2, r2, #12
	ldr	r0, [r1, r2, asl #2]
	cmp	r0, #0
	beq	.L9225
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L9139
	mov	r1, r6, lsr #8
	blx	r3
	subs	r6, r0, #0
	bge	.L9036
	ldr	r0, [r5]
	adds	r8, r8, #0
	mov	r2, r6
	ldr	r1, .L9426+16
	movne	r8, #1
	add	r0, r0, #32
.LPIC2008:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9149
.L8969:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L8974
	mov	r3, r9, lsr #8
	sub	r2, r3, #1
	cmp	r2, #14
	addls	pc, pc, r2, asl #2
	b	.L9225
.L8977:
	b	.L8976
	b	.L8978
	b	.L8979
	b	.L9225
	b	.L9225
	b	.L8980
	b	.L8981
	b	.L9225
	b	.L9225
	b	.L9225
	b	.L9225
	b	.L9225
	b	.L9225
	b	.L9225
	b	.L8982
	.p2align 1
.L8970:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L8974
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L9135
	ldr	r5, [r4]
	bl	get_config_number(PLT)
	add	r0, r0, #1
	strb	r0, [r5]
.L9136:
	adds	r9, r8, #0
	movne	r9, #1
	cmp	r9, r8
	movge	r8, #0
	movlt	r8, #1
.L9149:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r9, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r3, r8, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	movlt	r3, #0
	strlt	r3, [r4, #44]
	b	.L9263
.L9156:
	cmp	r0, #0
	bne	.L9154
	b	.L9153
.L8978:
	mov	r0, r8
	str	r3, [sp, #16]
	bl	set_config_mode(PLT)
	ldr	r2, [r5]
	ldr	r3, [r2, #16]
	cmp	r3, #5
	str	r3, [sp, #12]
	ldr	r3, [sp, #16]
	beq	.L9012
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movls	r2, #0
	strls	r2, [sp, #12]
	bls	.L9012
	ldr	r2, [sp, #12]
	cmp	r3, #7
	sub	r2, r2, #3
	clz	r2, r2
	mov	r2, r2, lsr #5
	eoreq	r2, r2, #1
	cmp	r2, #0
	moveq	r2, #0
	movne	r2, #3
	str	r2, [sp, #12]
.L9012:
	uxtb	r0, r9
	str	r3, [sp, #16]
	bl	set_config_number(PLT)
	mov	r2, r5
	ldr	r3, [sp, #16]
	ldr	r9, [r2, #36]!
	cmp	r2, r9
	sub	r9, r9, #28
	beq	.L9070
	ldr	r1, [sp, #12]
	cmp	r1, #3
	beq	.L9034
	cmp	r1, #5
	bne	.L9327
.L9324:
	ldrb	r1, [r9, #45]	@ zero_extendqisi2
	tst	r1, #1
	beq	.L9316
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9377
.L9316:
	ldr	r9, [r9, #28]
	cmp	r2, r9
	sub	r9, r9, #28
	bne	.L9324
.L9070:
	mvn	r6, #21
	b	.L9263
.L9327:
	ldrb	r1, [r9, #45]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L9322
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9377
.L9322:
	ldr	r9, [r9, #28]
	cmp	r2, r9
	sub	r9, r9, #28
	bne	.L9327
	b	.L9070
.L9034:
	ldrb	r1, [r9, #45]	@ zero_extendqisi2
	tst	r1, #2
	beq	.L9019
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9377
.L9019:
	ldr	r9, [r9, #28]
	cmp	r2, r9
	sub	r9, r9, #28
	bne	.L9034
	b	.L9070
.L8976:
	ldr	r3, [r5]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8983
	ldr	r2, [r3, #16]
	mov	r9, r5
	ldr	r6, [r9, #36]!
	cmp	r2, #3
	beq	.L8984
	cmp	r9, r6
	sub	r6, r6, #28
	beq	.L9187
	cmp	r2, #5
	beq	.L8986
.L9176:
	mov	r3, #0
.L8988:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L8987
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8987:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8988
.L8989:
	ldr	r2, [r5]
	uxtb	r3, r3
.L8985:
	strb	r3, [r5, #34]
	ldr	r2, [r2, #4]
	mov	r3, #2
	ldrh	r2, [r2, #20]
	str	r3, [r5, #64]
	strb	r2, [r5, #24]
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L8994
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bls	.L8995
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r5, #19]
	strb	r1, [r5, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
.L8996:
	cmp	r8, #17
	movls	r9, r8
	movls	r8, #0
	bls	.L8998
	cmp	r8, #18
	mov	r9, #18
	movle	r8, #0
	movgt	r8, #1
.L8998:
	add	r1, r5, #17
	mov	r2, r9
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r0, .L9426+20
.LPIC1986:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9149
.L8982:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L9098
	ldrb	r3, [r7, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9225
.L9098:
	ldr	r6, [r5, #4]
	mov	r3, #0
	mov	r1, #5
	mov	ip, #15
	mov	r10, #12
	mov	r2, #1
	mov	r9, #7
	mov	r0, #2
	mov	lr, #16
	ldr	r6, [r6]
	strb	r1, [r6, #2]
	strb	r3, [r6, #3]
	strb	r3, [r6, #4]
	strb	r1, [r6]
	strb	ip, [r6, #1]
	ldr	r1, [r5, #4]
	ldr	r1, [r1]
	strh	r10, [r6, #2]	@ movhi
	strb	r2, [r6, #4]
	strb	r3, [r1, #8]
	strb	r3, [r1, #9]
	strb	r3, [r1, #10]
	strb	r3, [r1, #11]
	strb	r9, [r1, #5]
	strb	r0, [r1, #7]
	strb	lr, [r1, #6]
	ldr	r1, [r5]
	ldr	r1, [r1, #20]
	cmp	r1, #4
	bls	.L9099
	ldr	r9, [r5, #4]
	mov	fp, #10
	ldrh	r1, [r6, #2]	@ unaligned
	ldrb	r0, [r6, #4]	@ zero_extendqisi2
	ldr	r10, [r9]
	add	r9, r1, fp
	add	r0, r0, r2
	strh	r9, [r6, #2]	@ movhi
	add	r9, r10, r1
	strb	r0, [r6, #4]
	strb	fp, [r10, r1]
	strb	r3, [r9, #3]
	strb	r3, [r9, #5]
	mov	r3, #3
	strb	lr, [r9, #1]
	strb	ip, [r9, #4]
	strb	r2, [r9, #6]
	strb	r3, [r9, #2]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L9100
	add	r0, sp, #56
	blx	r3
	ldrb	r2, [sp, #56]	@ zero_extendqisi2
	ldrh	r3, [sp, #58]
.L9101:
	strb	r2, [r9, #7]
	strh	r3, [r9, #8]	@ unaligned
.L9099:
	ldrh	r3, [r6, #2]	@ unaligned
	cmp	r8, r3
	movcc	r6, r8
	movcs	r6, r3
	b	.L9036
.L8980:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L9225
	ldr	r3, [r7, #16]
	cmp	r3, #4
	bhi	.L9225
	ldr	r1, [r5, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r10, [r1]
	strb	r2, [r10]
	strb	r3, [r10, #1]
	ldrh	r3, [r5, #19]	@ unaligned
	strh	r3, [r10, #2]	@ unaligned
	ldrb	r3, [r5, #21]	@ zero_extendqisi2
	strb	r3, [r10, #4]
	ldrb	r3, [r5, #22]	@ zero_extendqisi2
	strb	r3, [r10, #5]
	ldrb	r3, [r5, #23]	@ zero_extendqisi2
	strb	r3, [r10, #6]
	ldr	r3, [r5]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r10, #7]
	ldr	r3, [r5]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L9000
	ldr	r3, [r3, #16]
	ldr	r6, [r5, #36]!
	cmp	r3, #3
	beq	.L9001
	cmp	r5, r6
	sub	r6, r6, #28
	beq	.L9190
	cmp	r3, #5
	beq	.L9003
	mov	r3, #0
.L9009:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L9008
	bl	count_multi_config(PLT)
	mov	r3, r0
.L9008:
	ldr	r6, [r6, #28]
	cmp	r5, r6
	sub	r6, r6, #28
	bne	.L9009
.L9002:
	cmp	r8, #10
	mov	r2, #0
	strb	r3, [r10, #8]
	movlt	r9, r8
	movge	r9, #10
	cmp	r8, r9
	strb	r2, [r10, #9]
	movle	r8, #0
	movgt	r8, #1
	b	.L9149
.L8979:
	mov	r0, r8
	bl	set_string_mode(PLT)
	ands	r3, r9, #255
	ldr	r9, [r4]
	str	r3, [sp, #12]
	beq	.L9409
	ldrb	r2, [r5, #49]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9410
	ldrb	r2, [r5, #50]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9411
	ldrb	r2, [r5, #51]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9412
.L9076:
	ldr	r2, .L9426+24
.LPIC1995:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r10, [r2, #16]
	cmp	r10, #0
	subne	r10, r10, #4
	beq	.L9083
.L9080:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L9083
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L9080
	mov	r2, r9
	ldr	r1, [sp, #12]
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9080
.L9392:
	mov	r6, r0
.L9077:
	uxth	r6, r6
	cmp	r8, r6
	bcs	.L9036
.L9393:
	mov	r9, r8
	mov	r8, #0
	b	.L9149
.L9394:
	cmp	r8, #2
	mov	r9, #2
	movle	r8, #0
	movgt	r8, #1
	b	.L9149
.L9135:
	ldr	r2, [r4]
	strb	r3, [r2]
	b	.L9136
.L9137:
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L9139
	ldr	r3, [r0, #40]
	b	.L9138
.L9405:
	ldr	r2, [r5, #56]
	adds	r3, r8, #0
	movne	r3, #1
	add	r2, r2, #1
	str	r2, [r5, #56]
	b	.L9171
.L8983:
	mov	r9, r5
	ldr	r6, [r9, #36]!
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L9176
.L9187:
	mov	r2, r3
	mov	r3, #0
	b	.L8985
.L9377:
	ldr	r1, [r5, #4]
	mov	r2, #9
	ldr	fp, [r1]
	strb	r3, [fp, #1]
	add	r3, fp, r2
	strb	r2, [fp]
	str	r3, [sp, #16]
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	strb	r3, [fp, #4]
	bl	get_config_number(PLT)
	add	r0, r0, #1
	strb	r0, [fp, #5]
	ldrb	r3, [r9, #21]	@ zero_extendqisi2
	strb	r3, [fp, #6]
	ldrb	r3, [r9, #22]	@ zero_extendqisi2
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [fp, #7]
	ldrb	r3, [r9, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9022
	ldr	r2, [r9, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L9022:
	strb	r3, [fp, #8]
	ldr	r2, [r9, #8]
	cmp	r2, #0
	beq	.L9196
	ldr	r10, [sp, #16]
	movw	r1, #4087
	mov	r0, r10
	bl	usb_descriptor_fillbuf(PLT)
	subs	r6, r0, #0
	blt	.L9263
	rsb	r3, r6, #4080
	mov	r2, r3
	add	r3, r10, r6
	str	r3, [sp, #16]
	add	r3, r2, #7
	str	r3, [sp, #20]
.L9023:
	mov	r3, r9
	ldr	ip, [r3, #36]!
	cmp	r3, ip
	sub	r10, ip, #72
	beq	.L9024
	mov	r6, r5
	mov	r5, r4
	mov	r4, r3
	b	.L9032
.L9415:
	ldr	r2, [r10, #12]
.L9029:
	cmp	r2, #0
	beq	.L9025
	ldrd	r0, [sp, #16]
	bl	usb_descriptor_fillbuf(PLT)
	subs	ip, r0, #0
	blt	.L9380
	ldr	r3, [sp, #12]
	mov	r0, r10
	str	ip, [sp, #24]
	ldr	r2, [sp, #20]
	ldr	r1, [sp, #16]
	str	r3, [sp]
	mov	r3, r9
	bl	change_conf(PLT)
	cmp	r0, #0
	ldr	ip, [sp, #24]
	blt	.L9413
	ldr	r3, [sp, #20]
	rsb	r3, ip, r3
	str	r3, [sp, #20]
	ldr	r3, [sp, #16]
	add	r3, r3, ip
	str	r3, [sp, #16]
.L9025:
	ldr	r10, [r10, #72]
	cmp	r4, r10
	sub	r10, r10, #72
	beq	.L9414
.L9032:
	ldr	r0, [r10]
	bl	is_available_function(PLT)
	cmp	r0, #0
	beq	.L9025
	ldr	r3, [sp, #12]
	cmp	r3, #3
	beq	.L9027
	cmp	r3, #5
	beq	.L9415
	ldr	r2, [r10, #16]
	b	.L9029
.L9027:
	ldr	r2, [r10, #8]
	b	.L9029
.L8994:
	ldrb	r2, [r7, #377]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8996
	mov	r2, #1
	strb	r3, [r5, #20]
	strb	r2, [r5, #19]
	b	.L8996
.L8986:
	mov	r3, #0
.L8993:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L8992
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8992:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8993
	b	.L8989
.L9414:
	mov	r4, r5
	mov	r5, r6
.L9024:
	ldr	r3, [sp, #16]
	mov	r0, r9
	mov	r1, fp
	rsb	r6, fp, r3
	bl	set_interface_count(PLT)
	uxth	r3, r6
	cmp	r6, #0
	strh	r3, [fp, #2]	@ unaligned
	blt	.L9263
	cmp	r8, r3
	bcc	.L9393
	mov	r6, r3
	b	.L9036
.L9083:
	mov	r3, r5
	ldr	r2, [r3, #36]!
	str	r3, [sp, #28]
	cmp	r3, r2
	sub	r3, r2, #28
	str	r3, [sp, #16]
	beq	.L9070
	ldr	fp, [sp, #12]
	strd	r4, [sp, #20]
	mov	r5, r6
	ldr	r3, [sp, #16]
.L9091:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	subne	r4, r4, #4
	beq	.L9090
.L9087:
	ldr	r0, [r4, #4]!
	cmp	r0, #0
	beq	.L9090
	ldrh	r3, [r0]
	cmp	r3, r5
	bne	.L9087
	mov	r2, r9
	mov	r1, fp
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9087
.L9206:
	ldrd	r4, [sp, #20]
	b	.L9392
.L9090:
	ldr	r4, [sp, #16]
	ldr	r10, [r4, #36]!
	cmp	r4, r10
	sub	r10, r10, #72
	beq	.L9086
.L9094:
	ldr	r6, [r10, #4]
	cmp	r6, #0
	subne	r6, r6, #4
	beq	.L9092
.L9093:
	ldr	r0, [r6, #4]!
	cmp	r0, #0
	beq	.L9092
	ldrh	r3, [r0]
	cmp	r3, r5
	bne	.L9093
	mov	r2, r9
	mov	r1, fp
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9093
	b	.L9206
.L9092:
	ldr	r10, [r10, #72]
	cmp	r4, r10
	sub	r10, r10, #72
	bne	.L9094
.L9086:
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #28]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #16]
	bne	.L9091
	b	.L9070
.L8995:
	mov	r2, #16
	strb	r3, [r5, #20]
	strb	r2, [r5, #19]
	b	.L8996
.L9221:
	mov	r3, r1
	b	.L9144
.L9139:
	adds	r8, r8, #0
	movne	r8, #1
	b	.L9149
.L9409:
	mov	r1, #256
	mov	r0, r9
	bl	__memzero(PLT)
	ldr	r2, .L9426+28
	mov	r1, #3
	strb	r1, [r9, #1]
.LPIC1989:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r6, [r2, #16]
	cmp	r6, #0
	beq	.L9041
	ldr	r2, [r6]
	add	lr, r9, #2
	cmp	r2, #0
	beq	.L9041
	add	ip, r9, #254
.L9047:
	ldrh	r3, [r9, #2]
	ldrh	r1, [r2]
	cmp	r3, #0
	beq	.L9198
	cmp	lr, ip
	bcs	.L9198
	cmp	r1, r3
	beq	.L9043
	mov	r3, lr
	b	.L9045
.L9416:
	cmp	r3, ip
	bcs	.L9042
	cmp	r1, r2
	beq	.L9043
.L9045:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9416
.L9042:
	strh	r1, [r3]	@ movhi
.L9043:
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L9047
.L9041:
	mov	r3, r5
	ldr	r2, [r3, #36]!
	str	r3, [sp, #16]
	cmp	r3, r2
	sub	r3, r2, #28
	str	r3, [sp, #12]
	beq	.L9040
	mov	r3, r7
	add	fp, r9, #2
	str	r4, [sp, #20]
	add	r10, r9, #254
	mov	r7, r5
	mov	r5, r9
	mov	r9, r3
	ldr	r3, [sp, #12]
.L9058:
	ldr	r0, [r3, #4]
	cmp	r0, #0
	beq	.L9051
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L9051
.L9057:
	ldrh	r2, [r5, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L9200
	cmp	fp, r10
	bcs	.L9200
	cmp	r1, r2
	beq	.L9053
	mov	r3, fp
	b	.L9055
.L9417:
	cmp	r3, r10
	bcs	.L9052
	cmp	r1, r2
	beq	.L9053
.L9055:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9417
.L9052:
	strh	r1, [r3]	@ movhi
.L9053:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L9057
.L9051:
	ldr	r6, [sp, #12]
	ldr	r1, [r6, #36]!
	cmp	r6, r1
	sub	r4, r1, #72
	beq	.L9050
.L9060:
	ldr	r0, [r4]
	bl	is_available_function(PLT)
	cmp	r0, #0
	beq	.L9061
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L9061
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L9061
.L9067:
	ldrh	r2, [r5, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L9202
	cmp	fp, r10
	bcs	.L9202
	cmp	r1, r2
	beq	.L9063
	mov	r3, fp
	b	.L9065
.L9427:
	.align	2
.L9426:
	.word	composite_setup_complete-(.LPIC1985+8)
	.word	.LANCHOR3-(.LPIC2009+8)
	.word	.LC521-(.LPIC2010+8)
	.word	.LC383-(.LPIC2011+8)
	.word	.LC520-(.LPIC2008+8)
	.word	.LC511-(.LPIC1986+8)
	.word	.LANCHOR1-(.LPIC1995+8)
	.word	.LANCHOR1-(.LPIC1989+8)
	.word	.LANCHOR4-(.LPIC1990+8)
	.word	.LANCHOR4-(.LPIC1994+8)
	.word	.LANCHOR4-(.LPIC1992+8)
	.word	.LANCHOR1-(.LPIC1993+8)
	.word	.LANCHOR3-(.LPIC1987+8)
	.word	.LC512-(.LPIC1988+8)
	.word	.LANCHOR1-(.LPIC1991+8)
	.word	.LC517-(.LPIC2003+8)
	.word	.LC522-(.LPIC2013+8)
	.word	.LC513-(.LPIC2012+8)
	.word	.LC517-(.LPIC2015+8)
	.word	sec_qcom_usb_rdrv(GOT_PREL)+(.-(.LPIC2018+8))
	.word	.LANCHOR3-(.LPIC2005+8)
	.word	.LC518-(.LPIC2006+8)
	.word	.LC519-(.LPIC2007+8)
	.word	.LC514-(.LPIC1997+8)
	.word	.LC513-(.LPIC1996+8)
	.word	.LANCHOR3-(.LPIC2001+8)
	.word	.LC516-(.LPIC2002+8)
	.word	.LANCHOR3-(.LPIC1998+8)
	.word	.LC515-(.LPIC1999+8)
	.word	.LC517-(.LPIC2014+8)
	.word	.LC517-(.LPIC2017+8)
	.word	.LC517-(.LPIC2016+8)
.L9418:
	cmp	r3, r10
	bcs	.L9062
	cmp	r1, r2
	beq	.L9063
.L9065:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9418
.L9062:
	strh	r1, [r3]	@ movhi
.L9063:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L9067
.L9061:
	ldr	r4, [r4, #72]
	cmp	r6, r4
	sub	r4, r4, #72
	bne	.L9060
.L9050:
	ldr	r3, [sp, #12]
	ldr	r4, [r3, #28]
	ldr	r3, [sp, #16]
	cmp	r3, r4
	sub	r3, r4, #28
	str	r3, [sp, #12]
	bne	.L9058
	ldr	r4, [sp, #20]
	mov	r3, r9
	mov	r9, r5
	mov	r5, r7
	mov	r7, r3
.L9040:
	mov	r2, #0
.L9172:
	add	r3, r9, r2, lsl #1
	ldrh	r3, [r3, #2]	@ unaligned
	cmp	r3, #0
	bne	.L9069
	cmp	r2, #0
	beq	.L9070
.L9068:
	add	r2, r2, #1
	mov	r2, r2, asl #1
	uxtb	r2, r2
	mov	r6, r2
	strb	r2, [r9]
	b	.L9077
.L9202:
	mov	r3, fp
	b	.L9062
.L9200:
	mov	r3, fp
	b	.L9052
.L9069:
	add	r2, r2, #1
	cmp	r2, #127
	bne	.L9172
	b	.L9068
.L9410:
	ldr	r2, .L9426+32
.LPIC1990:
	add	r2, pc, r2
	ldr	r0, [r2, #3608]
	cmp	r0, #0
	beq	.L9419
.L9162:
	mvn	ip, #0
	add	r3, sp, #56
	str	r0, [sp, #60]
	mov	r2, r9
	mov	r1, #255
	strh	fp, [sp, #48]	@ movhi
	add	r0, sp, #48
	strb	ip, [sp, #56]
	str	r3, [sp, #52]
	bl	usb_gadget_get_string(PLT)
	subs	r6, r0, #0
	blt	.L9263
	b	.L9077
.L9412:
	ldr	r2, .L9426+36
.LPIC1994:
	add	r2, pc, r2
	ldr	r0, [r2, #3616]
.L9074:
	cmp	r0, #0
	beq	.L9076
	b	.L9162
.L9411:
	ldr	r2, .L9426+40
.LPIC1992:
	add	r2, pc, r2
	ldr	r0, [r2, #3612]
	cmp	r0, #0
	bne	.L9162
	ldr	r2, .L9426+44
.LPIC1993:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r0, [r2, #4]
	b	.L9074
.L9380:
	mov	r6, ip
	b	.L9263
.L9196:
	movw	r3, #4087
	str	r3, [sp, #20]
	b	.L9023
.L8984:
	cmp	r9, r6
	sub	r6, r6, #28
	movne	r3, #0
	beq	.L9187
.L8991:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L8990
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8990:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8991
	b	.L8989
.L9100:
	mov	r1, #500
	mov	r3, r1
	strh	r1, [sp, #58]	@ movhi
	b	.L9101
.L9000:
	ldr	r6, [r5, #36]!
	cmp	r5, r6
	sub	r6, r6, #28
	beq	.L9190
.L9177:
	mov	r3, #0
.L9006:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L9005
	bl	count_multi_config(PLT)
	mov	r3, r0
.L9005:
	ldr	r6, [r6, #28]
	cmp	r5, r6
	sub	r6, r6, #28
	bne	.L9006
	b	.L9002
.L9413:
	ldr	r1, .L9426+48
	mvn	r6, #21
	ldr	r0, .L9426+52
.LPIC1987:
	add	r1, pc, r1
	add	r1, r1, #3696
.LPIC1988:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L9263
.L9001:
	cmp	r5, r6
	sub	r6, r6, #28
	bne	.L9177
.L9190:
	mov	r3, #0
	b	.L9002
.L9198:
	mov	r3, lr
	b	.L9042
.L9419:
	ldr	r1, .L9426+56
.LPIC1991:
	add	r1, pc, r1
	ldr	r1, [r1, #24]
	ldr	r0, [r1, #8]
	cmp	r0, #0
	addeq	r0, r2, #3552
	addeq	r0, r0, #4
	bne	.L9162
	b	.L9074
.L9425:
	mov	r4, r7
	ldr	r7, [sp, #44]
.L9129:
	ldr	r3, [r4, #40]
	mov	r0, r4
	mov	r2, #0
	ldr	r1, [sp, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9420
	movw	r3, #32767
	cmp	r0, r3
	bne	.L9130
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
.L9130:
	ldr	r3, [sp, #16]
	add	r3, r3, #1
	cmp	r3, #16
	str	r3, [sp, #16]
	bne	.L9131
.L9115:
	ldrb	r1, [r10, #23]	@ zero_extendqisi2
	mov	r6, r0
	ldr	r4, [sp, #20]
	cmp	r1, #0
	ldrne	r3, [r5, #64]
	mulne	r1, r3, r1
	moveq	r1, #500
.L9132:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9168
	mov	r0, fp
	blx	r3
.L9168:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L9228
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9426+60
.LPIC2003:
	add	r0, pc, r0
	bl	printk(PLT)
	cmp	r6, #0
	bne	.L9133
.L9170:
	cmp	r9, #0
	beq	.L9134
	sub	r0, r9, #1
	bl	set_config_number(PLT)
.L9134:
	ldr	r3, [r7, #16]
	cmp	r3, #5
	movne	r6, #0
	bne	.L9181
	bl	get_host_os_type(PLT)
	cmp	r0, #0
	mov	r6, #0
	beq	.L9182
.L9181:
	cmp	r6, r8
	mov	r9, r6
	movge	r8, #0
	movlt	r8, #1
	b	.L9149
.L9003:
	mov	r3, #0
.L9011:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L9010
	bl	count_multi_config(PLT)
	mov	r3, r0
.L9010:
	ldr	r6, [r6, #28]
	cmp	r5, r6
	sub	r6, r6, #28
	bne	.L9011
	b	.L9002
.L9103:
	cmp	r9, #0
	bne	.L9173
.L9114:
	ldr	r6, [r5]
	ldr	r0, [fp, #16]
	bl	usb_speed_string(PLT)
	mov	r2, r0
	add	r6, r6, #32
.L9164:
	ldr	ip, .L9426+64
	mov	r3, r9
	mov	r0, r6
	ldr	r1, .L9426+68
.LPIC2013:
	add	ip, pc, ip
.LPIC2012:
	add	r1, pc, r1
	str	ip, [sp]
	bl	_dev_info(PLT)
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9421
	mov	r0, fp
	mov	r1, #100
	blx	r3
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L9422
.L9228:
	movw	r6, #32767
.L9120:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9426+72
.LPIC2015:
	add	r0, pc, r0
	bl	printk(PLT)
.L9133:
	ldr	r3, [r7, #16]
	cmp	r3, #5
	bne	.L9036
	bl	get_host_os_type(PLT)
	cmp	r0, #0
	bne	.L9036
.L9182:
	ldr	r9, .L9426+76
	mov	r1, #0
.LPIC2018:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	ldr	r0, [r9]
	bl	__gpio_set_value(PLT)
	ldr	r1, .L9426+80
	ldr	r0, .L9426+84
	ldr	r2, [r9]
.LPIC2005:
	add	r1, pc, r1
	add	r1, r1, #3712
.LPIC2006:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L9426+88
.LPIC2007:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9036
.L9110:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L9109
	mov	r0, r5
	bl	reset_config(PLT)
.L9109:
	ldr	r6, [r5]
	ldr	r0, [fp, #16]
	bl	usb_speed_string(PLT)
	cmp	r10, #0
	mov	r2, r0
	add	r6, r6, #32
	beq	.L9164
	ldr	lr, .L9426+92
	mov	r0, r6
	mov	r6, #0
	ldr	ip, [r10]
	mov	r3, r9
	ldr	r1, .L9426+96
	str	r6, [sp, #16]
.LPIC1997:
	add	lr, pc, lr
	str	ip, [sp]
	str	lr, [sp, #28]
	add	lr, r10, #44
.LPIC1996:
	add	r1, pc, r1
	str	lr, [sp, #24]
	bl	_dev_info(PLT)
	add	r2, sp, #56
	ldr	r3, .L9426+100
	mov	r0, r6
	str	r10, [r5, #12]
	str	r2, [sp, #32]
	ldr	r2, .L9426+104
	str	r4, [sp, #20]
.LPIC2001:
	add	r3, pc, r3
	add	r3, r3, #3712
.LPIC2002:
	add	r2, pc, r2
	str	r3, [sp, #36]
	str	r2, [sp, #40]
.L9131:
	ldr	r3, [sp, #24]
	ldr	r4, [r3, #4]!
	cmp	r4, #0
	str	r3, [sp, #24]
	beq	.L9115
	ldr	r2, [fp, #16]
	cmp	r2, #3
	beq	.L9117
	cmp	r2, #5
	bne	.L9368
	ldr	r0, [sp, #28]
	str	r2, [sp, #44]
	bl	power_supply_get_by_name(PLT)
	ldr	r6, [r4, #12]
	ldr	r2, [sp, #44]
	cmp	r6, #0
	beq	.L9423
	cmp	r0, #0
	beq	.L9424
	str	r2, [sp, #56]
	mov	r1, #4
	ldr	r2, [sp, #32]
	ldr	ip, [r0, #40]
	blx	ip
.L9123:
	ldr	r1, [r6]
	cmp	r1, #0
	addne	r2, r4, #80
	strne	r7, [sp, #44]
	movne	r7, r4
	movne	r4, r2
	bne	.L9128
	b	.L9129
.L9127:
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	beq	.L9425
.L9128:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9127
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	mov	r1, r4
	bic	r0, r3, #127
	and	r3, r3, #15
	orr	r0, r3, r0, lsr #3
	bl	_set_bit(PLT)
	b	.L9127
.L9117:
	ldr	r6, [r4, #8]
	b	.L9123
.L9408:
	mvn	r6, #21
.L9113:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9120
	mov	r0, fp
	mov	r1, #100
	blx	r3
	b	.L9120
.L9420:
	mov	r6, r0
	mov	r0, r5
	ldr	r4, [sp, #20]
	bl	reset_config(PLT)
	b	.L9113
.L9424:
	ldr	r2, [sp, #28]
	ldr	r1, [sp, #36]
	ldr	r0, [sp, #40]
	bl	printk(PLT)
	b	.L9123
.L9423:
	ldr	r1, .L9426+108
	mov	ip, r4
	mvn	r6, #21
	ldr	r0, .L9426+112
	ldr	r2, [ip]
	ldr	r4, [sp, #20]
.LPIC1998:
	add	r1, pc, r1
	add	r1, r1, #3712
.LPIC1999:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9120
.L9368:
	ldr	r6, [r4, #16]
	b	.L9123
.L9407:
	mov	r0, r5
	bl	reset_config(PLT)
	b	.L9114
.L9406:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9426+116
.LPIC2014:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9170
.L9422:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9426+120
.LPIC2017:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9170
.L9421:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L9228
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9426+124
.LPIC2016:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9170
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.global	usb_gadget_config_buf
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	mov	lr, r2
	str	r6, [sp, #8]
	bls	.L9431
	ldr	r5, [r0]	@ unaligned
	mov	r2, r3
	mov	r4, r1
	ldr	r3, [r0, #4]	@ unaligned
	mov	ip, r0
	sub	r1, lr, #9
	add	r0, r4, #9
	str	r5, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [ip, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	blt	.L9430
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L9431
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strh	r0, [r4, #2]	@ unaligned
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L9430:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9431:
	mvn	r0, #21
	b	.L9430
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L9440
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
.L9436:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	r3, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L9436
	add	r3, r3, #1
	mov	r4, r3, asl #2
	add	r0, r4, r0
.L9435:
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r6, r0, #0
	beq	.L9437
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L9438
.L9439:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy(PLT)
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L9439
.L9438:
	mov	r3, #0
	str	r3, [r4]
.L9437:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9440:
	mov	r0, #4
	mov	r4, r0
	b	.L9435
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree(PLT)
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_assign_descriptors
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L9453
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9457
.L9453:
	cmp	r7, #0
	beq	.L9452
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L9465
.L9452:
	cmp	r6, #0
	beq	.L9456
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L9466
.L9456:
	mov	r0, #0
.L9454:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9466:
	mov	r0, r6
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9456
.L9457:
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	mvn	r0, #11
	b	.L9454
.L9465:
	mov	r0, r7
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L9452
	b	.L9457
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #88]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L9468
	bl	snd_card_free(PLT)
.L9468:
	ldr	r0, [r4, #332]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #332]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9475
	mov	r2, #0
	mov	r0, r4
.LPIC2019:
	add	r3, pc, r3
	str	r2, [r3, #876]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9476:
	.align	2
.L9475:
	.word	.LANCHOR0-(.LPIC2019+8)
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9481
	mov	r2, #0
	mov	r0, r4
.LPIC2020:
	add	r3, pc, r3
	str	r2, [r3, #916]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9482:
	.align	2
.L9481:
	.word	.LANCHOR0-(.LPIC2020+8)
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #88]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #8]
	cmp	r1, r3
	beq	.L9498
.L9485:
	add	r0, r4, #336
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L9493
	bl	fsg_common_release(PLT)
.L9493:
	mov	r0, r5
	bl	usb_free_all_descriptors(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9498:
	mov	r3, #0
	str	r3, [r4, #12]
	ldr	r6, [r1, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L9487
	ldr	r2, [r6, #168]
	mov	r1, #4
	ldr	r3, [r6, #56]
	str	r1, [r6, #112]
	cmp	r2, #0
	str	r3, [r6, #116]
	beq	.L9487
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L9487:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	bne	.L9485
	ldr	r2, .L9500
	mov	r3, sp
	mov	r0, #0
	bic	r3, r3, #8128
	add	r6, r4, #16
	bic	r3, r3, #63
	add	r7, sp, #4
	ldr	r1, [r3, #12]
	add	r3, sp, #16
	str	r0, [sp, #4]
.LPIC2023:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L9491
.L9499:
	bl	schedule(PLT)
.L9491:
	mov	r2, #2
	mov	r1, r7
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	beq	.L9499
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait(PLT)
	b	.L9485
.L9501:
	.align	2
.L9500:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC2023+8))
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.global	usb_ep_autoconfig_ss
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L9554
	strd	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r6, #28]
	.pad #4
	sub	sp, sp, #4
	ldrb	r4, [r1, #3]	@ zero_extendqisi2
.LPIC2024:
	add	r0, pc, r0
	mov	r1, r5
	and	r4, r4, #3
	bl	strcmp(PLT)
	sub	r9, r4, #3
	cmp	r0, #0
	cmpeq	r4, #3
	clz	r9, r9
	mov	r9, r9, lsr #5
	beq	.L9549
	ldr	r0, .L9554+4
	mov	r1, r5
.LPIC2027:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L9514
.L9522:
	mov	r5, r6
	ldr	fp, [r5, #8]!
	sub	r4, fp, #12
.L9512:
	cmp	fp, r5
	bne	.L9527
	b	.L9504
.L9528:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9504
.L9527:
	ldr	ip, [r4]
	cmp	ip, #0
	bne	.L9528
	mov	r3, r8
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	beq	.L9528
.L9509:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #28]
	str	r3, [r4, #32]
.L9517:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9514:
	cmp	r9, #0
	bne	.L9550
	cmp	r4, #2
	bne	.L9522
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L9522
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9504
	ldr	r10, .L9554+8
	mov	r9, r4
.LPIC2029:
	add	r10, pc, r10
	b	.L9525
.L9523:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9527
.L9525:
	mov	r1, r10
	ldr	r0, [r9, #4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9523
.L9548:
	cmp	r9, #0
	beq	.L9527
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L9527
.L9545:
	mov	r3, r8
	mov	r2, r7
	mov	r1, r9
	mov	r0, r6
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	beq	.L9551
.L9533:
	mov	r4, r9
	b	.L9509
.L9552:
	mov	r3, r8
	mov	r2, r7
	mov	r1, r9
	mov	r0, r6
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	bne	.L9533
	ldr	r4, [r6, #8]
	mov	fp, r4
	sub	r4, r4, #12
	cmp	r5, fp
	bne	.L9507
.L9504:
	mov	r0, #0
	b	.L9517
.L9549:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	mov	fp, r4
	sub	r4, r4, #12
	cmp	fp, r5
	beq	.L9504
	ldr	r10, .L9554+12
	mov	r9, r4
.LPIC2025:
	add	r10, pc, r10
	b	.L9508
.L9505:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9507
.L9508:
	mov	r1, r10
	ldr	r0, [r9, #4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9505
	cmp	r9, #0
	beq	.L9507
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L9552
.L9507:
	ldr	r10, .L9554+16
	mov	r9, r4
.LPIC2026:
	add	r10, pc, r10
	b	.L9513
.L9510:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9512
.L9513:
	mov	r1, r10
	ldr	r0, [r9, #4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9510
	cmp	r9, #0
	beq	.L9512
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L9512
	b	.L9545
.L9550:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9504
	ldr	r10, .L9554+20
	mov	r9, r4
.LPIC2028:
	add	r10, pc, r10
	b	.L9521
.L9553:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9527
.L9521:
	mov	r1, r10
	ldr	r0, [r9, #4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9553
	b	.L9548
.L9551:
	ldr	fp, [r6, #8]
	sub	r4, fp, #12
	b	.L9512
.L9555:
	.align	2
.L9554:
	.word	.LC454-(.LPIC2024+8)
	.word	.LC456-(.LPIC2027+8)
	.word	.LC527-(.LPIC2029+8)
	.word	.LC524-(.LPIC2025+8)
	.word	.LC525-(.LPIC2026+8)
	.word	.LC526-(.LPIC2028+8)
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.global	usb_ep_autoconfig
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss(PLT)
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	ldr	ip, [r3, #48]
	ldr	r0, [r3, #44]
	bne	.L9572
	cmp	ip, #0
	beq	.L9560
	mov	r0, #2
	str	r2, [ip, r1, asl #2]
.L9561:
	cmp	r2, #0
	beq	.L9572
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L9573
.L9572:
	mov	r0, #0
	bx	lr
.L9573:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r6, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r6, r6, #15
	sub	r1, r6, #1
	mov	r5, r1, asl #5
	sub	r5, r5, r1, asl #2
	add	r7, r8, r5
	add	r0, r7, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L9565
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L9564
	ldr	r3, [r7, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L9559
	ldr	r3, [r7, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L9559:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9560:
	cmp	r0, #0
	ldreq	ip, [r3, #52]
	strne	r2, [r0, r1, asl #2]
	movne	r0, #1
	streq	r2, [ip, r1, asl #2]
	b	.L9561
.L9565:
	mvn	r0, #21
	b	.L9559
.L9564:
	mov	r1, r2
	ldr	r0, [r3, #4]
	mov	r9, r2
	mov	r10, r3
	bl	usb_ep_autoconfig(PLT)
	subs	fp, r0, #0
	beq	.L9566
	ldr	r3, [r10, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L9567
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r7, #4]
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r10, r3
	strb	r6, [r3, #16]
	b	.L9559
.L9566:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9559
.L9567:
	mvn	r0, #11
	b	.L9559
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.type	ffs_do_descs.constprop.130, %function
ffs_do_descs.constprop.130:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r2
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, #0
	mov	r5, r2
	strd	r8, [sp, #16]
	mov	r7, r6
	mov	r3, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [sp, #56]
.L9593:
	ldr	r2, [r9, #48]
	cmp	r7, r3
	moveq	r4, #0
	ldr	r1, [r9, #44]
	cmp	r2, #0
	beq	.L9576
	cmp	r4, #0
	str	r4, [r2, r6]
	mov	r1, #2
	beq	.L9579
.L9613:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L9612
.L9583:
	cmp	r5, #1
	bls	.L9607
	ldrb	r1, [r4]	@ zero_extendqisi2
	cmp	r5, r1
	bcc	.L9607
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	addls	pc, pc, r2, asl #2
	b	.L9607
.L9586:
	b	.L9590
	b	.L9587
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9588
	b	.L9607
	b	.L9589
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9590
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9607
	b	.L9591
	.p2align 1
.L9590:
	cmp	r1, #9
	bne	.L9607
.L9592:
	rsb	r5, r1, r5
	add	r4, r4, r1
	add	r7, r7, #1
	add	r6, r6, #4
	b	.L9593
.L9587:
	sub	r2, r1, #7
	tst	r2, #253
	bne	.L9607
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9592
.L9607:
	mvn	r0, #21
.L9608:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9588:
	cmp	r1, #5
	beq	.L9592
	b	.L9607
.L9591:
	cmp	r1, #6
	beq	.L9592
	b	.L9607
.L9589:
	cmp	r1, #8
	beq	.L9592
	b	.L9607
.L9612:
	ldrb	r10, [r4, #2]	@ zero_extendqisi2
	ldr	r2, [r9, #12]
	and	r10, r10, #15
	sub	r0, r10, #1
	mov	r8, r0, asl #5
	sub	r8, r8, r0, asl #2
	add	fp, r2, r8
	add	r1, fp, r1, lsl #2
	ldr	r0, [r1, #8]
	cmp	r0, #0
	bne	.L9595
	str	r4, [r1, #8]
	ldr	r1, [r2, r8]
	cmp	r1, #0
	beq	.L9582
	ldr	r2, [fp, #8]
	ldrh	r1, [r4, #4]	@ unaligned
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #0
	strb	r2, [r4, #2]
	bne	.L9583
	ldr	r2, [fp, #8]
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r4, #4]	@ unaligned
	b	.L9583
.L9576:
	cmp	r1, #0
	ldreq	r2, [r9, #52]
	strne	r4, [r1, r6]
	movne	r1, #1
	streq	r4, [r2, r6]
	cmp	r4, #0
	bne	.L9613
.L9579:
	rsb	r0, r5, ip
	b	.L9608
.L9595:
	mvn	r5, #21
.L9581:
	mov	r0, r5
	b	.L9608
.L9582:
	mov	r1, r4
	ldr	r0, [r9, #4]
	stmia	sp, {r2, r3, ip}
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L9596
	ldr	lr, [r9, #12]
	mov	r1, #208
	str	r3, [sp, #12]
	ldr	r2, [r3, #8]
	add	lr, lr, r8
	str	lr, [r3]
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	beq	.L9597
	ldr	r3, [sp, #12]
	ldr	r2, [sp]
	str	r3, [r2, r8]
	ldmib	sp, {r3, ip}
	str	r0, [fp, #4]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	and	r2, r2, #15
	add	r2, r9, r2
	strb	r10, [r2, #16]
	b	.L9583
.L9596:
	movw	r5, #65012
	movt	r5, 65535
	b	.L9581
.L9597:
	mvn	r5, #11
	b	.L9581
	.fnend
	.size	ffs_do_descs.constprop.130, .-ffs_do_descs.constprop.130
	.align	2
	.global	usb_ep_autoconfig_reset
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	movne	r1, #0
	beq	.L9617
.L9616:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L9616
.L9617:
	ldr	r3, .L9620
	mov	r2, #0
.LPIC2030:
	add	r3, pc, r3
	str	r2, [r3, #-580]
	bx	lr
.L9621:
	.align	2
.L9620:
	.word	.LANCHOR4-(.LPIC2030+8)
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r5, #0
	cmpne	r6, #0
	moveq	r3, #1
	movne	r3, #0
	cmp	r4, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L9636
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L9626
	cmp	r3, #5
	beq	.L9673
.L9625:
	ldr	r1, [r6, #16]
	mov	ip, #0
.L9629:
	ldr	r3, [r1]
	cmp	r3, #0
	bne	.L9635
	b	.L9670
.L9674:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L9670
.L9635:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9674
.L9634:
	cmp	r1, #0
	beq	.L9636
	ldr	r3, [r1]
	ldrb	r2, [r5, #25]	@ zero_extendqisi2
	ldrb	lr, [r3, #2]	@ zero_extendqisi2
	cmp	lr, r2
	beq	.L9675
	ldr	r3, [r1, #4]
	add	r1, r1, #4
	cmp	r3, #0
	beq	.L9636
.L9640:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L9634
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	bne	.L9640
.L9636:
	mvn	r0, #4
.L9624:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9670:
	mov	r1, r3
	b	.L9634
.L9673:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L9676
.L9628:
	cmp	r3, #2
	bls	.L9625
	ldr	r1, [r6, #8]
	mov	ip, #0
	b	.L9629
.L9626:
	ldr	r3, [r4, #20]
	b	.L9628
.L9675:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, lr
	ldrh	ip, [r3, #4]	@ unaligned
	str	r3, [r5, #28]
	str	lr, [r5, #32]
	and	r2, r2, #131
	bfi	r2, lr, #0, #2
	strh	ip, [r5, #20]	@ movhi
	strb	r2, [r5, #24]
	beq	.L9643
	ldr	r2, [r1, #4]
	cmp	r2, #0
	beq	.L9636
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L9636
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L9677
.L9643:
	mov	r0, #0
	b	.L9624
.L9676:
	ldr	r1, [r6, #12]
	mov	ip, #1
	b	.L9629
.L9677:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L9645
	bcc	.L9678
.L9646:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L9624
.L9645:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L9646
.L9678:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9647
	ldr	r0, [r0]
	ldr	r1, .L9679
	add	r0, r0, #32
.LPIC2031:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9647:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L9624
.L9680:
	.align	2
.L9679:
	.word	.LC528-(.LPIC2031+8)
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9684
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9684
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L9687
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9692
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9693
	add	r6, r4, #108
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r0, r6
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L9683
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L9683:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9693:
	ldr	r0, [r4, #116]
	mov	r3, r5
	ldr	r2, [r4, #84]
	ldr	r1, .L9694
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC2033:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9683
.L9692:
	ldr	r0, [r4, #116]
	mov	r3, r5
	ldr	r2, [r4, #88]
	ldr	r1, .L9694+4
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC2032:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9683
.L9684:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L9683
.L9687:
	mvn	r5, #18
	b	.L9683
.L9695:
	.align	2
.L9694:
	.word	.LC529-(.LPIC2033+8)
	.word	.LC529-(.LPIC2032+8)
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9707
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9708
	ldr	r2, [r4, #88]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9709
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9710
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9711
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9712
	add	r2, r4, #392
	ldr	r1, [r4, #388]
	mov	r0, #4
	bl	queue_work_on(PLT)
	b	.L9698
.L9708:
	ldr	r2, [r4, #92]
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r1, .L9713
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2035:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9698:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9707:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9713+4
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
.LPIC2034:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9698
.L9710:
	ldr	r1, .L9713+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC2037:
	add	r1, pc, r1
.L9705:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9698
.L9709:
	ldr	r2, [r4, #88]
	ldr	r1, .L9713+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2036:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9705
.L9711:
	ldr	r2, [r4, #96]
	ldr	r1, .L9713+16
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #96]
.LPIC2038:
	add	r1, pc, r1
.L9706:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9698
.L9712:
	ldr	r1, .L9713+20
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2039:
	add	r1, pc, r1
	b	.L9706
.L9714:
	.align	2
.L9713:
	.word	.LC529-(.LPIC2035+8)
	.word	.LC530-(.LPIC2034+8)
	.word	.LC529-(.LPIC2037+8)
	.word	.LC530-(.LPIC2036+8)
	.word	.LC530-(.LPIC2038+8)
	.word	.LC529-(.LPIC2039+8)
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #92]
	ldr	r5, [r0, #84]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9735
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9736
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9737
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9738
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9739
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9740
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L9723
	ldr	r3, .L9743
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC2050:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9724
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9741
.L9725:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L9742
	ldr	r3, .L9743+4
	mov	r1, #8
	mov	r2, #1
	mov	r0, r4
.LPIC2049:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io(PLT)
.L9736:
	ldr	r2, [r4, #92]
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r1, .L9743+8
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2041:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9731:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9735:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9743+12
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
.LPIC2040:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9731
.L9738:
	ldr	r1, .L9743+16
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
.LPIC2043:
	add	r1, pc, r1
.L9734:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9731
.L9737:
	ldr	r2, [r4, #88]
	ldr	r1, .L9743+20
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2042:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9734
.L9739:
	ldr	r2, [r4, #96]
	ldr	r1, .L9743+24
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #96]
.LPIC2044:
	add	r1, pc, r1
.L9733:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9731
.L9741:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9723:
	mvn	r3, #11
	mov	r6, r3
	str	r3, [r4, #100]
.L9727:
	ldr	r1, .L9743+28
	ldr	r0, .L9743+32
.LPIC2047:
	add	r1, pc, r1
	add	r1, r1, #3728
.LPIC2048:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L9731
.L9740:
	ldr	r1, .L9743+36
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2045:
	add	r1, pc, r1
	b	.L9733
.L9724:
	mov	r3, #16
	str	r3, [r5]
	b	.L9725
.L9742:
	mov	r6, r5
	b	.L9727
.L9744:
	.align	2
.L9743:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2050+8))
	.word	rmnet_sdio_notify_complete-(.LPIC2049+8)
	.word	.LC529-(.LPIC2041+8)
	.word	.LC531-(.LPIC2040+8)
	.word	.LC529-(.LPIC2043+8)
	.word	.LC531-(.LPIC2042+8)
	.word	.LC531-(.LPIC2044+8)
	.word	.LANCHOR3-(.LPIC2047+8)
	.word	.LC532-(.LPIC2048+8)
	.word	.LC529-(.LPIC2045+8)
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9756
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r0, [r0, #20]
	.pad #12
	sub	sp, sp, #12
.LPIC2051:
	add	r3, pc, r3
	ldrb	r3, [r3, #622]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, r1
	beq	.L9754
.L9751:
	mov	r5, #0
.L9746:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9754:
	cmp	r2, #0
	beq	.L9747
	ldrb	r7, [r4, #152]	@ zero_extendqisi2
	cmp	r7, #0
	bne	.L9751
	ldr	r2, [r4, #104]
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9755
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #152]
	beq	.L9746
	ldr	r2, [r4, #104]
	mov	r3, r5
	ldr	r0, [r6]
	ldr	r1, .L9756+4
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2053:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9746
.L9747:
	ldrb	r5, [r4, #152]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L9746
	ldr	r0, [r4, #104]
	mov	r5, r2
	str	r2, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [sp, #4]
	strb	r2, [r4, #152]
	b	.L9746
.L9755:
	ldr	r2, [r4, #104]
	mov	r5, r3
	ldr	r1, .L9756+8
	str	r7, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r0, [r6]
.LPIC2052:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9746
.L9757:
	.align	2
.L9756:
	.word	.LANCHOR2-(.LPIC2051+8)
	.word	.LC534-(.LPIC2053+8)
	.word	.LC533-(.LPIC2052+8)
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L9773
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L9767:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L9761
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L9762
	mov	r0, r4
	blx	r3
.L9762:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r3, [r5, #164]
	tst	r3, #4
	beq	.L9774
.L9761:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
.L9771:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9774:
	ldr	r2, [r4, #88]
	mov	r1, r4
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9766
	ldr	r0, [r5, #1164]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9766
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L9761
.L9773:
	ldr	r0, .L9775
	movw	r1, #1847
.LPIC2054:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L9775+4
.LPIC2055:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9767
.L9766:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L9771
.L9776:
	.align	2
.L9775:
	.word	.LC86-(.LPIC2054+8)
	.word	.LC87-(.LPIC2055+8)
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9785
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9786
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9787
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9788
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r6
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up(PLT)
	b	.L9779
.L9786:
	ldr	r2, [r4, #92]
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r1, .L9789
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2057:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9779:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9785:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9789+4
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
.LPIC2056:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9779
.L9788:
	ldr	r1, .L9789+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2059:
	add	r1, pc, r1
.L9784:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9779
.L9787:
	ldr	r2, [r4, #96]
	ldr	r1, .L9789+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2058:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9784
.L9790:
	.align	2
.L9789:
	.word	.LC535-(.LPIC2057+8)
	.word	.LC531-(.LPIC2056+8)
	.word	.LC535-(.LPIC2059+8)
	.word	.LC531-(.LPIC2058+8)
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L9802
.L9792:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9802:
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	cmp	r0, #0
	bne	.L9792
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9793
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L9803
.L9793:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r0, r5
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L9792
.L9803:
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit(PLT)
	ldr	r2, [r4, #88]
	ldr	r3, .L9804
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
.LPIC2060:
	add	r3, pc, r3
	str	r5, [r3, #3540]
	str	r5, [r3, #3536]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9795
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L9795
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L9795:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	movw	r0, #32767
	b	.L9792
.L9805:
	.align	2
.L9804:
	.word	.LANCHOR4-(.LPIC2060+8)
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9815
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9816
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9817
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9818
	ldr	r3, .L9820
	ldr	r2, [r4, #100]
.LPIC2066:
	add	r3, pc, r3
	add	r3, r3, #632
	str	r3, [r2, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9819
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r6
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up(PLT)
	b	.L9808
.L9816:
	ldr	r2, [r4, #92]
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r1, .L9820+4
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2063:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9808:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9815:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9820+8
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
.LPIC2062:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9808
.L9818:
	ldr	r1, .L9820+12
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2065:
	add	r1, pc, r1
.L9814:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9808
.L9817:
	ldr	r2, [r4, #96]
	ldr	r1, .L9820+16
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2064:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9814
.L9819:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9808
.L9821:
	.align	2
.L9820:
	.word	.LANCHOR2-(.LPIC2066+8)
	.word	.LC535-(.LPIC2063+8)
	.word	.LC531-(.LPIC2062+8)
	.word	.LC535-(.LPIC2065+8)
	.word	.LC531-(.LPIC2064+8)
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #100]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #84]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L9823
	ldr	r5, .L9882
	mov	r2, #4
	str	r2, [r6, #4]
.LPIC2089:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L9824
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L9871
.L9825:
	cmn	r6, #4096
	str	r6, [r4, #112]
	bhi	.L9851
	ldr	r3, .L9882+4
	mov	r1, #32
.LPIC2070:
	add	r3, pc, r3
	str	r3, [r6, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r6, [r4, #108]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L9828
	movw	r2, #522
	str	r2, [r7, #4]
	ldr	r0, [r5, #40]
	cmp	r0, #0
	beq	.L9829
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L9872
.L9830:
	cmn	r7, #4096
	bhi	.L9873
	ldr	r3, .L9882+8
	mov	r6, #4
	movw	r9, #523
	ldr	r2, .L9882+12
	str	r4, [r7, #32]
.LPIC2073:
	add	r3, pc, r3
.LPIC2076:
	add	r2, pc, r2
	str	r3, [r7, #28]
	str	r2, [sp, #4]
	str	r7, [r4, #184]
.L9838:
	ldr	r7, [r4, #104]
	mov	r1, #32
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r1, #32
	movw	r2, #523
	beq	.L9833
	str	r9, [fp, #4]
	ldr	ip, [r5, #40]
	subs	r0, ip, #0
	beq	.L9834
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [fp]
	beq	.L9874
.L9835:
	cmn	fp, #4096
	add	r7, r4, #92
	add	r10, r4, #192
	mov	r0, r7
	bhi	.L9875
	ldr	r3, [sp, #4]
	str	r4, [fp, #32]
	str	r3, [fp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp]
	mov	r2, r10
	add	r0, fp, #36
	ldr	r1, [r4, #196]
	bl	__list_add(PLT)
	ldr	ip, [sp]
	mov	r0, r7
	mov	r1, ip
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L9838
	ldr	r2, [r4, #100]
	mov	r1, r4
	ldr	r0, [r8]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9876
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9877
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #104]
	ldr	r0, [r8]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9878
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9879
	ldr	r0, [r8]
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9880
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	moveq	r0, r6
	streq	r3, [r4, #200]
	streq	r3, [r4, #96]
	bne	.L9881
.L9869:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9824:
	mov	r3, #16
	str	r3, [r6]
	b	.L9825
.L9834:
	mov	r2, #16
	str	r2, [fp]
	b	.L9835
.L9829:
	mov	r3, #16
	str	r3, [r7]
	b	.L9830
.L9871:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9823:
	mvn	r3, #11
	str	r3, [r4, #112]
.L9851:
	ldr	r1, .L9882+16
	ldr	r0, .L9882+20
.LPIC2068:
	add	r1, pc, r1
.LPIC2069:
	add	r0, pc, r0
	add	r1, r1, #3760
	bl	printk(PLT)
	ldr	r0, [r4, #112]
	b	.L9869
.L9874:
	ldr	r2, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r2, #12]
	blx	r3
.L9833:
	mvn	r5, #11
.L9853:
	ldr	r1, .L9882+24
	ldr	r0, .L9882+28
.LPIC2074:
	add	r1, pc, r1
.LPIC2075:
	add	r0, pc, r0
	add	r1, r1, #3760
	bl	printk(PLT)
.L9837:
	ldr	r6, [r4, #184]
	ldr	r7, [r4, #108]
	cmp	r6, #0
	beq	.L9832
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9832:
	ldr	r6, [r4, #112]
	ldr	r4, [r4, #100]
	cmp	r6, #0
	moveq	r0, r5
	beq	.L9869
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	b	.L9869
.L9872:
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9828:
	mvn	r5, #11
.L9852:
	ldr	r1, .L9882+32
	ldr	r0, .L9882+36
.LPIC2071:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2072:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9832
.L9881:
	ldr	r1, .L9882+40
	mov	r3, r5
	ldr	r2, [r4, #108]
	ldr	r0, .L9882+44
.LPIC2087:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r1, r1, #3760
.LPIC2088:
	add	r0, pc, r0
	bl	printk(PLT)
.L9846:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L9843:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
.L9840:
.L9848:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #192]
	mov	r8, r0
	cmp	r10, r6
	mov	r0, r6
	sub	r9, r6, #36
	beq	.L9849
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r9, #0
	beq	.L9837
	ldr	r8, [r4, #104]
	ldr	r0, [r6, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9848
.L9849:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9837
.L9876:
	ldr	r2, [r4, #100]
	mov	r3, r5
	ldr	r1, .L9882+48
	ldr	r0, .L9882+52
	str	r6, [r2, #28]
	ldr	r2, [r4, #100]
.LPIC2077:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2078:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9848
.L9877:
	ldr	r1, .L9882+56
	mov	r3, r5
	ldr	r2, [r4, #100]
	ldr	r0, .L9882+60
.LPIC2079:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r1, r1, #3760
.LPIC2080:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9848
.L9878:
	ldr	r2, [r4, #104]
	mov	r3, r5
	ldr	r1, .L9882+64
	ldr	r0, .L9882+68
	str	r6, [r2, #28]
	ldr	r2, [r4, #104]
.LPIC2081:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2082:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9843
.L9879:
	ldr	r1, .L9882+72
	mov	r3, r5
	ldr	r2, [r4, #104]
	ldr	r0, .L9882+76
.LPIC2083:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r1, r1, #3760
.LPIC2084:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9843
.L9880:
	ldr	r2, [r4, #108]
	mov	r3, r5
	ldr	r1, .L9882+80
	ldr	r0, .L9882+84
	str	r6, [r2, #28]
	ldr	r2, [r4, #108]
.LPIC2085:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2086:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9846
.L9875:
	mov	r5, fp
	b	.L9853
.L9873:
	mov	r5, r7
	b	.L9852
.L9883:
	.align	2
.L9882:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2089+8))
	.word	ccid_notify_complete-(.LPIC2070+8)
	.word	ccid_bulk_complete_out-(.LPIC2073+8)
	.word	ccid_bulk_complete_in-(.LPIC2076+8)
	.word	.LANCHOR3-(.LPIC2068+8)
	.word	.LC536-(.LPIC2069+8)
	.word	.LANCHOR3-(.LPIC2074+8)
	.word	.LC538-(.LPIC2075+8)
	.word	.LANCHOR3-(.LPIC2071+8)
	.word	.LC537-(.LPIC2072+8)
	.word	.LANCHOR3-(.LPIC2087+8)
	.word	.LC540-(.LPIC2088+8)
	.word	.LANCHOR3-(.LPIC2077+8)
	.word	.LC539-(.LPIC2078+8)
	.word	.LANCHOR3-(.LPIC2079+8)
	.word	.LC540-(.LPIC2080+8)
	.word	.LANCHOR3-(.LPIC2081+8)
	.word	.LC539-(.LPIC2082+8)
	.word	.LANCHOR3-(.LPIC2083+8)
	.word	.LC540-(.LPIC2084+8)
	.word	.LANCHOR3-(.LPIC2085+8)
	.word	.LC539-(.LPIC2086+8)
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9892
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9893
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9894
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9895
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r6
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up(PLT)
	b	.L9886
.L9893:
	ldr	r2, [r4, #92]
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r1, .L9896
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2091:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9886:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9892:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9896+4
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
.LPIC2090:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9886
.L9895:
	ldr	r1, .L9896+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2093:
	add	r1, pc, r1
.L9891:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9886
.L9894:
	ldr	r2, [r4, #96]
	ldr	r1, .L9896+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2092:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9891
.L9897:
	.align	2
.L9896:
	.word	.LC535-(.LPIC2091+8)
	.word	.LC531-(.LPIC2090+8)
	.word	.LC535-(.LPIC2093+8)
	.word	.LC531-(.LPIC2092+8)
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L9911
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9924
	ldrb	r3, [r0, #89]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9925
	ldrb	r3, [r0, #88]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9926
.L9904:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L9907
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L9907
.L9923:
	mov	r0, #0
.L9903:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9907:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L9923
	add	r2, r4, #156
	ldr	r1, [r4, #196]
	mov	r0, #4
	bl	queue_work_on(PLT)
	b	.L9923
.L9925:
	mov	r0, r5
	ldr	r2, [r4, #108]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9905
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9899
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L9904
.L9926:
	ldr	r2, [r0, #104]
	mov	r1, r0
	mov	r0, r5
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9905
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9899
	ldr	r3, [r4, #104]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9905
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L9899
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L9904
.L9905:
	mvn	r0, #21
	b	.L9903
.L9911:
	mov	r6, #0
.L9899:
	ldr	r0, .L9927
.LPIC2095:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9909
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #1, #1
	strb	r3, [r4, #192]
.L9909:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L9910
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #2, #1
	strb	r3, [r4, #192]
.L9910:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #1
	moveq	r0, r6
	beq	.L9903
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	mov	r0, r6
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L9903
.L9924:
	ldr	r0, .L9927+4
	mvn	r6, #21
.LPIC2094:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9899
.L9928:
	.align	2
.L9927:
	.word	.LC542-(.LPIC2095+8)
	.word	.LC541-(.LPIC2094+8)
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #96]
	ldr	r7, [r0, #84]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L9930
	ldr	r3, .L9956
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC2104:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9931
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9949
.L9932:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L9945
	ldr	r3, .L9956+4
	mov	r2, #8
	mov	r1, r4
.LPIC2097:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9950
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9951
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9952
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9953
	ldr	r2, [r4, #96]
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9954
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L9955
	mov	r3, #1
	str	r5, [r4, #408]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #404]
	str	r5, [r4, #400]
	str	r5, [r4, #412]
	str	r5, [r4, #424]
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	b	.L9945
.L9949:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9930:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L9945:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9950:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r5, r3
	ldr	r1, .L9956+8
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
.LPIC2098:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9945
.L9931:
	mov	r3, #16
	str	r3, [r5]
	b	.L9932
.L9952:
	ldr	r2, [r4, #88]
	ldr	r1, .L9956+12
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #88]
.LPIC2100:
	add	r1, pc, r1
.L9948:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9945
.L9951:
	ldr	r2, [r4, #92]
	mov	r3, r5
	ldr	r0, [r7]
	ldr	r1, .L9956+16
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2099:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9945
.L9953:
	ldr	r1, .L9956+20
	mov	r3, r5
	ldr	r0, [r7]
	ldr	r2, [r4, #88]
.LPIC2101:
	add	r1, pc, r1
	b	.L9948
.L9954:
	ldr	r2, [r4, #96]
	ldr	r1, .L9956+24
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #96]
.LPIC2102:
	add	r1, pc, r1
.L9947:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9945
.L9955:
	ldr	r1, .L9956+28
	mov	r3, r5
	ldr	r0, [r7]
	ldr	r2, [r4, #96]
.LPIC2103:
	add	r1, pc, r1
	b	.L9947
.L9957:
	.align	2
.L9956:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2104+8))
	.word	rmnet_mux_notify_complete-(.LPIC2097+8)
	.word	.LC531-(.LPIC2098+8)
	.word	.LC531-(.LPIC2100+8)
	.word	.LC529-(.LPIC2099+8)
	.word	.LC529-(.LPIC2101+8)
	.word	.LC531-(.LPIC2102+8)
	.word	.LC529-(.LPIC2103+8)
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #88]
	ldr	r2, [r0, #20]
	ldr	r3, [r5]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L9959
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9959:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9987
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9988
	str	r4, [r5]
	ldr	r5, [r4, #92]
	ldr	r2, [r4, #20]
	ldr	r3, [r5]
	ldr	r8, [r2, #24]
	cmp	r3, #0
	beq	.L9963
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9963:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9989
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9990
	str	r4, [r5]
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L9967
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L9967:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9991
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r3, r0, #0
	ldr	r2, [r4, #92]
	bne	.L9992
	str	r4, [r2]
	ldr	r2, [r4, #340]
	cmp	r2, #0
	beq	.L9969
	ldr	r7, .L9994
	mov	r5, r3
.LPIC2111:
	add	r7, pc, r7
.L9971:
	ldr	r1, [r4, #336]
	add	r5, r5, #1
	ldr	r0, [r4, #92]
	bl	midi_alloc_ep_req(PLT)
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L9975
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L9993
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bhi	.L9971
	b	.L9969
.L9987:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r1, .L9994+4
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2105:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9969:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9988:
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r1, .L9994+8
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2106:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9993:
	ldr	r2, [r4, #92]
	ldr	r0, [r4, #84]
	ldr	r1, .L9994+12
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2112:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9989:
	ldr	r0, [r8]
	mov	r6, r3
	ldr	r1, .L9994+16
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2107:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9991:
	ldr	r2, [r4, #92]
	mov	r6, r3
	ldr	r0, [r7]
	ldr	r1, .L9994+20
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2109:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9990:
	ldr	r0, [r8]
	mov	r3, r6
	ldr	r1, .L9994+24
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2108:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9975:
	mvn	r6, #11
	b	.L9969
.L9992:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r1, .L9994+28
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2110:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9969
.L9995:
	.align	2
.L9994:
	.word	f_midi_complete-(.LPIC2111+8)
	.word	.LC543-(.LPIC2105+8)
	.word	.LC544-(.LPIC2106+8)
	.word	.LC545-(.LPIC2112+8)
	.word	.LC543-(.LPIC2107+8)
	.word	.LC543-(.LPIC2109+8)
	.word	.LC544-(.LPIC2108+8)
	.word	.LC544-(.LPIC2110+8)
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L10002
	ldr	r3, [r1, #48]
	cmp	r3, #0
	beq	.L10002
	mov	r4, r1
	add	r7, r1, #72
	add	r2, r0, #36
	mov	r5, r0
	str	r0, [r4, #20]
	ldr	r1, [r0, #40]
	mov	r0, r7
	bl	__list_add(PLT)
	ldr	r3, [r4, #32]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L9998
	mov	r1, r4
	mov	r0, r5
	blx	r3
	subs	r6, r0, #0
	blt	.L10014
.L9998:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9999
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9999
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9999:
	tst	r3, #2
	beq	.L10015
.L10000:
	tst	r3, #1
	bne	.L9997
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9997
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9997:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10015:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L10000
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
	b	.L10000
.L10014:
	mov	r0, r7
	bl	list_del(PLT)
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L9998
.L10002:
	mvn	r6, #21
	b	.L9997
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10018
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	ldr	r0, .L10018+4
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r6, .L10018+8
	str	r8, [sp, #16]
.LPIC2113:
	add	r3, pc, r3
	add	r1, r3, #3776
.LPIC2114:
	add	r0, pc, r0
	add	r1, r1, #8
.LPIC2117:
	add	r6, pc, r6
	bl	printk(PLT)
	ldr	r3, .L10018+12
	ldr	r0, .L10018+16
.LPIC2115:
	add	r3, pc, r3
.LPIC2116:
	add	r0, pc, r0
	ldr	r4, [r3, #2496]
	bl	printk(PLT)
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r3, .L10018+20
	ldr	r5, .L10018+24
	str	r6, [r4]
	mov	r1, r4
	ldr	lr, .L10018+28
	str	r2, [r4, #84]
	ldr	ip, .L10018+32
	ldr	r2, .L10018+36
.LPIC2118:
	add	r3, pc, r3
	add	r8, r3, #944
	add	r7, r3, #960
.LPIC2121:
	add	r5, pc, r5
.LPIC2122:
	add	lr, pc, lr
.LPIC2123:
	add	ip, pc, ip
	add	r3, r3, #976
	str	r8, [r4, #16]
.LPIC2124:
	add	r2, pc, r2
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r5, [r4, #32]
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	usb_add_function(PLT)
.L10019:
	.align	2
.L10018:
	.word	.LANCHOR3-(.LPIC2113+8)
	.word	.LC546-(.LPIC2114+8)
	.word	.LC548-(.LPIC2117+8)
	.word	.LANCHOR1-(.LPIC2115+8)
	.word	.LC547-(.LPIC2116+8)
	.word	.LANCHOR0-(.LPIC2118+8)
	.word	conn_gadget_function_bind-(.LPIC2121+8)
	.word	conn_gadget_function_unbind-(.LPIC2122+8)
	.word	conn_gadget_function_set_alt-(.LPIC2123+8)
	.word	conn_gadget_function_disable-(.LPIC2124+8)
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10022
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r0, r1
	ldr	r2, .L10022+4
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, .L10022+8
	ldr	r6, .L10022+12
	str	r8, [sp, #16]
	ldr	r5, .L10022+16
.LPIC2125:
	add	r3, pc, r3
	ldr	r4, .L10022+20
.LPIC2127:
	add	r2, pc, r2
	ldr	lr, .L10022+24
	add	r8, r2, #1000
.LPIC2126:
	add	r7, pc, r7
	ldr	ip, .L10022+28
.LPIC2129:
	add	r6, pc, r6
	add	r2, r2, #1024
	ldr	r1, [r1, #24]
.LPIC2130:
	add	r5, pc, r5
	ldr	r3, [r3, #2400]
.LPIC2131:
	add	r4, pc, r4
.LPIC2132:
	add	lr, pc, lr
.LPIC2133:
	add	ip, pc, ip
	str	r1, [r3, #84]
	mov	r1, r3
	str	r7, [r3]
	str	r8, [r3, #16]
	str	r2, [r3, #8]
	str	r6, [r3, #32]
	str	r5, [r3, #36]
	str	r4, [r3, #40]
	str	lr, [r3, #52]
	str	ip, [r3, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	usb_add_function(PLT)
.L10023:
	.align	2
.L10022:
	.word	.LANCHOR1-(.LPIC2125+8)
	.word	.LANCHOR0-(.LPIC2127+8)
	.word	.LC549-(.LPIC2126+8)
	.word	ccid_function_bind-(.LPIC2129+8)
	.word	ccid_function_unbind-(.LPIC2130+8)
	.word	ccid_function_set_alt-(.LPIC2131+8)
	.word	ccid_function_setup-(.LPIC2132+8)
	.word	ccid_function_disable-(.LPIC2133+8)
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10027
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	ldr	r0, .L10027+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC2134:
	add	r3, pc, r3
.LPIC2135:
	add	r0, pc, r0
	ldr	r4, [r3, #-1468]
	bl	printk(PLT)
	ldr	r3, .L10027+8
	ldr	r0, .L10027+12
	ldr	ip, [r5, #24]
.LPIC2137:
	add	r3, pc, r3
	add	r1, r3, #1040
	add	r2, r3, #1056
	add	r2, r2, #8
.LPIC2136:
	add	r0, pc, r0
	str	ip, [r4, #84]
	add	r1, r1, #8
	str	r0, [r4]
	str	r1, [r4, #16]
	str	r2, [r4, #8]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10025
	add	r3, r3, #1072
	add	r3, r3, #8
	str	r3, [r4, #12]
.L10025:
	ldr	lr, .L10027+16
	mov	r0, r5
	mov	r1, r4
	ldr	ip, .L10027+20
	ldr	r2, .L10027+24
	ldr	r3, .L10027+28
.LPIC2140:
	add	lr, pc, lr
.LPIC2141:
	add	ip, pc, ip
.LPIC2142:
	add	r2, pc, r2
	str	lr, [r4, #32]
.LPIC2143:
	add	r3, pc, r3
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L10028:
	.align	2
.L10027:
	.word	.LANCHOR4-(.LPIC2134+8)
	.word	.LC550-(.LPIC2135+8)
	.word	.LANCHOR0-(.LPIC2137+8)
	.word	.LC551-(.LPIC2136+8)
	.word	adb_function_bind-(.LPIC2140+8)
	.word	adb_function_unbind-(.LPIC2141+8)
	.word	adb_function_set_alt-(.LPIC2142+8)
	.word	adb_function_disable-(.LPIC2143+8)
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10032
.LPIC2144:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	cmp	r3, #0
	beq	.L10030
	ldr	ip, .L10032+4
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r0, r1
	ldr	r2, .L10032+8
	strd	r6, [sp, #8]
	mov	r1, r3
	strd	r8, [sp, #16]
	ldr	r7, .L10032+12
	str	lr, [sp, #24]
	ldr	r6, .L10032+16
.LPIC2145:
	add	ip, pc, ip
	ldr	r5, .L10032+20
	ldr	r4, .L10032+24
.LPIC2146:
	add	r2, pc, r2
	str	ip, [r3]
	ldr	lr, .L10032+28
	add	r9, r2, #1104
	ldr	ip, .L10032+32
.LPIC2149:
	add	r7, pc, r7
.LPIC2150:
	add	r6, pc, r6
.LPIC2151:
	add	r5, pc, r5
	add	r8, r2, #1120
.LPIC2152:
	add	r4, pc, r4
	add	r9, r9, #8
	str	r7, [r3, #32]
.LPIC2153:
	add	lr, pc, lr
	add	r8, r8, #12
	str	r6, [r3, #36]
.LPIC2154:
	add	ip, pc, ip
	add	r2, r2, #1104
	str	r9, [r3, #16]
	str	r5, [r3, #52]
	str	r4, [r3, #40]
	str	lr, [r3, #48]
	str	ip, [r3, #56]
	stmib	r3, {r2, r8}
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	usb_add_function(PLT)
.L10030:
	mvn	r0, #18
	bx	lr
.L10033:
	.align	2
.L10032:
	.word	.LANCHOR1-(.LPIC2144+8)
	.word	.LC552-(.LPIC2145+8)
	.word	.LANCHOR0-(.LPIC2146+8)
	.word	rmnet_mux_bind-(.LPIC2149+8)
	.word	rmnet_mux_unbind-(.LPIC2150+8)
	.word	rmnet_mux_setup-(.LPIC2151+8)
	.word	rmnet_mux_set_alt-(.LPIC2152+8)
	.word	rmnet_mux_disable-(.LPIC2153+8)
	.word	rmnet_mux_suspend-(.LPIC2154+8)
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.global	usb_function_deactivate
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L10035
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldr	r2, [r2, #20]
	cmp	r2, #0
	mvneq	r6, #94
	beq	.L10036
	blx	r2
	subs	r6, r0, #0
	beq	.L10039
.L10036:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10039:
	ldr	r1, [r4, #52]
.L10035:
	add	r3, r1, #1
	mov	r6, #0
	str	r3, [r4, #52]
	b	.L10036
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10047
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L10048
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	mvneq	r4, #94
	beq	.L10042
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L10042:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10048:
	mov	r4, #0
	b	.L10042
.L10047:
	ldr	r0, .L10049
	movw	r1, #315
	mvn	r4, #21
.LPIC2155:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L10042
.L10050:
	.align	2
.L10049:
	.word	.LC383-(.LPIC2155+8)
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10053
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, asl #2]
	strb	r2, [r0, #44]
.L10052:
	mov	r0, r3
	bx	lr
.L10053:
	mvn	r3, #18
	b	.L10052
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L10111
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r6, [r0, #24]
.LPIC2156:
	add	r4, pc, r4
	bl	usb_interface_id(PLT)
	strb	r0, [r4, #646]
	add	r1, r4, #656
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10055
	str	r0, [r5, #88]
	add	r1, r4, #668
	str	r5, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10055
	ldr	r6, .L10111+4
	str	r0, [r5, #84]
	str	r5, [r0]
.LPIC2159:
	add	r6, pc, r6
	add	r0, r6, #1152
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L10072
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10107
.L10057:
	ldr	ip, [r5, #120]
	ldr	r0, [r5, #116]
	cmp	ip, #0
	beq	.L10108
	ldr	r3, .L10111+8
.LPIC2170:
	add	r3, pc, r3
	ldrb	r3, [r3, #646]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10104
	ldrb	r4, [r0, #33]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L10109
	ldr	r3, [r0, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10104
	ldr	r1, [r3, #4]
	cmp	r1, #0
	bne	.L10067
	b	.L10104
.L10066:
	adds	r3, r3, #8
	beq	.L10104
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L10110
.L10067:
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L10066
	ldrh	r0, [r0, #27]	@ unaligned
	blx	ip
.L10104:
	mov	r0, #0
	b	.L10101
.L10055:
	mvn	r4, #18
.L10056:
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L10062
.L10071:
	bl	kfree(PLT)
.L10062:
	ldr	r0, [r5, #8]
	cmp	r0, #0
	beq	.L10068
	bl	kfree(PLT)
.L10068:
	ldr	r0, [r5, #16]
	cmp	r0, #0
	beq	.L10069
	bl	kfree(PLT)
.L10069:
	ldr	r3, [r5, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #88]
	cmp	r3, #0
	moveq	r0, r4
	beq	.L10101
	mov	r2, #0
	mov	r0, r4
	str	r2, [r3]
.L10101:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10107:
	ldrb	r2, [r4, #658]	@ zero_extendqisi2
	add	r0, r6, #1168
	ldrb	r3, [r4, #670]	@ zero_extendqisi2
	strb	r2, [r4, #682]
	strb	r3, [r4, #694]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L10058
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10057
	ldrb	r2, [r4, #658]	@ zero_extendqisi2
	add	r0, r6, #1184
	ldrb	r3, [r4, #670]	@ zero_extendqisi2
	strb	r2, [r4, #706]
	strb	r3, [r4, #718]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L10057
	mvn	r4, #11
	b	.L10062
.L10072:
	mvn	r4, #11
	b	.L10056
.L10110:
	mov	r0, r1
	b	.L10101
.L10109:
	ldrh	r0, [r0, #27]	@ unaligned
	mov	r1, r4
	blx	ip
	mov	r0, r4
	b	.L10101
.L10108:
	mov	r0, ip
	b	.L10101
.L10058:
	ldr	r0, [r5, #12]
	mvn	r4, #11
	cmp	r0, #0
	bne	.L10071
	b	.L10068
.L10112:
	.align	2
.L10111:
	.word	.LANCHOR2-(.LPIC2156+8)
	.word	.LANCHOR0-(.LPIC2159+8)
	.word	.LANCHOR2-(.LPIC2170+8)
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #24]
	str	r4, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10160
	ldr	r6, .L10169
	uxtb	r3, r0
	strb	r3, [r5, #104]
.LPIC2171:
	add	r6, pc, r6
	add	r1, r6, #740
	strb	r3, [r6, #730]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10116
	str	r4, [r0]
	add	r1, r6, #752
	str	r0, [r5, #92]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10116
	str	r4, [r0]
	add	r1, r6, #764
	str	r0, [r5, #88]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	subs	r7, r0, #0
	beq	.L10116
	str	r4, [r7]
	str	r7, [r5, #96]
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10163
.L10117:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L10118
	ldr	r6, .L10169+4
	mov	r2, #8
	str	r2, [r4, #4]
.LPIC2185:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r0, [r6, #24]
	cmp	r0, #0
	beq	.L10119
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10164
.L10120:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L10165
	ldr	r3, .L10169+8
	mov	r2, #8
	mov	r7, #4
	add	r8, r5, #108
.LPIC2182:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r2, [r3, #4]
.L10124:
	bl	rmnet_smd_alloc_qmi.constprop.143(PLT)
	mov	r3, r0
	mov	r2, r8
	cmn	r3, #4096
	add	r0, r0, #8
	bhi	.L10162
	ldr	r1, [r5, #112]
	bl	__list_add(PLT)
	subs	r7, r7, #1
	bne	.L10124
	mov	r4, #8
	add	r7, r5, #116
.L10126:
	bl	rmnet_smd_alloc_qmi.constprop.143(PLT)
	mov	r3, r0
	mov	r2, r7
	cmn	r3, #4096
	add	r0, r0, #8
	bhi	.L10162
	ldr	r1, [r5, #120]
	bl	__list_add(PLT)
	subs	r4, r4, #1
	bne	.L10126
	ldr	r10, .L10169+12
	mov	r8, #8
	mov	r9, #2048
.LPIC2183:
	add	r10, pc, r10
.L10131:
	ldr	r7, [r5, #88]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #2048
	mov	r1, #208
	beq	.L10132
	str	r9, [r4, #4]
	ldr	r3, [r6, #44]
	subs	r0, r3, #0
	beq	.L10128
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10166
.L10129:
	cmn	r4, #4096
	add	r2, r5, #148
	add	r0, r4, #36
	bhi	.L10123
	str	r9, [r4, #4]
	str	r5, [r4, #32]
	str	r10, [r4, #28]
	ldr	r1, [r5, #152]
	bl	__list_add(PLT)
	subs	r8, r8, #1
	bne	.L10131
	ldr	r10, .L10169+16
	mov	r4, #8
	mov	r9, #2048
.LPIC2184:
	add	r10, pc, r10
.L10136:
	ldr	r8, [r5, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #2048
	mov	r1, #208
	beq	.L10132
	str	r9, [r7, #4]
	ldr	r3, [r6, #44]
	subs	r0, r3, #0
	beq	.L10133
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L10167
.L10134:
	cmn	r7, #4096
	add	r2, r5, #140
	add	r0, r7, #36
	bhi	.L10168
	str	r5, [r7, #32]
	str	r10, [r7, #28]
	ldr	r1, [r5, #144]
	bl	__list_add(PLT)
	subs	r4, r4, #1
	bne	.L10136
	mov	r0, r4
.L10160:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10163:
	ldrb	r1, [r6, #742]	@ zero_extendqisi2
	ldrb	r2, [r6, #754]	@ zero_extendqisi2
	ldrb	r3, [r6, #766]	@ zero_extendqisi2
	strb	r1, [r6, #778]
	strb	r2, [r6, #790]
	strb	r3, [r6, #802]
	b	.L10117
.L10162:
	mov	r4, r3
.L10123:
	mov	r0, r5
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #96]
	str	r3, [r5, #92]
	str	r3, [r5, #88]
	b	.L10160
.L10119:
	mov	r3, #16
	str	r3, [r4]
	b	.L10120
.L10164:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10118:
	mvn	r2, #11
	mov	r3, r2
	str	r2, [r5, #100]
.L10137:
	mov	r0, r3
	b	.L10160
.L10128:
	mov	r3, #16
	str	r3, [r4]
	b	.L10129
.L10166:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10132:
	mvn	r4, #11
	b	.L10123
.L10116:
	mvn	r0, #18
	b	.L10160
.L10133:
	mov	r3, #16
	str	r3, [r7]
	b	.L10134
.L10167:
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10132
.L10165:
	mov	r3, r4
	b	.L10137
.L10168:
	mov	r4, r7
	b	.L10123
.L10170:
	.align	2
.L10169:
	.word	.LANCHOR2-(.LPIC2171+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2185+8))
	.word	rmnet_smd_notify_complete-(.LPIC2182+8)
	.word	rmnet_smd_complete_epout-(.LPIC2183+8)
	.word	rmnet_smd_complete_epin-(.LPIC2184+8)
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10172
	ldr	r6, .L10195
	uxtb	r3, r0
	strb	r3, [r4, #104]
.LPIC2186:
	add	r6, pc, r6
	add	r1, r6, #824
	strb	r3, [r6, #814]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10173
	str	r5, [r0]
	add	r1, r6, #836
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10173
	str	r5, [r0]
	add	r1, r6, #848
	str	r0, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10173
	str	r5, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10174
	ldrb	r1, [r6, #826]	@ zero_extendqisi2
	ldrb	r2, [r6, #838]	@ zero_extendqisi2
	ldrb	r3, [r6, #850]	@ zero_extendqisi2
	strb	r1, [r6, #862]
	strb	r2, [r6, #874]
	strb	r3, [r6, #886]
.L10174:
	mov	r3, #0
	add	r2, r4, #252
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
.L10172:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10173:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10172
.L10196:
	.align	2
.L10195:
	.word	.LANCHOR2-(.LPIC2186+8)
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L10214
	movw	r2, #44100
	str	lr, [sp, #32]
	mov	lr, #0
	mov	r3, #2
	strd	r6, [sp, #8]
	mov	r5, r0
	mov	r6, r1
	strd	r8, [sp, #16]
.LPIC2196:
	add	r4, pc, r4
	strd	r10, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	add	ip, r4, #916
	ldr	r8, [r0, #24]
	strb	lr, [r4, #918]
	strh	r2, [ip]	@ movhi
	str	r2, [sp, #4]
	strb	r3, [r4, #903]
	strb	r3, [r4, #912]
	bl	usb_interface_id(PLT)
	subs	r7, r0, #0
	blt	.L10206
	mov	r1, r6
	mov	r0, r5
	strb	r7, [r4, #922]
	bl	usb_interface_id(PLT)
	subs	r7, r0, #0
	blt	.L10206
	uxtb	r7, r7
	add	r1, r4, #944
	strb	r7, [r4, #934]
	strb	r7, [r4, #622]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10204
	str	r8, [r6, #104]
	str	r6, [r8]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10211
.L10199:
	ldr	r9, .L10214+4
	mov	r7, #4
	mov	r10, #16
.LPIC2206:
	add	r9, pc, r9
	b	.L10203
.L10213:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10212
.L10202:
	mov	r3, #256
	add	r5, r6, #108
	str	r6, [r4, #32]
	str	r9, [r4, #28]
	mov	r0, r5
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	add	r2, r6, #96
	ldr	r1, [r6, #100]
	add	r0, r4, #36
	bl	__list_add(PLT)
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r7, r7, #1
	beq	.L10206
.L10203:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	ldr	r3, .L10214+8
	mov	r2, #256
	mov	r1, #208
	beq	.L10200
.LPIC2207:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #32]
	subs	r0, r3, #0
	bne	.L10213
	str	r10, [r4]
	b	.L10202
.L10204:
	mvn	r7, #18
.L10206:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10211:
	ldrb	r3, [r4, #946]	@ zero_extendqisi2
	strb	r3, [r4, #958]
	b	.L10199
.L10212:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10200:
.L10198:
	mvn	r7, #11
	b	.L10206
.L10215:
	.align	2
.L10214:
	.word	.LANCHOR2-(.LPIC2196+8)
	.word	audio_data_complete-(.LPIC2206+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2207+8))
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10217
	ldr	r5, .L10279
	uxtb	r3, r6
	mov	r1, r4
	mov	r0, r8
	strb	r3, [r4, #120]
.LPIC2208:
	add	r5, pc, r5
	strb	r3, [r5, #970]
	strb	r3, [r5, #983]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10217
	uxtb	r3, r6
	add	r1, r5, #1012
	strb	r3, [r4, #121]
	strb	r3, [r5, #990]
	strb	r3, [r5, #1002]
	strb	r3, [r5, #984]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10219
	str	r0, [r4, #88]
	add	r1, r5, #1024
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10219
	add	r1, r5, #1024
	str	r0, [r4, #92]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10219
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #148]
	beq	.L10222
	ldr	r3, .L10279+4
.LPIC2237:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10221
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L10221:
	str	r0, [r5]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10222
	str	r4, [r3, #32]
	ldr	r6, .L10279+8
	ldr	r3, .L10279+12
	ldr	r2, [r4, #148]
.LPIC2218:
	add	r6, pc, r6
.LPIC2217:
	add	r3, pc, r3
	add	r0, r6, #1200
	add	r0, r0, #8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L10222
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10278
.L10223:
	ldr	r2, .L10279+16
	mov	r0, #0
	ldr	r3, .L10279+20
.LPIC2226:
	add	r2, pc, r2
.LPIC2227:
	add	r3, pc, r3
	strd	r2, [r4, #112]
.L10276:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10278:
	ldr	r5, .L10279+24
	add	r0, r6, #1248
.LPIC2219:
	add	r5, pc, r5
	ldrb	r1, [r5, #1014]	@ zero_extendqisi2
	ldrb	r2, [r5, #1026]	@ zero_extendqisi2
	ldrb	r3, [r5, #1038]	@ zero_extendqisi2
	strb	r1, [r5, #1050]
	strb	r2, [r5, #1062]
	strb	r3, [r5, #1074]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10224
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10223
	ldrb	r3, [r5, #1038]	@ zero_extendqisi2
	add	r0, r6, #1280
	ldrb	r1, [r5, #1014]	@ zero_extendqisi2
	add	r0, r0, #8
	ldrb	r2, [r5, #1026]	@ zero_extendqisi2
	strb	r3, [r5, #1110]
	strb	r1, [r5, #1086]
	strb	r2, [r5, #1098]
	bl	usb_copy_descriptors(PLT)
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L10223
.L10224:
	ldr	r0, [r4, #12]
	mvn	r6, #11
	cmp	r0, #0
	beq	.L10228
.L10234:
	bl	kfree(PLT)
.L10227:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10228
	bl	kfree(PLT)
.L10228:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10229
	bl	kfree(PLT)
.L10229:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L10230
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10230:
	ldr	r3, [r4, #144]
	ldr	r1, .L10279+28
	ldr	r0, .L10279+32
	cmp	r3, #0
	movne	r2, #0
.LPIC2235:
	add	r1, pc, r1
	add	r1, r1, #3808
.LPIC2236:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	add	r1, r1, #12
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r6
	ldr	r2, [r4]
	bl	printk(PLT)
	mov	r0, r6
	b	.L10276
.L10219:
	mvn	r6, #18
.L10217:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L10234
	b	.L10227
.L10222:
	mvn	r6, #11
	b	.L10217
.L10280:
	.align	2
.L10279:
	.word	.LANCHOR2-(.LPIC2208+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2237+8))
	.word	.LANCHOR0-(.LPIC2218+8)
	.word	ecm_qc_notify_complete-(.LPIC2217+8)
	.word	ecm_qc_open-(.LPIC2226+8)
	.word	ecm_qc_close-(.LPIC2227+8)
	.word	.LANCHOR2-(.LPIC2219+8)
	.word	.LANCHOR3-(.LPIC2235+8)
	.word	.LC553-(.LPIC2236+8)
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r7, .L10341
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldr	r9, [r0, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, .L10341+4
.LPIC2240:
	add	r7, pc, r7
	add	r7, r7, #3824
	add	r7, r7, #8
	mov	r1, r7
.LPIC2241:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r9, [r4, #84]
	mov	r1, r4
	mov	r0, r8
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10282
	ldr	r5, .L10341+8
	uxtb	r3, r6
	mov	r1, r4
	mov	r0, r8
	strb	r3, [r4, #196]
.LPIC2242:
	add	r5, pc, r5
	strb	r3, [r5, #1122]
	strb	r3, [r5, #1130]
	strb	r3, [r5, #1143]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10282
	uxtb	r3, r6
	mov	r2, #0
	str	r9, [r4, #140]
	add	r1, r5, #1168
	str	r4, [r4, #144]
	strb	r2, [r4, #198]
	add	r1, r1, #4
	strb	r3, [r4, #197]
	strb	r3, [r5, #1150]
	strb	r3, [r5, #1162]
	strb	r3, [r5, #1144]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r6, r0, #0
	mov	r1, r7
	beq	.L10336
	ldr	r0, .L10341+12
.LPIC2252:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r9, [r6]
	add	r1, r5, #1184
	str	r6, [r4, #148]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r6, r0, #0
	mov	r1, r7
	beq	.L10337
	ldr	r0, .L10341+16
.LPIC2257:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r5, #1184
	str	r9, [r6]
	add	r1, r1, #12
	str	r6, [r4, #152]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	mov	r1, r7
	beq	.L10338
	ldr	r0, .L10341+20
.LPIC2262:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r5, [r4, #156]
	ldr	r3, [r5, #8]
	mov	r1, #208
	str	r9, [r5]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L10286
	ldr	r3, .L10341+24
.LPIC2290:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10287
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10339
.L10288:
	ldr	r1, .L10341+28
	mov	r3, #16
	ldr	r0, .L10341+32
	str	r3, [r6, #4]
	ldr	r5, .L10341+36
	str	r6, [r4, #160]
	ldr	r6, .L10341+40
.LPIC2264:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2265:
	add	r0, pc, r0
	add	r1, r1, #8
.LPIC2267:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r1, [r4, #160]
.LPIC2268:
	add	r6, pc, r6
	add	r3, r5, #1200
	ldr	r2, .L10341+44
	add	r0, r6, #1328
	add	r0, r0, #12
	str	r4, [r1, #32]
	ldr	r1, [r4, #160]
.LPIC2266:
	add	r2, pc, r2
	str	r2, [r1, #28]
	ldr	r2, [r4, #132]
	cmp	r2, #7
	moveq	r2, #2048
	movne	r2, #4064
	strh	r2, [r3, #17]	@ unaligned
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L10292
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10340
.L10291:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L10295
	ldr	r2, .L10341+48
	add	r3, r3, #48
.LPIC2283:
	add	r2, pc, r2
	strb	r3, [r2, #170]
.L10295:
	ldr	r3, [r8, #24]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10305
	ldr	r3, .L10341+52
.LPIC2239:
	add	r3, pc, r3
.L10296:
	ldr	r0, [r4, #156]
	ldr	lr, [r4, #152]
	ldr	ip, [r4, #148]
	ldr	r1, .L10341+56
	ldr	r4, [r0, #4]
	ldr	r0, .L10341+60
.LPIC2284:
	add	r1, pc, r1
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	add	r1, r1, #3824
.LPIC2285:
	add	r0, pc, r0
	add	r1, r1, #8
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk(PLT)
	mov	r0, #0
.L10334:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10305:
	ldr	r3, .L10341+64
.LPIC2238:
	add	r3, pc, r3
	b	.L10296
.L10287:
	mov	r3, #16
	str	r3, [r6]
	b	.L10288
.L10340:
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	add	r0, r6, #1376
	ldrb	r2, [r5, #1186]	@ zero_extendqisi2
	add	r0, r0, #12
	ldrb	r3, [r5, #1198]	@ zero_extendqisi2
	strb	r1, [r5, #1222]
	strb	r2, [r5, #1234]
	strb	r3, [r5, #1246]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10292
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10291
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	add	r0, r6, #1424
	ldrb	r2, [r5, #1186]	@ zero_extendqisi2
	add	r0, r0, #12
	ldrb	r3, [r5, #1198]	@ zero_extendqisi2
	strb	r1, [r5, #1258]
	strb	r2, [r5, #1270]
	strb	r3, [r5, #1282]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L10291
.L10292:
	mvn	r6, #11
.L10282:
	ldr	r1, .L10341+68
	mov	r3, r6
	ldr	r0, .L10341+72
	ldr	r2, [r4]
.LPIC2286:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2287:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10298
	bl	kfree(PLT)
.L10298:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10299
	bl	kfree(PLT)
.L10299:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10300
	bl	kfree(PLT)
.L10300:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L10301
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10301:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	movne	r0, r6
	moveq	r0, r6
	strne	r2, [r3]
	b	.L10334
.L10339:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10286:
	ldr	r1, .L10341+76
	mov	r3, #0
	mvn	r6, #11
	ldr	r0, .L10341+80
	str	r3, [r4, #160]
.LPIC2288:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2289:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L10282
.L10336:
	ldr	r0, .L10341+84
	mvn	r6, #18
.LPIC2250:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10282
.L10338:
	ldr	r0, .L10341+88
	mvn	r6, #18
.LPIC2260:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10282
.L10337:
	ldr	r0, .L10341+92
	mvn	r6, #18
.LPIC2255:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10282
.L10342:
	.align	2
.L10341:
	.word	.LANCHOR3-(.LPIC2240+8)
	.word	.LC235-(.LPIC2241+8)
	.word	.LANCHOR2-(.LPIC2242+8)
	.word	.LC557-(.LPIC2252+8)
	.word	.LC559-(.LPIC2257+8)
	.word	.LC561-(.LPIC2262+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2290+8))
	.word	.LANCHOR3-(.LPIC2264+8)
	.word	.LC562-(.LPIC2265+8)
	.word	.LANCHOR2-(.LPIC2267+8)
	.word	.LANCHOR0-(.LPIC2268+8)
	.word	mbim_notify_complete-(.LPIC2266+8)
	.word	.LANCHOR2-(.LPIC2283+8)
	.word	.LC555-(.LPIC2239+8)
	.word	.LANCHOR3-(.LPIC2284+8)
	.word	.LC563-(.LPIC2285+8)
	.word	.LC554-(.LPIC2238+8)
	.word	.LANCHOR3-(.LPIC2286+8)
	.word	.LC564-(.LPIC2287+8)
	.word	.LANCHOR3-(.LPIC2288+8)
	.word	.LC565-(.LPIC2289+8)
	.word	.LC556-(.LPIC2250+8)
	.word	.LC560-(.LPIC2260+8)
	.word	.LC558-(.LPIC2255+8)
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10344
	ldr	r6, .L10375
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #148]
.LPIC2291:
	add	r6, pc, r6
	strb	r5, [r6, #1294]
	strb	r5, [r6, #1302]
	strb	r5, [r6, #1315]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10344
	uxtb	r5, r5
	add	r1, r6, #1344
	strb	r5, [r4, #149]
	strb	r5, [r6, #1322]
	strb	r5, [r6, #1334]
	strb	r5, [r6, #1316]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10373
	add	r1, r6, #1344
	str	r0, [r4, #88]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10373
	add	r1, r6, #1360
	str	r0, [r4, #92]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10373
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #168]
	beq	.L10357
	ldr	r3, .L10375+4
.LPIC2317:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10351
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L10351:
	str	r0, [r5]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10359
	ldr	ip, .L10375+8
	str	r4, [r3, #32]
	mov	r0, r4
	ldr	r1, .L10375+12
	ldr	lr, .L10375+16
	ldr	r8, [r4, #168]
.LPIC2302:
	add	ip, pc, ip
	ldrb	r5, [ip, #1358]	@ zero_extendqisi2
.LPIC2311:
	add	r1, pc, r1
	ldrb	r6, [ip, #1346]	@ zero_extendqisi2
.LPIC2301:
	add	lr, pc, lr
	add	r3, r1, #1488
	ldrb	r9, [ip, #1370]	@ zero_extendqisi2
	add	r2, r1, #1536
	add	r1, r1, #1584
	add	r3, r3, #8
	str	lr, [r8, #28]
	add	r2, r2, #12
	add	r1, r1, #8
	strb	r5, [ip, #1394]
	strb	r5, [ip, #1430]
	strb	r6, [ip, #1382]
	strb	r6, [ip, #1418]
	strb	r9, [ip, #1406]
	strb	r9, [ip, #1442]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L10374
.L10344:
	ldr	r3, [r4, #168]
.L10346:
	cmp	r3, #0
	beq	.L10350
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10350:
	ldr	r3, [r4, #164]
	ldr	r1, .L10375+20
	cmp	r3, #0
	movne	r2, #0
.LPIC2316:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L10353:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10373:
	ldr	r3, [r4, #168]
	mvn	r5, #18
	b	.L10346
.L10374:
	ldr	r2, .L10375+24
	ldr	r3, .L10375+28
.LPIC2314:
	add	r2, pc, r2
.LPIC2315:
	add	r3, pc, r3
	strd	r2, [r4, #136]
	b	.L10353
.L10359:
	mvn	r5, #11
	b	.L10346
.L10357:
	mvn	r5, #11
	b	.L10350
.L10376:
	.align	2
.L10375:
	.word	.LANCHOR2-(.LPIC2291+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2317+8))
	.word	.LANCHOR2-(.LPIC2302+8)
	.word	.LANCHOR0-(.LPIC2311+8)
	.word	ecm_notify_complete-(.LPIC2301+8)
	.word	.LC566-(.LPIC2316+8)
	.word	ecm_open-(.LPIC2314+8)
	.word	ecm_close-(.LPIC2315+8)
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10393
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L10393+4
	movw	r7, #1484
	strd	r8, [sp, #16]
	movw	r9, #1460
	mov	r8, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	str	lr, [sp, #32]
	ldr	r4, [r1, #140]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #168]
.LPIC2319:
	add	r6, pc, r6
	ldrb	lr, [r1, #136]	@ zero_extendqisi2
	ldrb	ip, [r1, #164]	@ zero_extendqisi2
.LPIC2355:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ubfx	fp, r4, #16, #8
	strh	r4, [r6, r9]	@ movhi
	ubfx	r5, r2, #16, #8
	strh	r2, [r6, r7]	@ movhi
	ldr	r9, [r0, #24]
	strb	fp, [r6, #1462]
	strb	r5, [r6, #1486]
	str	r2, [sp, #4]
	strb	lr, [r6, #1456]
	strb	lr, [r3, #7]
	strb	ip, [r6, #1471]
	strb	ip, [r6, #1480]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10388
	ldr	r3, .L10393+8
	mov	r1, r8
	mov	r0, r10
.LPIC2354:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	strb	r4, [r3, #2]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10389
	ldr	r5, .L10393+12
	uxtb	r4, r4
	mov	r7, #0
	mov	r0, r10
	strb	r7, [r8, #248]
	mov	r1, r8
	strb	r4, [r6, #1490]
.LPIC2353:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	strb	r4, [r6, #1502]
	strb	r4, [r5, #8]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10390
	uxtb	r4, r4
	add	fp, r6, #1536
	strb	r7, [r8, #249]
	mov	r1, fp
	strb	r4, [r6, #1514]
	strb	r4, [r6, #1526]
	strb	r4, [r5, #9]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10391
	add	r10, r6, #1536
	str	r0, [r8, #176]
	add	r10, r10, #12
	str	fp, [r0, #28]
	str	r9, [r0]
	mov	r1, r10
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r4, r0, #0
	beq	.L10392
	str	r4, [r8, #172]
	ldr	r2, .L10393+16
	mov	r0, r8
	str	r9, [r4]
	ldr	ip, .L10393+20
	mov	r3, r7
	ldrb	r5, [r6, #1538]	@ zero_extendqisi2
	str	r10, [r4, #28]
	ldrb	lr, [r6, #1550]	@ zero_extendqisi2
.LPIC2351:
	add	r2, pc, r2
.LPIC2347:
	add	ip, pc, ip
	mov	r1, r2
	and	r5, r5, #127
	and	lr, lr, #127
	strb	r5, [ip, #1652]
	strb	lr, [ip, #1684]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	strne	r7, [r4]
.L10386:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10388:
	ldr	r2, .L10393+24
	ldr	r0, .L10393+28
.LPIC2324:
	add	r2, pc, r2
	add	r2, r2, #3840
.LPIC2326:
	add	r0, pc, r0
	add	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
.L10379:
	mov	r0, r4
	b	.L10386
.L10392:
	ldr	r2, .L10393+32
	mvn	r4, #11
	ldr	r0, .L10393+36
.LPIC2343:
	add	r2, pc, r2
	add	r2, r2, #3840
.LPIC2345:
	add	r0, pc, r0
	add	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
	b	.L10379
.L10391:
	ldr	r2, .L10393+40
	mvn	r4, #18
	ldr	r0, .L10393+44
.LPIC2338:
	add	r2, pc, r2
	add	r2, r2, #3840
.LPIC2340:
	add	r0, pc, r0
	add	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
	b	.L10379
.L10390:
	ldr	r2, .L10393+48
	ldr	r0, .L10393+52
.LPIC2332:
	add	r2, pc, r2
	add	r2, r2, #3840
.LPIC2334:
	add	r0, pc, r0
	add	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
	b	.L10379
.L10389:
	ldr	r2, .L10393+56
	ldr	r0, .L10393+60
.LPIC2327:
	add	r2, pc, r2
	add	r2, r2, #3840
.LPIC2329:
	add	r0, pc, r0
	add	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
	b	.L10379
.L10394:
	.align	2
.L10393:
	.word	speaker_input_terminal_desc(GOT_PREL)+(.-(.LPIC2355+8))
	.word	.LANCHOR2-(.LPIC2319+8)
	.word	uac1_ac_interface_desc(GOT_PREL)+(.-(.LPIC2354+8))
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC2353+8))
	.word	.LANCHOR7-(.LPIC2351+8)
	.word	.LANCHOR0-(.LPIC2347+8)
	.word	.LANCHOR3-(.LPIC2324+8)
	.word	.LC567-(.LPIC2326+8)
	.word	.LANCHOR3-(.LPIC2343+8)
	.word	.LC570-(.LPIC2345+8)
	.word	.LANCHOR3-(.LPIC2338+8)
	.word	.LC569-(.LPIC2340+8)
	.word	.LANCHOR3-(.LPIC2332+8)
	.word	.LC568-(.LPIC2334+8)
	.word	.LANCHOR3-(.LPIC2327+8)
	.word	.LC568-(.LPIC2329+8)
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10396
	ldr	r5, .L10430
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #148]
.LPIC2356:
	add	r5, pc, r5
	strb	r4, [r5, #1562]
	strb	r4, [r5, #1570]
	strb	r4, [r5, #1583]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10396
	uxtb	r4, r4
	add	r1, r5, #1600
	add	r1, r1, #12
	strb	r4, [r6, #149]
	strb	r4, [r5, #1590]
	strb	r4, [r5, #1602]
	strb	r4, [r5, #1584]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10398
	add	r1, r5, #1616
	str	r0, [r6, #88]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10398
	add	r1, r5, #1632
	str	r0, [r6, #92]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10398
	str	r3, [r6, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #168]
	beq	.L10401
	ldr	r3, .L10430+4
.LPIC2378:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10400
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L10400:
	str	r0, [r4]
	ldr	r3, [r6, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10401
	ldr	ip, .L10430+8
	str	r6, [r3, #32]
	mov	r0, r6
	ldr	r1, .L10430+12
	mov	r3, #0
	ldr	lr, .L10430+16
	ldr	r7, [r6, #168]
.LPIC2367:
	add	ip, pc, ip
	ldrb	r8, [ip, #1614]	@ zero_extendqisi2
.LPIC2373:
	add	r1, pc, r1
	ldrb	r5, [ip, #1626]	@ zero_extendqisi2
.LPIC2366:
	add	lr, pc, lr
	add	r2, r1, #1696
	ldrb	r4, [ip, #1638]	@ zero_extendqisi2
	add	r1, r1, #1744
	add	r2, r2, #4
	add	r1, r1, #4
	str	lr, [r7, #28]
	strb	r8, [ip, #1650]
	strb	r5, [ip, #1662]
	strb	r4, [ip, #1674]
	bl	usb_assign_descriptors(PLT)
	ldr	r2, .L10430+20
	mov	r0, #0
	ldr	r3, .L10430+24
.LPIC2375:
	add	r2, pc, r2
.LPIC2376:
	add	r3, pc, r3
	strd	r2, [r6, #136]
	b	.L10402
.L10398:
	mvn	r4, #18
.L10396:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #168]
	cmp	r3, #0
	beq	.L10403
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10403:
	ldr	r3, [r6, #164]
	ldr	r1, .L10430+28
	cmp	r3, #0
	movne	r2, #0
.LPIC2377:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L10402:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10401:
	mvn	r4, #11
	b	.L10396
.L10431:
	.align	2
.L10430:
	.word	.LANCHOR2-(.LPIC2356+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2378+8))
	.word	.LANCHOR2-(.LPIC2367+8)
	.word	.LANCHOR0-(.LPIC2373+8)
	.word	ncm_notify_complete-(.LPIC2366+8)
	.word	ncm_open-(.LPIC2375+8)
	.word	ncm_close-(.LPIC2376+8)
	.word	.LC566-(.LPIC2377+8)
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10486
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	ldr	r2, .L10486+4
	strd	r6, [sp, #8]
	mov	r1, #0
	strd	r8, [sp, #16]
	mov	r7, r0
	strd	r10, [sp, #24]
.LPIC2380:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC2379:
	add	r2, pc, r2
	add	r0, r3, #660
	bl	__hid_register_driver(PLT)
	cmp	r0, #0
	beq	.L10482
.L10476:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10482:
	str	r0, [r4, #1644]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10476
	ldr	r5, .L10486+8
	ldr	r6, [r4, #84]
.LPIC2381:
	add	r5, pc, r5
	add	r1, r5, #1696
	strb	r0, [r5, #1686]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10434
	add	r5, r5, #1696
	str	r4, [r0]
	add	r5, r5, #12
	str	r0, [r4, #92]
	ldr	r0, [r6]
	mov	r1, r5
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10434
	str	r4, [r0]
	mov	r1, r5
	str	r0, [r4, #96]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10434
	ldr	fp, .L10486+12
	add	r10, r4, #1648
	add	r9, r4, #88
	add	r10, r10, #8
	mov	r6, #4
	str	r4, [r0]
	str	r0, [r4, #96]
.LPIC2394:
	add	fp, pc, fp
.L10445:
	ldr	r8, [r4, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r1, #208
	mov	r2, #2
	mov	r0, #16384
	beq	.L10483
	bl	kmalloc_order_trace(PLT)
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [r5]
	beq	.L10484
	str	fp, [r5, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r2, r10
	ldr	r1, [r4, #1660]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L10445
	ldr	r3, .L10486+16
	add	r8, r4, #1680
	mov	r6, r8
	add	r8, r8, #4
	add	r6, r6, #12
	mov	r5, r8
.LPIC2395:
	add	r3, pc, r3
	str	r3, [sp, #4]
.L10447:
	ldr	fp, [r4, #96]
	mov	r1, #208
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	str	r3, [sp]
	beq	.L10437
	bl	kmalloc_order_trace(PLT)
	ldr	r3, [sp]
	cmp	r0, #0
	str	r0, [r3]
	beq	.L10485
	ldr	r2, [sp, #4]
	str	r2, [r3, #28]
	str	r3, [r5, #4]!
	cmp	r5, r6
	bne	.L10447
	ldr	r2, [r7, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10480
	ldr	r3, .L10486+20
.LPIC2385:
	add	r3, pc, r3
	ldrb	r0, [r3, #1698]	@ zero_extendqisi2
	ldrb	r1, [r3, #1710]	@ zero_extendqisi2
	strb	r0, [r3, #1722]
	strb	r1, [r3, #1734]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10480
	strb	r0, [r3, #1746]
	mov	r0, #0
	strb	r1, [r3, #1758]
	b	.L10476
.L10480:
	mov	r0, #0
	b	.L10476
.L10484:
	ldr	r3, [r8, #8]
	mov	r0, r8
	add	r8, r4, #1680
	mov	r6, r8
	mov	r1, r5
	add	r8, r8, #4
	add	r6, r6, #12
	ldr	r3, [r3, #12]
	blx	r3
.L10437:
	ldr	r0, .L10486+24
.LPIC2393:
	add	r0, pc, r0
	bl	printk(PLT)
.L10444:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #1656]
	mov	r7, r0
	cmp	r10, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L10439
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	beq	.L10442
	ldr	r7, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, fp
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10444
.L10439:
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10442:
	ldr	r5, [r8, #4]!
	ldr	r7, [r4, #96]
	cmp	r5, #0
	beq	.L10441
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10441:
	cmp	r8, r6
	bne	.L10442
	mvn	r0, #0
	b	.L10476
.L10483:
	add	r8, r4, #1680
	mov	r6, r8
	add	r8, r8, #4
	add	r6, r6, #12
	b	.L10437
.L10434:
	mvn	r0, #18
	b	.L10476
.L10485:
	ldr	r2, [fp, #8]
	mov	r1, r3
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
	b	.L10437
.L10487:
	.align	2
.L10486:
	.word	.LANCHOR0-(.LPIC2380+8)
	.word	.LC571-(.LPIC2379+8)
	.word	.LANCHOR2-(.LPIC2381+8)
	.word	acc_complete_in-(.LPIC2394+8)
	.word	acc_complete_out-(.LPIC2395+8)
	.word	.LANCHOR2-(.LPIC2385+8)
	.word	.LC572-(.LPIC2393+8)
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	bl	usb_interface_id(PLT)
	subs	r3, r0, #0
	movlt	r0, r3
	blt	.L10489
	ldr	r4, .L10497
	strh	r3, [r5, #92]	@ movhi
	mov	r0, r6
.LPIC2396:
	add	r4, pc, r4
	add	r1, r4, #1776
	add	r1, r1, #4
	strb	r3, [r4, #1770]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10491
	ldr	r2, [r5, #88]
	mov	r0, r6
	add	r1, r4, #1792
	str	r2, [r3]
	str	r3, [r5, #100]
	bl	usb_ep_autoconfig(PLT)
	subs	ip, r0, #0
	beq	.L10491
	ldr	r3, [r5, #88]
	mov	lr, #15
	mov	r0, r5
	ldr	r1, .L10497+4
	str	r3, [ip]
	ldrb	r7, [r4, #1782]	@ zero_extendqisi2
	ldrb	r6, [r4, #1794]	@ zero_extendqisi2
.LPIC2408:
	add	r1, pc, r1
	str	ip, [r5, #104]
	add	r3, r1, #1792
	add	r2, r1, #1808
	strb	lr, [r4, #1842]
	add	r1, r1, #1824
	add	r3, r3, #4
	strb	lr, [r4, #1862]
	add	r2, r2, #12
	add	r1, r1, #12
	strb	r7, [r4, #1806]
	strb	r7, [r4, #1830]
	strb	r6, [r4, #1818]
	strb	r6, [r4, #1850]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	bne	.L10491
.L10489:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10491:
	ldr	r0, [r5, #84]
	ldr	r1, .L10497+8
	add	r0, r0, #32
.LPIC2398:
	add	r1, pc, r1
	bl	dev_err(PLT)
	movw	r0, #65012
	movt	r0, 65535
	b	.L10489
.L10498:
	.align	2
.L10497:
	.word	.LANCHOR2-(.LPIC2396+8)
	.word	.LANCHOR0-(.LPIC2408+8)
	.word	.LC573-(.LPIC2398+8)
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10562
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC2415:
	add	r3, pc, r3
	.pad #20
	sub	sp, sp, #20
	mov	r7, r3
	str	r3, [sp, #8]
	ldr	r3, [r0, #24]
	str	r0, [sp, #12]
	str	r3, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10552
	ldr	r5, .L10562+4
	ldr	r6, [r4, #84]
.LPIC2411:
	add	r5, pc, r5
	add	r1, r5, #1872
	strb	r0, [r5, #1870]
	add	r1, r1, #8
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10501
	add	r1, r5, #1888
	str	r4, [r0]
	add	r1, r1, #4
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10501
	str	r4, [r0]
	add	r1, r5, #632
	str	r0, [r4, #96]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10501
.L10502:
	ldr	r1, .L10562+8
	str	r4, [r0]
	mov	ip, #4
	ldr	r2, .L10562+12
	str	r0, [r4, #100]
	ldr	r3, .L10562+16
.LPIC2416:
	add	r1, pc, r1
	str	r1, [sp, #4]
	ldr	r8, [r7, r2]
	ldr	r7, [r7, r3]
	ldr	r1, [r8]
	cmp	r1, #16384
	strhi	ip, [r7]
	bhi	.L10504
.L10503:
	ldr	r3, [r7]
	cmp	r3, #0
	beq	.L10512
.L10504:
	mov	r5, #0
	add	r6, r4, #88
	add	r9, r4, #116
	b	.L10513
.L10507:
	ldr	r3, [sp, #4]
	str	r3, [r10, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	mov	r2, r9
	ldr	r1, [r4, #120]
	add	r0, r10, #36
	bl	__list_add(PLT)
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7]
	cmp	r5, r3
	bcs	.L10512
	ldr	r1, [r8]
.L10513:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	bl	mtp_request_new(PLT)
	subs	r10, r0, #0
	mov	r0, r6
	bne	.L10507
	ldr	r3, [r8]
	cmp	r3, #16384
	bls	.L10525
	add	r10, r4, #116
	add	r5, r4, #88
.L10509:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	fp, [r4, #116]
	mov	r9, r0
	cmp	r10, fp
	mov	r0, fp
	sub	r6, fp, #36
	beq	.L10510
	bl	list_del(PLT)
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L10527
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10509
.L10512:
	ldr	r3, .L10562+20
	ldr	r2, [sp, #8]
	ldr	r5, [r2, r3]
	ldr	r1, [r5]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	beq	.L10506
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r5]
.L10506:
	ldr	r9, .L10562+24
	mov	r6, #16384
	ldr	r7, [r4, #96]
.LPIC2417:
	add	r9, pc, r9
.L10519:
	mov	r0, r7
	bl	mtp_request_new(PLT)
	cmp	r0, #0
	beq	.L10514
	str	r9, [r0, #28]
	ldr	r1, [r5]
	str	r0, [r4, #168]
	ldr	r0, [r4, #96]
	bl	mtp_request_new(PLT)
	cmp	r0, #0
	beq	.L10560
	ldr	r7, .L10562+28
	mov	r6, #5
	mov	r8, #16
	str	r9, [r0, #28]
	str	r0, [r4, #172]
.LPIC2419:
	add	r7, pc, r7
.L10523:
	ldr	r5, [r4, #100]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	ldr	r3, .L10562+32
	mov	r2, #28
	mov	r1, #208
	beq	.L10525
	ldr	r0, [sp, #8]
	ldr	r3, [r0, r3]
	ldr	r3, [r3, #24]
	subs	r0, r3, #0
	beq	.L10521
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r9]
	beq	.L10561
.L10522:
	add	r5, r4, #88
	str	r7, [r9, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r9, #36
	bl	__list_add(PLT)
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L10523
	ldr	r3, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10557
	ldr	r3, .L10562+36
.LPIC2421:
	add	r3, pc, r3
	ldrb	r0, [r3, #1882]	@ zero_extendqisi2
	ldrb	r1, [r3, #1894]	@ zero_extendqisi2
	strb	r0, [r3, #1906]
	strb	r1, [r3, #1918]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10557
	strb	r0, [r3, #1930]
	mov	r0, r6
	strb	r1, [r3, #1942]
.L10552:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10521:
	str	r8, [r9]
	b	.L10522
.L10510:
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10527:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r3, [r8]
	str	r2, [r7]
	b	.L10503
.L10557:
	mov	r0, r6
	b	.L10552
.L10514:
	ldr	r3, [r5]
	cmp	r3, #16384
	bls	.L10525
.L10556:
	ldr	r7, [r4, #96]
.L10517:
	str	r6, [r5]
	mov	r1, #16384
	b	.L10519
.L10560:
	ldr	r3, [r5]
	cmp	r3, #16384
	bls	.L10525
	ldr	r8, [r4, #172]
	ldr	r7, [r4, #96]
	cmp	r8, #0
	beq	.L10517
	ldr	r0, [r8]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10556
.L10501:
	mvn	r0, #18
	b	.L10552
.L10561:
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10525:
	ldr	r0, .L10562+40
.LPIC2420:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L10552
.L10563:
	.align	2
.L10562:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC2415+8)
	.word	.LANCHOR2-(.LPIC2411+8)
	.word	mtp_complete_in-(.LPIC2416+8)
	.word	mtp_tx_req_len(GOT)
	.word	mtp_tx_reqs(GOT)
	.word	mtp_rx_req_len(GOT)
	.word	mtp_complete_out-(.LPIC2417+8)
	.word	mtp_complete_intr-(.LPIC2419+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR2-(.LPIC2421+8)
	.word	.LC574-(.LPIC2420+8)
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r6, #88]
	blt	.L10580
	ldr	r5, .L10584
.LPIC2431:
	add	r5, pc, r5
	add	r1, r5, #1952
	strb	r0, [r5, #1954]
	add	r1, r1, #12
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10581
	add	r1, r5, #1968
	str	r0, [r6, #100]
	add	r1, r1, #8
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10582
	add	r1, r5, #1984
	str	r0, [r6, #104]
	add	r1, r1, #4
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10583
	ldr	r7, .L10584+4
	str	r0, [r6, #108]
	str	r4, [r0]
.LPIC2441:
	add	r7, pc, r7
	add	r0, r7, #1000
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	beq	.L10571
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10573
.L10575:
	mov	r0, #0
.L10566:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10573:
	ldrb	r1, [r5, #1978]	@ zero_extendqisi2
	add	r0, r7, #1024
	ldrb	r2, [r5, #1990]	@ zero_extendqisi2
	ldrb	r3, [r5, #1966]	@ zero_extendqisi2
	strb	r1, [r5, #2002]
	strb	r2, [r5, #2014]
	strb	r3, [r5, #2026]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #8]
	bne	.L10575
.L10571:
	ldr	r2, [r6, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r6, #108]
.L10569:
	ldr	r2, [r6, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r6, #104]
	b	.L10566
.L10583:
	ldr	r1, .L10584+8
	ldr	r0, .L10584+12
.LPIC2439:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2440:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10571
.L10582:
	ldr	r1, .L10584+16
	ldr	r0, .L10584+20
.LPIC2436:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2437:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10569
.L10581:
	ldr	r1, .L10584+24
	ldr	r0, .L10584+28
.LPIC2433:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2434:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L10566
.L10580:
	ldr	r1, .L10584+32
	mov	r2, r0
	ldr	r0, .L10584+36
.LPIC2429:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2430:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r6, #88]
	b	.L10566
.L10585:
	.align	2
.L10584:
	.word	.LANCHOR2-(.LPIC2431+8)
	.word	.LANCHOR0-(.LPIC2441+8)
	.word	.LANCHOR3-(.LPIC2439+8)
	.word	.LC558-(.LPIC2440+8)
	.word	.LANCHOR3-(.LPIC2436+8)
	.word	.LC556-(.LPIC2437+8)
	.word	.LANCHOR3-(.LPIC2433+8)
	.word	.LC576-(.LPIC2434+8)
	.word	.LANCHOR3-(.LPIC2429+8)
	.word	.LC575-(.LPIC2430+8)
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L10587
	ldr	r0, .L10629
	movw	r4, #65012
	movt	r4, 65535
.LPIC2449:
	add	r0, pc, r0
	bl	printk(PLT)
.L10588:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10587:
	mov	r5, r1
	bl	usb_interface_id(PLT)
	subs	r3, r0, #0
	blt	.L10626
	ldr	r4, .L10629+4
	uxtb	r3, r3
	mov	r0, r7
	mov	r1, r5
	strb	r3, [r5, #89]
.LPIC2451:
	add	r4, pc, r4
	strb	r3, [r4, #2038]
	bl	usb_interface_id(PLT)
	subs	r3, r0, #0
	blt	.L10627
	uxtb	r3, r3
	add	r2, r4, #2048
	add	r2, r2, #12
	add	r1, r2, #8
	mov	r0, r6
	strb	r3, [r5, #88]
	strb	r3, [r4, #2050]
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10593
	add	r2, r4, #2080
	str	r3, [r5, #108]
	mov	r0, r6
	str	r5, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10593
	add	r2, r4, #2096
	str	r3, [r5, #104]
	mov	r0, r6
	add	r2, r2, #4
	str	r5, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss(PLT)
	cmp	r0, #0
	beq	.L10593
	ldr	r7, .L10629+8
	str	r0, [r5, #100]
	str	r5, [r0]
	ldrb	r1, [r4, #2070]	@ zero_extendqisi2
	ldrb	r2, [r4, #2090]	@ zero_extendqisi2
	ldrb	r3, [r4, #2110]	@ zero_extendqisi2
.LPIC2467:
	add	r7, pc, r7
	add	r0, r7, #1840
	strb	r1, [r4, #2122]
	add	r0, r0, #12
	strb	r2, [r4, #2134]
	strb	r3, [r4, #2146]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L10596
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L10628
.L10595:
	ldr	r0, .L10629+12
	ldr	r1, [r6, #28]
.LPIC2470:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r4, r0, #0
	movne	r4, #0
	bne	.L10588
	ldr	r0, [r5, #108]
	mov	r1, #1
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L10588
.L10628:
	add	r0, r7, #1872
	add	r0, r0, #4
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L10595
.L10596:
	ldr	r0, .L10629+16
.LPIC2468:
	add	r0, pc, r0
	bl	printk(PLT)
.L10592:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L10600
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L10600
	bl	kfree(PLT)
.L10600:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	movwls	r4, #65012
	movtls	r4, 65535
	bls	.L10588
	ldr	r0, [r5, #8]
	movw	r4, #65012
	cmp	r0, #0
	movteq	r4, 65535
	beq	.L10588
	bl	kfree(PLT)
	movt	r4, 65535
	b	.L10588
.L10593:
	ldr	r0, .L10629+20
.LPIC2456:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10592
.L10627:
	ldr	r0, .L10629+24
	mov	r4, r3
.LPIC2452:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10588
.L10626:
	ldr	r0, .L10629+28
	mov	r4, r3
.LPIC2450:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10588
.L10630:
	.align	2
.L10629:
	.word	.LC577-(.LPIC2449+8)
	.word	.LANCHOR2-(.LPIC2451+8)
	.word	.LANCHOR0-(.LPIC2467+8)
	.word	.LC370-(.LPIC2470+8)
	.word	.LC580-(.LPIC2468+8)
	.word	.LC579-(.LPIC2456+8)
	.word	.LC578-(.LPIC2452+8)
	.word	.LC578-(.LPIC2450+8)
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10632
	ldr	r6, .L10655
	uxtb	r3, r0
	strb	r3, [r4, #360]
.LPIC2471:
	add	r6, pc, r6
	add	r1, r6, #2160
	strb	r3, [r6, #2158]
	add	r1, r1, #8
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10633
	add	r1, r6, #2176
	str	r5, [r0]
	add	r1, r1, #4
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10633
	str	r5, [r0]
	add	r1, r6, #2192
	str	r0, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10633
	str	r5, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10634
	ldrb	r1, [r6, #2170]	@ zero_extendqisi2
	ldrb	r2, [r6, #2182]	@ zero_extendqisi2
	ldrb	r3, [r6, #2194]	@ zero_extendqisi2
	strb	r1, [r6, #2206]
	strb	r2, [r6, #2218]
	strb	r3, [r6, #2230]
.L10634:
	mov	r3, #0
	add	r2, r4, #256
	ldr	r1, [r4, #380]
	mov	r0, #4
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
.L10632:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10633:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10632
.L10656:
	.align	2
.L10655:
	.word	.LANCHOR2-(.LPIC2471+8)
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.type	__ffs_func_bind_do_nums, %function
__ffs_func_bind_do_nums:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #2
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	beq	.L10659
	cmp	r0, #3
	beq	.L10660
	cmp	r0, #1
	beq	.L10672
.L10667:
	mov	r0, #0
.L10658:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L10672:
	ldrb	r5, [r1]	@ zero_extendqisi2
	ldr	r2, [r3, #32]
	mov	r5, r5, asl #1
	ldrh	r2, [r2, r5]
	tst	r2, #32768
	bne	.L10673
.L10662:
	uxtb	r3, r2
.L10663:
	strb	r3, [r4]
	mov	r0, #0
	b	.L10658
.L10660:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L10667
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r3, [r3, #12]
	and	r2, r2, #15
	sub	r2, r2, #1
	mov	r1, r2, asl #5
	sub	r2, r1, r2, asl #2
	ldr	r1, [r3, r2]
	add	r3, r3, r2
	cmp	r1, #0
	beq	.L10668
	ldr	r2, [r3, #8]
	add	r3, r3, #8
	cmp	r2, #0
	moveq	r2, #4
	movne	r2, #0
	ldr	r3, [r3, r2]
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	b	.L10663
.L10659:
	ldr	r2, [r3, #8]
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldr	r2, [r2, #188]
	sub	r3, r3, #-536870911
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	b	.L10663
.L10668:
	mvn	r0, #21
	b	.L10658
.L10673:
	add	r1, r3, #36
	ldr	r0, [r3]
	str	r3, [sp, #4]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10658
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #32]
	strh	r0, [r2, r5]	@ movhi
	ldr	r3, [r3, #32]
	ldrh	r2, [r3, r5]
	b	.L10662
	.fnend
	.size	__ffs_func_bind_do_nums, .-__ffs_func_bind_do_nums
	.align	2
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r5, [r1, #-28]
	str	r3, [sp, #12]
	ldr	r3, [r1, #-32]
	ldr	r2, [r5, #164]
	ldr	r3, [r3, #20]
	adds	r4, r2, #0
	movne	r4, #1
	cmp	r3, #2
	movls	r8, #0
	strls	r8, [sp, #8]
	bls	.L10676
	ldr	r8, [r5, #168]
	adds	r8, r8, #0
	movne	r8, #1
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #8]
	bls	.L10676
	ldr	r10, [r5, #172]
	adds	r3, r10, #0
	movne	r3, #1
	str	r3, [sp, #8]
.L10676:
	ldrh	r3, [r5, #180]
	cmp	r4, #0
	addne	r2, r2, #1
	moveq	r2, r4
	cmp	r8, #0
	mov	r0, r3, asl #5
	sub	r0, r0, r3, asl #2
	rsb	r3, r3, r3, lsl #3
	add	r3, r2, r3
	ldr	r2, [sp, #8]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	ldrne	r3, [r5, #168]
	moveq	r3, r8
	addne	r3, r3, #1
	cmp	r2, #0
	ldr	r2, [sp, #20]
	add	r3, r3, r2
	str	r3, [sp, #24]
	beq	.L10722
	ldr	r3, [r5, #172]
	ldr	ip, [sp, #8]
	add	r3, r3, #1
.L10679:
	ldr	r0, [sp, #24]
	orr	r2, r8, r4
	orrs	r2, r2, ip
	ldr	r9, [r5, #148]
	add	r3, r3, r0
	ldrh	r0, [r5, #178]
	mov	r2, r3, asl #2
	str	r0, [sp, #32]
	str	r2, [sp, #28]
	beq	.L10723
	add	r3, r0, r3, lsl #1
	add	r0, r9, #3
	mov	r7, r1
	mov	r6, r3, asl #1
	mov	r1, #208
	add	r0, r0, r6
	bic	r0, r0, #3
	bl	__kmalloc(PLT)
	subs	r10, r0, #0
	beq	.L10724
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L10758
.L10681:
	mov	r3, r6, lsr #1
	ldr	r1, [r5, #144]
	ldr	r2, [r5, #152]
	mov	fp, r3, asl #1
	str	r3, [sp, #36]
	add	r6, r10, fp
	add	r1, r1, #16
	mov	r0, r6
	bl	memcpy(PLT)
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L10759
.L10682:
	ldr	r3, [sp, #32]
	movs	r2, r3, asl #1
	ldr	r3, [sp, #28]
	add	r3, r10, r3
	bne	.L10760
.L10683:
	ldrh	r1, [r5, #180]
	cmp	r1, #0
	beq	.L10688
	mov	r2, r1, asl #5
	mvn	r0, #0
	sub	r2, r2, r1, asl #2
	add	r2, r10, r2
.L10687:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L10687
.L10688:
	cmp	r4, #0
	str	r10, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L10686
	ldr	r3, [sp, #16]
	mov	r2, r9
	mov	r1, r6
	ldr	ip, [sp, #12]
	add	r0, r10, r3
	ldr	r3, .L10764
	str	r0, [r7, #16]
	ldr	r0, [r5, #164]
	str	ip, [sp]
.LPIC2481:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.130(PLT)
	subs	r4, r0, #0
	blt	.L10725
.L10686:
	cmp	r8, #0
	beq	.L10726
	ldr	r3, [sp, #20]
	add	r1, fp, r4
	rsb	r2, r4, r9
	ldr	ip, [sp, #12]
	add	r1, r10, r1
	add	r0, r10, r3, lsl #2
	ldr	r3, .L10764+4
	str	r0, [r7, #8]
	ldr	r0, [r5, #168]
.LPIC2482:
	add	r3, pc, r3
	str	ip, [sp]
	bl	ffs_do_descs.constprop.130(PLT)
	subs	r2, r0, #0
	blt	.L10761
.L10689:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L10690
	ldr	r3, [sp, #24]
	add	r1, r2, r4
	rsb	r4, r4, r9
	ldr	ip, [sp, #12]
	add	r1, fp, r1
	rsb	r2, r2, r4
	add	r1, r10, r1
	add	lr, r10, r3, lsl #2
	ldr	r3, .L10764+8
	str	lr, [r7, #12]
	ldr	r0, [r5, #172]
.LPIC2483:
	add	r3, pc, r3
	str	ip, [sp]
	bl	ffs_do_descs.constprop.130(PLT)
	cmp	r0, #0
	blt	.L10737
	cmp	r8, #0
	ldr	r3, [r5, #164]
	bne	.L10715
.L10716:
	ldr	r8, [r5, #172]
.L10718:
	adds	r8, r3, r8
	beq	.L10692
	cmp	r9, #1
	bls	.L10729
	ldr	r3, [sp, #36]
	ldrb	r4, [r10, r3, asl #1]	@ zero_extendqisi2
	cmp	r9, r4
	bcc	.L10729
	mov	fp, r9
	mov	r10, #0
.L10695:
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	addls	pc, pc, r3, asl #2
	b	.L10729
.L10698:
	b	.L10697
	b	.L10699
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10700
	b	.L10729
	b	.L10701
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10702
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10729
	b	.L10703
	.p2align 1
.L10762:
	subs	r0, r9, fp
	bmi	.L10737
.L10692:
	add	r7, r5, #116
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #96]
	mov	r6, r0
	add	lr, r5, #100
	ldrh	ip, [r5, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r5, #96]
	cmp	ip, #0
	beq	.L10730
	add	r0, lr, ip
	mov	r3, lr
	mov	ip, lr
.L10713:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r1, r2, #5
	cmp	r1, #1
	bhi	.L10714
	strb	r2, [ip]
	add	ip, ip, #1
.L10714:
	cmp	r3, r0
	bne	.L10713
	rsb	ip, lr, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L10711:
	add	ip, r5, ip
	strh	r3, [r5, #104]	@ movhi
	mov	r4, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r7
	strb	r4, [ip, #100]
	bl	__wake_up_locked(PLT)
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L10737:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10722:
	ldr	r3, [sp, #8]
	mov	ip, r3
	b	.L10679
.L10699:
	sub	r3, r4, #7
	tst	r3, #253
	bne	.L10729
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L10706
.L10729:
	mvn	r0, #21
	b	.L10737
.L10701:
	cmp	r4, #8
	bne	.L10729
	ldrb	r3, [r6, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10706
	ldr	r2, [r7, #-28]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #188]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [r6, #7]
	b	.L10706
.L10700:
	cmp	r4, #5
	bne	.L10729
.L10706:
	adds	r6, r6, r4
	add	r10, r10, #1
	moveq	r3, #1
	movne	r3, #0
	cmp	r8, r10
	orreq	r3, r3, #1
	rsb	fp, r4, fp
	cmp	r3, #0
	bne	.L10762
	cmp	fp, #1
	bls	.L10729
	ldrb	r4, [r6]	@ zero_extendqisi2
	cmp	fp, r4
	bcs	.L10695
	b	.L10729
.L10703:
	cmp	r4, #6
	beq	.L10706
	b	.L10729
.L10697:
	cmp	r4, #9
	bne	.L10729
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	ldr	r2, [r7, #-4]
	mov	r3, r3, asl #1
	ldrh	r2, [r2, r3]
	tst	r2, #32768
	bne	.L10763
.L10704:
	ldrb	r3, [r6, #8]	@ zero_extendqisi2
	strb	r2, [r6, #2]
	cmp	r3, #0
	beq	.L10706
	ldr	r2, [r7, #-28]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #188]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [r6, #8]
	b	.L10706
.L10715:
	ldr	r2, [r5, #168]
	add	r3, r3, r2
	b	.L10716
.L10702:
	cmp	r4, #9
	beq	.L10706
	b	.L10729
.L10760:
	mov	r0, r3
	mov	r1, #255
	bl	memset(PLT)
	mov	r3, r0
	b	.L10683
.L10759:
	ldr	r0, [r5, #152]
	ldr	r1, [r5, #144]
	ldr	r3, [r5, #156]
	ldr	r2, [r5, #160]
	add	r0, fp, r0
	add	r0, r10, r0
	add	r1, r1, r3
	bl	memcpy(PLT)
	b	.L10682
.L10758:
	mov	r1, r3
	bl	__memzero(PLT)
	b	.L10681
.L10724:
	mvn	r0, #11
	b	.L10737
.L10723:
	movw	r0, #65012
	movt	r0, 65535
	b	.L10737
.L10726:
	mov	r2, r8
	b	.L10689
.L10725:
	mov	r0, r4
	b	.L10737
.L10690:
	cmp	r8, #0
	ldr	r3, [r5, #164]
	beq	.L10718
	ldr	r2, [r5, #168]
	ldr	r8, [sp, #8]
	add	r3, r3, r2
	b	.L10718
.L10761:
	mov	r0, r2
	b	.L10737
.L10730:
	mov	r3, #1
	b	.L10711
.L10763:
	mov	r1, r7
	ldr	r0, [r7, #-36]
	str	r3, [sp, #8]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10737
	ldr	r2, [r7, #-4]
	ldr	r3, [sp, #8]
	strh	r0, [r2, r3]	@ movhi
	ldr	r2, [r7, #-4]
	ldrh	r2, [r2, r3]
	b	.L10704
.L10765:
	.align	2
.L10764:
	.word	__ffs_func_bind_do_descs-(.LPIC2481+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2482+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2483+8)
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_add_config
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r1, #20]	@ zero_extendqisi2
	cmp	r4, #0
	cmpne	r2, #0
	beq	.L10773
	mov	lr, r0
	ldr	r3, [lr, #36]!
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L10771
	b	.L10768
.L10778:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	beq	.L10768
.L10771:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L10778
	mvn	r6, #15
.L10767:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10768:
	mov	r4, r1
	add	r8, r1, #28
	mov	r6, r2
	mov	r5, r0
	str	r0, [r4, #24]
	mov	r2, lr
	ldr	r1, [r0, #40]
	mov	r0, r8
	mov	r7, #0
	bl	__list_add(PLT)
	add	r3, r4, #36
	mov	r1, #64
	strb	r7, [r4, #44]
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	bl	__memzero(PLT)
	mov	r0, r4
	blx	r6
	subs	r6, r0, #0
	blt	.L10779
.L10772:
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_reset(PLT)
	b	.L10767
.L10779:
	mov	r0, r8
	bl	list_del(PLT)
	str	r7, [r4, #24]
	b	.L10772
.L10773:
	mvn	r6, #21
	b	.L10767
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L10808
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	add	r7, r0, #60
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	ldr	r2, [r0, #12]
.LPIC2484:
	add	ip, pc, ip
	ldr	r0, .L10808+4
	add	r1, ip, #3872
	add	r1, r1, #8
.LPIC2485:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #24]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10805
	ldr	r10, [r6, #12]
	cmp	r10, r5
	beq	.L10806
.L10784:
	add	r0, r5, #28
	bl	list_del(PLT)
.L10785:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r6, r5, #36
	b	.L10790
.L10791:
	bl	list_del(PLT)
	ldr	r2, [r4, #-36]
	cmp	r2, #0
	bne	.L10807
.L10790:
	ldr	r4, [r5, #36]
	cmp	r4, r6
	mov	r0, r4
	sub	r7, r4, #72
	bne	.L10791
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L10798
	mov	r0, r5
	blx	r3
.L10798:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10807:
	mov	r1, r7
	mov	r0, r5
	blx	r2
	b	.L10790
.L10805:
	ldr	r0, .L10808+8
	mov	r1, #896
.LPIC2486:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L10798
.L10806:
	mov	r3, r10
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	movne	r9, #0
	beq	.L10788
.L10787:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10786
	blx	r3
.L10786:
	str	r9, [r4, #80]
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10787
.L10788:
	mov	r3, #0
	str	r3, [r6, #12]
	str	r3, [r6, #56]
	ldr	r3, [r10, #24]
	cmp	r3, #0
	beq	.L10785
	b	.L10784
.L10809:
	.align	2
.L10808:
	.word	.LANCHOR3-(.LPIC2484+8)
	.word	.LC581-(.LPIC2485+8)
	.word	.LC383-(.LPIC2486+8)
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10820
.L10810:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10820:
	ldr	r1, [r5, #20]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L10810
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10813
	blx	r3
	ldr	r0, [r6]
.L10813:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10810
.L10814:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10814
	b	.L10810
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L10852
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L10852+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC2487:
	add	r1, pc, r1
.LPIC2488:
	add	r0, pc, r0
	add	r1, r1, #3888
	add	r1, r1, #12
	add	r0, r0, #2240
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L10848
.L10822:
	ldr	r3, .L10852+8
.LPIC2490:
	add	r3, pc, r3
	ldr	r3, [r3, #-1468]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10849
.L10823:
	add	r2, r3, #116
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10849:
	ldr	r3, .L10852+12
.LPIC2491:
	add	r3, pc, r3
	ldr	r4, [r3, #1932]
	ldr	r6, [r3, #1916]
	cmp	r4, #0
	beq	.L10850
.L10824:
	add	r8, r4, #24
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	mov	r2, #0
	strb	r2, [r6]
	cmp	r3, r2
	beq	.L10851
	ldr	r1, [r4, #20]
	ldr	r7, [r4, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L10827
	ldr	r0, [r7]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10828
	blx	r3
	ldr	r0, [r7]
.L10828:
	ldr	r0, [r0, #4]
	mov	r5, r4
	ldr	r1, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10827
.L10829:
	mov	r1, r4
	mov	r0, r7
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10829
.L10827:
	mov	r3, #0
	str	r3, [r6, #4]
.L10831:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L10830:
	ldr	r3, .L10852+16
	mov	r2, #1
.LPIC2495:
	add	r3, pc, r3
	ldr	r3, [r3, #-1468]
	strb	r2, [r3, #161]
	b	.L10823
.L10850:
	ldr	r4, [r6, #4]
	cmp	r4, #0
	bne	.L10824
	ldr	r1, .L10852+20
	ldr	r0, .L10852+24
.LPIC2493:
	add	r1, pc, r1
	add	r1, r1, #3904
.LPIC2494:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	strb	r4, [r6]
	str	r3, [r6, #4]
	b	.L10830
.L10851:
	str	r3, [r6, #4]
	b	.L10831
.L10848:
	ldr	r0, .L10852+28
.LPIC2489:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10822
.L10853:
	.align	2
.L10852:
	.word	.LANCHOR3-(.LPIC2487+8)
	.word	.LANCHOR2-(.LPIC2488+8)
	.word	.LANCHOR4-(.LPIC2490+8)
	.word	.LANCHOR0-(.LPIC2491+8)
	.word	.LANCHOR4-(.LPIC2495+8)
	.word	.LANCHOR3-(.LPIC2493+8)
	.word	.LC583-(.LPIC2494+8)
	.word	.LC582-(.LPIC2489+8)
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #0
	add	r5, r6, #128
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r1, r5
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L10895
.L10856:
	ldr	r7, [r6]
	cmp	r7, #0
	bne	.L10896
	ldr	r8, [r6, #208]
	cmp	r8, #0
	beq	.L10867
	ldrh	r5, [r6, #180]
	cmp	r5, #0
	beq	.L10874
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L10869
	ldr	r2, [r8, #24]
	add	r3, r8, #24
	cmp	r2, r3
	bne	.L10869
	mov	r4, r8
.L10871:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L10872
	bl	d_delete(PLT)
	ldr	r0, [r4, #44]
	bl	dput(PLT)
	str	r7, [r4, #44]
.L10872:
	subs	r5, r5, #1
	add	r4, r4, #56
	beq	.L10874
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L10869
	ldr	r2, [r4, #24]
	add	r3, r4, #24
	cmp	r2, r3
	beq	.L10871
.L10869:
#APP
@ 1539 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1540, 0
.popsection
@ 0 "" 2
.L10874:
	mov	r0, r8
	bl	kfree(PLT)
.L10867:
	ldr	r0, [r6, #144]
	bl	kfree(PLT)
	ldr	r0, [r6, #184]
	bl	kfree(PLT)
	ldr	r0, [r6, #188]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L10895:
	ldr	r3, .L10900
.LPIC2496:
	add	r3, pc, r3
	ldr	r7, [r3, #1984]
	ldr	r8, [r3, #1968]
	cmp	r7, #0
	beq	.L10897
.L10857:
	add	r0, r7, #24
	bl	mutex_lock(PLT)
	ldrb	r9, [r8, #1]	@ zero_extendqisi2
	cmp	r9, #0
	moveq	r9, #1
	beq	.L10858
	ldr	r1, [r7, #20]
	ldr	r10, [r7, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r7, #20]
	bne	.L10858
	ldr	r0, [r10]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10859
	blx	r3
	ldr	r0, [r10]
.L10859:
	ldr	r0, [r0, #4]
	mov	fp, r7
	ldr	r1, [r10, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [fp, #508]!
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L10858
.L10860:
	mov	r1, r4
	mov	r0, r10
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	fp, r4
	sub	r4, r4, #120
	bne	.L10860
.L10858:
	mov	r4, #0
	str	r4, [r8, #8]
	strb	r4, [r8]
	str	r4, [r8, #4]
	ldr	r3, [r6]
	cmp	r3, r4
	beq	.L10898
	ldr	r0, [r3, #4]
	ldr	r1, [r6, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r6
	str	r4, [r6, #28]
	str	r4, [r3], #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10899
.L10877:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit(PLT)
.L10862:
	cmp	r9, #0
	beq	.L10856
	add	r0, r7, #24
	bl	mutex_unlock(PLT)
	b	.L10856
.L10896:
#APP
@ 1412 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1412, 0
.popsection
@ 0 "" 2
.L10897:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L10857
	ldr	r1, .L10900+4
	mov	r9, r7
	ldr	r0, .L10900+8
.LPIC2498:
	add	r1, pc, r1
	add	r1, r1, #3920
.LPIC2499:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L10858
.L10898:
	ldr	r0, .L10900+12
	movw	r1, #1493
.LPIC2500:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L10862
.L10899:
	ldr	r1, .L10900+16
	ldr	r0, .L10900+20
.LPIC2501:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2502:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r6
	bl	ffs_data_clear(PLT)
	ldr	r2, [r6, #120]
	add	r3, r6, #120
	cmp	r2, r3
	bne	.L10863
	ldr	r2, [r6, #40]
	add	r3, r6, #40
	cmp	r2, r3
	bne	.L10863
	ldr	r0, [r6, #136]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	b	.L10877
.L10863:
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10901:
	.align	2
.L10900:
	.word	.LANCHOR0-(.LPIC2496+8)
	.word	.LANCHOR3-(.LPIC2498+8)
	.word	.LC584-(.LPIC2499+8)
	.word	.LC18-(.LPIC2500+8)
	.word	.LANCHOR3-(.LPIC2501+8)
	.word	.LC585-(.LPIC2502+8)
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L10903
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #208]
	str	r5, [r4, #144]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	strh	r5, [r4, #176]	@ movhi
	strh	r5, [r4, #178]	@ movhi
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	str	r5, [r4, #128]
.L10903:
	add	r3, r4, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10908
.L10904:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10908:
	ldr	r1, .L10909
	ldr	r0, .L10909+4
.LPIC2503:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2504:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10905
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10905
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10904
.L10905:
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10910:
	.align	2
.L10909:
	.word	.LANCHOR3-(.LPIC2503+8)
	.word	.LC585-(.LPIC2504+8)
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super(PLT)
	ldr	r4, [r4, #616]
	cmp	r4, #0
	beq	.L10911
	add	r3, r4, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10918
.L10911:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L10918:
	ldr	r1, .L10919
	ldr	r0, .L10919+4
.LPIC2505:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2506:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10915
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10915
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L10915:
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10920:
	.align	2
.L10919:
	.word	.LANCHOR3-(.LPIC2505+8)
	.word	.LC585-(.LPIC2506+8)
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L10922
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #208]
	str	r5, [r4, #144]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	strh	r5, [r4, #176]	@ movhi
	strh	r5, [r4, #178]	@ movhi
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	str	r5, [r4, #128]
.L10922:
	add	r3, r4, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10927
.L10923:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10927:
	ldr	r1, .L10928
	ldr	r0, .L10928+4
.LPIC2507:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2508:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10924
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10924
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10923
.L10924:
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10929:
	.align	2
.L10928:
	.word	.LANCHOR3-(.LPIC2507+8)
	.word	.LC585-(.LPIC2508+8)
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r1, #36
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r8, #132]
	cmp	r3, r7
	beq	.L10958
.L10931:
	add	r4, r8, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r8, #96]
	mov	r5, r0
	add	lr, r8, #100
	ldrh	ip, [r8, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r8, #96]
	cmp	ip, #0
	beq	.L10944
	add	r0, lr, ip
	mov	r3, lr
	mov	ip, lr
.L10937:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r1, r2, #5
	cmp	r1, #1
	bhi	.L10943
	strb	r2, [ip]
	add	ip, ip, #1
.L10943:
	cmp	r3, r0
	bne	.L10937
	rsb	ip, lr, ip
	add	r3, ip, #1
	uxth	ip, ip
	uxth	r3, r3
.L10935:
	add	ip, r8, ip
	strh	r3, [r8, #104]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	mov	r8, #0
	strb	r0, [ip, #100]
	mov	r0, r4
	bl	__wake_up_locked(PLT)
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #-28]
	ldr	r4, [r6, #-24]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r4, r4, #28
	mov	r9, r0
.L10939:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L10938
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L10938
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10938:
	subs	r5, r5, #1
	str	r8, [r4, #-24]
	add	r4, r4, #28
	str	r8, [r4, #-56]
	bne	.L10939
	ldr	r0, [r6, #-28]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r4, [r6, #-28]
	add	r3, r4, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10959
.L10940:
	ldr	r0, [r6, #-24]
	bl	kfree(PLT)
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L10958:
	ldr	r4, [r1, #-24]
	add	r0, r8, #24
	mov	r9, #1
	mov	r10, #0
	ldr	r5, [r8, #208]
	ldrh	fp, [r8, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r4, r4, #28
	str	r0, [sp, #4]
.L10933:
	str	r9, [r5, #32]
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L10932
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #4]
	blx	r2
	ldr	r2, [r4, #-28]
	str	r10, [r2]
.L10932:
	subs	fp, fp, #1
	str	r10, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L10933
	ldr	r0, [r6, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	fp, [r8, #132]
	b	.L10931
.L10959:
	ldr	r1, .L10960
	ldr	r0, .L10960+4
.LPIC2509:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2510:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10941
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10941
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10940
.L10944:
	mov	r3, #1
	b	.L10935
.L10941:
#APP
@ 1362 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10961:
	.align	2
.L10960:
	.word	.LANCHOR3-(.LPIC2509+8)
	.word	.LC585-(.LPIC2510+8)
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10985
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC2522:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	ldr	r7, [r1, #24]
	ldr	r0, [r3, #28]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L10970
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L10982
.L10963:
	ldr	r0, .L10985+4
	add	r3, r5, #84
	ldr	r1, .L10985+8
	ldr	r2, .L10985+12
	ldr	lr, .L10985+16
.LPIC2512:
	add	r0, pc, r0
	ldr	ip, .L10985+20
.LPIC2513:
	add	r1, pc, r1
.LPIC2514:
	add	r2, pc, r2
	str	r0, [r4, #36]
	ldr	r0, .L10985+24
	ldr	r8, [r5, #188]
	str	r1, [r4, #68]
.LPIC2515:
	add	lr, pc, lr
	str	r2, [r4, #72]
	ldr	r1, .L10985+28
.LPIC2516:
	add	ip, pc, ip
	ldr	r2, .L10985+32
	str	r6, [r4]
.LPIC2517:
	add	r0, pc, r0
	str	lr, [r4, #76]
	str	r8, [r4, #40]
.LPIC2518:
	add	r1, pc, r1
	str	ip, [r4, #84]
.LPIC2519:
	add	r2, pc, r2
	strd	r0, [r4, #88]
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	add	r1, r4, #36
	bl	usb_add_function(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	bne	.L10983
.L10964:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10970:
	mov	r4, #16
	b	.L10963
.L10982:
	mvn	r0, #11
	b	.L10964
.L10983:
	ldr	r3, [r4, #8]
	mov	r8, #0
	ldr	r5, [r4, #12]
	add	r0, r3, #24
	ldrh	r7, [r3, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r5, r5, #28
	mov	r9, r0
.L10966:
	ldr	r0, [r5, #-28]
	cmp	r0, #0
	beq	.L10965
	ldr	r1, [r5, #-24]
	cmp	r1, #0
	beq	.L10965
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10965:
	subs	r7, r7, #1
	str	r8, [r5, #-24]
	add	r5, r5, #28
	str	r8, [r5, #-56]
	bne	.L10966
	ldr	r0, [r4, #8]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r4, #8]
	add	r3, r5, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10984
.L10967:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r6
	b	.L10964
.L10984:
	ldr	r1, .L10985+36
	ldr	r0, .L10985+40
.LPIC2520:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2521:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	ffs_data_clear(PLT)
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L10968
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L10968
	ldr	r0, [r5, #136]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L10967
.L10968:
	bl	ffs_data_put.part.66(PLT)
.L10986:
	.align	2
.L10985:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2522+8))
	.word	.LC586-(.LPIC2512+8)
	.word	ffs_func_bind-(.LPIC2513+8)
	.word	ffs_func_unbind-(.LPIC2514+8)
	.word	ffs_func_set_alt-(.LPIC2515+8)
	.word	ffs_func_disable-(.LPIC2516+8)
	.word	ffs_func_setup-(.LPIC2517+8)
	.word	ffs_func_suspend-(.LPIC2518+8)
	.word	ffs_func_resume-(.LPIC2519+8)
	.word	.LANCHOR3-(.LPIC2520+8)
	.word	.LC585-(.LPIC2521+8)
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	str	lr, [sp, #32]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	movw	lr, #16704
	mov	r8, r0
	strd	r6, [sp, #8]
	mov	r9, r1
	mov	r7, r2
	strd	r10, [sp, #24]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #32]
	str	r3, [sp, #44]
	strh	ip, [sp, #32]	@ movhi
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	strh	lr, [sp, #44]	@ movhi
	beq	.L10988
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10988
	ldr	r3, .L11039
.LPIC2527:
	add	r3, pc, r3
	str	r3, [sp, #4]
	ldr	r3, .L11039+4
.LPIC2525:
	add	r3, pc, r3
	str	r3, [sp, #8]
	ldr	r3, .L11039+8
.LPIC2526:
	add	r3, pc, r3
	str	r3, [sp, #16]
	ldr	r3, .L11039+12
.LPIC2528:
	add	r3, pc, r3
	str	r3, [sp, #12]
	ldr	r3, .L11039+16
.LPIC2529:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L11001:
	mov	r1, #44
	mov	r0, r4
	bl	strchr(PLT)
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strneb	r3, [r6]
	bl	strchr(PLT)
	subs	r5, r0, #0
	beq	.L11032
	mov	r3, #0
	mov	r10, r5
	mov	r2, r3
	add	r1, sp, #28
	strb	r3, [r10], #1
	mov	r0, r10
	bl	simple_strtoul(PLT)
	ldr	r3, [sp, #28]
	mov	fp, r0
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	cmpne	r3, #44
	bne	.L11033
	rsb	r5, r4, r5
	cmp	r5, #4
	beq	.L10994
	cmp	r5, #5
	beq	.L10995
	cmp	r5, #3
	beq	.L11034
.L10993:
	ldr	r0, .L11039+20
	mov	r1, r4
.LPIC2530:
	add	r0, pc, r0
	bl	printk(PLT)
.L10991:
	mvn	r0, #21
.L11025:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11034:
	mov	r2, r5
	ldr	r1, [sp, #12]
	mov	r0, r4
	bl	memcmp(PLT)
	cmp	r0, #0
	streq	fp, [sp, #36]
	beq	.L10998
	mov	r2, r5
	ldr	r1, [sp, #20]
	mov	r0, r4
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10993
	str	fp, [sp, #40]
.L10998:
	cmp	r6, #0
	beq	.L10988
	add	r4, r6, #1
	b	.L11001
.L10988:
	ldr	r3, .L11039+24
.LPIC2547:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11035
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L11029
.L11003:
	ldr	r4, .L11039+28
	mov	r3, #1
	mov	r10, #0
	ldr	r1, .L11039+32
	add	r0, r6, #4
	add	fp, sp, #32
	str	r3, [r6, #84]
	ldr	r5, .L11039+36
	str	r10, [r6, #88]
.LPIC2531:
	add	r4, pc, r4
	str	r10, [r6, #92]
	add	ip, r4, #3616
.LPIC2532:
	add	r1, pc, r1
	str	r3, [sp, #8]
	add	ip, ip, #4
	add	r4, r4, #3552
	mov	r2, ip
.LPIC2536:
	add	r5, pc, r5
	str	ip, [sp, #4]
	add	r4, r4, #4
	bl	__mutex_init(PLT)
	ldr	ip, [sp, #4]
	add	r0, r6, #116
	str	r10, [r6, #24]
	ldr	r1, .L11039+40
	mov	r2, ip
.LPIC2534:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	mov	r2, r4
	mov	r1, r5
	str	r10, [r6, #32]
	add	r0, r6, #36
	bl	__init_waitqueue_head(PLT)
	mov	r2, r4
	mov	r1, r5
	str	r10, [r6, #68]
	add	r0, r6, #72
	bl	__init_waitqueue_head(PLT)
	mov	r2, r4
	mov	r1, r5
	str	r10, [r6, #52]
	add	r0, r6, #56
	bl	__init_waitqueue_head(PLT)
	ldr	r3, [sp, #8]
	mov	r0, r7
	mov	r1, #208
	ldr	r2, [fp, #8]
	ldrd	r4, [sp, #32]
	strh	r3, [r6, #106]	@ movhi
	str	r2, [r6, #204]
	strd	r4, [r6, #196]
	bl	kstrdup(PLT)
	cmp	r0, r10
	str	r0, [r6, #136]
	beq	.L11036
	ldr	r3, .L11039+44
	str	r10, [r6, #140]
	mov	r2, fp
	mov	r1, r9
	mov	r0, r8
	str	r6, [sp, #52]
.LPIC2543:
	add	r3, pc, r3
	bl	mount_nodev(PLT)
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L11037
.L11011:
	mov	r0, r4
	b	.L11025
.L10995:
	mov	r2, r5
	ldr	r1, [sp, #8]
	mov	r0, r4
	bl	memcmp(PLT)
	cmp	r0, #0
	beq	.L11038
	mov	r2, r5
	ldr	r1, [sp, #16]
	mov	r0, r4
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10993
	movw	r3, #438
	and	r3, r3, fp
	mvn	r3, r3, asl #17
	mvn	r3, r3, lsr #17
	strh	r3, [sp, #32]	@ movhi
	b	.L10998
.L10994:
	mov	r2, r5
	ldr	r1, [sp, #4]
	mov	r0, r4
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10993
	uxth	fp, fp
	movw	r3, #438
	movw	r2, #365
	and	r3, r3, fp
	and	r2, r2, fp
	mvn	r3, r3, asl #17
	orr	r2, r2, #16384
	mvn	r3, r3, lsr #17
	strh	r2, [sp, #44]	@ movhi
	strh	r3, [sp, #32]	@ movhi
	b	.L10998
.L11038:
	movw	r3, #365
	and	r3, r3, fp
	orr	r3, r3, #16384
	strh	r3, [sp, #44]	@ movhi
	b	.L10998
.L11036:
	add	r3, r6, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, r10
	bne	.L11029
	ldr	r1, .L11039+48
	ldr	r0, .L11039+52
.LPIC2541:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2542:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r6
	bl	ffs_data_clear(PLT)
	ldr	r2, [r6, #120]
	add	r3, r6, #120
	cmp	r2, r3
	bne	.L11007
	ldr	r2, [r6, #40]
	add	r3, r6, #40
	cmp	r2, r3
	bne	.L11007
	ldr	r0, [r6, #136]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L11029:
	mvn	r0, #11
	b	.L11025
.L11035:
	mov	r6, #16
	b	.L11003
.L11032:
	ldr	r0, .L11039+56
	mov	r1, r4
.LPIC2523:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10991
.L11033:
	ldr	r0, .L11039+60
	mov	r2, r10
	mov	r1, r4
.LPIC2524:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10991
.L11037:
	ldr	r5, [sp, #52]
	cmp	r5, #0
	beq	.L11011
	add	r3, r5, #84
#APP
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	bne	.L11011
	ldr	r1, .L11039+64
	ldr	r0, .L11039+68
.LPIC2544:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2545:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	ffs_data_clear(PLT)
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L11007
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L11007
	ldr	r0, [r5, #136]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L11025
.L11007:
	bl	ffs_data_put.part.66(PLT)
.L11040:
	.align	2
.L11039:
	.word	.LC591-(.LPIC2527+8)
	.word	.LC589-(.LPIC2525+8)
	.word	.LC590-(.LPIC2526+8)
	.word	.LC592-(.LPIC2528+8)
	.word	.LC593-(.LPIC2529+8)
	.word	.LC594-(.LPIC2530+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2547+8))
	.word	.LANCHOR4-(.LPIC2531+8)
	.word	.LC595-(.LPIC2532+8)
	.word	.LC481-(.LPIC2536+8)
	.word	.LC596-(.LPIC2534+8)
	.word	ffs_sb_fill-(.LPIC2543+8)
	.word	.LANCHOR3-(.LPIC2541+8)
	.word	.LC585-(.LPIC2542+8)
	.word	.LC587-(.LPIC2523+8)
	.word	.LC588-(.LPIC2524+8)
	.word	.LANCHOR3-(.LPIC2544+8)
	.word	.LC585-(.LPIC2545+8)
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.global	usb_string_id
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L11043
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
.L11042:
	bx	lr
.L11043:
	mvn	r0, #18
	b	.L11042
	.fnend
	.size	usb_string_id, .-usb_string_id
	.section	.text.unlikely
	.align	2
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11045
	mov	r5, r0
	bl	usb_string_id(PLT)
	cmp	r0, #0
	strgeb	r0, [r4]
	bge	.L11045
	ldr	r0, [r5]
	ldr	r1, .L11048
	add	r0, r0, #32
.LPIC2548:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L11045:
	ldrb	r0, [r4]	@ zero_extendqisi2
	ldmfd	sp!, {r4, r5, r6, pc}
.L11049:
	.align	2
.L11048:
	.word	.LC597-(.LPIC2548+8)
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r6, .L11099
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC2578:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L11065
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L11094
.L11051:
	mov	r3, #0
	add	r8, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r8
	str	r3, [r4, #60]
	bl	dev_set_drvdata(PLT)
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #4]
	beq	.L11053
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11054
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L11054:
	str	r0, [r7]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11053
	ldr	r3, .L11099+4
	mov	r1, #4096
	ldr	r9, .L11099+8
	ldr	r7, .L11099+12
.LPIC2550:
	add	r3, pc, r3
.LPIC2551:
	add	r9, pc, r9
	str	r3, [r2, #28]
	ldr	r3, [r9, #24]
.LPIC2552:
	add	r7, pc, r7
	ldr	r2, [r5, #4]
	str	r4, [r2]
	ldr	r0, [r4]
	str	r3, [r4, #44]
	str	r1, [r4, #8]
	bl	usb_ep_autoconfig_reset(PLT)
	ldr	r3, [r7, #3620]
	mov	r0, r4
	blx	r3
	subs	r6, r0, #0
	bge	.L11095
.L11055:
	mov	r0, r5
	bl	composite_unbind(PLT)
	mov	r0, r6
.L11052:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11053:
	mvn	r6, #11
	b	.L11055
.L11065:
	mov	r4, #16
	b	.L11051
.L11094:
	mvn	r0, #11
	b	.L11052
.L11095:
	ldr	r1, [r9, #24]
	movw	r2, #3624
	movw	r3, #3626
	ldrh	r2, [r7, r2]
	ldr	r7, .L11099+16
	ldr	r1, [r1, #12]
	cmp	r2, #0
.LPIC2559:
	add	r7, pc, r7
	ldr	r6, [r1]	@ unaligned
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	str	r6, [r4, #17]	@ unaligned
	ldr	r6, .L11099+20
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	ldr	r0, .L11099+24
	strneh	r2, [r4, #25]	@ unaligned
.LPIC2557:
	add	r6, pc, r6
	add	r6, r6, #3968
	add	r6, r6, #8
	strh	r1, [r4, #33]	@ unaligned
	ldr	r1, .L11099+28
.LPIC2556:
	add	r0, pc, r0
.LPIC2555:
	add	r1, pc, r1
	ldrh	r3, [r1, r3]
	movw	r1, #3628
	ldrh	r1, [r0, r1]
	ldr	r0, .L11099+32
	cmp	r3, #0
	strneh	r3, [r4, #27]	@ unaligned
	cmp	r1, #0
.LPIC2558:
	add	r0, pc, r0
	strneh	r1, [r4, #29]	@ unaligned
	mov	r1, r6
	bl	printk(PLT)
	ldr	r0, .L11099+36
	movw	r3, #3628
	mov	r1, r6
	ldrh	r2, [r7, r3]
.LPIC2561:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r7, #3608]
	cmp	r3, #0
	beq	.L11096
.L11059:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id(PLT)
	strb	r0, [r4, #49]
.L11060:
	ldr	r6, .L11099+40
	ldr	r1, .L11099+44
	ldr	r0, .L11099+48
.LPIC2567:
	add	r6, pc, r6
.LPIC2568:
	add	r1, pc, r1
	add	r2, r6, #3552
	add	r1, r1, #3968
.LPIC2569:
	add	r0, pc, r0
	add	r2, r2, #4
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [r6, #3612]
	cmp	r3, #0
	beq	.L11097
.L11061:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id(PLT)
	strb	r0, [r4, #50]
.L11062:
	ldr	r3, .L11099+52
.LPIC2572:
	add	r3, pc, r3
	ldr	r3, [r3, #3616]
	cmp	r3, #0
	beq	.L11063
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id(PLT)
	strb	r0, [r4, #51]
.L11063:
	ldr	r3, .L11099+56
.LPIC2573:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11064
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11098
.L11064:
	ldr	r1, .L11099+60
	mov	r0, r8
.LPIC2575:
	add	r1, pc, r1
	add	r1, r1, #644
	bl	device_create_file(PLT)
	subs	r6, r0, #0
	bne	.L11055
	ldr	r3, .L11099+64
	ldr	r0, [r4]
	ldr	r1, .L11099+68
.LPIC2576:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	add	r0, r0, #32
.LPIC2577:
	add	r1, pc, r1
	ldr	r2, [r3]
	bl	_dev_info(PLT)
	mov	r0, r6
	b	.L11052
.L11097:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11062
	ldr	r3, .L11099+72
.LPIC2571:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L11061
	b	.L11062
.L11098:
	ldr	r0, [r4]
	ldr	r1, .L11099+76
	add	r0, r0, #32
.LPIC2574:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11064
.L11096:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11060
	ldr	r3, .L11099+80
.LPIC2563:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L11059
	ldrb	r3, [r7, #3556]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11059
	ldr	r3, .L11099+84
	add	r0, r7, #3552
	mov	r1, #50
	ldr	ip, [r5, #28]
	add	r0, r0, #4
	ldr	r2, .L11099+88
.LPIC2579:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	ip, [sp, #4]
.LPIC2565:
	add	r2, pc, r2
	add	ip, r3, #134
	add	r3, r3, #4
	str	ip, [sp]
	bl	scnprintf(PLT)
	b	.L11059
.L11100:
	.align	2
.L11099:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2578+8))
	.word	composite_setup_complete-(.LPIC2550+8)
	.word	.LANCHOR1-(.LPIC2551+8)
	.word	.LANCHOR4-(.LPIC2552+8)
	.word	.LANCHOR4-(.LPIC2559+8)
	.word	.LANCHOR3-(.LPIC2557+8)
	.word	.LANCHOR4-(.LPIC2556+8)
	.word	.LANCHOR4-(.LPIC2555+8)
	.word	.LC598-(.LPIC2558+8)
	.word	.LC599-(.LPIC2561+8)
	.word	.LANCHOR4-(.LPIC2567+8)
	.word	.LANCHOR3-(.LPIC2568+8)
	.word	.LC601-(.LPIC2569+8)
	.word	.LANCHOR4-(.LPIC2572+8)
	.word	.LANCHOR1-(.LPIC2573+8)
	.word	.LANCHOR0-(.LPIC2575+8)
	.word	.LANCHOR1-(.LPIC2576+8)
	.word	.LC603-(.LPIC2577+8)
	.word	.LANCHOR1-(.LPIC2571+8)
	.word	.LC602-(.LPIC2574+8)
	.word	.LANCHOR1-(.LPIC2563+8)
	.word	init_uts_ns(GOT_PREL)+(.-(.LPIC2579+8))
	.word	.LC600-(.LPIC2565+8)
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r6, .L11134
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #508
	sub	sp, sp, #508
.LPIC2580:
	add	r6, pc, r6
	str	r0, [sp, #20]
	str	r3, [sp, #12]
	ldrb	r3, [r6, #2016]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11102
	ldr	r0, [sp, #12]
	bl	usb_string_id(PLT)
	subs	r5, r0, #0
	blt	.L11103
	strb	r5, [r6, #2016]
.L11102:
	ldr	r7, [sp, #20]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11103
	ldr	r6, .L11134+4
	mov	r1, r4
	mov	r0, r7
.LPIC2582:
	add	r6, pc, r6
	strb	r5, [r6, #2266]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11103
	uxtb	r5, r5
	add	r1, r6, #2288
	add	r1, r1, #12
	strb	r5, [r6, #2278]
	strb	r5, [r6, #2296]
	ldr	r5, [sp, #12]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L11104
	add	r1, r6, #2304
	str	r5, [r0]
	ldr	r0, [r5]
	add	r1, r1, #8
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L11116
	str	r5, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	mov	r0, r3
	str	r3, [sp, #16]
	beq	.L11117
	add	r2, r6, #2288
	add	r3, r6, #2256
	add	r1, r3, #20
	mov	ip, r0
	str	r2, [r0, #4]
	add	r2, r3, #68
	add	r3, r3, #8
	str	r1, [r0, #8]
	str	r3, [r0]
	ldr	r3, [r4, #324]
	ldr	r1, [r4, #320]
	str	r2, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r1
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r2, #5]	@ unaligned
	beq	.L11118
	add	lr, r6, #2320
	mov	r0, #1
	mov	r5, #0
	add	lr, lr, #15
	mov	r6, r0
	mov	r9, r5
	add	r2, sp, #24
	add	r3, sp, #360
	mov	r8, #36
	mov	r7, #2
.L11107:
	mov	r1, #6
	strb	r0, [r2, #4]
	add	r0, r0, #2
	strb	r8, [r2, #1]
	sub	r10, r0, #1
	add	r5, r5, #1
	strb	r1, [r2]
	add	r1, r0, #3
	add	ip, ip, #8
	strb	r7, [r2, #2]
	str	r1, [sp, #4]
	mov	r1, #9
	strb	r7, [r2, #3]
	str	r1, [sp, #8]
	ldrb	r1, [sp, #8]	@ zero_extendqisi2
	strb	r9, [r2, #5]
	str	r2, [ip, #8]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #6
	strb	r10, [r3, #4]
	strb	r1, [r3]
	mov	r1, #3
	strb	r8, [r3, #1]
	str	r1, [sp, #8]
	ldrb	r1, [sp, #8]	@ zero_extendqisi2
	strb	r6, [r3, #3]
	strb	r6, [r3, #5]
	strb	r6, [r3, #7]
	strb	r1, [r3, #2]
	strb	r9, [r3, #8]
	strb	fp, [r3, #6]
	str	r3, [ip, #12]
	ldrb	r10, [r3, #4]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [lr, #1]!
	ldr	r10, [r4, #320]
	cmp	r5, r10
	bcc	.L11107
	ldr	r1, [sp, #4]
	mov	r3, r1, asl #2
	add	lr, r3, #4
	add	ip, r3, #8
.L11106:
	ldr	r2, [r4, #324]
	cmp	r2, #0
	beq	.L11119
	ldr	r6, .L11134+8
	mov	ip, #0
	add	r2, sp, #120
	ldr	r3, [sp, #16]
	mov	r9, ip
	mov	r8, #36
	mov	r7, #2
	mov	lr, #1
.LPIC2593:
	add	r6, pc, r6
	add	r6, r6, #2352
	add	r5, r3, r1, lsl #2
	add	r6, r6, #3
	add	r3, sp, #216
	str	r6, [sp, #4]
.L11109:
	mov	r6, #9
	ldr	fp, [sp, #16]
	mov	r10, #6
	strb	r0, [r2, #4]
	add	r0, r0, #2
	add	ip, ip, #1
	str	r6, [sp, #8]
	ldrb	r6, [sp, #8]	@ zero_extendqisi2
	add	r5, r5, #8
	strb	r10, [r2]
	sub	r10, r0, #1
	strb	r8, [r2, #1]
	strb	r7, [r2, #2]
	strb	lr, [r2, #3]
	strb	r9, [r2, #5]
	str	r2, [fp, r1, asl #2]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	add	r1, r1, #2
	strb	r6, [r3]
	mov	r6, #3
	add	r2, r2, #6
	strb	r10, [r3, #4]
	str	r6, [sp, #8]
	ldrb	r6, [sp, #8]	@ zero_extendqisi2
	strb	r8, [r3, #1]
	strb	r7, [r3, #3]
	strb	lr, [r3, #5]
	strb	r6, [r3, #2]
	ldr	r6, [sp, #4]
	strb	r9, [r3, #8]
	strb	lr, [r3, #7]
	strb	fp, [r3, #6]
	str	r3, [r5, #-4]
	ldrb	r10, [r2, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [r6, #1]!
	ldr	r10, [r4, #324]
	str	r6, [sp, #4]
	cmp	ip, r10
	bcc	.L11109
	uxtb	r2, r10
	mov	r3, r1, asl #2
	ldr	r10, [r4, #320]
	add	r0, r2, #4
	add	lr, r3, #4
	uxtb	r0, r0
	add	ip, r3, #8
.L11108:
	ldr	r7, .L11134+12
	uxtb	r10, r10
	ldr	r5, [sp, #16]
	add	r1, r1, #3
	mov	r9, #0
.LPIC2594:
	add	r7, pc, r7
	add	fp, r5, r1, lsl #2
	add	r5, r10, #4
	strb	r2, [r7, #2335]
	ldr	r2, [sp, #16]
	add	r6, r7, #2288
	strb	r5, [r7, #2352]
	add	r8, r7, #2320
	add	r5, r7, #2304
	strb	r0, [r7, #2332]
	add	r5, r5, #8
	add	r6, r6, #12
	strb	r10, [r7, #2355]
	add	r8, r8, #12
	add	r7, r7, #2352
	str	r5, [r2, r3]
	mov	r0, r2
	str	r7, [r2, lr]
	str	r6, [r2, ip]
	str	r8, [r2, r1, asl #2]
	str	r9, [fp, #4]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, r9
	str	r0, [r4, #16]
	beq	.L11110
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11113
	mov	r3, #512
	ldr	r0, [sp, #16]
	strh	r3, [r6, #4]	@ movhi
	strh	r3, [r5, #4]	@ movhi
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11110
.L11113:
	ldr	r0, [sp, #16]
	bl	kfree(PLT)
	mov	r0, #0
	b	.L11132
.L11117:
	mvn	r5, #11
.L11103:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11105
.L11115:
	mov	r2, #0
	str	r2, [r3]
.L11105:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11114:
	ldr	r3, [sp, #12]
	ldr	r1, .L11134+16
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
.LPIC2604:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
.L11132:
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11104:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L11115
	b	.L11114
.L11116:
	mvn	r5, #18
	b	.L11105
.L11110:
	ldr	r0, [sp, #16]
	mvn	r5, #18
	bl	kfree(PLT)
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	b	.L11103
.L11119:
	mov	r0, #4
	b	.L11108
.L11118:
	mov	ip, #24
	mov	lr, #20
	mov	r3, #16
	mov	r1, #4
	mov	r0, #1
	b	.L11106
.L11135:
	.align	2
.L11134:
	.word	.LANCHOR0-(.LPIC2580+8)
	.word	.LANCHOR2-(.LPIC2582+8)
	.word	.LANCHOR2-(.LPIC2593+8)
	.word	.LANCHOR2-(.LPIC2594+8)
	.word	.LC566-(.LPIC2604+8)
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L11248
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r1, .L11248+4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2605:
	add	r3, pc, r3
	str	lr, [sp, #32]
	ldr	fp, [r0]
	ldr	r4, [r3, #20]
.LPIC2606:
	add	r1, pc, r1
	.pad #20
	sub	sp, sp, #20
	ldr	r0, .L11248+8
	add	r1, r1, #3984
	add	r1, r1, #8
	str	r6, [r4, #-512]
.LPIC2607:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11137
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L11137:
	ldr	r3, .L11248+12
.LPIC2608:
	add	r3, pc, r3
	ldr	r3, [r3, #-576]
	cmp	r3, #1
	beq	.L11138
.L11145:
	mov	r0, r6
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11237
	ldr	r5, .L11248+16
	uxtb	r4, r0
	mov	r0, r6
	ldr	r7, .L11248+20
.LPIC2625:
	add	r5, pc, r5
.LPIC2626:
	add	r7, pc, r7
	strb	r4, [r5, #2032]
	strb	r4, [r7, #406]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11237
	ldr	r4, .L11248+24
	uxtb	r0, r0
	mov	r2, #255
	ldr	r8, .L11248+28
	strb	r0, [r5, #2040]
.LPIC2629:
	add	r4, pc, r4
	strb	r0, [r7, #407]
.LPIC2630:
	add	r8, pc, r8
	mov	r1, r4
	sub	r0, r8, #924
	bl	strlcpy(PLT)
	sub	r0, r8, #1168
	mov	r1, r4
	mov	r2, #255
	sub	r0, r0, #12
	bl	strlcpy(PLT)
	ldr	r0, .L11248+32
	mov	r2, #255
	ldr	r1, .L11248+36
.LPIC2634:
	add	r0, pc, r0
.LPIC2633:
	add	r1, pc, r1
	add	r0, r0, #28
	bl	strlcpy(PLT)
	mov	r0, r6
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11237
	uxtb	r4, r0
	ldr	r6, [fp, #28]
	ldr	r0, .L11248+40
	strb	r4, [r5, #2048]
	mov	r1, r6
	strb	r4, [r7, #408]
.LPIC2637:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11241
	movw	r2, #513
.L11166:
	ldr	r3, .L11248+44
.LPIC2665:
	add	r3, pc, r3
	add	r3, r3, #392
	strh	r2, [r3, #12]	@ movhi
.L11168:
	ldr	r3, .L11248+48
	mov	r2, #4
	mov	r0, #0
.LPIC2664:
	add	r3, pc, r3
	str	r2, [r3, #3632]
.L11237:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11138:
	ldr	r2, .L11248+52
	ldr	r3, [r4, #-516]
.LPIC2609:
	add	r2, pc, r2
	str	r3, [sp, #12]
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r7, r3, #520
	bne	.L11144
	b	.L11141
.L11242:
	ldr	r3, [r7, #520]
	cmp	r3, r2
	sub	r7, r3, #520
	beq	.L11141
.L11144:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L11242
.L11141:
	ldr	r3, [sp, #12]
	ldr	r5, [r3]
	cmp	r5, #0
	beq	.L11145
	ldr	r10, .L11248+56
	mov	r8, #1
	ldr	r3, .L11248+60
.LPIC2612:
	add	r10, pc, r10
.LPIC2613:
	add	r3, pc, r3
	str	r3, [sp, #8]
.L11158:
	ldr	r2, [r5]
	mov	r1, r10
	mov	r0, #208
	bl	kasprintf(PLT)
	mov	r9, #0
	cmp	r0, #0
	str	r0, [r5, #12]
	str	r9, [r5, #20]
	beq	.L11170
	ldr	ip, [sp, #8]
	mov	r3, r5
	mov	r2, r8
	ldr	r1, [r7, #12]
	ldr	ip, [ip, #3552]
	str	r0, [sp]
	mov	r0, ip
	bl	device_create(PLT)
	cmn	r0, #4096
	str	r0, [r5, #8]
	bhi	.L11243
	ldr	r3, [r5, #24]
	cmp	r3, #0
	beq	.L11149
	mov	r1, r6
	mov	r0, r5
	blx	r3
	subs	r4, r0, #0
	bne	.L11244
.L11149:
	ldr	r9, [r5, #16]
	cmp	r9, #0
	beq	.L11151
	ldr	r1, [r9]
	add	r9, r9, #4
	cmp	r1, #0
	bne	.L11153
	b	.L11151
.L11245:
	cmp	r0, #0
	bne	.L11156
.L11153:
	ldr	r0, [r5, #8]
	bl	device_create_file(PLT)
	ldr	r1, [r9], #4
	mov	r4, r0
	cmp	r1, #0
	bne	.L11245
	cmp	r0, #0
	bne	.L11156
.L11151:
	ldr	r3, [sp, #12]
	add	r8, r8, #1
	add	r3, r3, r8, lsl #2
	ldr	r5, [r3, #-4]
	cmp	r5, #0
	bne	.L11158
	b	.L11145
.L11156:
	ldr	r2, .L11248+64
	sub	r8, r9, #8
	ldr	r0, .L11248+68
	ldr	r3, [r5]
.LPIC2620:
	add	r2, pc, r2
	add	r2, r2, #4000
.LPIC2622:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	ldr	r3, [r5, #16]
	ldr	r1, [r9, #-8]
	cmp	r8, r3
	beq	.L11155
.L11159:
	ldr	r0, [r5, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r8], #-4
	ldr	r3, [r5, #16]
	cmp	r8, r3
	bne	.L11159
.L11155:
	ldr	r3, [r5, #28]
	cmp	r3, #0
	beq	.L11150
	mov	r0, r5
	blx	r3
	b	.L11150
.L11241:
	ldr	r0, .L11248+72
	mov	r1, r6
.LPIC2638:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11176
	ldr	r0, .L11248+76
	mov	r1, r6
.LPIC2639:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11177
	ldr	r0, .L11248+80
	mov	r1, r6
.LPIC2640:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11178
	ldr	r0, .L11248+84
	mov	r1, r6
.LPIC2641:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11179
	ldr	r0, .L11248+88
	mov	r1, r6
.LPIC2642:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11180
	ldr	r0, .L11248+92
	mov	r1, r6
.LPIC2643:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11181
	ldr	r0, .L11248+96
	mov	r1, r6
.LPIC2644:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11182
	ldr	r0, .L11248+100
	mov	r1, r6
.LPIC2645:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11183
	ldr	r0, .L11248+104
	mov	r1, r6
.LPIC2646:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11184
	ldr	r0, .L11248+108
	mov	r1, r6
.LPIC2647:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11185
	ldr	r0, .L11248+112
	mov	r1, r6
.LPIC2648:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11186
	ldr	r0, .L11248+116
	mov	r1, r6
.LPIC2649:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11187
	ldr	r0, .L11248+120
	mov	r1, r6
.LPIC2650:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11188
	ldr	r0, .L11248+124
	mov	r1, r6
.LPIC2651:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11189
	ldr	r0, .L11248+128
	mov	r1, r6
.LPIC2652:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11190
	ldr	r0, .L11248+132
	mov	r1, r6
.LPIC2653:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11191
	ldr	r0, .L11248+136
	mov	r1, r6
.LPIC2654:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11192
	ldr	r0, .L11248+140
	mov	r1, r6
.LPIC2655:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11193
	ldr	r0, .L11248+144
	mov	r1, r6
.LPIC2656:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11194
	ldr	r0, .L11248+148
	mov	r1, r6
.LPIC2657:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11195
	ldr	r0, .L11248+152
	mov	r1, r6
.LPIC2658:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11196
	ldr	r0, .L11248+156
	mov	r1, r6
.LPIC2659:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11197
	ldr	r0, .L11248+160
	mov	r1, r6
.LPIC2660:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11198
	ldr	r0, .L11248+164
	mov	r1, r6
.LPIC2661:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11199
	ldr	r0, .L11248+168
	mov	r1, r6
.LPIC2662:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11200
	ldr	r0, .L11248+172
	mov	r1, r6
.LPIC2663:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11246
	mov	r2, #564
	b	.L11166
.L11243:
	ldr	r2, .L11248+176
	ldr	r0, .L11248+180
	ldr	r3, [r5, #12]
.LPIC2614:
	add	r2, pc, r2
	add	r2, r2, #4000
.LPIC2616:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	ldr	r4, [r5, #8]
	str	r9, [r5, #8]
.L11148:
	mov	r3, #0
	ldr	r0, [r5, #12]
	str	r3, [r5, #8]
	bl	kfree(PLT)
.L11146:
	ldr	r8, [r7, #4]
	ldr	r9, .L11248+184
	sub	r8, r8, #4
.LPIC2624:
	add	r9, pc, r9
.L11160:
	ldr	r7, [r8, #4]!
	cmp	r7, #0
	beq	.L11247
.L11165:
	ldr	r3, [r7, #8]
	cmp	r3, #0
	beq	.L11160
	ldr	r1, [r3, #288]
	ldr	r0, [r9, #3552]
	bl	device_destroy(PLT)
	ldr	r0, [r7, #12]
	bl	kfree(PLT)
	ldr	r3, [r7, #28]
	cmp	r3, #0
	beq	.L11162
	mov	r0, r7
	blx	r3
.L11162:
	ldr	r5, [r7, #16]
	cmp	r5, #0
	beq	.L11160
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L11160
.L11164:
	ldr	r0, [r7, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L11164
	ldr	r7, [r8, #4]!
	cmp	r7, #0
	bne	.L11165
.L11247:
	cmp	r4, #0
	beq	.L11145
	mov	r0, r4
	b	.L11237
.L11176:
	movw	r2, #514
	b	.L11166
.L11177:
	movw	r2, #515
	b	.L11166
.L11170:
	mvn	r4, #11
	b	.L11146
.L11178:
	movw	r2, #518
	b	.L11166
.L11179:
	mov	r2, #520
	b	.L11166
.L11180:
	movw	r2, #529
	b	.L11166
.L11181:
	movw	r2, #530
	b	.L11166
.L11183:
	mov	r2, #532
	b	.L11166
.L11182:
	movw	r2, #531
	b	.L11166
.L11244:
	ldr	r2, .L11248+188
	ldr	r0, .L11248+192
	ldr	r3, [r5]
.LPIC2617:
	add	r2, pc, r2
	add	r2, r2, #4000
.LPIC2619:
	add	r0, pc, r0
	add	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
.L11150:
	ldr	r3, .L11248+196
	ldr	r2, [r5, #8]
.LPIC2623:
	add	r3, pc, r3
	ldr	r1, [r2, #288]
	ldr	r0, [r3, #3552]
	bl	device_destroy(PLT)
	b	.L11148
.L11185:
	mov	r2, #536
	b	.L11166
.L11184:
	movw	r2, #534
	b	.L11166
.L11246:
	ldr	r2, .L11248+200
	mov	r3, r6
	ldr	r0, .L11248+204
.LPIC2666:
	add	r2, pc, r2
	add	r1, r2, #3984
.LPIC2668:
	add	r0, pc, r0
	add	r2, r2, #4032
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, .L11248+208
	movw	r2, #39321
	movt	r2, 65535
.LPIC2669:
	add	r3, pc, r3
	add	r3, r3, #392
	strh	r2, [r3, #12]	@ movhi
	b	.L11168
.L11200:
	movw	r2, #563
	b	.L11166
.L11199:
	movw	r2, #562
	b	.L11166
.L11198:
	movw	r2, #561
	b	.L11166
.L11197:
	mov	r2, #560
	b	.L11166
.L11196:
	movw	r2, #553
	b	.L11166
.L11195:
	mov	r2, #552
	b	.L11166
.L11194:
	movw	r2, #551
	b	.L11166
.L11193:
	movw	r2, #550
	b	.L11166
.L11192:
	movw	r2, #549
	b	.L11166
.L11191:
	mov	r2, #548
	b	.L11166
.L11190:
	movw	r2, #547
	b	.L11166
.L11189:
	movw	r2, #546
	b	.L11166
.L11188:
	movw	r2, #545
	b	.L11166
.L11187:
	mov	r2, #544
	b	.L11166
.L11186:
	movw	r2, #537
	b	.L11166
.L11249:
	.align	2
.L11248:
	.word	.LANCHOR1-(.LPIC2605+8)
	.word	.LANCHOR3-(.LPIC2606+8)
	.word	.LC604-(.LPIC2607+8)
	.word	.LANCHOR4-(.LPIC2608+8)
	.word	.LANCHOR0-(.LPIC2625+8)
	.word	.LANCHOR2-(.LPIC2626+8)
	.word	.LC609-(.LPIC2629+8)
	.word	.LANCHOR4-(.LPIC2630+8)
	.word	.LANCHOR1-(.LPIC2634+8)
	.word	.LC610-(.LPIC2633+8)
	.word	.LC454-(.LPIC2637+8)
	.word	.LANCHOR2-(.LPIC2665+8)
	.word	.LANCHOR4-(.LPIC2664+8)
	.word	.LANCHOR1-(.LPIC2609+8)
	.word	.LC605-(.LPIC2612+8)
	.word	.LANCHOR4-(.LPIC2613+8)
	.word	.LANCHOR3-(.LPIC2620+8)
	.word	.LC608-(.LPIC2622+8)
	.word	.LC455-(.LPIC2638+8)
	.word	.LC323-(.LPIC2639+8)
	.word	.LC456-(.LPIC2640+8)
	.word	.LC457-(.LPIC2641+8)
	.word	.LC458-(.LPIC2642+8)
	.word	.LC459-(.LPIC2643+8)
	.word	.LC460-(.LPIC2644+8)
	.word	.LC461-(.LPIC2645+8)
	.word	.LC462-(.LPIC2646+8)
	.word	.LC463-(.LPIC2647+8)
	.word	.LC464-(.LPIC2648+8)
	.word	.LC465-(.LPIC2649+8)
	.word	.LC466-(.LPIC2650+8)
	.word	.LC467-(.LPIC2651+8)
	.word	.LC468-(.LPIC2652+8)
	.word	.LC469-(.LPIC2653+8)
	.word	.LC470-(.LPIC2654+8)
	.word	.LC471-(.LPIC2655+8)
	.word	.LC472-(.LPIC2656+8)
	.word	.LC473-(.LPIC2657+8)
	.word	.LC474-(.LPIC2658+8)
	.word	.LC475-(.LPIC2659+8)
	.word	.LC476-(.LPIC2660+8)
	.word	.LC370-(.LPIC2661+8)
	.word	.LC477-(.LPIC2662+8)
	.word	.LC478-(.LPIC2663+8)
	.word	.LANCHOR3-(.LPIC2614+8)
	.word	.LC606-(.LPIC2616+8)
	.word	.LANCHOR4-(.LPIC2624+8)
	.word	.LANCHOR3-(.LPIC2617+8)
	.word	.LC607-(.LPIC2619+8)
	.word	.LANCHOR4-(.LPIC2623+8)
	.word	.LANCHOR3-(.LPIC2666+8)
	.word	.LC611-(.LPIC2668+8)
	.word	.LANCHOR2-(.LPIC2669+8)
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11256
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11256+4
	ldr	r6, .L11256+8
	str	lr, [sp, #12]
.LPIC2670:
	add	r3, pc, r3
.LPIC2671:
	add	r0, pc, r0
	ldr	r4, [r3, #2500]
.LPIC2672:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2064]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11255
.L11251:
	ldr	r3, .L11256+12
	ldr	ip, [r5, #24]
	ldr	r0, .L11256+16
.LPIC2676:
	add	r3, pc, r3
	add	r1, r3, #2080
	add	r2, r3, #2096
	str	ip, [r4, #84]
	add	r2, r2, #8
.LPIC2675:
	add	r0, pc, r0
	add	r1, r1, #8
	add	ip, r3, #2080
	str	r0, [r4]
	str	r1, [r4, #16]
	str	r2, [r4, #8]
	str	ip, [r4, #4]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L11253
	add	r3, r3, #2112
	add	r3, r3, #8
	str	r3, [r4, #12]
.L11253:
	ldr	lr, .L11256+20
	mov	r0, r5
	mov	r1, r4
	ldr	ip, .L11256+24
	ldr	r2, .L11256+28
	ldr	r3, .L11256+32
.LPIC2680:
	add	lr, pc, lr
.LPIC2681:
	add	ip, pc, ip
.LPIC2682:
	add	r2, pc, r2
	str	lr, [r4, #32]
.LPIC2683:
	add	r3, pc, r3
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11255:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11252
	ldr	r2, .L11256+36
	uxtb	r3, r3
	strb	r3, [r6, #2064]
.LPIC2674:
	add	r2, pc, r2
	strb	r3, [r2, #1692]
	b	.L11251
.L11252:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11257:
	.align	2
.L11256:
	.word	.LANCHOR1-(.LPIC2670+8)
	.word	.LC612-(.LPIC2671+8)
	.word	.LANCHOR0-(.LPIC2672+8)
	.word	.LANCHOR0-(.LPIC2676+8)
	.word	.LC613-(.LPIC2675+8)
	.word	acc_function_bind-(.LPIC2680+8)
	.word	acc_function_unbind-(.LPIC2681+8)
	.word	acc_function_set_alt-(.LPIC2682+8)
	.word	acc_function_disable-(.LPIC2683+8)
	.word	.LANCHOR2-(.LPIC2674+8)
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L11274
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	ldr	r0, [r1, #24]
.LPIC2684:
	add	r4, pc, r4
	ldrb	r3, [r4, #2144]	@ zero_extendqisi2
	ldr	r6, [r2, #96]
	cmp	r3, #0
	beq	.L11270
.L11259:
	ldr	r3, .L11274+4
.LPIC2698:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11264
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L11271
.L11261:
	ldr	r2, .L11274+8
	str	r6, [r4, #88]
	mov	r0, r5
	ldr	r3, .L11274+12
	mov	r1, r4
	ldr	r6, .L11274+16
	ldr	r5, .L11274+20
.LPIC2688:
	add	r2, pc, r2
	ldr	lr, .L11274+24
	ldr	ip, .L11274+28
.LPIC2689:
	add	r3, pc, r3
	str	r2, [r4]
	ldr	r2, .L11274+32
	add	r3, r3, #2160
.LPIC2691:
	add	r5, pc, r5
.LPIC2690:
	add	r6, pc, r6
.LPIC2692:
	add	lr, pc, lr
	str	r3, [r4, #4]
.LPIC2693:
	add	ip, pc, ip
	str	r5, [r4, #36]
.LPIC2694:
	add	r2, pc, r2
	str	r6, [r4, #32]
	str	lr, [r4, #52]
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L11272
	ldr	r3, [r4, #88]
	add	r2, r3, #336
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	ble	.L11273
.L11267:
	mov	r0, r5
.L11260:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11264:
	mov	r4, #16
	b	.L11261
.L11270:
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11260
	ldr	r2, .L11274+36
	uxtb	r3, r0
	strb	r3, [r4, #2144]
.LPIC2686:
	add	r2, pc, r2
	strb	r3, [r2, #1776]
	b	.L11259
.L11271:
	mvn	r0, #11
	b	.L11260
.L11272:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L11260
.L11273:
	ldr	r4, .L11274+40
.LPIC2695:
	add	r4, pc, r4
	ldrb	r6, [r4]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L11267
	ldr	r0, .L11274+44
	mov	r1, #47
.LPIC2696:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r3, #1
	mov	r0, r6
	strb	r3, [r4]
	b	.L11260
.L11275:
	.align	2
.L11274:
	.word	.LANCHOR0-(.LPIC2684+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2698+8))
	.word	.LC614-(.LPIC2688+8)
	.word	.LANCHOR0-(.LPIC2689+8)
	.word	fsg_bind-(.LPIC2690+8)
	.word	fsg_unbind-(.LPIC2691+8)
	.word	fsg_setup-(.LPIC2692+8)
	.word	fsg_set_alt-(.LPIC2693+8)
	.word	fsg_disable-(.LPIC2694+8)
	.word	.LANCHOR2-(.LPIC2686+8)
	.word	.LANCHOR8-(.LPIC2695+8)
	.word	.LC523-(.LPIC2696+8)
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11282
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11282+4
	ldr	r6, .L11282+8
	str	lr, [sp, #12]
.LPIC2699:
	add	r3, pc, r3
.LPIC2700:
	add	r0, pc, r0
	ldr	r4, [r3, #2508]
.LPIC2701:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2168]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11281
.L11277:
	ldr	r3, .L11282+12
	ldr	ip, [r5, #24]
	ldr	r0, .L11282+16
.LPIC2705:
	add	r3, pc, r3
	add	r1, r3, #2176
	add	r2, r3, #2208
	str	ip, [r4, #84]
	add	r2, r2, #4
.LPIC2704:
	add	r0, pc, r0
	add	r1, r1, #8
	add	ip, r3, #2192
	str	r2, [r4, #8]
	strd	r0, [r4]
	str	ip, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L11279
	add	r3, r3, #2224
	add	r3, r3, #8
	str	r3, [r4, #12]
.L11279:
	ldr	lr, .L11282+20
	mov	r0, r5
	mov	r1, r4
	ldr	ip, .L11282+24
	ldr	r2, .L11282+28
	ldr	r3, .L11282+32
.LPIC2709:
	add	lr, pc, lr
.LPIC2710:
	add	ip, pc, ip
.LPIC2711:
	add	r2, pc, r2
	str	lr, [r4, #32]
.LPIC2712:
	add	r3, pc, r3
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11281:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11278
	ldr	r2, .L11282+36
	uxtb	r3, r3
	strb	r3, [r6, #2168]
.LPIC2703:
	add	r2, pc, r2
	strb	r3, [r2, #1876]
	b	.L11277
.L11278:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11283:
	.align	2
.L11282:
	.word	.LANCHOR1-(.LPIC2699+8)
	.word	.LC615-(.LPIC2700+8)
	.word	.LANCHOR0-(.LPIC2701+8)
	.word	.LANCHOR0-(.LPIC2705+8)
	.word	.LC616-(.LPIC2704+8)
	.word	mtp_function_bind-(.LPIC2709+8)
	.word	mtp_function_unbind-(.LPIC2710+8)
	.word	mtp_function_set_alt-(.LPIC2711+8)
	.word	mtp_function_disable-(.LPIC2712+8)
	.word	.LANCHOR2-(.LPIC2703+8)
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L11309
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2713:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r3, [r4, #2264]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11285
	ldr	r0, [r1, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11296
	ldr	r5, .L11309+4
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r4, #2264]
.LPIC2715:
	add	r5, pc, r5
	strb	r3, [r5, #2044]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11296
	uxtb	r0, r0
	strb	r0, [r4, #2272]
	strb	r0, [r5, #2056]
.L11285:
	ldr	r0, .L11309+8
.LPIC2718:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L11309+12
	mov	r7, r0
.LPIC2719:
	add	r3, pc, r3
	ldr	r4, [r3, #8]!
	cmp	r4, r3
	sub	r4, r4, #4
	beq	.L11287
	ldr	r5, .L11309+16
	ldr	r8, .L11309+20
.LPIC2722:
	add	r5, pc, r5
.LPIC2721:
	add	r8, pc, r8
	add	r5, r5, #8
	b	.L11289
.L11304:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L11287
.L11289:
	ldr	r1, [r4]
	mov	r0, r8
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11304
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L11293:
	ldr	r0, .L11309+24
	mov	r1, r7
	mov	fp, #65024
	movt	fp, 65535
	add	r10, r5, #148
	add	r9, r5, #160
	add	r8, r5, #176
	mov	r7, #0
.LPIC2732:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #12
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, .L11309+28
	mov	r0, r6
	ldr	r1, .L11309+32
	ldr	ip, [r6, #24]
	str	fp, [r5, #156]
	ldr	r6, .L11309+36
	str	fp, [r5, #172]
.LPIC2734:
	add	r2, pc, r2
	ldr	lr, .L11309+40
	str	r7, [r5, #188]
	add	r3, r2, #1840
.LPIC2733:
	add	r1, pc, r1
	str	r10, [r5, #148]
	add	r3, r3, #12
	add	r2, r2, #2288
	str	ip, [r5, #84]
	str	r1, [r5]
	ldr	ip, .L11309+44
.LPIC2738:
	add	r6, pc, r6
	str	r3, [r5, #16]
	ldr	r1, .L11309+48
.LPIC2739:
	add	lr, pc, lr
	str	r3, [r5, #8]
	ldr	r3, .L11309+52
	str	r2, [r5, #4]
	ldr	r2, .L11309+56
.LPIC2740:
	add	ip, pc, ip
	str	r6, [r5, #36]
.LPIC2737:
	add	r1, pc, r1
	str	lr, [r5, #40]
.LPIC2742:
	add	r3, pc, r3
	str	ip, [r5, #48]
.LPIC2741:
	add	r2, pc, r2
	str	r1, [r5, #32]
	mov	r1, r5
	str	r3, [r5, #184]
	add	r3, r5, #140
	str	r2, [r5, #168]
	str	r3, [r5, #140]
	str	r3, [r5, #144]
	str	r10, [r5, #152]
	str	r9, [r5, #160]
	str	r9, [r5, #164]
	str	r8, [r5, #176]
	str	r8, [r5, #180]
	bl	usb_add_function(PLT)
	subs	r6, r0, #0
	bne	.L11305
.L11300:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11296:
	mov	r6, r0
.L11286:
	ldr	r1, .L11309+60
	ldr	r0, .L11309+64
.LPIC2745:
	add	r1, pc, r1
	add	r1, r1, #4048
.LPIC2746:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L11300
.L11287:
	ldr	r3, .L11309+68
.LPIC2747:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11306
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L11307
.L11290:
	ldr	r4, .L11309+72
	mov	r1, r7
	ldr	r8, .L11309+76
.LPIC2725:
	add	r4, pc, r4
	sub	r4, r4, #1472
.LPIC2727:
	add	r8, pc, r8
	sub	r4, r4, #12
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L11309+80
	mov	r2, #0
	mov	r1, #10
	mov	r3, r2
	str	r8, [sp, #4]
	movt	r1, 2
	str	r2, [sp]
	mov	r2, #1
.LPIC2726:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L11308
	mov	r0, r4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L11309+84
	mov	r7, r0
	str	r8, [r5, #112]
	add	r0, r5, #116
.LPIC2730:
	add	r3, pc, r3
	add	r2, r3, #8
	ldr	r1, [r3, #12]
	bl	__list_add(PLT)
	b	.L11293
.L11306:
	mov	r5, #16
	b	.L11290
.L11308:
	mov	r0, r5
	mvn	r6, #11
	bl	kfree(PLT)
	b	.L11286
.L11307:
	ldr	r0, .L11309+88
	mvn	r6, #11
.LPIC2723:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L11309+92
	mov	r1, r7
.LPIC2724:
	add	r0, pc, r0
	sub	r0, r0, #1472
	add	r0, r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11286
.L11305:
	ldr	r0, .L11309+96
.LPIC2743:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r7, [r4, #20]
	mov	r0, r5
	bl	kfree(PLT)
	b	.L11286
.L11310:
	.align	2
.L11309:
	.word	.LANCHOR0-(.LPIC2713+8)
	.word	.LANCHOR2-(.LPIC2715+8)
	.word	.LANCHOR4-(.LPIC2718+8)
	.word	.LANCHOR0-(.LPIC2719+8)
	.word	.LANCHOR0-(.LPIC2722+8)
	.word	.LC617-(.LPIC2721+8)
	.word	.LANCHOR4-(.LPIC2732+8)
	.word	.LANCHOR0-(.LPIC2734+8)
	.word	.LC617-(.LPIC2733+8)
	.word	qdss_unbind-(.LPIC2738+8)
	.word	qdss_set_alt-(.LPIC2739+8)
	.word	qdss_disable-(.LPIC2740+8)
	.word	qdss_bind-(.LPIC2737+8)
	.word	usb_qdss_disconnect_work-(.LPIC2742+8)
	.word	usb_qdss_connect_work-(.LPIC2741+8)
	.word	.LANCHOR3-(.LPIC2745+8)
	.word	.LC620-(.LPIC2746+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2747+8))
	.word	.LANCHOR4-(.LPIC2725+8)
	.word	.LC617-(.LPIC2727+8)
	.word	.LC208-(.LPIC2726+8)
	.word	.LANCHOR0-(.LPIC2730+8)
	.word	.LC618-(.LPIC2723+8)
	.word	.LANCHOR4-(.LPIC2724+8)
	.word	.LC619-(.LPIC2743+8)
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11317
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11317+4
	ldr	r6, .L11317+8
	str	lr, [sp, #12]
.LPIC2748:
	add	r3, pc, r3
.LPIC2749:
	add	r0, pc, r0
	ldr	r4, [r3, #2508]
.LPIC2750:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2168]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11316
.L11312:
	ldr	r3, .L11317+12
	ldr	ip, .L11317+16
	ldr	lr, [r5, #24]
.LPIC2754:
	add	r3, pc, r3
	add	r0, r3, #2176
	add	r1, r3, #2288
	add	r2, r3, #2304
.LPIC2753:
	add	ip, pc, ip
	str	lr, [r4, #84]
	add	r0, r0, #8
	add	r1, r1, #8
	ldr	lr, .L11317+20
	add	r2, r2, #12
	str	ip, [r4]
	ldr	ip, .L11317+24
	str	r0, [r4, #4]
	mov	r0, r5
	str	r1, [r4, #16]
	mov	r1, r4
	str	r2, [r4, #8]
	ldr	r2, [r5, #24]
.LPIC2758:
	add	lr, pc, lr
.LPIC2759:
	add	ip, pc, ip
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	lr, [r4, #32]
	str	ip, [r4, #36]
	cmp	r2, #4
	ldr	r2, .L11317+28
	addhi	r3, r3, #2336
	strhi	r3, [r4, #12]
	ldr	r3, .L11317+32
.LPIC2760:
	add	r2, pc, r2
	str	r2, [r4, #40]
.LPIC2761:
	add	r3, pc, r3
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11316:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11313
	ldr	r2, .L11317+36
	uxtb	r3, r3
	strb	r3, [r6, #2168]
.LPIC2752:
	add	r2, pc, r2
	strb	r3, [r2, #1876]
	b	.L11312
.L11313:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11318:
	.align	2
.L11317:
	.word	.LANCHOR1-(.LPIC2748+8)
	.word	.LC615-(.LPIC2749+8)
	.word	.LANCHOR0-(.LPIC2750+8)
	.word	.LANCHOR0-(.LPIC2754+8)
	.word	.LC616-(.LPIC2753+8)
	.word	mtp_function_bind-(.LPIC2758+8)
	.word	mtp_function_unbind-(.LPIC2759+8)
	.word	mtp_function_set_alt-(.LPIC2760+8)
	.word	mtp_function_disable-(.LPIC2761+8)
	.word	.LANCHOR2-(.LPIC2752+8)
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.global	usb_string_ids_tab
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #4]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11321
	cmp	r2, #253
	bgt	.L11322
	add	r3, r2, #1
	add	r1, r1, #8
.L11323:
	ldr	ip, [r1, #4]
	uxtb	r2, r3
	add	r1, r1, #8
	add	r3, r3, #1
	strb	r2, [r1, #-16]
	cmp	ip, #0
	beq	.L11321
	cmp	r3, #255
	bne	.L11323
.L11322:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L11321:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L11333
	add	r1, r1, r3
	cmp	r1, #254
	bhi	.L11333
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L11333:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.type	functionfs_bind, %function
functionfs_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	beq	.L11358
.L11335:
	ldr	r0, .L11360
	movw	r1, #1461
	mvn	r4, #76
.LPIC2763:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
.L11353:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11358:
	mov	r7, r1
	add	r1, r0, #128
	mov	r0, #1
	bl	_test_and_set_bit(PLT)
	subs	r4, r0, #0
	bne	.L11335
	ldrh	r1, [r5, #176]
	mov	r0, r7
	bl	usb_string_ids_n(PLT)
	subs	r6, r0, #0
	blt	.L11359
	ldr	r3, [r7]
	mov	r1, #208
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #28]
	beq	.L11345
	ldr	r3, .L11360+4
.LPIC2762:
	add	r3, pc, r3
	str	r3, [r0, #28]
	ldr	r3, [r5, #28]
	str	r5, [r3, #32]
	ldr	lr, [r5, #188]
	cmp	lr, #0
	beq	.L11339
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L11339
.L11341:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	addne	r3, r3, #8
	movne	r2, r6
	beq	.L11343
.L11342:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	ip, [r3, #-4]
	add	r2, r2, #1
	cmp	ip, #0
	bne	.L11342
.L11343:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L11341
.L11339:
	ldr	r2, [r7]
	mov	r3, r5
	str	r2, [r3], #84
#APP
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	b	.L11353
.L11345:
	mvn	r4, #11
	b	.L11353
.L11359:
	mov	r4, r6
	b	.L11353
.L11361:
	.align	2
.L11360:
	.word	.LC18-(.LPIC2763+8)
	.word	ffs_ep0_complete-(.LPIC2762+8)
	.fnend
	.size	functionfs_bind, .-functionfs_bind
	.align	2
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L11377
	ldr	r1, [r5, #8]
	ldr	r0, [r3, #4]
	bl	functionfs_bind(PLT)
	cmp	r0, #0
	bne	.L11378
.L11362:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11377:
	ldr	r1, [r5, #20]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L11362
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11366
	blx	r3
	ldr	r0, [r6]
.L11366:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L11362
.L11368:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L11368
	b	.L11362
.L11378:
	ldr	r2, .L11379
	mov	r3, r0
	ldr	r0, .L11379+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC2764:
	add	r2, pc, r2
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r2, r2, #4064
.LPIC2766:
	add	r0, pc, r0
	add	r2, r2, #12
	mov	r1, r2
	b	printk(PLT)
.L11380:
	.align	2
.L11379:
	.word	.LANCHOR3-(.LPIC2764+8)
	.word	.LC621-(.LPIC2766+8)
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.global	usb_composite_probe
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L11386
	ldr	r3, [r0, #12]
	cmp	r3, #0
	cmpne	r1, #0
	beq	.L11386
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L11390
.L11383:
	ldr	r3, [r0, #4]
	mov	r2, r1
	ldr	ip, .L11391
	ldr	r5, .L11391+4
	ldr	lr, .L11391+8
	cmp	r3, #0
	mov	r3, r0
	ldr	r1, .L11391+12
.LPIC2769:
	add	ip, pc, ip
	streq	r4, [r0, #4]
.LPIC2772:
	add	r5, pc, r5
	str	r4, [ip, #556]
	ldr	r4, [r0]
.LPIC2773:
	add	lr, pc, lr
	str	r3, [r5, #24]
.LPIC2774:
	add	r1, pc, r1
	add	r0, ip, #556
	str	r2, [lr, #3620]
	str	r4, [ip, #584]
	ldr	r3, [r3, #20]
	str	r3, [ip, #560]
	bl	usb_gadget_probe_driver(PLT)
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r5, #24]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11390:
	ldr	r3, .L11391+16
.LPIC2768:
	add	r3, pc, r3
	mov	r4, r3
	str	r3, [r0]
	b	.L11383
.L11386:
	mvn	r0, #21
	bx	lr
.L11392:
	.align	2
.L11391:
	.word	.LANCHOR0-(.LPIC2769+8)
	.word	.LANCHOR1-(.LPIC2772+8)
	.word	.LANCHOR4-(.LPIC2773+8)
	.word	composite_bind-(.LPIC2774+8)
	.word	.LC622-(.LPIC2768+8)
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #44
	sub	sp, sp, #44
	ldr	fp, .L11446
	mov	r5, r0
	ldr	r3, .L11446+4
	ldr	r2, [r0, #292]
.LPIC2777:
	add	fp, pc, fp
	ldr	r3, [fp, r3]
	cmp	r2, #0
	ldr	r2, [r3]
	str	r3, [sp, #12]
	str	r2, [sp, #36]
	beq	.L11394
	mov	r2, #208
	mov	r1, #52
	add	r0, r0, #8
	bl	devm_kzalloc(PLT)
	subs	r7, r0, #0
	bne	.L11395
	ldr	r1, .L11446+8
	mvn	r6, #11
	ldr	r0, .L11446+12
.LPIC2778:
	add	r1, pc, r1
	sub	r1, r1, #4080
.LPIC2779:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L11396
.L11395:
	ldr	r1, .L11446+16
	mov	r3, #1
	add	r2, r7, #4
	ldr	r0, [r5, #292]
	mov	r4, #0
.LPIC2780:
	add	r1, pc, r1
	bl	of_property_read_u32_array(PLT)
	ldr	r1, .L11446+20
	mov	r2, r4
	ldr	r0, [r5, #292]
.LPIC2781:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11446+24
	subs	r0, r0, r4
	mov	r2, r4
	movne	r0, #1
	strb	r0, [r7, #9]
	ldr	r0, [r5, #292]
.LPIC2782:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11446+28
	subs	r0, r0, r4
	mov	r3, r4
	movne	r0, #1
	mov	r2, r4
	strb	r0, [r7, #11]
	ldr	r0, [r5, #292]
.LPIC2783:
	add	r1, pc, r1
	str	r4, [sp]
	bl	of_property_read_string_helper(PLT)
	cmp	r0, #3
	mov	r6, r0
	bgt	.L11397
	ldr	r10, .L11446+32
	mov	r9, r4
	add	r8, sp, #20
	add	r4, r7, #12
.LPIC2786:
	add	r10, pc, r10
	b	.L11398
.L11397:
	ldr	r1, .L11446+36
	mvn	r6, #21
	ldr	r0, .L11446+40
.LPIC2784:
	add	r1, pc, r1
	sub	r1, r1, #4080
.LPIC2785:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L11396
.L11401:
	mov	ip, #0
	str	r9, [sp]
	mov	r1, r10
	mov	r3, #1
	mov	r2, r8
	ldr	r0, [r5, #292]
	str	ip, [sp, #20]
	bl	of_property_read_string_helper(PLT)
	ldr	r1, [sp, #20]
	cmp	r1, #0
	beq	.L11400
	mov	r2, #10
	mov	r0, r4
	bl	strlcpy(PLT)
.L11400:
	add	r9, r9, #1
	add	r4, r4, #10
.L11398:
	cmp	r9, r6
	blt	.L11401
	str	r6, [r7, #44]
	b	.L11402
.L11394:
	ldr	r7, [r0, #88]
.L11402:
	ldr	r4, .L11446+44
.LPIC2787:
	add	r4, pc, r4
	ldr	r0, [r4, #3552]
	cmp	r0, #0
	bne	.L11403
	ldr	r1, .L11446+48
	add	r2, r4, #3632
	add	r2, r2, #4
.LPIC2789:
	add	r1, pc, r1
	bl	__class_create(PLT)
	cmn	r0, #4096
	str	r0, [r4, #3552]
	movhi	r6, r0
	bhi	.L11396
.L11403:
	ldr	r3, .L11446+52
	ldr	r3, [fp, r3]
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L11424
	mov	r2, #528
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	bne	.L11404
	ldr	r2, .L11446+56
	mvn	r6, #11
	ldr	r0, .L11446+60
.LPIC2791:
	add	r2, pc, r2
	sub	r2, r2, #4080
.LPIC2793:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	b	.L11405
.L11424:
	mov	r4, #16
.L11404:
	ldr	r2, .L11446+64
	mov	r3, #65024
	add	lr, r4, #456
	ldr	r1, .L11446+68
	mov	r6, #0
	movt	r3, 65535
	ldr	r10, [r5]
	add	r8, r4, #508
	mov	r0, #1
	ldr	ip, .L11446+72
	add	r9, r4, #184
	str	lr, [r4, #456]
.LPIC2794:
	add	r2, pc, r2
	str	lr, [r4, #460]
.LPIC2795:
	add	r1, pc, r1
	add	r2, r2, #76
	str	r3, [r4, #180]
	str	r3, [r4, #452]
	mov	r3, r6
	str	r2, [r4, #4]
	mov	r2, r6
	str	r1, [r4, #192]
	mov	r1, r6
	str	r0, [r4, #20]
	add	r0, r4, #468
	str	r6, [r4, #516]
	ldr	r6, .L11446+76
	str	r8, [r4, #508]
	str	r8, [r4, #512]
	add	r8, r4, #520
	str	r10, [r4]
	str	r9, [r4, #184]
.LPIC2796:
	add	r6, pc, r6
	str	r9, [r4, #188]
	ldr	ip, [fp, ip]
	str	ip, [r4, #464]
	bl	init_timer_key(PLT)
	ldr	ip, .L11446+80
	add	r3, r4, #452
	add	r2, r6, #3632
	ldr	r1, .L11446+84
	add	r2, r2, #4
	add	r0, r4, #24
	ldr	ip, [fp, ip]
	str	r3, [r4, #488]
.LPIC2797:
	add	r1, pc, r1
	str	ip, [r4, #484]
	bl	__mutex_init(PLT)
	ldr	r3, .L11446+88
	mov	r0, r8
	str	r7, [r4, #44]
.LPIC2798:
	add	r3, pc, r3
	add	r2, r3, #16
	ldr	r1, [r3, #20]
	bl	__list_add(PLT)
	ldr	r3, [r6, #-576]
	cmp	r7, #0
	mov	r2, #0
	ldrneb	ip, [r7, #8]	@ zero_extendqisi2
	moveq	ip, r7
	mov	r1, #512
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r6, #-576]
	ldr	r3, .L11446+92
.LPIC2802:
	add	r3, pc, r3
	strb	ip, [r3, #640]
	bl	platform_get_resource(PLT)
	cmp	r0, #0
	beq	.L11407
	ldr	r2, [r0, #4]
	add	r5, r5, #8
	ldr	r1, [r0]
	mov	r0, r5
	add	r2, r2, #1
	rsb	r2, r1, r2
	bl	devm_ioremap(PLT)
	ldr	r3, .L11446+96
	cmp	r0, #0
	ldr	r3, [fp, r3]
	str	r0, [r3]
	bne	.L11407
	ldr	r1, .L11446+100
	mov	r0, r5
	mvn	r6, #11
.LPIC2803:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L11408
.L11407:
	ldr	r5, .L11446+104
	add	r6, sp, #25
	mov	r1, #11
	ldr	r2, .L11446+108
	mov	r0, r6
.LPIC2804:
	add	r5, pc, r5
.LPIC2805:
	add	r2, pc, r2
	ldrb	r3, [r5, #640]	@ zero_extendqisi2
	bl	snprintf(PLT)
	ldr	r0, .L11446+112
	mov	r3, #0
	str	r6, [sp]
	mov	r2, r3
	mov	r1, r3
.LPIC2806:
	add	r0, pc, r0
	ldr	r0, [r0, #3552]
	bl	device_create(PLT)
	cmn	r0, #4096
	mov	r6, r0
	str	r0, [r4, #12]
	bhi	.L11410
	add	r5, r5, #2352
	mov	r1, r4
	add	r5, r5, #12
	bl	dev_set_drvdata(PLT)
.L11411:
	ldr	r1, [r5, #4]!
	cmp	r1, #0
	beq	.L11413
	ldr	r0, [r4, #12]
	bl	device_create_file(PLT)
	cmp	r0, #0
	beq	.L11411
	ldr	r3, .L11446+116
	mov	r6, r0
	ldr	r2, [r4, #12]
.LPIC2808:
	add	r3, pc, r3
	ldr	r1, [r2, #288]
	ldr	r0, [r3, #3552]
	bl	device_destroy(PLT)
.L11410:
	cmp	r6, #0
	beq	.L11413
	ldr	r2, .L11446+120
	ldr	r0, .L11446+124
.LPIC2809:
	add	r2, pc, r2
	sub	r2, r2, #4080
.LPIC2811:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	b	.L11408
.L11413:
	ldr	r0, [r4, #12]
	cmn	r0, #4096
	bls	.L11414
	ldr	r1, .L11446+128
	mov	r2, r0
	ldr	r0, .L11446+132
.LPIC2812:
	add	r1, pc, r1
	sub	r1, r1, #4064
.LPIC2813:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r6, [r4, #12]
	cmp	r6, #0
	beq	.L11416
	b	.L11415
.L11414:
	ldr	r1, .L11446+136
.LPIC2814:
	add	r1, pc, r1
	add	r1, r1, #2432
	add	r1, r1, #12
	bl	device_create_file(PLT)
	cmp	r0, #0
	beq	.L11416
	ldr	r1, .L11446+140
	mov	r6, r0
	ldr	r0, .L11446+144
.LPIC2815:
	add	r1, pc, r1
	sub	r1, r1, #4064
.LPIC2816:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L11415:
	ldr	r1, .L11446+148
	ldr	r0, .L11446+152
.LPIC2817:
	add	r1, pc, r1
	sub	r1, r1, #4080
.LPIC2818:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L11396
.L11416:
	ldr	r0, .L11446+156
	ldr	r1, .L11446+160
.LPIC2820:
	add	r0, pc, r0
	add	r0, r0, #2448
.LPIC2819:
	add	r1, pc, r1
	add	r0, r0, #12
	bl	usb_composite_probe(PLT)
	subs	r6, r0, #0
	beq	.L11417
	ldr	r2, .L11446+164
	ldr	r0, .L11446+168
.LPIC2821:
	add	r2, pc, r2
	sub	r2, r2, #4080
.LPIC2823:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	b	.L11418
.L11417:
	cmp	r7, #0
	beq	.L11419
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L11419
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #60
	bl	pm_qos_add_request(PLT)
.L11419:
	ldr	r1, .L11446+172
	mov	r2, #5
	add	r0, r4, #52
.LPIC2824:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, .L11446+176
.LPIC2825:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #8
	bl	misc_register(PLT)
	subs	r6, r0, #0
	beq	.L11420
	ldr	r0, .L11446+180
	mov	r1, r6
.LPIC2826:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, .L11446+184
	ldr	r0, .L11446+188
.LPIC2827:
	add	r1, pc, r1
	sub	r1, r1, #4080
.LPIC2828:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L11418
.L11420:
	ldr	r2, .L11446+192
	ldr	r3, .L11446+196
	ldr	r1, .L11446+200
.LPIC2829:
	add	r2, pc, r2
.LPIC2831:
	add	r3, pc, r3
	add	r2, r2, #3632
.LPIC2830:
	add	r1, pc, r1
	add	r2, r2, #4
	add	r0, r3, #4
	bl	__init_waitqueue_head(PLT)
	b	.L11396
.L11418:
	ldr	r5, .L11446+204
.LPIC2832:
	add	r5, pc, r5
	add	r5, r5, #2352
	add	r5, r5, #12
.L11421:
	ldr	r1, [r5, #4]!
	cmp	r1, #0
	beq	.L11445
	ldr	r0, [r4, #12]
	bl	device_remove_file(PLT)
	b	.L11421
.L11445:
	ldr	r3, .L11446+208
	ldr	r2, [r4, #12]
.LPIC2833:
	add	r3, pc, r3
	ldr	r1, [r2, #288]
	ldr	r0, [r3, #3552]
	bl	device_destroy(PLT)
.L11408:
	mov	r0, r8
	bl	list_del(PLT)
	ldr	r2, .L11446+212
	mov	r0, r4
.LPIC2834:
	add	r2, pc, r2
	ldr	r3, [r2, #-576]
	sub	r3, r3, #1
	str	r3, [r2, #-576]
	bl	kfree(PLT)
.L11405:
	ldr	r3, .L11446+216
.LPIC2836:
	add	r3, pc, r3
	ldr	r2, [r3, #16]
	add	r3, r3, #16
	cmp	r2, r3
	bne	.L11396
	ldr	r4, .L11446+220
.LPIC2838:
	add	r4, pc, r4
	ldr	r0, [r4, #3552]
	bl	class_destroy(PLT)
	mov	r3, #0
	str	r3, [r4, #3552]
.L11396:
	ldr	r3, [sp, #12]
	mov	r0, r6
	ldr	r2, [sp, #36]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L11423
	bl	__stack_chk_fail(PLT)
.L11423:
	add	sp, sp, #44
	@ sp needed
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L11447:
	.align	2
.L11446:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC2777+8)
	.word	__stack_chk_guard(GOT)
	.word	.LANCHOR9-(.LPIC2778+8)
	.word	.LC623-(.LPIC2779+8)
	.word	.LC624-(.LPIC2780+8)
	.word	.LC625-(.LPIC2781+8)
	.word	.LC626-(.LPIC2782+8)
	.word	.LC627-(.LPIC2783+8)
	.word	.LC627-(.LPIC2786+8)
	.word	.LANCHOR9-(.LPIC2784+8)
	.word	.LC628-(.LPIC2785+8)
	.word	.LANCHOR4-(.LPIC2787+8)
	.word	.LC629-(.LPIC2789+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR9-(.LPIC2791+8)
	.word	.LC630-(.LPIC2793+8)
	.word	.LANCHOR7-(.LPIC2794+8)
	.word	android_work-(.LPIC2795+8)
	.word	usb_gadget_connect_work(GOT)
	.word	.LANCHOR4-(.LPIC2796+8)
	.word	delayed_work_timer_fn(GOT)
	.word	.LC631-(.LPIC2797+8)
	.word	.LANCHOR1-(.LPIC2798+8)
	.word	.LANCHOR0-(.LPIC2802+8)
	.word	diag_dload(GOT)
	.word	.LC632-(.LPIC2803+8)
	.word	.LANCHOR0-(.LPIC2804+8)
	.word	.LC633-(.LPIC2805+8)
	.word	.LANCHOR4-(.LPIC2806+8)
	.word	.LANCHOR4-(.LPIC2808+8)
	.word	.LANCHOR9-(.LPIC2809+8)
	.word	.LC634-(.LPIC2811+8)
	.word	.LANCHOR9-(.LPIC2812+8)
	.word	.LC635-(.LPIC2813+8)
	.word	.LANCHOR0-(.LPIC2814+8)
	.word	.LANCHOR9-(.LPIC2815+8)
	.word	.LC636-(.LPIC2816+8)
	.word	.LANCHOR9-(.LPIC2817+8)
	.word	.LC637-(.LPIC2818+8)
	.word	.LANCHOR0-(.LPIC2820+8)
	.word	android_bind-(.LPIC2819+8)
	.word	.LANCHOR9-(.LPIC2821+8)
	.word	.LC638-(.LPIC2823+8)
	.word	.LC639-(.LPIC2824+8)
	.word	.LANCHOR0-(.LPIC2825+8)
	.word	.LC640-(.LPIC2826+8)
	.word	.LANCHOR9-(.LPIC2827+8)
	.word	.LC641-(.LPIC2828+8)
	.word	.LANCHOR4-(.LPIC2829+8)
	.word	.LANCHOR1-(.LPIC2831+8)
	.word	.LC642-(.LPIC2830+8)
	.word	.LANCHOR0-(.LPIC2832+8)
	.word	.LANCHOR4-(.LPIC2833+8)
	.word	.LANCHOR4-(.LPIC2834+8)
	.word	.LANCHOR1-(.LPIC2836+8)
	.word	.LANCHOR4-(.LPIC2838+8)
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L11451
.LPIC2840:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	cmp	r3, r0
	beq	.L11450
	bx	lr
.L11450:
	ldr	r0, .L11451+4
.LPIC2841:
	add	r0, pc, r0
	add	r0, r0, #556
	b	usb_gadget_unregister_driver(PLT)
.L11452:
	.align	2
.L11451:
	.word	.LANCHOR1-(.LPIC2840+8)
	.word	.LANCHOR0-(.LPIC2841+8)
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L11484
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #88]
.LPIC2842:
	add	r2, pc, r2
	ldr	r0, [r2, #16]!
	cmp	r7, #0
	ldrneb	r1, [r7, #8]	@ zero_extendqisi2
	moveq	r1, r7
	cmp	r0, r2
	sub	r4, r0, #520
	mov	r5, r0
	beq	.L11455
	ldr	r3, [r0, #-476]
	cmp	r3, #0
	bne	.L11480
	b	.L11455
.L11481:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	mov	r5, r3
	sub	r4, r3, #520
	beq	.L11455
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	beq	.L11455
.L11480:
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L11481
.L11455:
	cmp	r4, #0
	beq	.L11459
	ldr	r6, .L11484+4
.LPIC2845:
	add	r6, pc, r6
	ldr	r1, [r6, #2368]
	cmp	r1, #0
	addne	r6, r6, #2368
	beq	.L11464
.L11463:
	ldr	r0, [r4, #12]
	bl	device_remove_file(PLT)
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	bne	.L11463
.L11464:
	ldr	r3, .L11484+8
	ldr	r2, [r4, #12]
.LPIC2846:
	add	r3, pc, r3
	ldr	r1, [r2, #288]
	ldr	r0, [r3, #3552]
	bl	device_destroy(PLT)
	cmp	r7, #0
	beq	.L11462
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L11482
.L11462:
	mov	r0, r5
	bl	list_del(PLT)
	ldr	r2, .L11484+12
	mov	r0, r4
.LPIC2848:
	add	r2, pc, r2
	ldr	r3, [r2, #-576]
	sub	r3, r3, #1
	str	r3, [r2, #-576]
	bl	kfree(PLT)
	ldr	r3, .L11484+16
.LPIC2850:
	add	r3, pc, r3
	ldr	r0, [r3, #16]
.L11459:
	ldr	r3, .L11484+20
.LPIC2851:
	add	r3, pc, r3
	add	r3, r3, #16
	cmp	r0, r3
	beq	.L11483
.L11465:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11482:
	add	r0, r4, #60
	bl	pm_qos_remove_request(PLT)
	b	.L11462
.L11483:
	ldr	r4, .L11484+24
.LPIC2852:
	add	r4, pc, r4
	ldr	r0, [r4, #3552]
	bl	class_destroy(PLT)
	ldr	r0, .L11484+28
	mov	r3, #0
	str	r3, [r4, #3552]
.LPIC2854:
	add	r0, pc, r0
	add	r0, r0, #2448
	add	r0, r0, #12
	bl	usb_composite_unregister(PLT)
	b	.L11465
.L11485:
	.align	2
.L11484:
	.word	.LANCHOR1-(.LPIC2842+8)
	.word	.LANCHOR0-(.LPIC2845+8)
	.word	.LANCHOR4-(.LPIC2846+8)
	.word	.LANCHOR4-(.LPIC2848+8)
	.word	.LANCHOR1-(.LPIC2850+8)
	.word	.LANCHOR1-(.LPIC2851+8)
	.word	.LANCHOR4-(.LPIC2852+8)
	.word	.LANCHOR0-(.LPIC2854+8)
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.global	usb_composite_setup_continue
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #56]
	mov	r7, r0
	cmp	r3, #0
	bne	.L11487
	cmp	r4, #0
	bne	.L11492
.L11489:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L11487:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L11489
	str	r5, [r8, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r8
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r8, #44]
	b	.L11489
.L11492:
	ldr	r3, .L11493
	movw	r1, #1845
	ldr	r2, .L11493+4
	ldr	r0, .L11493+8
.LPIC2855:
	add	r3, pc, r3
	sub	r3, r3, #4032
.LPIC2856:
	add	r2, pc, r2
.LPIC2857:
	add	r0, pc, r0
	sub	r3, r3, #12
	bl	warn_slowpath_fmt(PLT)
	b	.L11489
.L11494:
	.align	2
.L11493:
	.word	.LANCHOR9-(.LPIC2855+8)
	.word	.LC643-(.LPIC2856+8)
	.word	.LC383-(.LPIC2857+8)
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	add	r10, r0, #44
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	mov	r8, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L11497
.L11588:
	cmp	r5, #10
	bne	.L11587
.L11497:
	ldr	r4, [r7, #12]
	ldr	r0, [r4, #1036]
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r8
	add	r1, r4, #1040
	mov	r0, r4
	bl	dequeue_signal(PLT)
	mov	r5, r0
	ldr	r0, [r4, #1036]
	mov	r1, r6
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L11588
	ldr	r3, [r9, #8]
	cmp	r3, #0
	beq	.L11503
	ldr	r4, [r9, #68]
	ldr	r2, [r4, #20]
	cmp	r2, #0
	bne	.L11589
.L11504:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	bne	.L11590
.L11505:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #52]
	cmp	r3, #0
	bne	.L11591
.L11506:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	bne	.L11592
.L11507:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L11593
.L11508:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L11594
.L11509:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L11595
.L11510:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L11596
.L11514:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	ip, [r9, #68]
	mov	r0, r10
	ldr	r4, [ip, #28]
	ldr	r1, [ip, #20]
	ldr	r6, [ip, #52]
	ldr	r2, [ip, #60]
	ldr	r5, [ip, #84]
	ldr	r3, [ip, #92]
	add	r1, r1, r4
	ldr	lr, [ip, #116]
	ldr	r4, [ip, #124]
	add	r2, r6, r2
	add	r2, r1, r2
	add	r3, r5, r3
	add	r3, r2, r3
	add	r4, lr, r4
	add	r4, r3, r4
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r4, #0
	mov	r0, r9
	beq	.L11512
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L11514
.L11495:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11587:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #112]
	mov	ip, #6
	mov	r4, r0
	mov	r1, #2
	mov	r0, #10
	cmp	r3, ip
	bgt	.L11499
	ldr	r2, [r9, #168]
	str	ip, [r9, #112]
	ldr	r3, [r9, #56]
	cmp	r2, #0
	str	r3, [r9, #116]
	beq	.L11499
	bl	send_sig_info(PLT)
.L11499:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11497
.L11596:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #120]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11514
.L11595:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #112]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11510
.L11594:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #88]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11509
.L11593:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #80]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11508
.L11592:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #56]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11507
.L11591:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #48]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11506
.L11590:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11505
.L11589:
	ldr	r0, [r3, #100]
	ldr	r1, [r4, #16]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11504
.L11512:
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L11515
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L11515
	blx	r1
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L11515:
	tst	r2, #2
	beq	.L11503
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11503
	blx	r3
.L11503:
	mov	r0, r10
	mov	r5, #0
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #68]
	str	r5, [r3, #4]
	ldr	r3, [r9, #68]
	str	r5, [r3, #36]
	ldr	r3, [r9, #68]
	str	r5, [r3, #68]
	ldr	r3, [r9, #68]
	str	r5, [r3, #100]
	ldr	r6, [r9, #112]
	ldr	r3, [r9, #68]
	ldr	r4, [r9, #116]
	cmp	r6, #1
	str	r3, [r9, #60]
	str	r3, [r9, #64]
	beq	.L11517
	ldr	r3, [r9, #92]
	cmp	r3, r5
	movne	r1, r5
	movne	ip, r1
	movne	r0, r1
	beq	.L11526
.L11518:
	ldr	r3, [r9, #100]
	add	ip, ip, #1
	add	r3, r3, r1
	add	r1, r1, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #36]
	str	r0, [r3, #32]
	and	r2, r2, #239
	bfc	r2, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r9, #92]
	cmp	ip, r3
	bcc	.L11518
.L11526:
	mov	r3, #0
	mov	r0, r10
	sub	r6, r6, #2
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r6, #5
	addls	pc, pc, r6, asl #2
	b	.L11495
.L11521:
	b	.L11520
	b	.L11495
	b	.L11522
	b	.L11495
	b	.L11523
	b	.L11523
	.p2align 1
.L11517:
	mvn	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	send_status(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #112]
	cmn	r3, #8
	beq	.L11597
.L11525:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11495
.L11520:
	ldr	r1, [r9, #8]
	cmp	r1, #0
	beq	.L11598
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L11599
.L11533:
	ldr	r3, [r9, #56]
	cmp	r3, r4
	bne	.L11495
	ldr	r0, [r9, #4]
	cmp	r0, #0
	beq	.L11600
.L11584:
	bl	usb_composite_setup_continue(PLT)
	b	.L11495
.L11522:
	ldr	r1, [r9, #12]
	mov	r0, r9
	bl	do_set_interface(PLT)
	ldr	r3, [r9, #12]
	cmp	r3, #0
	beq	.L11495
	ldr	r0, [r9, #4]
	b	.L11584
.L11523:
	mov	r1, #0
	mov	r0, r9
	bl	do_set_interface(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11495
.L11597:
	str	r5, [r9, #112]
	b	.L11525
.L11599:
	ldr	r3, [r9, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11533
.L11600:
	ldr	r0, [r9, #48]
	mov	r2, #32
	ldr	r1, [r9, #52]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r9, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r9, [r2]
	beq	.L11495
	ldr	r2, [r9, #48]
	ldr	r0, [r9]
	ldr	r1, .L11601
	ldr	r2, [r2, #4]
	add	r0, r0, #32
.LPIC2861:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11495
.L11598:
	ldr	r2, .L11601+4
	movw	r3, #3112
	ldr	r0, [r9]
	ldr	r1, .L11601+8
.LPIC2858:
	add	r2, pc, r2
	sub	r2, r2, #4000
	add	r0, r0, #32
.LPIC2859:
	add	r1, pc, r1
	sub	r2, r2, #12
	bl	dev_err(PLT)
	ldr	r0, .L11601+12
	movw	r1, #550
.LPIC2860:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11495
.L11602:
	.align	2
.L11601:
	.word	.LC198-(.LPIC2861+8)
	.word	.LANCHOR9-(.LPIC2858+8)
	.word	.LC196-(.LPIC2859+8)
	.word	.LC197-(.LPIC2860+8)
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L12015
	str	lr, [sp, #32]
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	strd	r6, [sp, #8]
	add	r10, fp, #44
	strd	r8, [sp, #16]
.LPIC2868:
	add	r4, pc, r4
	.pad #76
	sub	sp, sp, #76
	add	r8, r4, #3632
	str	r4, [sp, #8]
	add	r8, r8, #4
	bl	allow_signal(PLT)
	ldr	r3, .L12015+4
	mov	r0, #15
.LPIC2865:
	add	r3, pc, r3
	str	r3, [sp, #12]
	bl	allow_signal(PLT)
	ldr	r3, .L12015+8
	mov	r0, #9
.LPIC2866:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	allow_signal(PLT)
	mov	r0, #10
	bl	allow_signal(PLT)
	bl	set_freezable(PLT)
	ldr	r3, .L12015+12
	mov	r2, sp
	mov	r1, #0
	bic	r2, r2, #8128
	bic	r2, r2, #63
.LPIC2908:
	add	r3, pc, r3
	str	r1, [r2, #8]
	add	r3, r3, #3648
	add	r3, r3, #8
	str	r3, [sp, #20]
.L11604:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L11984
.L11785:
	cmp	r3, #0
	bgt	.L11605
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11605
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	bne	.L11608
	mov	r0, fp
	bl	sleep_thread(PLT)
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L11785
.L11984:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L11789
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L11789
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L11789
.L11790:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit(PLT)
.L11789:
	ldr	r5, [fp, #92]
	add	r7, fp, #28
	ldr	r4, [fp, #100]
	mov	r0, r7
	bl	down_write(PLT)
	cmp	r5, #0
	movne	r6, #14848
	addne	r4, r4, #392
	movtne	r6, 2
	movne	r8, #0
	beq	.L11788
.L11792:
	ldr	r0, [r4, #-392]
	cmp	r0, #0
	beq	.L11791
	bl	fput(PLT)
	str	r8, [r4, #-392]
	str	r6, [r4, #-356]
.L11791:
	subs	r5, r5, #1
	add	r4, r4, #392
	bne	.L11792
.L11788:
	mov	r0, r7
	bl	up_write(PLT)
	b	.L11790
.L11605:
	mov	r0, fp
	bl	handle_exception(PLT)
	b	.L11604
.L11608:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L11613
.L11890:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, fp
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11604
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L11890
.L11613:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, #31
	mov	r1, r4
	rsbne	r2, r3, r2
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer(PLT)
	cmp	r0, #0
	bne	.L11956
	b	.L11604
.L11889:
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, fp
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11604
.L11956:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L11889
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 2858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r5, [fp, #8]
	cmp	r5, #0
	beq	.L11985
	ldr	r3, [r4, #24]
	ldr	r7, [r5, #88]
	ldr	r2, [r3, #44]
	ldr	r6, [r3]
	cmp	r2, #0
	bne	.L11618
	ldr	r2, [r5, #96]
	tst	r2, #1
	bne	.L11618
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L11969
	ldr	r2, [r6]
	movw	r3, #21333
	movt	r3, 17218
	cmp	r2, r3
	bne	.L11969
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bls	.L11986
.L11632:
	ldrb	r3, [r7, #144]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L11987
.L11618:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11604
.L11989:
	blx	r3
.L11623:
	cmp	r0, #0
	beq	.L11626
	cmn	r0, #11
	bne	.L11988
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11626
.L11969:
	ldr	r0, [r5, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	bne	.L11989
	ldr	r3, [r2, #24]
	mov	r1, #1
	blx	r3
	b	.L11623
.L11986:
	ldrb	r3, [r6, #12]	@ zero_extendqisi2
	tst	r3, #127
	bne	.L11632
	ldrb	r2, [r6, #14]	@ zero_extendqisi2
	sub	r3, r2, #1
	cmp	r3, #15
	bhi	.L11632
	add	r1, r6, #15
	str	r2, [r7, #72]
	add	r0, r7, #76
	bl	memcpy(PLT)
	ldrsb	r3, [r6, #12]
	mov	r0, r10
	ldr	r2, [r7, #92]
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r7, #120]
	ldr	r3, [r6, #8]
	cmp	r3, #0
	str	r3, [r7, #124]
	moveq	r3, #3
	streq	r3, [r7, #120]
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r7, #96]
	ldrcc	r2, [r7, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r7, #104]
	ldr	r3, [r6, #4]
	str	r3, [r7, #132]
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #8
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L11675
.L11888:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, fp
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11604
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L11888
.L11675:
	add	r5, fp, #28
	mov	r0, r10
	str	r5, [sp, #48]
	bl	_raw_spin_unlock_irq(PLT)
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r5
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read(PLT)
	ldrb	r3, [fp, #76]	@ zero_extendqisi2
	cmp	r3, #37
	beq	.L11643
	bhi	.L11644
	cmp	r3, #21
	beq	.L11645
	bls	.L11990
	cmp	r3, #26
	beq	.L11653
	bls	.L11991
	cmp	r3, #30
	beq	.L11657
	cmp	r3, #35
	beq	.L11658
	cmp	r3, #27
	beq	.L11992
.L11642:
	ldr	r6, [sp, #20]
	mov	r5, #0
	mov	r2, r3
	ldr	r1, .L12015+16
	str	r5, [fp, #128]
	mov	r0, r6
.LPIC2907:
	add	r1, pc, r1
	bl	sprintf(PLT)
	str	r5, [sp]
	mov	r2, r5
	mvn	r3, #0
	str	r6, [sp, #4]
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r3, [fp, #104]
.L11966:
	mov	r2, #335872
	mvn	r5, #21
	str	r2, [r3, #28]
.L11678:
	ldr	r0, [sp, #48]
	bl	up_read(PLT)
.L11795:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L11604
	cmn	r5, #22
	beq	.L11811
	cmp	r5, #0
	blt	.L11749
.L11748:
	ldr	r3, [fp, #120]
	cmp	r3, #2
	bne	.L11749
	ldr	r3, [fp, #128]
	mov	r2, #1
	ldr	r1, [r4, #16]
	cmp	r5, r3
	movcs	r5, r3
	str	r5, [r1, #4]
	str	r2, [r4, #4]
	ldr	r3, [fp, #136]
	rsb	r3, r5, r3
	str	r3, [fp, #136]
.L11749:
	ldr	r4, [fp, #120]
	ldr	r5, [fp, #60]
	cmp	r4, #1
	beq	.L11764
	bcc	.L11750
	cmp	r4, #2
	bne	.L11800
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L11800
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L11993
	ldr	r3, [fp, #136]
	cmp	r3, #0
	bne	.L11994
	ldr	r2, [r5, #16]
	mov	r1, r5
	mov	r0, fp
	ldrb	ip, [r2, #26]	@ zero_extendqisi2
	bfi	ip, r3, #1, #1
	strb	ip, [r2, #26]
	bl	start_in_transfer(PLT)
	cmp	r0, #0
	beq	.L11604
	ldr	r3, [r5, #8]
	str	r3, [fp, #60]
.L11800:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L12015+20
.LPIC2918:
	add	r3, pc, r3
	ldr	r2, [r3, #3540]
	cmp	r2, #0
	beq	.L11782
	mov	r2, #0
	str	r2, [r3, #3540]
	b	.L11604
.L11987:
	ldr	r0, [r5, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11978
.L11635:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11618
.L11978:
	ldr	r0, [r5, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L11618
	cmn	r0, #11
	beq	.L11635
	ldr	r3, [r5, #84]
	mov	r2, r0
	ldr	r1, [sp, #16]
	add	r0, r3, #32
	bl	dev_warn(PLT)
	b	.L11618
.L11988:
	ldr	r3, [r5, #84]
	mov	r2, r0
	ldr	r1, [sp, #12]
	add	r0, r3, #32
	bl	dev_warn(PLT)
.L11626:
	add	r1, r5, #96
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L11618
.L11985:
	ldr	r2, .L12015+24
	movw	r3, #2859
	ldr	r0, [fp]
	ldr	r1, .L12015+28
.LPIC2862:
	add	r2, pc, r2
	sub	r2, r2, #3984
	add	r0, r0, #32
.LPIC2863:
	add	r1, pc, r1
	sub	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L12015+32
	movw	r1, #550
.LPIC2864:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11618
.L11702:
	tst	r2, #16
	movwne	r3, #21250
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L11678
	cmp	r3, #0
	beq	.L11706
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L11710
	ldr	ip, [r3, #4]
	cmp	ip, #0
	beq	.L11710
	ldr	r3, [fp, #100]
	movw	r2, #22737
	mov	r1, r6
	movt	r2, 6687
	mov	r0, fp
	rsb	r3, r3, r6
	mov	r3, r3, asr #3
	mul	r2, r2, r3
	blx	ip
	subs	r5, r0, #0
	blt	.L11676
	bne	.L11706
.L11710:
	ldr	r5, [sp, #48]
	mov	r0, r5
	bl	up_read(PLT)
	mov	r0, r5
	bl	down_write(PLT)
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L11709
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r6]
.L11709:
	ldr	r5, [sp, #48]
	mov	r0, r5
	bl	up_write(PLT)
	mov	r0, r5
	bl	down_read(PLT)
	ldr	r1, .L12015+36
	mov	r0, fp
.LPIC2891:
	add	r1, pc, r1
	bl	send_message(PLT)
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L11706
	ldr	ip, [r3, #8]
	cmp	ip, #0
	beq	.L11706
	ldr	r3, [fp, #100]
	movw	r2, #22737
	mov	r1, r6
	movt	r2, 6687
	mov	r0, fp
	rsb	r3, r3, r6
	mov	r3, r3, asr #3
	mul	r2, r2, r3
	blx	ip
	and	r5, r0, r0, asr #31
.L11676:
	ldr	r0, [sp, #48]
	bl	up_read(PLT)
	cmn	r5, #4
	bne	.L11795
	b	.L11604
.L11644:
	cmp	r3, #68
	beq	.L11660
	bls	.L11995
	cmp	r3, #168
	beq	.L11668
	bls	.L11996
	cmp	r3, #190
	beq	.L11672
	cmp	r3, #250
	beq	.L11673
	cmp	r3, #170
	bne	.L11642
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r3, #1022
	mov	r2, #1
	ldrb	ip, [fp, #82]	@ zero_extendqisi2
	mov	r1, #12
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldrb	r5, [fp, #84]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	ip, lr, ip, asl #24
	ldr	lr, .L12015+40
	orr	r0, ip, r0
	orr	ip, r0, r5, asl #8
	mov	r0, fp
.LPIC2897:
	add	lr, pc, lr
	str	lr, [sp]
	str	ip, [fp, #128]
	bl	check_command_size_in_blocks.constprop.126(PLT)
	subs	r5, r0, #0
	bne	.L11676
.L11963:
	mov	r0, fp
	bl	do_write(PLT)
	mov	r5, r0
	b	.L11676
.L11811:
	mov	r5, r3
	b	.L11748
.L11990:
	cmp	r3, #8
	beq	.L11647
	bhi	.L11648
	cmp	r3, #0
	beq	.L11649
	cmp	r3, #3
	bne	.L11642
	ldr	ip, .L12015+44
	mov	r1, #0
	mov	r3, #16
	ldrb	lr, [fp, #80]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #6
.LPIC2888:
	add	ip, pc, ip
	str	lr, [fp, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r3, [fp, #104]
	ldr	r6, [r4]
	cmp	r3, #0
	beq	.L11997
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r5, [r3, #28]
	ldr	r9, [r3, #32]
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	ubfx	r7, r2, #6, #1
	bfi	r2, r1, #6, #1
	mov	r7, r7, asl #7
	strb	r2, [r3, #24]
.L11698:
	mov	r1, #18
	mov	r0, r6
	bl	__memzero(PLT)
	mov	r3, r9, lsr #16
	mov	r1, r5, lsr #16
	strb	r5, [r6, #13]
	strb	r9, [r6, #6]
	mov	r2, r5, lsr #8
	mov	r0, r3, lsr #8
	strb	r3, [r6, #4]
	orr	r7, r7, #112
	ubfx	r3, r9, #8, #8
	strb	r1, [r6, #2]
	mov	r1, #10
	strb	r0, [r6, #3]
	mov	r5, #18
	strb	r7, [r6]
	strb	r3, [r6, #5]
	strb	r2, [r6, #12]
	strb	r1, [r6, #7]
	b	.L11678
.L11995:
	cmp	r3, #47
	beq	.L11662
	bhi	.L11663
	cmp	r3, #40
	beq	.L11664
	cmp	r3, #42
	bne	.L11642
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	movw	r3, #446
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r1, #10
	mov	r0, fp
	ldr	lr, .L12015+48
	orr	ip, ip, r5, asl #8
.LPIC2896:
	add	lr, pc, lr
.L11975:
	str	lr, [sp]
	str	ip, [fp, #128]
	bl	check_command_size_in_blocks.constprop.126(PLT)
	subs	r5, r0, #0
	bne	.L11676
	b	.L11963
.L11750:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11800
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L11998
	ldr	r0, [r3, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r4, [fp, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11796
.L11754:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11604
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11796:
	cmp	r0, #0
	beq	.L11800
	cmn	r0, #11
	beq	.L11754
	ldr	r3, [r4, #84]
	mov	r2, r0
	ldr	r1, .L12015+52
	add	r0, r3, #32
.LPIC2913:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11800
.L11764:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L11800
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	and	r3, r3, #8
	ands	r3, r3, #255
	beq	.L11765
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #112]
	mov	r5, r0
	cmp	r3, #1
	bgt	.L11767
	ldr	r2, [fp, #168]
	str	r4, [fp, #112]
	ldr	r3, [fp, #56]
	cmp	r2, #0
	str	r3, [fp, #116]
	beq	.L11767
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L11767:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11604
.L11996:
	cmp	r3, #85
	beq	.L11670
	cmp	r3, #90
	bne	.L11642
	ldrb	r0, [fp, #84]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #390
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r2, #2
	ldr	lr, .L12015+56
	str	r1, [sp]
	mov	r1, #10
	orr	ip, r0, ip, asl #8
	mov	r0, fp
.LPIC2879:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
.L11960:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense(PLT)
	mov	r5, r0
	b	.L11676
.L11991:
	cmp	r3, #22
	beq	.L11655
	cmp	r3, #23
	bne	.L11642
	ldr	r1, .L12015+60
	mov	r5, #0
	ldr	r0, .L12015+64
.LPIC2898:
	add	r1, pc, r1
	sub	r1, r1, #3968
.LPIC2899:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, .L12015+68
	mov	r0, fp
.LPIC2900:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11678
.L11663:
	cmp	r3, #53
	beq	.L11666
	cmp	r3, #67
	bne	.L11642
	ldr	r2, [fp, #104]
	cmp	r2, #0
	beq	.L11642
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11642
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	mov	r7, #1
	movw	r3, #962
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	ldr	lr, .L12015+72
	str	r7, [sp]
	mov	r0, fp
	orr	ip, ip, r5, asl #8
.LPIC2886:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldrb	r1, [fp, #77]	@ zero_extendqisi2
	ldrb	r3, [fp, #82]	@ zero_extendqisi2
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	tst	r1, #253
	and	r1, r1, #2
	ldr	r6, [r4]
	movne	ip, r7
	moveq	ip, #0
	cmp	r3, r7
	movle	r3, ip
	orrgt	r3, ip, #1
	uxtb	r9, r1
	cmp	r3, #0
	movne	r3, #9216
	mov	r0, r0, lsr #6
	movtne	r3, 5
	mvnne	r5, #21
	strne	r3, [r2, #28]
	bne	.L11678
	cmp	r0, #2
	beq	.L11999
	mov	r1, #20
	mov	r0, r6
	str	r2, [sp, #40]
	bl	__memzero(PLT)
	mov	r1, #18
	mov	r3, #22
	strb	r7, [r6, #2]
	cmp	r9, #0
	strb	r7, [r6, #3]
	ldr	r2, [sp, #40]
	strb	r7, [r6, #6]
	strb	r1, [r6, #1]
	strb	r3, [r6, #5]
	bne	.L12000
	mvn	r1, #85
	strb	r5, [r6, #8]
	strb	r5, [r6, #9]
	strb	r5, [r6, #10]
	strb	r5, [r6, #11]
	mov	r5, #20
	strb	r1, [r6, #14]
	strb	r3, [r6, #13]
	ldr	r3, [r2, #16]
	mov	r2, r3, lsr #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r6, #19]
	mov	r3, r2, lsr #8
	strb	r1, [r6, #18]
	strb	r2, [r6, #17]
	strb	r3, [r6, #16]
	b	.L11678
.L11648:
	cmp	r3, #10
	beq	.L11651
	cmp	r3, #18
	bne	.L11642
	ldr	ip, .L12015+76
	mov	r1, #0
	mov	r3, #16
	ldrb	lr, [fp, #80]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #6
.LPIC2867:
	add	ip, pc, ip
	str	lr, [fp, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	ip, [fp, #104]
	ldr	r6, [r4]
	cmp	ip, #0
	beq	.L12001
	ldrb	r3, [ip, #24]	@ zero_extendqisi2
	mov	r5, #0
	mov	r2, #2
	mov	r0, #31
	add	r7, fp, #218
	mov	r1, r7
	ands	r3, r3, #8
	movne	r3, #5
	strb	r3, [r6]
	ldrb	r3, [ip, #24]	@ zero_extendqisi2
	strb	r2, [r6, #2]
	strb	r2, [r6, #3]
	mov	r2, #16
	strb	r0, [r6, #4]
	mov	r0, r8
	and	r3, r3, #4
	strb	r5, [r6, #5]
	cmp	r3, r5
	strb	r5, [r6, #6]
	movne	r3, #128
	moveq	r3, r5
	strb	r5, [r6, #7]
	strb	r3, [r6, #1]
	bl	strncpy(PLT)
	ldr	r3, [sp, #8]
	mov	r0, r7
	strb	r5, [r3, #3652]
	bl	strlen(PLT)
	cmp	r0, #11
	bhi	.L11681
	ldr	r3, [fp, #96]
	cmp	r3, r5
	bne	.L12002
.L11681:
	ldr	ip, .L12015+80
	mov	r1, #1
	add	r7, fp, #180
	ldr	r2, .L12015+84
	mov	r0, r7
	add	r3, fp, #209
	str	r1, [sp, #4]
	mov	r1, #29
	mov	r5, #36
.LPIC2875:
	add	ip, pc, ip
	add	ip, ip, #3632
.LPIC2874:
	add	r2, pc, r2
	add	ip, ip, #4
	str	ip, [sp]
	bl	snprintf(PLT)
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r6, #8]	@ unaligned
	str	r1, [r6, #12]	@ unaligned
	str	r2, [r6, #16]	@ unaligned
	str	ip, [r6, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r2, [r6, #32]	@ unaligned
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r6, #36]
	b	.L11678
.L11782:
	mov	r0, fp
	bl	send_status(PLT)
	subs	r4, r0, #0
	bne	.L11604
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11604
.L11645:
	ldr	ip, .L12015+88
	mov	r1, #0
	mov	r3, #18
	ldrb	lr, [fp, #80]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #6
.LPIC2876:
	add	ip, pc, ip
	str	lr, [fp, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
.L11977:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	bne	.L11966
.L11682:
	mvn	r5, #21
	b	.L11678
.L11643:
	ldr	ip, .L12015+92
	mov	r0, #1
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r1, #10
	str	r0, [sp]
	mov	r0, fp
.LPIC2884:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldrb	r1, [fp, #79]	@ zero_extendqisi2
	ldrb	r0, [fp, #78]	@ zero_extendqisi2
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldrb	r3, [fp, #81]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	orr	r0, r1, r0, asl #24
	cmp	r2, #1
	ldr	r1, [fp, #104]
	orr	r0, r0, r3
	ldr	r3, [r4]
	orr	r0, r0, ip, asl r6
	bgt	.L11967
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L11967
	ldr	r2, [r1, #16]
	mov	r5, r6
	sub	r2, r2, #1
	mov	r0, r2, lsr #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	mov	r2, r0, lsr #8
	strb	ip, [r3, #2]
	strb	r0, [r3, #1]
	strb	r2, [r3]
	ldr	r2, [r1, #44]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3, #7]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #6]
	strb	r1, [r3, #5]
	strb	r2, [r3, #4]
	b	.L11678
.L11765:
	mov	r5, r3
	ldr	r3, [fp, #64]
	b	.L11769
.L12016:
	.align	2
.L12015:
	.word	.LANCHOR4-(.LPIC2868+8)
	.word	.LC644-(.LPIC2865+8)
	.word	.LC645-(.LPIC2866+8)
	.word	.LANCHOR4-(.LPIC2908+8)
	.word	.LC675-(.LPIC2907+8)
	.word	.LANCHOR4-(.LPIC2918+8)
	.word	.LANCHOR9-(.LPIC2862+8)
	.word	.LC196-(.LPIC2863+8)
	.word	.LC197-(.LPIC2864+8)
	.word	.LC663-(.LPIC2891+8)
	.word	.LC669-(.LPIC2897+8)
	.word	.LC660-(.LPIC2888+8)
	.word	.LC668-(.LPIC2896+8)
	.word	.LC645-(.LPIC2913+8)
	.word	.LC651-(.LPIC2879+8)
	.word	.LANCHOR9-(.LPIC2898+8)
	.word	.LC670-(.LPIC2899+8)
	.word	.LC671-(.LPIC2900+8)
	.word	.LC658-(.LPIC2886+8)
	.word	.LC646-(.LPIC2867+8)
	.word	.LANCHOR4-(.LPIC2875+8)
	.word	.LC479-(.LPIC2874+8)
	.word	.LC648-(.LPIC2876+8)
	.word	.LC656-(.LPIC2884+8)
	.word	.LC652-(.LPIC2880+8)
	.word	.LC649-(.LPIC2877+8)
	.word	.LC650-(.LPIC2878+8)
	.word	.LC657-(.LPIC2885+8)
	.word	.LC655-(.LPIC2883+8)
	.word	.LC667-(.LPIC2895+8)
	.word	.LC665-(.LPIC2893+8)
	.word	.LC654-(.LPIC2882+8)
	.word	.LC666-(.LPIC2894+8)
	.word	.LANCHOR9-(.LPIC2901+8)
	.word	.LC670-(.LPIC2902+8)
	.word	.LC672-(.LPIC2903+8)
	.word	.LC661-(.LPIC2889+8)
	.word	.LC659-(.LPIC2887+8)
	.word	.LANCHOR9-(.LPIC2905+8)
	.word	.LC674-(.LPIC2906+8)
	.word	.LC673-(.LPIC2904+8)
	.word	.LC653-(.LPIC2881+8)
	.word	.LC664-(.LPIC2892+8)
	.word	.LC645-(.LPIC2917+8)
	.word	.LANCHOR9-(.LPIC2914+8)
	.word	.LC196-(.LPIC2915+8)
	.word	.LC197-(.LPIC2916+8)
	.word	.LANCHOR9-(.LPIC2910+8)
	.word	.LC196-(.LPIC2911+8)
	.word	.LC197-(.LPIC2912+8)
.L12003:
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L11800
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	bne	.L11776
.L11802:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	rsbne	r3, r2, r3
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer(PLT)
	cmp	r0, #0
	beq	.L11604
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	rsb	r3, r4, r3
	str	r2, [fp, #60]
	str	r3, [fp, #140]
.L11772:
	ldr	r3, [fp, #64]
.L11769:
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12003
	cmp	r2, #1
	bne	.L11770
#APP
@ 2060 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L11771
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L11772
.L11771:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L11774
	ldr	r2, [fp, #168]
	mov	r1, #1
	ldr	r3, [fp, #56]
	str	r1, [fp, #112]
	cmp	r2, #0
	str	r3, [fp, #116]
	beq	.L11774
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info(PLT)
.L11774:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11604
.L11770:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L11776
	ldr	r3, [fp, #140]
	cmp	r3, #0
	bne	.L11802
.L11776:
	mov	r0, fp
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L11772
	b	.L11604
.L11657:
	ldr	ip, .L12015+96
	mov	r0, #0
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	r0, [fp, #128]
	str	r0, [sp]
	mov	r0, fp
.LPIC2880:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L11682
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L11965
	ldrb	r7, [fp, #80]	@ zero_extendqisi2
	tst	r7, #254
	and	r7, r7, #1
	bne	.L11700
	and	r1, r3, #144
	eor	r2, r7, #1
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L12004
.L11685:
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	bfi	r3, r7, #4, #1
	strb	r3, [r6, #24]
	b	.L11678
.L11670:
	ldrb	r0, [fp, #84]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #386
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r2, #1
	ldr	lr, .L12015+100
	str	r1, [sp]
	mov	r1, #10
	orr	ip, r0, ip, asl #8
	mov	r0, fp
.LPIC2877:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	b	.L11977
.L11653:
	ldr	ip, .L12015+104
	mov	r1, #0
	mov	r3, #22
	ldrb	lr, [fp, #80]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #6
.LPIC2878:
	add	ip, pc, ip
	str	lr, [fp, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	b	.L11960
.L11660:
	ldr	r2, [fp, #104]
	cmp	r2, #0
	beq	.L11642
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11642
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	mov	r0, #1
	movw	r3, #446
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	ldr	lr, .L12015+108
	str	r0, [sp]
	mov	r0, fp
	orr	ip, ip, r5, asl #8
.LPIC2885:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldrb	r3, [fp, #79]	@ zero_extendqisi2
	ldrb	r2, [fp, #77]	@ zero_extendqisi2
	ldrb	r1, [fp, #78]	@ zero_extendqisi2
	ldrb	ip, [fp, #81]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r0, [fp, #80]	@ zero_extendqisi2
	tst	r2, #253
	and	r2, r2, #2
	orr	r3, r3, r1, asl #24
	ldr	r1, [fp, #104]
	uxtb	r2, r2
	orr	r3, r3, ip
	ldr	ip, [r4]
	orr	r9, r3, r0, asl #8
	str	r2, [sp, #40]
	bne	.L11967
	ldrd	r6, [r1, #16]
	mov	r3, #0
	cmp	r9, r6
	sbcs	r3, r3, r7
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r1, #28]
	bge	.L11678
	mov	r0, ip
	mov	r1, #8
	str	ip, [sp, #52]
	bl	__memzero(PLT)
	ldr	r3, [sp, #40]
	ldr	ip, [sp, #52]
	cmp	r3, #0
	mov	r3, #1
	strb	r3, [ip]
	bne	.L12005
	mov	r3, r9, lsr #16
	mov	r5, #8
	strb	r9, [ip, #7]
	ubfx	r1, r9, #8, #8
	mov	r2, r3, lsr r5
	strb	r1, [ip, #6]
	strb	r3, [ip, #5]
	strb	r2, [ip, #4]
	b	.L11678
.L11668:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r3, #1022
	mov	r2, #2
	ldrb	ip, [fp, #82]	@ zero_extendqisi2
	mov	r1, #12
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldrb	r5, [fp, #84]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	ip, lr, ip, asl #24
	ldr	lr, .L12015+112
	orr	r0, ip, r0
	orr	ip, r0, r5, asl #8
	mov	r0, fp
.LPIC2883:
	add	lr, pc, lr
	str	lr, [sp]
	str	ip, [fp, #128]
	bl	check_command_size_in_blocks.constprop.126(PLT)
	subs	r5, r0, #0
	bne	.L11676
.L11962:
	mov	r0, fp
	bl	do_read(PLT)
	mov	r5, r0
	b	.L11676
.L11651:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r3, #30
	mov	r2, #1
	ldr	lr, .L12015+116
	mov	r1, #6
	mov	r0, fp
	cmp	ip, #0
.LPIC2895:
	add	lr, pc, lr
	moveq	ip, #256
	b	.L11975
.L11649:
	ldr	ip, .L12015+120
	mov	r1, #1
	str	r3, [fp, #128]
	mov	r2, #3
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #6
.LPIC2893:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	mov	r5, r0
	b	.L11676
.L11664:
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	movw	r3, #446
	mov	r2, #2
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r1, #10
	mov	r0, fp
	ldr	lr, .L12015+124
	orr	ip, ip, r5, asl #8
.LPIC2882:
	add	lr, pc, lr
.L11971:
	str	lr, [sp]
	str	ip, [fp, #128]
	bl	check_command_size_in_blocks.constprop.126(PLT)
	subs	r5, r0, #0
	bne	.L11676
	b	.L11962
.L11662:
	ldr	ip, .L12015+128
	mov	r1, #0
	mov	r0, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r1, #10
	str	r0, [sp]
	mov	r0, fp
.LPIC2894:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldrb	r3, [fp, #79]	@ zero_extendqisi2
	ldrb	r1, [fp, #78]	@ zero_extendqisi2
	ldr	r0, [fp, #60]
	ldr	r9, [fp, #104]
	ldrb	r2, [fp, #81]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #24
	str	r0, [sp, #52]
	ldrd	r0, [r9, #16]
	orr	r3, r3, r2
	orr	lr, r3, ip, asl #8
	mov	r3, #0
	cmp	lr, r0
	sbcs	r3, r3, r1
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r9, #28]
	bge	.L11676
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #239
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r9, #28]
	bne	.L11676
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	ip, r3, ip, asl #8
	beq	.L11743
	ldr	r2, [r9, #40]
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	ldr	r0, [r9]
	sub	r1, r2, #32
	mov	r7, ip, asl r2
	orr	r1, r5, lr, asl r1
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	str	r1, [sp, #36]
	rsb	r1, r2, #32
	cmp	r3, #0
	ldr	ip, [sp, #36]
	mov	r3, lr, asl r2
	str	r3, [sp, #32]
	orr	r1, ip, lr, lsr r1
	str	r1, [sp, #36]
	bne	.L11715
	mov	r1, #1
	bl	vfs_fsync(PLT)
.L11715:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L11964
	ldr	r3, [r9]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11964
	mov	r3, sp
	mov	r6, r5
	bic	ip, r3, #8128
	mov	r5, r4
	bic	ip, ip, #63
	mov	r4, ip
	b	.L11718
.L12008:
	cmp	r0, #0
	ldr	ip, [sp, #56]
	blt	.L11725
	cmp	ip, r0
	bls	.L11724
	ldr	r3, [r9, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L11724:
	cmp	r0, #0
	beq	.L11725
	ldrd	r2, [sp, #32]
	rsb	r7, r0, r7
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	strd	r2, [sp, #32]
.L11718:
	cmp	r7, #0
	beq	.L12006
	ldrd	r0, [r9, #8]
	ldrd	r2, [sp, #32]
	subs	r2, r0, r2
	sbc	r3, r1, r3
	cmp	r7, #16384
	mov	r1, r3
	movcc	r3, r7
	movcs	r3, #16384
	mov	r0, r2
	str	r3, [sp, #40]
	mov	r3, #0
	str	r3, [sp, #44]
	ldrd	r2, [sp, #40]
	cmp	r0, r2
	sbcs	r3, r1, r3
	strltd	r0, [sp, #40]
.L11719:
	ldrd	r2, [sp, #40]
	cmp	r2, #0
	beq	.L12007
	ldrd	r0, [sp, #32]
	add	r3, sp, #72
	str	r2, [sp, #56]
	ldr	r2, [sp, #40]
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #52]
	ldr	r0, [r9]
	ldr	r1, [r1]
	bl	vfs_read(PLT)
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L12008
	mov	r4, r5
.L11964:
	mvn	r5, #3
	b	.L11676
.L11655:
	ldr	r1, .L12015+132
	mov	r5, #0
	ldr	r0, .L12015+136
.LPIC2901:
	add	r1, pc, r1
	sub	r1, r1, #3952
.LPIC2902:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, .L12015+140
	mov	r0, fp
.LPIC2903:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11678
.L11992:
	ldr	ip, .L12015+144
	mov	r0, #0
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	r0, [fp, #128]
	str	r0, [sp]
	mov	r0, fp
.LPIC2889:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L11682
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L11965
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L11700
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L11700
	tst	r3, #1
	and	r3, r3, #2
	uxtb	r3, r3
	beq	.L11702
	cmp	r3, #0
	bne	.L12009
.L11703:
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L11704
.L11706:
	mov	r5, #0
	b	.L11678
.L11658:
	ldrb	r0, [fp, #84]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #384
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r2, #2
	ldr	lr, .L12015+148
	str	r1, [sp]
	mov	r1, #10
	orr	ip, r0, ip, asl #8
	mov	r0, fp
.LPIC2887:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r1, [fp, #104]
	mov	r2, #8
	mov	ip, #2
	ldr	r3, [r4]
	strb	r5, [r3, #2]
	strb	r5, [r3, #1]
	strb	r5, [r3]
	mov	r5, #12
	strb	r2, [r3, #3]
	ldr	r2, [r1, #16]
	mov	r0, r2, lsr #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r2, [r3, #6]
	mov	r2, r0, lsr #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3, #11]
	strb	r0, [r3, #10]
	strb	r1, [r3, #9]
	b	.L11678
.L11673:
	ldr	r1, .L12015+152
	add	r7, fp, #235
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	mov	r3, r7
	ldr	r0, .L12015+156
.LPIC2905:
	add	r1, pc, r1
	sub	r1, r1, #3936
	str	r5, [fp, #128]
	mov	r2, r5
	sub	r1, r1, #4
.LPIC2906:
	add	r0, pc, r0
	ldr	r6, [r4]
	bl	printk(PLT)
	ldr	r1, [fp, #128]
	cmp	r1, #0
	bne	.L12010
.L11745:
	cmp	r5, #101
	mov	r1, r7
	movhi	r2, #101
	mov	r0, r6
	movls	r2, r5
	movhi	r5, r2
	bl	memcpy(PLT)
	b	.L11678
.L11672:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #956
	ldrb	lr, [fp, #82]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r0, [fp, #84]	@ zero_extendqisi2
	str	r1, [sp]
	mov	r1, #12
	mov	ip, ip, asl #8
	orr	ip, ip, lr, asl #16
	ldr	lr, .L12015+160
	orr	ip, ip, r0
	mov	r0, fp
	mov	ip, ip, asl #9
.LPIC2904:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [fp, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldrb	r2, [fp, #83]	@ zero_extendqisi2
	ldrb	r1, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #79]	@ zero_extendqisi2
	ldrb	ip, [fp, #78]	@ zero_extendqisi2
	mov	r2, r2, asl #8
	ldrb	r7, [fp, #80]	@ zero_extendqisi2
	ldrb	r0, [fp, #84]	@ zero_extendqisi2
	orr	r2, r2, r1, asl #16
	mov	r3, r3, asl #16
	ldrb	r1, [fp, #81]	@ zero_extendqisi2
	ldr	r6, [fp, #104]
	orr	r3, r3, ip, asl #24
	orrs	r2, r2, r0
	orr	r3, r3, r1
	orr	r3, r3, r7, asl #8
	mov	ip, r3
	str	r3, [sp, #52]
	beq	.L11676
	ldrd	r2, [r6, #16]
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L11676
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #56]
	beq	.L12011
	ldr	r3, [sp, #52]
	ldr	r7, [fp, #128]
	mov	r2, r3, lsr #23
	mov	r3, r3, asl #9
	cmp	r7, #0
	str	r2, [sp, #28]
	str	r3, [sp, #24]
	beq	.L11743
.L11731:
	mov	r3, sp
	str	r4, [sp, #40]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r3, [sp, #60]
.L11744:
	ldrd	r2, [r6, #8]
	mov	r1, #0
	ldrd	r4, [sp, #24]
	subs	r4, r2, r4
	sbc	r5, r3, r5
	ldr	r3, [sp, #24]
	cmp	r7, #16384
	movcc	r0, r7
	movcs	r0, #16384
	cmp	r4, r0
	sbcs	ip, r5, r1
	ubfx	r3, r3, #0, #12
	movlt	r0, r4
	cmp	r3, #0
	mov	r5, r0
	beq	.L11733
	rsb	r5, r3, #4096
	cmp	r5, r0
	movcs	r5, r0
.L11733:
	ldr	r9, [fp, #60]
	ldr	r4, [sp, #40]
	b	.L11734
.L11735:
	mov	r0, fp
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11947
.L11734:
	ldr	r3, [r9, #4]
	cmp	r3, #0
	bne	.L11735
	cmp	r5, #0
	str	r4, [sp, #40]
	beq	.L12012
	ldr	r3, [sp, #56]
	cmp	r3, #248
	ldrd	r2, [sp, #24]
	strd	r2, [sp, #64]
	beq	.L12013
	add	r3, sp, #64
	mov	r2, r5
	ldr	r1, [r9]
	ldr	r0, [r6]
	bl	vfs_read(PLT)
.L11739:
	ldr	r3, [sp, #60]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L11810
	cmp	r0, #0
	blt	.L11740
	cmp	r5, r0
	bls	.L11741
	ldrd	r2, [sp, #24]
	bic	r0, r0, #508
	bic	r0, r0, #3
	ldr	r1, [fp, #136]
	rsb	r7, r0, r7
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	cmp	r5, r0
	strd	r2, [sp, #24]
	rsb	r3, r0, r1
	mov	r2, #1
	str	r3, [fp, #136]
	ldr	r3, [r9, #16]
	str	r0, [r3, #4]
	str	r2, [r9, #4]
	bhi	.L12014
.L11742:
	cmp	r7, #0
	beq	.L11948
	mov	r1, r9
	mov	r0, fp
	bl	start_in_transfer(PLT)
	cmp	r0, #0
	beq	.L11949
	ldr	r3, [r9, #8]
	str	r3, [fp, #60]
	b	.L11744
.L11647:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r3, #30
	mov	r2, #2
	ldr	lr, .L12015+164
	mov	r1, #6
	mov	r0, fp
	cmp	ip, #0
.LPIC2881:
	add	lr, pc, lr
	moveq	ip, #256
	b	.L11971
.L11666:
	ldr	ip, .L12015+168
	mov	r1, #0
	mov	r6, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
.LPIC2892:
	add	ip, pc, ip
	stmia	sp, {r6, ip}
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11676
	ldr	r7, [fp, #104]
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	ldr	r0, [r7]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L11711
	mov	r1, r6
	bl	vfs_fsync(PLT)
	cmp	r0, #0
	beq	.L11706
	movw	r3, #3074
	movt	r3, 3
	str	r3, [r7, #28]
	b	.L11678
.L11994:
	ldr	r2, [r5, #16]
	mov	r1, r5
	mov	r0, fp
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r2, #26]
	bl	start_in_transfer(PLT)
	cmp	r0, #0
	bne	.L11759
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r5, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L11604
.L11799:
	ldr	r4, [fp, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11761
.L11762:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11604
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11761:
	cmp	r0, #0
	beq	.L11800
	cmn	r0, #11
	beq	.L11762
	ldr	r3, [r4, #84]
	mov	r2, r0
	ldr	r1, .L12015+172
	add	r0, r3, #32
.LPIC2917:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11800
.L11759:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r5, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L11800
	b	.L11799
.L11993:
	ldr	r2, .L12015+176
	movw	r3, #2135
	ldr	r0, [fp]
	ldr	r1, .L12015+180
.LPIC2914:
	add	r2, pc, r2
	sub	r2, r2, #3920
	add	r0, r0, #32
.LPIC2915:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12015+184
	movw	r1, #550
.LPIC2916:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11604
.L12010:
	mov	r0, r6
	bl	__memzero(PLT)
	b	.L11745
.L11998:
	ldr	r2, .L12015+188
	movw	r3, #2120
	ldr	r0, [fp]
	ldr	r1, .L12015+192
.LPIC2910:
	add	r2, pc, r2
	sub	r2, r2, #3920
	add	r0, r0, #32
.LPIC2911:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12015+196
	movw	r1, #550
.LPIC2912:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11604
.L11947:
	mov	r5, r0
	b	.L11676
.L12000:
	mov	r1, #2
	mvn	r0, #85
	strb	r5, [r6, #11]
	strb	r5, [r6, #9]
	strb	r5, [r6, #8]
	strb	r1, [r6, #10]
	mov	r1, #75
	strb	r0, [r6, #14]
	strb	r3, [r6, #13]
	ldr	r3, [r2, #16]
	mov	r2, #60
	strb	r5, [r6, #16]
	mov	r5, #20
	mov	r3, r3, lsr #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	ip, r0, r2
	mls	r3, r1, r0, r3
	strb	r3, [r6, #19]
	mls	r2, r2, ip, r0
	strb	ip, [r6, #17]
	strb	r2, [r6, #18]
	b	.L11678
.L11999:
	mov	r1, #20
	mvn	lr, #95
	strb	r7, [r6, #2]
	mvn	ip, #94
	mvn	r5, #93
	strb	r7, [r6, #3]
	cmp	r9, #0
	strb	r7, [r6, #4]
	strb	r3, [r6, #6]
	strb	r3, [r6, #8]
	strb	r3, [r6, #9]
	strb	r3, [r6, #10]
	strb	r3, [r6, #11]
	strb	r7, [r6, #12]
	strb	r3, [r6, #13]
	strb	r3, [r6, #14]
	strb	r7, [r6, #15]
	strb	r3, [r6, #17]
	strb	r3, [r6, #19]
	strb	r3, [r6, #20]
	strb	r3, [r6, #21]
	strb	r3, [r6, #22]
	strb	r7, [r6, #23]
	strb	r3, [r6, #24]
	strb	r3, [r6, #25]
	strb	r7, [r6, #26]
	strb	r3, [r6, #28]
	strb	r3, [r6, #30]
	strb	r3, [r6, #31]
	strb	r3, [r6, #32]
	strb	r1, [r6, #5]
	strb	r1, [r6, #16]
	strb	r1, [r6, #27]
	strb	lr, [r6, #7]
	strb	ip, [r6, #18]
	strb	r5, [r6, #29]
	beq	.L11694
	strb	r3, [r6, #33]
	ldr	r2, [r2, #16]
	mov	ip, #75
	strb	r1, [r6, #38]
	mov	lr, #60
	movw	r5, #4500
	strb	r3, [r6, #39]
	strb	r3, [r6, #41]
	add	r2, r2, #150
	strb	r3, [r6, #42]
	strb	r3, [r6, #43]
	sdiv	r1, r2, ip
	strb	r3, [r6, #44]
	strb	r3, [r6, #45]
	strb	r3, [r6, #47]
	strb	r7, [r6, #37]
	strb	r7, [r6, #40]
	sdiv	r7, r2, r5
	add	r5, r6, #48
	strb	r0, [r6, #46]
	sdiv	r3, r1, lr
	mls	r2, ip, r1, r2
	strb	r7, [r6, #34]
	strb	r2, [r6, #36]
	mls	r1, lr, r3, r1
	strb	r1, [r6, #35]
.L11695:
	rsb	r5, r6, r5
	sub	r3, r5, #2
	uxth	r3, r3
	mov	r2, r3, lsr #8
	strb	r3, [r6, #1]
	strb	r2, [r6]
	b	.L11676
.L11694:
	ldr	r3, [r2, #16]
	strb	r1, [r6, #38]
	add	r5, r6, #48
	strb	r7, [r6, #37]
	strb	r9, [r6, #39]
	strb	r7, [r6, #40]
	mov	r2, r3, lsr #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r6, #36]
	strb	r9, [r6, #41]
	mov	r3, r2, lsr #8
	strb	r9, [r6, #42]
	strb	r9, [r6, #43]
	strb	r9, [r6, #44]
	strb	r9, [r6, #45]
	strb	r9, [r6, #46]
	strb	r9, [r6, #47]
	strb	r2, [r6, #34]
	strb	r3, [r6, #33]
	strb	r1, [r6, #35]
	b	.L11695
.L11949:
	ldr	r4, [sp, #40]
.L11743:
	mvn	r5, #4
	b	.L11676
.L11948:
	ldr	r4, [sp, #40]
.L11737:
	ldr	r3, [sp, #56]
	cmp	r3, #248
	bne	.L11743
	ldr	r6, [r9]
	mov	r9, #0
	mov	r2, #10
	mov	r1, #255
	mvn	r5, #4
	mov	r0, r6
	strb	r9, [r0], #1
	bl	memset(PLT)
	ldr	r3, [sp, #52]
	strb	r9, [r6, #11]
	mov	r2, #1
	mov	r9, #60
	movw	lr, #4500
	strb	r2, [r6, #15]
	add	r0, r6, #2064
	mov	r1, #288
	add	r7, r3, #150
	mov	r3, #75
	sdiv	ip, r7, r3
	sdiv	lr, r7, lr
	sdiv	r2, ip, r9
	mls	r3, r3, ip, r7
	strb	lr, [r6, #12]
	strb	r3, [r6, #14]
	mls	r2, r9, r2, ip
	strb	r2, [r6, #13]
	bl	__memzero(PLT)
	b	.L11676
.L12014:
	ldr	r4, [sp, #40]
.L11794:
	ldr	r2, [sp, #24]
	mov	r1, #4352
	ldr	r0, [sp, #28]
	movt	r1, 3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r1, [r6, #28]
	mov	r2, r2, lsr #9
	orr	r2, r2, r0, asl #23
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L11737
.L11741:
	ldr	r3, [fp, #136]
	mov	r2, #1
	rsb	r7, r0, r7
	ldrd	r4, [sp, #24]
	rsb	r3, r0, r3
	adds	r4, r4, r0
	str	r3, [fp, #136]
	ldr	r3, [r9, #16]
	adc	r5, r5, r0, asr #31
	strd	r4, [sp, #24]
	str	r0, [r3, #4]
	str	r2, [r9, #4]
	b	.L11742
.L11740:
	ldr	r1, [r9, #16]
	mov	r2, #1
	ldr	r4, [sp, #40]
	str	r3, [r1, #4]
	str	r2, [r9, #4]
	b	.L11794
.L11810:
	ldr	r4, [sp, #40]
	b	.L11964
.L12013:
	ldr	r1, [r9]
	add	r3, sp, #64
	mov	r2, r5
	ldr	r0, [r6]
	add	r1, r1, #16
	bl	vfs_read(PLT)
	b	.L11739
.L12012:
	ldr	r2, [sp, #24]
	mov	r1, #8448
	ldr	r0, [sp, #28]
	movt	r1, 5
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r1, [r6, #28]
	mov	r2, r2, lsr #9
	orr	r2, r2, r0, asl #23
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	ldr	r3, [r9, #16]
	mov	r2, #1
	str	r5, [r3, #4]
	str	r2, [r9, #4]
	b	.L11737
.L12001:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	mov	r5, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero(PLT)
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L11678
.L12004:
	ldr	r0, [r6]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L11685
	mov	r1, #1
	bl	vfs_fsync(PLT)
	b	.L11685
.L11700:
	mov	r3, #9216
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r6, #28]
	b	.L11678
.L11965:
	mov	r3, #335872
	mvn	r5, #21
	str	r3, [r6, #28]
	b	.L11678
.L11704:
	mov	r3, #14848
	mvn	r5, #21
	movt	r3, 2
	str	r3, [r6, #28]
	b	.L11678
.L12009:
	ldr	r1, .L12017
	mov	r0, fp
.LPIC2890:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11703
.L11967:
	mov	r3, #9216
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L11678
.L12005:
	mov	r1, r9, lsr #2
	mov	r2, #75
	strb	r5, [ip, #4]
	mov	r3, #60
	add	r1, r1, #150
	mov	r5, #8
	udiv	r0, r1, r2
	udiv	lr, r0, r3
	mls	r2, r2, r0, r1
	strb	r2, [ip, #7]
	mls	r3, r3, lr, r0
	strb	lr, [ip, #5]
	strb	r3, [ip, #6]
	b	.L11678
.L11711:
	ldr	r0, [sp, #48]
	bl	up_read(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11748
	b	.L11604
.L12011:
	ldr	r3, [sp, #52]
	mov	r7, #2352
	mov	r2, r3, lsr #21
	mov	r3, r3, asl #11
	str	r2, [sp, #28]
	str	r3, [sp, #24]
	b	.L11731
.L11725:
	ldr	r3, [r9, #40]
	mov	r2, #4352
	mov	r4, r5
	movt	r2, 3
	mov	r5, r6
.L11973:
	ldrd	r6, [sp, #32]
	str	r2, [r9, #28]
	subs	r1, r3, #32
	mov	r2, r6, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r7, asl r3
	movpl	r3, r7
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r9, #24]	@ zero_extendqisi2
	str	r2, [r9, #32]
	orr	r3, r3, #64
	strb	r3, [r9, #24]
	b	.L11676
.L12002:
	mov	r0, r8
	bl	strlen(PLT)
	ldr	r3, .L12017+4
	add	r2, r8, r0
.LPIC2872:
	add	r3, pc, r3
	ldr	r1, [r3]
	ldrh	r3, [r3, #4]
	str	r1, [r8, r0]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	ldr	r3, [sp, #8]
	strb	r5, [r3, #3652]
	b	.L11681
.L11997:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r7, #0
	mov	r5, #9472
	movt	r5, 5
	mov	r9, r7
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	b	.L11698
.L12007:
	mov	r2, #8448
	mov	r4, r5
	ldr	r3, [r9, #40]
	mov	r5, r6
	movt	r2, 5
	b	.L11973
.L12006:
	mov	r4, r5
	mov	r5, r6
	b	.L11676
.L12018:
	.align	2
.L12017:
	.word	.LC662-(.LPIC2890+8)
	.word	.LC647-(.LPIC2872+8)
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12032
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	str	r10, [sp, #24]
.LPIC2920:
	add	r3, pc, r3
	str	lr, [sp, #28]
	sub	r0, r3, #1472
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12032+4
	mov	r10, r0
.LPIC2921:
	add	r3, pc, r3
	ldr	r4, [r3]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r3
	beq	.L12020
	ldr	r7, .L12032+8
.LPIC2923:
	add	r7, pc, r7
	b	.L12022
.L12031:
	ldr	r4, [r4, #4]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r7
	beq	.L12020
.L12022:
	ldr	r1, [r4]
	mov	r0, r6
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12031
	ldr	r0, .L12032+12
	mov	r1, r10
.LPIC2930:
	add	r0, pc, r0
	sub	r0, r0, #1472
	bl	_raw_spin_unlock_irqrestore(PLT)
.L12025:
	ldr	r3, .L12032+16
	str	r6, [r4]
	str	r8, [r4, #16]
	str	r9, [r4, #12]
.LPIC2924:
	add	r3, pc, r3
	sub	r6, r3, #1472
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L12032+20
	mov	r7, r0
	mov	r0, r5
.LPIC2925:
	add	r2, pc, r2
	ldr	r1, [r2, #4]
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L12028:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12020:
	ldr	r0, .L12032+24
	mov	r1, r10
.LPIC2928:
	add	r0, pc, r0
	sub	r0, r0, #1472
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L12032+28
.LPIC2931:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r5, #20
	moveq	r4, #16
	beq	.L12025
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	mvneq	r0, #11
	beq	.L12028
	add	r5, r4, #4
	b	.L12025
.L12033:
	.align	2
.L12032:
	.word	.LANCHOR4-(.LPIC2920+8)
	.word	.LANCHOR0-(.LPIC2921+8)
	.word	.LANCHOR0-(.LPIC2923+8)
	.word	.LANCHOR4-(.LPIC2930+8)
	.word	.LANCHOR4-(.LPIC2924+8)
	.word	.LANCHOR0-(.LPIC2925+8)
	.word	.LANCHOR4-(.LPIC2928+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2931+8))
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L12041
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, #0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
.LPIC2932:
	add	r2, pc, r2
	sub	r0, r2, #1472
	mov	r4, r2
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	str	r7, [r6, #16]
	add	r0, r6, #4
	str	r7, [r6, #12]
	bl	list_del(PLT)
	ldr	r3, [r4, #-1448]
	sub	r2, r4, #1440
	sub	r2, r2, #8
	cmp	r3, r2
	sub	r3, r3, #140
	beq	.L12038
.L12037:
	ldr	ip, [r3, #124]
	cmp	ip, r6
	streq	r7, [r3, #124]
	ldr	r3, [r3, #140]
	cmp	r3, r2
	sub	r3, r3, #140
	bne	.L12037
.L12038:
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r0, .L12041+4
	mov	r1, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC2935:
	add	r0, pc, r0
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	sub	r0, r0, #1472
	b	_raw_spin_unlock_irqrestore(PLT)
.L12042:
	.align	2
.L12041:
	.word	.LANCHOR4-(.LPIC2932+8)
	.word	.LANCHOR4-(.LPIC2935+8)
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L12062
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r8, r1
	mov	r10, r2
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r5, #100]!
	str	r0, [sp, #4]
	cmp	r1, r5
	ldr	r7, [r1]
	bne	.L12048
	b	.L12049
.L12063:
	mov	r7, r3
.L12048:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r7
	ldr	r3, [r7]
	mov	r1, r7
	bne	.L12063
.L12049:
	mov	r7, r4
	ldr	r1, [r7, #92]!
	cmp	r1, r7
	ldr	r9, [r1]
	bne	.L12052
	b	.L12047
.L12065:
	mov	r9, r3
.L12052:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #84]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r9
	ldr	r3, [r9]
	mov	r1, r9
	bne	.L12065
.L12047:
	cmp	r8, #0
	ble	.L12051
	ldr	r9, .L12080
	mov	r6, #0
.LPIC2937:
	add	r9, pc, r9
	b	.L12050
.L12078:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add(PLT)
	cmp	r6, r8
	beq	.L12051
.L12050:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L12078
.L12055:
	ldr	r1, [r4, #100]
	cmp	r1, r5
	ldr	r8, [r1]
	bne	.L12059
	b	.L12060
.L12067:
	mov	r8, r3
.L12059:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r8
	ldr	r3, [r8]
	mov	r1, r8
	bne	.L12067
.L12060:
	ldr	r1, [r4, #92]
	cmp	r1, r7
	ldr	r6, [r1]
	bne	.L12061
	b	.L12058
.L12068:
	mov	r6, r3
.L12061:
	mov	r0, r1
	sub	r5, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #84]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	ldr	r3, [r6]
	mov	r1, r6
	bne	.L12068
.L12058:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
.L12044:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12051:
	cmp	r10, #0
	ble	.L12054
	ldr	r8, .L12080+4
	mov	r6, #0
.LPIC2938:
	add	r8, pc, r8
	b	.L12053
.L12079:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add(PLT)
	cmp	r6, r10
	beq	.L12054
.L12053:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12079
	b	.L12055
.L12054:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L12044
.L12062:
	mvn	r0, #18
	b	.L12044
.L12081:
	.align	2
.L12080:
	.word	diag_write_complete-(.LPIC2937+8)
	.word	diag_read_complete-(.LPIC2938+8)
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12086
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12092
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r5, r9
	beq	.L12093
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12094
.L12083:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12094:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	ldr	r5, .L12095
	bl	__list_add(PLT)
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12095+4
.LPIC2941:
	add	r5, pc, r5
	sub	r5, r5, #3904
	mov	r1, r5
.LPIC2942:
	add	r0, pc, r0
	add	r0, r0, #2368
	add	r0, r0, #4
	bl	___ratelimit(PLT)
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L12083
	ldr	r3, [r4, #116]
	mov	r2, r5
	ldr	r1, .L12095+8
	ldr	r0, [r3]
.LPIC2944:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #4
	b	.L12083
.L12086:
	mvn	r0, #18
	b	.L12083
.L12092:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12083
.L12093:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #116]
	ldr	r2, .L12095+12
	ldr	r1, .L12095+16
	ldr	r0, [r3]
.LPIC2939:
	add	r2, pc, r2
.LPIC2940:
	add	r1, pc, r1
	sub	r2, r2, #3904
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12083
.L12096:
	.align	2
.L12095:
	.word	.LANCHOR9-(.LPIC2941+8)
	.word	.LANCHOR2-(.LPIC2942+8)
	.word	.LC677-(.LPIC2944+8)
	.word	.LANCHOR9-(.LPIC2939+8)
	.word	.LC676-(.LPIC2940+8)
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12103
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12108
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r5, r9
	beq	.L12109
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12110
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L12098:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12103:
	mvn	r0, #18
	b	.L12098
.L12108:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12098
.L12110:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	ldr	r5, .L12111
	bl	__list_add(PLT)
	ldr	r0, .L12111+4
.LPIC2947:
	add	r5, pc, r5
	sub	r5, r5, #3888
.LPIC2948:
	add	r0, pc, r0
	mov	r1, r5
	add	r0, r0, #2384
	add	r0, r0, #12
	bl	___ratelimit(PLT)
	cmp	r0, #0
	beq	.L12102
	ldr	r3, [r4, #116]
	mov	r2, r5
	ldr	r1, .L12111+8
	ldr	r0, [r3]
.LPIC2950:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
.L12102:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12098
.L12109:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #116]
	ldr	r2, .L12111+12
	ldr	r1, .L12111+16
	ldr	r0, [r3]
.LPIC2945:
	add	r2, pc, r2
.LPIC2946:
	add	r1, pc, r1
	sub	r2, r2, #3888
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12098
.L12112:
	.align	2
.L12111:
	.word	.LANCHOR9-(.LPIC2947+8)
	.word	.LANCHOR2-(.LPIC2948+8)
	.word	.LC677-(.LPIC2950+8)
	.word	.LANCHOR9-(.LPIC2945+8)
	.word	.LC676-(.LPIC2946+8)
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12132
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2951:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r3]
	cmp	r3, fp
	sub	fp, fp, #4
	beq	.L12114
	ldr	r7, .L12132+4
	mov	r4, r1
	mov	r5, r2
.LPIC2953:
	add	r7, pc, r7
	b	.L12116
.L12129:
	ldr	fp, [fp, #4]
	cmp	r7, fp
	sub	fp, fp, #4
	beq	.L12114
.L12116:
	ldr	r1, [fp]
	mov	r0, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12129
	ldr	r3, .L12132+8
.LPIC2965:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12130
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12131
.L12118:
	ldr	r3, .L12132+12
	add	r7, r4, #140
	mov	r10, #0
	mov	r0, r7
	ldr	r9, .L12132+16
	ldr	r8, .L12132+20
.LPIC2954:
	add	r3, pc, r3
	sub	r2, r3, #1440
	ldr	r1, [r3, #-1444]
.LPIC2958:
	add	r9, pc, r9
	sub	r2, r2, #8
.LPIC2959:
	add	r8, pc, r8
	bl	__list_add(PLT)
	str	fp, [r4, #124]
	ldr	r3, .L12132+24
	add	ip, r4, #92
	str	r5, [r4, #120]
	ldr	lr, [r6, #24]
	add	r2, r4, #100
	ldr	r5, .L12132+28
	mov	r1, r4
	mov	r0, r6
.LPIC2956:
	add	r3, pc, r3
	str	lr, [r4, #116]
	ldr	lr, [fp]
.LPIC2960:
	add	r5, pc, r5
	add	fp, r3, #1152
	add	r3, r3, #1168
	str	r9, [r4, #32]
	str	r5, [r4, #40]
	str	fp, [r4, #16]
	str	lr, [r4]
	ldr	lr, .L12132+32
	str	r3, [r4, #8]
	str	r8, [r4, #36]
	str	r10, [r4, #108]
.LPIC2961:
	add	lr, pc, lr
	str	ip, [r4, #92]
	str	ip, [r4, #96]
	str	lr, [r4, #48]
	str	r2, [r4, #100]
	str	r2, [r4, #104]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	beq	.L12124
	ldr	r3, [r6, #24]
	ldr	r1, .L12132+36
	ldr	r0, [r3]
.LPIC2962:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	_dev_info(PLT)
	mov	r0, r7
	bl	list_del(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L12124
.L12114:
	ldr	r3, [r6, #24]
	ldr	r1, .L12132+40
	ldr	r0, [r3]
.LPIC2963:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #18
.L12124:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12130:
	mov	r4, #16
	b	.L12118
.L12131:
	mvn	r0, #11
	b	.L12124
.L12133:
	.align	2
.L12132:
	.word	.LANCHOR0-(.LPIC2951+8)
	.word	.LANCHOR0-(.LPIC2953+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2965+8))
	.word	.LANCHOR4-(.LPIC2954+8)
	.word	diag_function_bind-(.LPIC2958+8)
	.word	diag_function_unbind-(.LPIC2959+8)
	.word	.LANCHOR0-(.LPIC2956+8)
	.word	diag_function_set_alt-(.LPIC2960+8)
	.word	diag_function_disable-(.LPIC2961+8)
	.word	.LC678-(.LPIC2962+8)
	.word	.LC679-(.LPIC2963+8)
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L12158
	strd	r10, [sp, #24]
	ldr	r10, .L12158+4
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
.LPIC2969:
	add	r2, pc, r2
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
.LPIC2976:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	ldr	r3, [r2, #16]!
	ldr	r1, [r1, #24]
	ldr	r0, [r10]
	cmp	r3, r2
	sub	r5, r3, #520
	str	r0, [sp, #52]
	bne	.L12138
	b	.L12135
.L12155:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L12135
.L12138:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L12155
.L12135:
	ldr	r3, .L12158+8
	add	fp, sp, #20
	mov	r2, #32
	ldr	r1, .L12158+12
	mov	r0, fp
	mov	r4, #0
	ldr	r6, .L12158+16
	mvn	r7, #0
	ldr	r9, .L12158+20
.LPIC2968:
	add	r3, pc, r3
.LPIC2972:
	add	r1, pc, r1
	str	r3, [sp, #4]
	ldr	r3, .L12158+24
	sub	r1, r1, #1360
	sub	r1, r1, #12
.LPIC2973:
	add	r6, pc, r6
.LPIC2967:
	add	r9, pc, r9
.LPIC2975:
	add	r3, pc, r3
	str	r3, [sp, #12]
	bl	strlcpy(PLT)
	mov	r0, fp
	bl	strim(PLT)
	ldr	r3, .L12158+28
	str	r0, [sp, #16]
.LPIC2974:
	add	r3, pc, r3
	sub	r3, r3, #3872
	str	r3, [sp, #8]
	b	.L12139
.L12142:
	mov	r1, r6
	add	r0, sp, #16
	bl	strsep(PLT)
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L12140
	ldr	r2, [r5, #44]
	cmp	r2, #0
	beq	.L12145
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r9
.L12140:
	cmp	fp, #0
	beq	.L12141
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add(PLT)
	subs	r7, r0, #0
	bne	.L12156
.L12141:
	ldr	r0, [sp, #16]
	add	r4, r4, #1
.L12139:
	cmp	r0, #0
	bne	.L12142
	ldr	r2, [sp, #52]
	mov	r0, r7
	ldr	r3, [r10]
	cmp	r2, r3
	bne	.L12157
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12145:
	ldr	r2, [sp, #4]
	b	.L12140
.L12156:
	mov	r2, fp
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	b	.L12141
.L12157:
	bl	__stack_chk_fail(PLT)
.L12159:
	.align	2
.L12158:
	.word	.LANCHOR1-(.LPIC2969+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC2976+8))
	.word	usb_diag_update_pid_and_serial_num-(.LPIC2968+8)
	.word	.LANCHOR4-(.LPIC2972+8)
	.word	.LC299-(.LPIC2973+8)
	.word	usb_diag_update_pid_and_serial_num-(.LPIC2967+8)
	.word	.LC680-(.LPIC2975+8)
	.word	.LANCHOR9-(.LPIC2974+8)
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #84]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12169
	ldr	r0, .L12172
	ldr	r1, [r7, #28]
.LPIC2978:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12170
	ldr	r3, .L12172+4
	mov	r2, #0
.LPIC2980:
	add	r3, pc, r3
	ldr	r3, [r3, #3672]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
.L12164:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12171
.L12162:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12170:
	ldr	r3, .L12172+8
	mov	r2, #32768
.LPIC2979:
	add	r3, pc, r3
	ldr	r3, [r3, #3672]
	orr	r3, r3, #1312
	b	.L12164
.L12171:
	ldr	r0, .L12172+12
.LPIC2981:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12162
.L12169:
	ldr	r0, .L12172+16
.LPIC2977:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	b	.L12162
.L12173:
	.align	2
.L12172:
	.word	.LC370-(.LPIC2978+8)
	.word	.LANCHOR4-(.LPIC2980+8)
	.word	.LANCHOR4-(.LPIC2979+8)
	.word	.LC682-(.LPIC2981+8)
	.word	.LC681-(.LPIC2977+8)
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.global	init_data
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L12182
	str	lr, [sp, #4]
	ldr	r3, [r4]
.LPIC2982:
	add	r0, pc, r0
	ldr	r3, [r3, #84]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12181
.L12175:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12181:
	mov	r0, r4
	bl	msm_ep_config(PLT)
	subs	r4, r0, #0
	beq	.L12175
	ldr	r0, .L12182+4
.LPIC2983:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12175
.L12183:
	.align	2
.L12182:
	.word	.LC370-(.LPIC2982+8)
	.word	.LC683-(.LPIC2983+8)
	.fnend
	.size	init_data, .-init_data
	.align	2
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #-48]
	bl	init_data(PLT)
	subs	r3, r0, #0
	bne	.L12198
	ldr	r0, [r4, #-72]
	mov	r2, #1
	ldr	r5, .L12202
	mov	r1, r2
	ldr	r8, [r4, #-48]
	ldr	r6, [r0]
.LPIC2985:
	add	r5, pc, r5
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r9, r0
	add	r1, r5, #3664
	add	r1, r1, #8
	mov	r0, r9
	bl	usb_bam_connect(PLT)
	ldr	r3, .L12202+4
	mov	r7, r0
.LPIC2999:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12186
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5, #3684]
	beq	.L12199
.L12187:
	ldr	r5, .L12202+8
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core(PLT)
	mov	r3, #0
	mov	r0, r9
.LPIC2989:
	add	r5, pc, r5
	ldr	ip, [r5, #3684]
	add	r2, r5, #3664
	add	r1, r5, #3680
	add	r2, r2, #8
	str	r3, [sp]
	add	r3, r2, #4
	str	ip, [sp, #4]
	bl	get_bam2bam_connection_info(PLT)
	ldr	r0, .L12202+12
	ldr	r1, [r6, #28]
.LPIC2993:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12200
.L12189:
	cmp	r7, #0
	bne	.L12188
	ldr	ip, [r4, #-32]
	cmp	ip, #0
	beq	.L12191
	sub	r3, r4, #44
	mov	r2, r7
	ldr	r0, [r4, #-28]
	mov	r1, r7
	blx	ip
.L12191:
	ldr	r0, [r4, #-48]
	bl	send_sps_req(PLT)
	cmp	r0, #0
	bne	.L12201
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12186:
	mov	r3, #16
	str	r3, [r5, #3684]
	b	.L12187
.L12200:
	ldr	r1, [r5, #3684]
	mov	r0, r8
	ldrb	r3, [r5, #3672]	@ zero_extendqisi2
	ldmib	r1, {r1, r2}
	bl	msm_data_fifo_config(PLT)
	b	.L12189
.L12198:
	ldr	r0, .L12202+16
.LPIC2984:
	add	r0, pc, r0
.L12197:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L12199:
	ldr	r0, .L12202+20
.LPIC2988:
	add	r0, pc, r0
	bl	printk(PLT)
.L12188:
	ldr	r0, .L12202+24
.LPIC2996:
	add	r0, pc, r0
	b	.L12197
.L12201:
	ldr	r0, .L12202+28
.LPIC2997:
	add	r0, pc, r0
	b	.L12197
.L12203:
	.align	2
.L12202:
	.word	.LANCHOR4-(.LPIC2985+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2999+8))
	.word	.LANCHOR4-(.LPIC2989+8)
	.word	.LC370-(.LPIC2993+8)
	.word	.LC684-(.LPIC2984+8)
	.word	.LC685-(.LPIC2988+8)
	.word	.LC686-(.LPIC2996+8)
	.word	.LC687-(.LPIC2997+8)
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	uninit_data
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L12212
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r4]
.LPIC3000:
	add	r0, pc, r0
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk(PLT)
	ldr	r0, .L12212+4
	ldr	r1, [r5, #28]
.LPIC3001:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12211
.L12205:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12211:
	mov	r0, r4
	bl	msm_ep_unconfig(PLT)
	subs	r4, r0, #0
	beq	.L12205
	ldr	r0, .L12212+8
.LPIC3002:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12205
.L12213:
	.align	2
.L12212:
	.word	.LC688-(.LPIC3000+8)
	.word	.LC370-(.LPIC3001+8)
	.word	.LC689-(.LPIC3002+8)
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-64]
	bl	uninit_data(PLT)
	cmp	r0, #0
	bne	.L12226
.L12215:
	ldr	ip, [r4, #-48]
	cmp	ip, #0
	beq	.L12214
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	ip
	ldr	r0, [r4, #-88]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx(PLT)
	ldr	r3, .L12228
	mov	r4, r0
.LPIC3005:
	add	r3, pc, r3
	ldr	r0, [r3, #3684]
	bl	kfree(PLT)
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe(PLT)
	cmp	r0, #0
	bne	.L12227
.L12214:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12226:
	ldr	r1, .L12228+4
	ldr	r0, .L12228+8
.LPIC3003:
	add	r1, pc, r1
	sub	r1, r1, #3840
.LPIC3004:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12215
.L12227:
	ldr	r0, .L12228+12
.LPIC3006:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L12228+16
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3007:
	add	r0, pc, r0
	b	printk(PLT)
.L12229:
	.align	2
.L12228:
	.word	.LANCHOR4-(.LPIC3005+8)
	.word	.LANCHOR9-(.LPIC3003+8)
	.word	.LC690-(.LPIC3004+8)
	.word	.LC691-(.LPIC3006+8)
	.word	.LC692-(.LPIC3007+8)
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.global	usb_qdss_free_req
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #20]
	cmp	r6, #0
	beq	.L12242
	mov	r7, r6
	ldr	r1, [r7, #148]!
	cmp	r1, r7
	ldr	r5, [r1]
	bne	.L12235
	b	.L12236
.L12239:
	mov	r5, r3
.L12235:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L12239
.L12236:
	mov	r7, r6
	ldr	r1, [r7, #140]!
	cmp	r1, r7
	ldr	r5, [r1]
	bne	.L12238
	b	.L12230
.L12240:
	mov	r5, r3
.L12238:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #100]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L12240
.L12230:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12242:
	ldr	r0, .L12243
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC3008:
	add	r0, pc, r0
	add	sp, sp, #24
	b	printk(PLT)
.L12244:
	.align	2
.L12243:
	.word	.LC693-(.LPIC3008+8)
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	cmpne	r2, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r1, #0
	orrle	r5, r5, #1
	cmp	r5, #0
	bne	.L12256
	ldr	r10, .L12259
	add	r8, r4, #148
.LPIC3011:
	add	r10, pc, r10
.L12246:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L12257
	str	r10, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add(PLT)
	cmp	r6, r5
	bgt	.L12246
	ldr	r8, .L12259+4
	mov	r5, #0
	add	r6, r4, #140
.LPIC3013:
	add	r8, pc, r8
.L12251:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r6
	add	r0, r3, #36
	beq	.L12258
	str	r8, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	cmp	r7, r5
	bgt	.L12251
	mov	r0, #0
.L12247:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12257:
	ldr	r0, .L12259+8
.LPIC3010:
	add	r0, pc, r0
	bl	printk(PLT)
.L12249:
	mov	r0, r9
	bl	usb_qdss_free_req(PLT)
	mvn	r0, #11
	b	.L12247
.L12258:
	ldr	r0, .L12259+12
.LPIC3012:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12249
.L12256:
	ldr	r0, .L12259+16
.LPIC3009:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12247
.L12260:
	.align	2
.L12259:
	.word	qdss_ctrl_write_complete-(.LPIC3011+8)
	.word	qdss_ctrl_read_complete-(.LPIC3013+8)
	.word	.LC695-(.LPIC3010+8)
	.word	.LC696-(.LPIC3012+8)
	.word	.LC694-(.LPIC3009+8)
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12265
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12270
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r5, r9
	beq	.L12271
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12272
.L12262:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12265:
	mvn	r0, #18
	b	.L12262
.L12270:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12262
.L12272:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12273
.LPIC3015:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12262
.L12271:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12273+4
.LPIC3014:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #10
	b	.L12262
.L12274:
	.align	2
.L12273:
	.word	.LC698-(.LPIC3015+8)
	.word	.LC697-(.LPIC3014+8)
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12279
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12284
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r5, r9
	beq	.L12285
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12286
.L12276:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12279:
	mvn	r0, #18
	b	.L12276
.L12284:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12276
.L12286:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12287
.LPIC3017:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12276
.L12285:
	ldr	r0, .L12287+4
.LPIC3016:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #10
	b	.L12276
.L12288:
	.align	2
.L12287:
	.word	.LC698-(.LPIC3017+8)
	.word	.LC699-(.LPIC3016+8)
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	beq	.L12306
	mov	r6, r0
	ldr	r0, .L12312
	mov	r9, r1
.LPIC3019:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12312+4
	mov	r7, r0
.LPIC3020:
	add	r3, pc, r3
	ldr	r4, [r3, #8]!
	cmp	r4, r3
	sub	r4, r4, #4
	beq	.L12292
	ldr	r5, .L12312+8
.LPIC3022:
	add	r5, pc, r5
	add	r5, r5, #8
	b	.L12294
.L12307:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L12292
.L12294:
	ldr	r1, [r4]
	mov	r0, r6
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12307
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L12298:
	ldr	r0, .L12312+12
	mov	r3, #1
	str	r6, [r4]
	str	r9, [r4, #16]
	mov	r1, r7
	str	r3, [r4, #24]
	str	r8, [r4, #12]
.LPIC3029:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #12
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #92]
	cmp	r3, #1
	movne	r0, r4
	beq	.L12308
.L12302:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12292:
	ldr	r3, .L12312+16
.LPIC3031:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L12309
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L12310
.L12295:
	ldr	r4, .L12312+20
	mov	r1, r7
.LPIC3024:
	add	r4, pc, r4
	sub	r4, r4, #1472
	sub	r4, r4, #12
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12312+24
	mov	r2, #0
	mov	r1, #10
	mov	r3, r2
	str	r6, [sp, #4]
	movt	r1, 2
	str	r2, [sp]
	mov	r2, #1
.LPIC3025:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L12311
	mov	r0, r4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12312+28
	mov	r7, r0
	add	r0, r5, #116
.LPIC3027:
	add	r3, pc, r3
	add	r2, r3, #8
	ldr	r1, [r3, #12]
	bl	__list_add(PLT)
	b	.L12298
.L12309:
	mov	r5, #16
	b	.L12295
.L12308:
	add	r2, r5, #156
	ldr	r1, [r5, #196]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, r4
	b	.L12302
.L12310:
	ldr	r0, .L12312+32
	mov	r1, r7
.LPIC3023:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #12
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L12302
.L12311:
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L12302
.L12306:
	ldr	r0, .L12312+36
.LPIC3018:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L12302
.L12313:
	.align	2
.L12312:
	.word	.LANCHOR4-(.LPIC3019+8)
	.word	.LANCHOR0-(.LPIC3020+8)
	.word	.LANCHOR0-(.LPIC3022+8)
	.word	.LANCHOR4-(.LPIC3029+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3031+8))
	.word	.LANCHOR4-(.LPIC3024+8)
	.word	.LC208-(.LPIC3025+8)
	.word	.LANCHOR0-(.LPIC3027+8)
	.word	.LANCHOR4-(.LPIC3023+8)
	.word	.LC700-(.LPIC3018+8)
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L12318
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	ldr	r5, [r0, #20]
.LPIC3032:
	add	r4, pc, r4
	sub	r4, r4, #1472
	sub	r4, r4, #12
	ldr	r3, [r5, #84]
	mov	r0, r4
	ldr	r7, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, [r5, #108]
	ldr	r1, [r5, #96]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #20]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r1, [r5, #96]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #12]
	blx	r3
	mov	r3, #0
	mov	r0, r4
	mov	r1, r8
	str	r3, [r5, #96]
	str	r3, [r6, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12318+4
	ldr	r1, [r7, #28]
.LPIC3034:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12317
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12317:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session(PLT)
.L12319:
	.align	2
.L12318:
	.word	.LANCHOR4-(.LPIC3032+8)
	.word	.LC370-(.LPIC3034+8)
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12338
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3064:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12328
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12336
.L12321:
	ldr	lr, .L12338+4
	mov	r5, #0
	mov	r1, #10
	ldr	ip, .L12338+8
	mov	r3, r5
	movt	r1, 2
	ldr	r0, .L12338+12
	str	r5, [sp]
	mov	r2, #1
.LPIC3038:
	add	lr, pc, lr
.LPIC3036:
	add	ip, pc, ip
	str	lr, [sp, #4]
.LPIC3037:
	add	r0, pc, r0
	str	r4, [ip, #2588]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L12330
	ldr	ip, .L12338+16
	mov	lr, #65024
	add	r7, r4, #396
	ldr	r3, .L12338+20
	movt	lr, 65535
	add	r6, r4, #412
	ldr	r1, .L12338+24
	str	r5, [r4, #164]
	mov	r2, r4
	str	lr, [r4, #392]
	add	r0, r4, #284
	add	fp, r4, #108
.LPIC3039:
	add	ip, pc, ip
	str	lr, [r4, #408]
	add	r10, r4, #124
.LPIC3040:
	add	r3, pc, r3
	str	r5, [r4, #172]
	add	r9, r4, #116
	str	ip, [r4, #404]
.LPIC3041:
	add	r1, pc, r1
	str	r3, [r4, #420]
	str	r5, [r4, #168]
	str	r5, [r4, #308]
	str	r5, [r4, #372]
	str	r7, [r4, #396]
	str	r7, [r4, #400]
	add	r7, r4, #132
	str	r6, [r4, #412]
	str	r6, [r4, #416]
	ldr	r6, .L12338+28
	bl	tasklet_init(PLT)
	ldr	r1, .L12338+32
	mov	r2, r4
	add	r0, r4, #264
.LPIC3045:
	add	r6, pc, r6
	add	r6, r6, #3680
.LPIC3042:
	add	r1, pc, r1
	add	r6, r6, #8
	bl	tasklet_init(PLT)
	ldr	r1, .L12338+36
	mov	r2, r4
	add	r0, r4, #348
.LPIC3043:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12338+40
	mov	r2, r4
	add	r0, r4, #328
.LPIC3044:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12338+44
	mov	r2, r6
	add	r0, r4, #312
.LPIC3046:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L12338+48
	mov	r2, r6
	add	r0, r4, #376
	add	r6, r4, #148
.LPIC3048:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, .L12338+52
	str	r5, [r4, #204]
	mov	r0, r8
	ldr	r3, .L12338+56
	add	lr, r4, #156
	add	ip, r4, #140
	ldr	r1, .L12338+60
	str	fp, [r4, #108]
	ldr	r8, .L12338+64
	str	fp, [r4, #112]
.LPIC3052:
	add	r2, pc, r2
	str	r10, [r4, #124]
.LPIC3049:
	add	r3, pc, r3
	mov	r5, r2
	str	r10, [r4, #128]
	add	r2, r2, #2528
.LPIC3050:
	add	r1, pc, r1
	str	r9, [r4, #116]
	str	r3, [r4, #176]
	add	r3, r5, #2560
	add	r2, r2, #12
	add	r3, r3, #8
	str	r1, [r4, #196]
	add	r1, r5, #2544
	str	r2, [r4, #4]
	ldr	r2, .L12338+68
	add	r1, r1, #4
	str	r3, [r4, #8]
	ldr	r3, .L12338+72
.LPIC3057:
	add	r8, pc, r8
	ldr	r5, .L12338+76
	str	r1, [r4, #16]
	mov	r1, r4
	str	r8, [r4, #52]
.LPIC3051:
	add	r2, pc, r2
	str	r9, [r4, #120]
.LPIC3055:
	add	r3, pc, r3
	str	r7, [r4, #132]
	str	r2, [r4]
	ldr	r2, .L12338+80
.LPIC3058:
	add	r5, pc, r5
	str	r3, [r4, #32]
	ldr	r3, .L12338+84
	str	r5, [r4, #40]
	str	r7, [r4, #136]
.LPIC3059:
	add	r2, pc, r2
	str	r6, [r4, #148]
.LPIC3056:
	add	r3, pc, r3
	str	r6, [r4, #152]
	str	r2, [r4, #48]
	str	r3, [r4, #36]
	str	lr, [r4, #156]
	str	lr, [r4, #160]
	str	ip, [r4, #140]
	str	ip, [r4, #144]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12337
.L12324:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue(PLT)
.L12323:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12322:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12337:
	ldr	r0, .L12338+88
	mov	r1, r5
	ldr	r6, .L12338+92
.LPIC3060:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC3062:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12326
	cmn	r0, #4096
	bhi	.L12326
	ldr	ip, .L12338+96
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12338+100
	mov	r1, #292
.LPIC3063:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC3061:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L12327
	cmn	r0, #4096
	bhi	.L12327
.L12326:
	mov	r0, #0
	b	.L12322
.L12328:
	mov	r4, #16
	b	.L12321
.L12330:
	mvn	r5, #11
	b	.L12323
.L12327:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6]
	b	.L12322
.L12336:
	mvn	r0, #11
	b	.L12322
.L12339:
	.align	2
.L12338:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3064+8))
	.word	.LC701-(.LPIC3038+8)
	.word	.LANCHOR1-(.LPIC3036+8)
	.word	.LC208-(.LPIC3037+8)
	.word	rmnet_smd_connect_work-(.LPIC3039+8)
	.word	rmnet_smd_disconnect_work-(.LPIC3040+8)
	.word	rmnet_control_rx_tlet-(.LPIC3041+8)
	.word	.LANCHOR4-(.LPIC3045+8)
	.word	rmnet_control_tx_tlet-(.LPIC3042+8)
	.word	rmnet_data_rx_tlet-(.LPIC3043+8)
	.word	rmnet_data_tx_tlet-(.LPIC3044+8)
	.word	.LC702-(.LPIC3046+8)
	.word	.LC703-(.LPIC3048+8)
	.word	.LANCHOR0-(.LPIC3052+8)
	.word	rmnet_smd_ch_probe-(.LPIC3049+8)
	.word	.LC355-(.LPIC3050+8)
	.word	rmnet_smd_setup-(.LPIC3057+8)
	.word	.LC704-(.LPIC3051+8)
	.word	rmnet_smd_bind-(.LPIC3055+8)
	.word	rmnet_smd_set_alt-(.LPIC3058+8)
	.word	rmnet_smd_disable-(.LPIC3059+8)
	.word	rmnet_smd_unbind-(.LPIC3056+8)
	.word	.LC705-(.LPIC3060+8)
	.word	dent_smd(GOT_PREL)+(.-(.LPIC3062+8))
	.word	rmnet_smd_debug_stats_ops(GOT_PREL)+(.-(.LPIC3063+8))
	.word	.LC139-(.LPIC3061+8)
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config(PLT)
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12354
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3088:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12346
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12352
.L12342:
	ldr	ip, .L12354+4
	mov	r5, #0
	mov	r1, #10
	ldr	r0, .L12354+8
	mov	r3, r5
	movt	r1, 2
	str	r5, [sp]
	mov	r2, #1
.LPIC3067:
	add	ip, pc, ip
.LPIC3066:
	add	r0, pc, r0
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L12348
	ldr	r3, .L12354+12
	mov	r6, #65024
	add	lr, r4, #256
	ldr	r2, .L12354+16
	movt	r6, 65535
	add	fp, r4, #208
	ldr	r1, .L12354+20
	add	r10, r4, #340
	add	r9, r4, #224
	ldr	r0, .L12354+24
	add	r7, r4, #240
	str	r5, [r4, #188]
	ldr	ip, .L12354+28
.LPIC3068:
	add	r3, pc, r3
	str	r5, [r4, #196]
.LPIC3069:
	add	r2, pc, r2
	str	r5, [r4, #192]
.LPIC3070:
	add	r1, pc, r1
	str	r6, [r4, #204]
.LPIC3071:
	add	r0, pc, r0
	str	r6, [r4, #336]
.LPIC3072:
	add	ip, pc, ip
	str	r6, [r4, #220]
	str	r6, [r4, #236]
	str	r6, [r4, #252]
	str	r3, [r4, #216]
	mov	r3, r5
	str	r2, [r4, #348]
	mov	r2, r5
	str	r1, [r4, #232]
	mov	r1, r5
	str	r0, [r4, #248]
	add	r0, r4, #268
	str	ip, [r4, #264]
	str	fp, [r4, #208]
	str	fp, [r4, #212]
	ldr	fp, .L12354+32
	str	r10, [r4, #340]
	str	r10, [r4, #344]
	add	r10, r4, #308
	str	r9, [r4, #224]
	str	r9, [r4, #228]
.LPIC3074:
	add	fp, pc, fp
	add	r9, r4, #108
	str	r7, [r4, #240]
	str	r7, [r4, #244]
	add	r7, r4, #120
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	bl	init_timer_key(PLT)
	ldr	r1, .L12354+36
	add	r3, r4, #252
	mov	r0, r8
	ldr	r2, .L12354+40
	str	r5, [r4, #156]
	add	lr, r4, #160
	str	r3, [r4, #288]
	ldr	r3, .L12354+44
	add	ip, r4, #132
	str	r5, [r4, #152]
.LPIC3087:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r5, [r4, #184]
.LPIC3073:
	add	r2, pc, r2
	str	r5, [r4, #180]
	ldr	r5, .L12354+48
.LPIC3075:
	add	r3, pc, r3
	str	r6, [r4, #304]
	add	r6, r4, #144
	add	r8, r3, #2576
	str	r2, [r4, #316]
	ldr	r2, .L12354+52
	str	r1, [r4, #284]
	ldr	r1, .L12354+56
	add	r8, r8, #12
.LPIC3080:
	add	r5, pc, r5
	str	fp, [r4]
	add	fp, r4, #172
	str	r8, [r4, #4]
	add	r8, r3, #2592
	add	r3, r3, #2608
	add	r8, r8, #4
	add	r3, r3, #8
	str	r5, [r4, #52]
.LPIC3078:
	add	r1, pc, r1
.LPIC3081:
	add	r2, pc, r2
	str	r10, [r4, #308]
	str	r8, [r4, #16]
	ldr	r8, .L12354+60
	str	r3, [r4, #8]
	ldr	r3, .L12354+64
	str	r1, [r4, #32]
	ldr	r1, .L12354+68
	str	r2, [r4, #40]
.LPIC3082:
	add	r8, pc, r8
	str	r10, [r4, #312]
.LPIC3083:
	add	r3, pc, r3
	str	r9, [r4, #108]
.LPIC3079:
	add	r1, pc, r1
	str	r8, [r4, #48]
	str	r3, [r4, #56]
	str	r1, [r4, #36]
	mov	r1, r4
	str	r9, [r4, #112]
	str	r7, [r4, #120]
	str	r7, [r4, #124]
	str	lr, [r4, #160]
	str	lr, [r4, #164]
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	str	r6, [r4, #144]
	str	r6, [r4, #148]
	str	fp, [r4, #172]
	str	fp, [r4, #176]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12353
.L12345:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue(PLT)
.L12344:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12343:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12353:
	ldr	r0, .L12354+72
	mov	r1, r5
.LPIC3084:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	str	r0, [r4, #352]
	bhi	.L12349
	ldr	ip, .L12354+76
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12354+80
	mov	r1, #292
.LPIC3086:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC3085:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r5
	b	.L12343
.L12346:
	mov	r4, #16
	b	.L12342
.L12348:
	mvn	r5, #11
	b	.L12344
.L12349:
	mov	r0, r5
	b	.L12343
.L12352:
	mvn	r0, #11
	b	.L12343
.L12355:
	.align	2
.L12354:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3088+8))
	.word	.LC701-(.LPIC3067+8)
	.word	.LC208-(.LPIC3066+8)
	.word	rmnet_sdio_disconnect_work-(.LPIC3068+8)
	.word	rmnet_sdio_set_modem_cbits_w-(.LPIC3069+8)
	.word	rmnet_sdio_control_rx_work-(.LPIC3070+8)
	.word	rmnet_sdio_data_rx_work-(.LPIC3071+8)
	.word	rmnet_open_sdio_work-(.LPIC3072+8)
	.word	.LC706-(.LPIC3074+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3087+8))
	.word	rmnet_close_sdio_work-(.LPIC3073+8)
	.word	.LANCHOR0-(.LPIC3075+8)
	.word	rmnet_sdio_setup-(.LPIC3080+8)
	.word	rmnet_sdio_set_alt-(.LPIC3081+8)
	.word	rmnet_sdio_bind-(.LPIC3078+8)
	.word	rmnet_sdio_disable-(.LPIC3082+8)
	.word	rmnet_sdio_suspend-(.LPIC3083+8)
	.word	rmnet_sdio_unbind-(.LPIC3079+8)
	.word	.LC707-(.LPIC3084+8)
	.word	debug_rmnet_sdio_stats_ops(GOT_PREL)+(.-(.LPIC3086+8))
	.word	.LC139-(.LPIC3085+8)
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add(PLT)
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12363
.L12360:
	cmp	r3, #2
	bls	.L12361
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L12361:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldrd	r0, [r4, #136]
	bl	frmnet_free_req(PLT)
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree(PLT)
.L12363:
	ldr	r0, [r1, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12360
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r4, #112]
	blt	.L12405
	ldr	r6, .L12411
.LPIC3093:
	add	r6, pc, r6
	add	r1, r6, #2432
	strb	r0, [r6, #2422]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12406
	add	r1, r6, #2432
	str	r0, [r4, #84]
	add	r1, r1, #12
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12407
	add	r1, r6, #2448
	str	r0, [r4, #88]
	add	r1, r1, #8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	subs	r7, r0, #0
	beq	.L12408
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r5, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12372
	ldr	r3, .L12411+4
.LPIC3124:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12373
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12409
.L12374:
	mov	r3, #8
	cmn	r6, #4096
	str	r3, [r6, #4]
	str	r6, [r4, #140]
	bhi	.L12387
	ldr	r3, .L12411+8
	ldr	r7, .L12411+12
.LPIC3106:
	add	r3, pc, r3
.LPIC3107:
	add	r7, pc, r7
	str	r3, [r6, #28]
	ldr	r3, [r4, #140]
	add	r0, r7, #2624
	add	r0, r0, #12
	str	r4, [r3, #32]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12377
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12410
.L12378:
	ldr	r3, [r5]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12390
	ldr	r3, .L12411+16
.LPIC3090:
	add	r3, pc, r3
.L12381:
	ldr	lr, [r4, #88]
	ldr	ip, [r4, #84]
	ldr	r1, .L12411+20
	ldr	r0, .L12411+24
	ldr	lr, [lr, #4]
.LPIC3122:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3123:
	add	r0, pc, r0
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	sub	r1, r1, #8
	str	ip, [sp]
	bl	printk(PLT)
	mov	r0, #0
	b	.L12403
.L12373:
	mov	r3, #16
	str	r3, [r6]
	b	.L12374
.L12410:
	ldr	r6, .L12411+28
	add	r0, r7, #2656
.LPIC3108:
	add	r6, pc, r6
	ldrb	r1, [r6, #2434]	@ zero_extendqisi2
	ldrb	r2, [r6, #2446]	@ zero_extendqisi2
	ldrb	r3, [r6, #2458]	@ zero_extendqisi2
	strb	r1, [r6, #2470]
	strb	r2, [r6, #2482]
	strb	r3, [r6, #2494]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12379
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12378
	ldrb	r1, [r6, #2434]	@ zero_extendqisi2
	add	r0, r7, #2672
	ldrb	r2, [r6, #2446]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r3, [r6, #2458]	@ zero_extendqisi2
	strb	r1, [r6, #2506]
	strb	r2, [r6, #2518]
	strb	r3, [r6, #2530]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12378
.L12382:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12385
	bl	kfree(PLT)
.L12385:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12386
	bl	kfree(PLT)
.L12386:
	ldr	r1, [r4, #140]
	cmp	r1, #0
	beq	.L12376
	ldr	r0, [r4, #136]
	bl	frmnet_free_req(PLT)
.L12376:
	ldr	r2, [r4, #136]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #136]
.L12371:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L12369:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
.L12403:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L12409:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12372:
	mvn	r3, #11
	str	r3, [r4, #140]
.L12387:
	ldr	r1, .L12411+32
	ldr	r0, .L12411+36
.LPIC3104:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3105:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L12376
.L12377:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12382
.L12388:
	bl	kfree(PLT)
	b	.L12382
.L12390:
	ldr	r3, .L12411+40
.LPIC3089:
	add	r3, pc, r3
	b	.L12381
.L12379:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12388
	b	.L12385
.L12408:
	ldr	r1, .L12411+44
	ldr	r0, .L12411+48
.LPIC3101:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3102:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12371
.L12407:
	ldr	r1, .L12411+52
	ldr	r0, .L12411+56
.LPIC3098:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3099:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12369
.L12406:
	ldr	r1, .L12411+60
	ldr	r0, .L12411+64
.LPIC3095:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3096:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12403
.L12405:
	ldr	r1, .L12411+68
	mov	r2, r0
	ldr	r0, .L12411+72
.LPIC3091:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3092:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #112]
	b	.L12403
.L12412:
	.align	2
.L12411:
	.word	.LANCHOR2-(.LPIC3093+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3124+8))
	.word	frmnet_notify_complete-(.LPIC3106+8)
	.word	.LANCHOR0-(.LPIC3107+8)
	.word	.LC555-(.LPIC3090+8)
	.word	.LANCHOR9-(.LPIC3122+8)
	.word	.LC708-(.LPIC3123+8)
	.word	.LANCHOR2-(.LPIC3108+8)
	.word	.LANCHOR9-(.LPIC3104+8)
	.word	.LC536-(.LPIC3105+8)
	.word	.LC554-(.LPIC3089+8)
	.word	.LANCHOR9-(.LPIC3101+8)
	.word	.LC576-(.LPIC3102+8)
	.word	.LANCHOR9-(.LPIC3098+8)
	.word	.LC558-(.LPIC3099+8)
	.word	.LANCHOR9-(.LPIC3095+8)
	.word	.LC556-(.LPIC3096+8)
	.word	.LANCHOR9-(.LPIC3091+8)
	.word	.LC575-(.LPIC3092+8)
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.global	audio_source_bind_config
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	ip, r0, #0
	movne	r0, ip
	beq	.L12420
.L12414:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12420:
	ldr	r0, [r6, #24]
	mov	r2, ip
	mov	r3, #1
	ldr	r4, [sp, #8]
	ldr	r1, .L12422
	ldr	lr, [r0]
	mov	r0, r4
.LPIC3125:
	add	r1, pc, r1
	add	lr, lr, #32
	str	lr, [r4, #496]
	str	ip, [sp]
	add	ip, sp, #12
	str	ip, [sp, #4]
	bl	snd_pcm_new(PLT)
	subs	r4, r0, #0
	bne	.L12417
	ldr	r8, .L12422+4
	mov	r2, #80
	ldr	r3, [sp, #12]
	ldr	r1, .L12422+8
.LPIC3126:
	add	r8, pc, r8
	add	r7, r8, #2704
	str	r4, [r3, #16]
	add	r0, r3, #88
	add	r7, r7, #8
.LPIC3128:
	add	r1, pc, r1
	str	r3, [r8, #2800]
	str	r7, [r3, #272]
	bl	strlcpy(PLT)
	ldr	r2, .L12422+12
	mov	r1, r4
	ldr	r0, [sp, #12]
.LPIC3129:
	add	r2, pc, r2
	add	r2, r2, #180
	bl	snd_pcm_set_ops(PLT)
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #16
	ldr	r1, .L12422+16
	add	r0, r0, #20
.LPIC3130:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #80
	ldr	r1, .L12422+20
	add	r0, r0, #68
.LPIC3131:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	bl	snd_card_register(PLT)
	subs	r4, r0, #0
	bne	.L12417
	mov	r1, r7
	mov	r0, r6
	bl	usb_add_function(PLT)
	subs	r4, r0, #0
	beq	.L12421
.L12415:
.L12416:
.L12417:
	ldr	r3, .L12422+24
.LPIC3134:
	add	r3, pc, r3
	ldr	r0, [r3, #2796]
	bl	snd_card_free(PLT)
	mov	r0, r4
	b	.L12414
.L12421:
	ldr	r3, [sp, #12]
	mov	r0, r4
	ldr	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r8, #2796]
	b	.L12414
.L12423:
	.align	2
.L12422:
	.word	.LC709-(.LPIC3125+8)
	.word	.LANCHOR0-(.LPIC3126+8)
	.word	.LC710-(.LPIC3128+8)
	.word	.LANCHOR7-(.LPIC3129+8)
	.word	.LC711-(.LPIC3130+8)
	.word	.LC712-(.LPIC3131+8)
	.word	.LANCHOR0-(.LPIC3134+8)
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r1
	ldr	r1, [r0, #4]
	mov	r0, r3
	b	audio_source_bind_config(PLT)
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	gs_alloc_req
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12426
	str	r6, [r4, #4]
	mov	r1, r5
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L12431
.L12426:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12431:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12426
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.global	gs_free_req
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #76
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #4]
	cmp	r7, r5
	ldr	r8, [r3, #88]
	beq	.L12456
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L12456
	ldr	r10, .L12482
	mov	r4, r0
	mov	r9, #0
.LPIC3139:
	add	r10, pc, r10
	b	.L12438
.L12440:
	ldr	r3, [r4, #96]
	add	r3, r3, r2
	rsb	r9, r1, r3
	cmp	fp, r9
	bls	.L12476
	rsb	r3, r9, fp
	mov	r2, r9
	mov	r0, ip
	str	r3, [sp, #4]
	bl	memcpy(PLT)
	add	r0, r0, r9
	ldr	r9, [sp, #4]
	ldr	r1, [r4, #96]
	mov	r2, r9
	bl	memcpy(PLT)
	ldr	r3, [r4, #96]
	add	r9, r3, r9
	str	r9, [r4, #100]
.L12441:
	str	fp, [r5, #-32]
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12477
	cmp	fp, #0
	bne	.L12478
	ldr	r1, [r5, #-32]
	ldr	r3, [r4, #136]
	ldr	r2, [r4, #84]
	ldr	r5, [r4, #76]
	str	r1, [r10, #3688]
	add	r3, r3, r1
	add	r2, r2, #1
	cmp	r7, r5
	str	r3, [r4, #136]
	str	r2, [r4, #84]
	beq	.L12437
	cmp	r2, #7
	mov	r9, #1
	bgt	.L12437
.L12438:
	ldr	r2, [r4, #92]
	sub	r6, r5, #36
	ldr	r3, [r4, #104]
	ldr	r1, [r4, #100]
	ldr	ip, [r5, #-36]
	add	r3, r3, r2
	rsb	r3, r1, r3
	udiv	fp, r3, r2
	mls	fp, r2, fp, r3
	cmp	fp, #4096
	movcs	fp, #4096
	bcs	.L12440
	cmp	fp, #0
	bne	.L12440
	ldr	r3, .L12482+4
.LPIC3140:
	add	r3, pc, r3
	ldr	r3, [r3, #3688]
	cmp	r3, #0
	moveq	fp, r3
	beq	.L12443
	ldrh	r1, [r8, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L12479
.L12443:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up(PLT)
.L12445:
	cmp	r9, #0
	bne	.L12437
.L12461:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12476:
	mov	r0, ip
	mov	r2, fp
	bl	memcpy(PLT)
	cmp	fp, r9
	ldrcc	r3, [r4, #100]
	ldrcs	r3, [r4, #96]
	addcc	r3, r3, fp
	str	r3, [r4, #100]
	b	.L12441
.L12478:
	mov	r1, r7
	mov	r0, r5
	ldr	r2, [r4, #76]
	bl	__list_add(PLT)
.L12437:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12461
	bl	tty_wakeup(PLT)
	b	.L12461
.L12479:
	str	r3, [r5, #-32]
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r8, #8]
	mov	r2, #32
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12480
	cmp	fp, #0
	bne	.L12481
.L12446:
	ldr	r3, .L12482+8
	mov	r2, #0
.LPIC3138:
	add	r3, pc, r3
	str	r2, [r3, #3688]
	b	.L12443
.L12477:
	mov	r1, r6
	mov	r0, r8
	bl	gs_free_req(PLT)
	b	.L12461
.L12456:
	mov	fp, #0
	b	.L12461
.L12480:
	mov	r1, r6
	mov	r0, r8
	bl	gs_free_req(PLT)
	b	.L12445
.L12481:
	ldr	r1, .L12482+12
	mov	r3, fp
	ldr	r2, .L12482+16
	ldr	r0, .L12482+20
.LPIC3136:
	add	r1, pc, r1
	sub	r1, r1, #3792
.LPIC3135:
	add	r2, pc, r2
	sub	r1, r1, #12
.LPIC3137:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r7
	mov	r0, r5
	ldr	r2, [r4, #76]
	bl	__list_add(PLT)
	b	.L12446
.L12483:
	.align	2
.L12482:
	.word	.LANCHOR4-(.LPIC3139+8)
	.word	.LANCHOR4-(.LPIC3140+8)
	.word	.LANCHOR4-(.LPIC3138+8)
	.word	.LANCHOR9-(.LPIC3136+8)
	.word	.LC713-(.LPIC3135+8)
	.word	.LC714-(.LPIC3137+8)
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L12485
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12485:
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #0
	mov	r7, r0
	bne	.L12505
.L12491:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12496
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12496:
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12505:
	ldr	r2, [r4, #92]
	mov	r8, r5
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	rsb	r3, r0, r3
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
	cmp	r8, r5
	bhi	.L12506
.L12492:
	ldr	r3, [r4, #96]
	add	r5, r3, r2
	rsb	r5, r0, r5
	cmp	r5, r8
	bcs	.L12494
	mov	r2, r5
	rsb	r9, r5, r8
	mov	r1, r6
	bl	memcpy(PLT)
	add	r1, r6, r5
	mov	r2, r9
	ldr	r0, [r4, #96]
	bl	memcpy(PLT)
	ldr	r3, [r4, #96]
	mov	r5, r8
	add	r2, r3, r9
	str	r2, [r4, #104]
	b	.L12491
.L12506:
	cmp	r5, #0
	beq	.L12491
	mov	r8, r5
	b	.L12492
.L12494:
	mov	r1, r6
	mov	r2, r8
	bl	memcpy(PLT)
	cmp	r5, r8
	bls	.L12495
	ldr	r3, [r4, #104]
	mov	r5, r8
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L12491
.L12495:
	ldr	r3, [r4, #96]
	mov	r5, r8
	str	r3, [r4, #104]
	b	.L12491
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r6, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add(PLT)
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L12509
	cmp	r3, #0
	bne	.L12521
.L12510:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12509
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12509:
	mov	r1, r6
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L12521:
	ldr	r1, .L12522
	ldr	r0, .L12522+4
	ldr	r2, [r7, #4]
.LPIC3141:
	add	r1, pc, r1
	sub	r1, r1, #3792
.LPIC3142:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12510
.L12523:
	.align	2
.L12522:
	.word	.LANCHOR9-(.LPIC3141+8)
	.word	.LC715-(.LPIC3142+8)
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	adds	r3, r10, #44
	add	r4, r10, #32
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r0, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r5, [r0, #92]
	beq	.L12569
	ldr	r7, [r10, #44]
	rsb	r7, r7, #8
	cmp	r7, #0
	ble	.L12527
	ldr	r8, .L12613
	mov	r6, #0
.LPIC3144:
	add	r8, pc, r8
	b	.L12526
.L12530:
	str	r8, [r3, #28]
	ldr	r1, [r10, #36]
	bl	__list_add(PLT)
	ldr	r3, [r10, #44]
	cmp	r7, r6
	add	r3, r3, #1
	str	r3, [r10, #44]
	ble	.L12529
.L12526:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r5
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r4
	add	r0, r3, #36
	bne	.L12530
.L12528:
	ldr	r2, [r10, #32]
	cmp	r4, r2
	beq	.L12531
.L12529:
	ldr	r0, [r10, #4]
.L12527:
	adds	r3, r10, #88
	ldr	r8, [r0, #88]
	add	r7, r10, #76
	str	r3, [sp, #4]
	beq	.L12604
	ldr	r9, [r10, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	ble	.L12534
	ldr	fp, .L12613+4
	mov	r6, #0
.LPIC3146:
	add	fp, pc, fp
	b	.L12533
.L12538:
	str	fp, [r3, #28]
	ldr	r1, [r10, #80]
	bl	__list_add(PLT)
	ldr	r3, [r10, #88]
	cmp	r9, r6
	add	r3, r3, #1
	str	r3, [r10, #88]
	ble	.L12537
.L12533:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12538
.L12535:
	ldr	r2, [r10, #76]
	cmp	r7, r2
	beq	.L12605
.L12537:
	ldr	r0, [r10, #4]
.L12534:
	ldr	fp, [r10, #32]
	mov	r2, #0
	str	r2, [r10, #56]
	ldr	r6, [r0, #92]
	cmp	r4, fp
	ldreq	r2, [r10, #40]
	beq	.L12546
	ldr	r1, [r10, #8]
	ldr	r2, [r10, #40]
	cmp	r1, #0
	beq	.L12550
	cmp	r2, #7
	ble	.L12565
	b	.L12606
.L12545:
	cmp	r9, #0
	bne	.L12607
	ldr	r2, [r10, #40]
	ldr	fp, [r10, #32]
	add	r2, r2, #1
	cmp	r4, fp
	str	r2, [r10, #40]
	beq	.L12567
	ldr	r0, [r10, #8]
	cmp	r0, #0
	beq	.L12550
	cmp	r2, #7
	bgt	.L12568
.L12565:
	mov	r0, fp
	sub	r8, fp, #36
	bl	list_del(PLT)
	mov	r3, #4096
	mov	r0, r10
	str	r3, [fp, #-32]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r10
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r10, #4]
	cmp	r3, #0
	bne	.L12545
	mov	r0, r6
	mov	r1, r8
	bl	gs_free_req(PLT)
	ldr	r0, [r10, #4]
	ldr	r2, [r10, #40]
.L12546:
	cmp	r0, #0
	beq	.L12550
.L12567:
	ldr	r0, [r10, #8]
	cmp	r0, #0
	beq	.L12550
	cmp	r2, #0
	bne	.L12568
	ldr	r6, [sp]
.L12552:
	cmp	r6, #0
	beq	.L12555
	b	.L12553
.L12608:
	bl	list_del(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	gs_free_req(PLT)
.L12555:
	ldr	r0, [r10, #32]
	cmp	r4, r0
	sub	r6, r0, #36
	bne	.L12608
.L12554:
	ldr	r2, [r10, #4]
	ldr	r4, [sp, #4]
	ldr	r5, [r2, #88]
.L12557:
	cmp	r4, #0
	beq	.L12559
	b	.L12558
.L12609:
	bl	list_del(PLT)
	mov	r1, r4
	mov	r0, r5
	bl	gs_free_req(PLT)
.L12559:
	ldr	r0, [r10, #76]
	cmp	r7, r0
	sub	r4, r0, #36
	bne	.L12609
.L12572:
	mvn	r0, #4
	b	.L12595
.L12605:
	ldr	r6, [sp]
.L12588:
	cmp	r6, #0
	beq	.L12541
	b	.L12540
.L12610:
	bl	list_del(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	gs_free_req(PLT)
.L12541:
	ldr	r0, [r10, #32]
	cmp	r4, r0
	sub	r6, r0, #36
	bne	.L12610
.L12531:
	mvn	r0, #11
.L12595:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12606:
	cmp	r0, #0
	beq	.L12550
	mov	r0, r1
.L12568:
	bl	tty_wakeup(PLT)
	mov	r0, #0
	b	.L12595
.L12569:
	ldr	r7, .L12613+8
	mov	r6, r3
.LPIC3143:
	add	r7, pc, r7
	b	.L12525
.L12611:
	str	r7, [r3, #28]
	ldr	r1, [r10, #36]
	bl	__list_add(PLT)
	cmp	r6, #8
	beq	.L12529
.L12525:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r5
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r4
	add	r0, r3, #36
	bne	.L12611
	b	.L12528
.L12604:
	ldr	r9, .L12613+12
	mov	r6, r3
.LPIC3145:
	add	r9, pc, r9
	b	.L12536
.L12612:
	str	r9, [r3, #28]
	ldr	r1, [r10, #80]
	bl	__list_add(PLT)
	cmp	r6, #8
	beq	.L12537
.L12536:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12612
	b	.L12535
.L12558:
	ldr	r3, [r10, #76]
	cmp	r7, r3
	sub	r6, r3, #36
	mov	r0, r3
	beq	.L12572
	bl	list_del(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #88]
	sub	r3, r3, #1
	str	r3, [r10, #88]
	b	.L12557
.L12553:
	ldr	r3, [r10, #32]
	cmp	r4, r3
	sub	r8, r3, #36
	mov	r0, r3
	beq	.L12554
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r5
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #44]
	sub	r3, r3, #1
	str	r3, [r10, #44]
	b	.L12552
.L12540:
	ldr	r3, [r10, #32]
	cmp	r4, r3
	sub	r7, r3, #36
	mov	r0, r3
	beq	.L12531
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #44]
	sub	r3, r3, #1
	str	r3, [r10, #44]
	b	.L12588
.L12607:
	mov	r0, fp
	ldr	r2, [r10, #32]
	mov	r1, r4
	bl	__list_add(PLT)
	ldr	r0, [r10, #4]
	ldr	r2, [r10, #40]
	b	.L12546
.L12550:
	ldr	r1, .L12613+16
	ldr	r0, .L12613+20
.LPIC3147:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3148:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12595
.L12614:
	.align	2
.L12613:
	.word	gs_read_complete-(.LPIC3144+8)
	.word	gs_write_complete-(.LPIC3146+8)
	.word	gs_read_complete-(.LPIC3143+8)
	.word	gs_write_complete-(.LPIC3145+8)
	.word	.LANCHOR9-(.LPIC3147+8)
	.word	.LC716-(.LPIC3148+8)
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L12637
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #20]
.LPIC3149:
	add	r6, pc, r6
	mov	r3, r6
	add	r5, r6, #3680
	mov	r2, r1, asl #5
	add	r5, r5, #12
	sub	r6, r2, r1, asl #3
	add	r5, r5, r6
	add	r6, r3, r6
.L12623:
	mov	r0, r5
	bl	mutex_lock(PLT)
	ldr	r4, [r6, #3712]
	subs	r0, r4, #0
	beq	.L12616
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12617
	add	r3, r3, #1
	mov	r0, r4
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r0, #0
.L12634:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12617:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L12619
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12636
.L12621:
	str	r4, [r7, #272]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	strb	r5, [r4, #16]
	str	r3, [r4, #12]
	cmp	r6, r5
	beq	.L12628
	mov	r0, r4
	bl	gs_start_io(PLT)
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L12628
	mov	r0, r6
	blx	r3
.L12627:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	b	.L12634
.L12616:
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mvn	r0, #18
	b	.L12634
.L12619:
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r0, #1
	bl	msleep(PLT)
	b	.L12623
.L12628:
	mov	r5, #0
	b	.L12627
.L12636:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L12637+4
.LPIC3152:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L12624
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L12625
.L12629:
	mov	r3, #8192
	str	r6, [r4, #104]
	mov	r0, r4
	str	r6, [r4, #100]
	str	r3, [r4, #92]
	bl	_raw_spin_lock_irq(PLT)
	b	.L12621
.L12624:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L12629
.L12625:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq(PLT)
	strb	r6, [r4, #16]
	b	.L12627
.L12638:
	.align	2
.L12637:
	.word	.LANCHOR4-(.LPIC3149+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3152+8))
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #60
	sub	r8, r0, #12
	strd	r6, [sp, #8]
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irq(PLT)
	ldr	r5, [r4, #-12]
	ldr	r6, [r4, #-52]
	cmp	r8, r5
	beq	.L12640
	ldr	r3, .L12700
	mov	r7, #0
	str	r9, [sp, #4]
	mov	r10, r7
	str	r7, [sp]
.LPIC3153:
	add	r3, pc, r3
	mov	fp, r3
	b	.L12649
.L12698:
	cmp	r2, #0
	beq	.L12645
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	mov	r0, fp
	bl	printk(PLT)
.L12645:
	ldr	r9, [r5, #12]
	cmp	r9, #0
	beq	.L12641
	ldr	r3, [r4, #-4]
	mov	r2, #0
	mov	r0, r6
	ldr	r1, [r5, #-36]
	cmp	r3, #0
	rsbne	r9, r3, r9
	addne	r1, r1, r3
	mov	r3, r9
	bl	tty_insert_flip_string_fixed_flag(PLT)
	ldr	r3, [r4, #72]
	cmp	r0, #0
	movne	r7, #1
	cmp	r9, r0
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L12696
	str	r10, [r4, #-4]
.L12641:
	mov	r0, r5
	bl	__list_del_entry(PLT)
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-28]!
	bl	__list_add(PLT)
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r8, r5
	str	r3, [r4, #-20]
	beq	.L12697
.L12649:
	cmp	r6, #0
	beq	.L12641
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L12691
	ldr	r2, [r5, #8]
	cmn	r2, #108
	bne	.L12698
	mov	r3, #1
	str	r3, [sp]
	b	.L12645
.L12697:
	cmp	r6, #0
	moveq	r3, #0
	andne	r3, r7, #1
	ldr	r9, [sp, #4]
	cmp	r3, #0
	bne	.L12651
.L12653:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L12655
.L12640:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L12655
	ldr	r5, [r4, #-28]
	sub	r7, r4, #28
	ldr	r6, [r3, #92]
	cmp	r7, r5
	beq	.L12655
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L12655
	ldr	r3, [r4, #-20]
	cmp	r3, #7
	movle	r8, #4096
	ble	.L12658
	b	.L12655
.L12659:
	cmp	fp, #0
	bne	.L12699
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-28]
	add	r3, r3, #1
	cmp	r7, r5
	str	r3, [r4, #-20]
	beq	.L12655
	ldr	r2, [r4, #-52]
	cmp	r2, #0
	beq	.L12655
	cmp	r3, #7
	bgt	.L12655
.L12658:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	mov	r0, r9
	str	r8, [r5, #-32]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	bne	.L12659
	mov	r1, r10
	mov	r0, r6
	bl	gs_free_req(PLT)
.L12655:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L12691:
	ldr	r9, [sp, #4]
.L12642:
	cmp	r7, #0
	bne	.L12651
.L12694:
	ldr	r3, [r4, #-12]
	cmp	r8, r3
	beq	.L12653
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L12653
	cmp	r7, #0
	beq	.L12654
	ldr	r3, .L12700+4
	mov	r2, r4
	mov	r0, #4
.LPIC3154:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	bl	queue_work_on(PLT)
	b	.L12653
.L12651:
	mov	r0, r6
	bl	tty_flip_buffer_push(PLT)
	b	.L12694
.L12696:
	ldr	r3, [r4, #-4]
	ldr	r9, [sp, #4]
	add	r0, r3, r0
	str	r0, [r4, #-4]
	b	.L12642
.L12699:
	ldr	r2, [r4, #-28]
	mov	r1, r7
	mov	r0, r5
	bl	__list_add(PLT)
	b	.L12655
.L12654:
	ldr	r0, .L12700+8
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
.LPIC3155:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12653
.L12701:
	.align	2
.L12700:
	.word	.LC717-(.LPIC3153+8)
	.word	.LANCHOR1-(.LPIC3154+8)
	.word	.LC718-(.LPIC3155+8)
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.global	gserial_setup
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L12740
	mov	r4, r1
	ldr	r3, .L12740+4
	strd	r8, [sp, #16]
	sub	r8, r1, #1
	strd	r10, [sp, #24]
	cmp	r8, #7
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
.LPIC3156:
	add	r5, pc, r5
	str	r0, [sp, #24]
	ldr	r3, [r5, r3]
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #92]
	bhi	.L12718
	ldr	r10, .L12740+8
	mov	r1, #0
	mov	r0, r4
	bl	__alloc_tty_driver(PLT)
	cmp	r0, #0
.LPIC3157:
	add	r10, pc, r10
	str	r0, [r10, #3884]
	beq	.L12719
	ldr	r1, .L12740+12
	mov	r9, #3
	mov	fp, #1
	ldr	r2, .L12740+16
	mov	r7, #14
	ldr	r3, .L12740+20
	strh	r9, [r0, #96]	@ movhi
	mov	r9, #9600
	str	r7, [r0, #144]
.LPIC3158:
	add	r1, pc, r1
	strh	fp, [r0, #98]	@ movhi
.LPIC3159:
	add	r2, pc, r2
	str	r1, [r0, #72]
	ldr	r1, .L12740+24
	str	r2, [r0, #76]
	ldr	r3, [r5, r3]
	movw	r2, #3261
	str	r9, [r0, #140]
.LPIC3160:
	add	r1, pc, r1
	ldrd	r6, [r3]
	add	r1, r1, #216
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #8]
	strd	r6, [r0, #108]
	ldrd	r6, [r3, #16]
	str	r2, [r0, #108]
	strd	r6, [r0, #116]
	ldrd	r6, [r3, #24]
	strd	r6, [r0, #124]
	ldrd	r6, [r3, #32]
	strd	r6, [r0, #132]
	mov	r7, #0
	str	r9, [r0, #136]
	bl	tty_set_operations(PLT)
	ldr	ip, .L12740+28
	mov	r1, #10
	mov	r3, r7
	ldr	r0, .L12740+32
	mov	r2, fp
	str	r7, [sp]
	movt	r1, 2
.LPIC3162:
	add	ip, pc, ip
.LPIC3161:
	add	r0, pc, r0
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L12740+36
	cmp	r0, r7
.LPIC3163:
	add	r3, pc, r3
	str	r0, [r3, #2592]
	beq	.L12720
	add	r2, r10, #3680
	ldr	r3, .L12740+40
	add	r10, r10, #3888
	mov	r1, r2
	ldr	r2, .L12740+44
	add	r1, r1, #12
	ldr	r0, .L12740+48
	mov	r8, r1
	str	r1, [sp, #28]
	ldr	r1, .L12740+52
.LPIC3167:
	add	r2, pc, r2
.LPIC3166:
	add	r0, pc, r0
	add	r9, r2, #3888
	str	r2, [sp, #32]
	mov	fp, r0
.LPIC3168:
	add	r1, pc, r1
	str	r1, [sp, #12]
	ldr	r3, [r5, r3]
	str	r5, [sp, #36]
	str	r3, [sp, #8]
	ldr	r3, .L12740+56
.LPIC3170:
	add	r3, pc, r3
	str	r3, [sp, #16]
	b	.L12707
.L12736:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L12734
.L12705:
	mov	r6, #0
	mov	r0, r5
	ldr	r1, [sp, #12]
	mov	r2, r9
	add	r8, r8, #24
	str	r6, [r0], #20
	bl	__init_waitqueue_head(PLT)
	ldr	r1, [sp, #16]
	mov	r2, r9
	add	r0, r5, #108
	bl	__init_waitqueue_head(PLT)
	ldr	r3, .L12740+60
	mov	r2, #65024
	strb	r7, [r5, #17]
	movt	r2, 65535
	add	r7, r7, #1
	strb	r6, [r5, #125]
	add	lr, r5, #64
	add	r0, r5, #32
	strb	r6, [r5, #126]
	add	r1, r5, #48
	str	r2, [r5, #60]
	mov	ip, #9600
.LPIC3171:
	add	r3, pc, r3
	add	r2, r5, #76
	str	lr, [r5, #64]
	cmp	r7, r4
	str	lr, [r5, #68]
	str	r3, [r5, #72]
	mov	r3, #8
	str	r0, [r5, #32]
	str	r0, [r5, #36]
	str	r1, [r5, #48]
	str	r1, [r5, #52]
	str	r2, [r5, #76]
	str	r2, [r5, #80]
	str	ip, [r5, #120]
	strb	r3, [r5, #124]
	str	r5, [r8, #-4]
	beq	.L12735
.L12707:
	mov	r0, r8
	mov	r2, r10
	mov	r1, fp
	bl	__mutex_init(PLT)
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	bne	.L12736
	mov	r5, #16
	b	.L12705
.L12734:
.L12706:
	cmp	r7, #0
	sub	r8, r7, #1
	mvn	r6, #11
	beq	.L12709
.L12704:
	ldr	r3, .L12740+64
	mov	r4, r8, asl #5
	sub	r4, r4, r8, asl #3
.LPIC3182:
	add	r3, pc, r3
	add	r3, r3, #3680
	add	r3, r3, #12
	add	r4, r3, r4
.L12715:
	ldr	r0, [r4, #20]
	sub	r4, r4, #24
	bl	kfree(PLT)
	cmp	r8, #0
	sub	r8, r8, #1
	bne	.L12715
.L12709:
	ldr	r3, .L12740+68
.LPIC3183:
	add	r3, pc, r3
	ldr	r0, [r3, #2592]
	cmp	r0, #0
	beq	.L12716
	bl	destroy_workqueue(PLT)
.L12716:
	ldr	r4, .L12740+72
.LPIC3184:
	add	r4, pc, r4
	ldr	r0, [r4, #3884]
	bl	put_tty_driver(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #3884]
.L12703:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L12737
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12735:
	ldr	r3, [sp, #32]
	ldr	r5, [sp, #36]
	ldr	r0, [r3, #3884]
	str	r7, [r3, #3888]
	bl	tty_register_driver(PLT)
	subs	r6, r0, #0
	bne	.L12738
	ldr	r10, .L12740+76
	sub	r9, r9, #3888
	ldr	r3, [sp, #24]
	ldr	r8, .L12740+80
.LPIC3177:
	add	r10, pc, r10
	add	r7, r3, #32
	sub	r10, r10, #3760
.LPIC3178:
	add	r8, pc, r8
	b	.L12711
.L12710:
	add	r6, r6, #1
	cmp	r6, r4
	beq	.L12739
.L12711:
	mov	r2, r7
	mov	r1, r6
	ldr	r0, [r9, #3884]
	bl	tty_register_device(PLT)
	cmn	r0, #4096
	bls	.L12710
	mov	r3, r0
	mov	r2, r6
	mov	r1, r10
	mov	r0, r8
	add	r6, r6, #1
	bl	printk(PLT)
	cmp	r6, r4
	bne	.L12711
.L12739:
	ldr	fp, .L12740+84
	mov	r10, #0
	add	r7, sp, #44
	ldr	r2, .L12740+88
	ldr	r9, .L12740+92
	ldr	r3, .L12740+96
.LPIC3180:
	add	fp, pc, fp
	ldr	r6, [sp, #28]
.LPIC3181:
	add	r2, pc, r2
.LPIC3179:
	add	r9, pc, r9
	str	r2, [sp, #8]
	ldr	r8, [r5, r3]
	str	fp, [sp, #12]
	mov	fp, r10
	mov	r10, r9
	mov	r9, r4
.L12714:
	mov	r3, fp
	mov	r2, r10
	ldr	r4, [r6, #20]
	mov	r1, #48
	mov	r0, r7
	bl	snprintf(PLT)
	mov	r1, #0
	mov	r0, r7
	bl	debugfs_create_dir(PLT)
	cmp	r0, #0
	str	r0, [r8]
	beq	.L12713
	cmn	r0, #4096
	bhi	.L12713
	ldr	lr, .L12740+100
	mov	r2, r0
	mov	r3, r4
	mov	r1, #292
	ldr	r0, [sp, #12]
	ldr	lr, [r5, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
	ldr	lr, .L12740+104
	mov	r3, r4
	mov	r1, #420
	ldr	r2, [r8]
	ldr	r0, [sp, #8]
	ldr	lr, [r5, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
.L12713:
	add	fp, fp, #1
	add	r6, r6, #24
	cmp	fp, r9
	bne	.L12714
	mov	r0, #0
	b	.L12703
.L12720:
	mvn	r6, #11
	b	.L12704
.L12718:
	mvn	r0, #21
	b	.L12703
.L12719:
	mvn	r0, #11
	b	.L12703
.L12737:
	bl	__stack_chk_fail(PLT)
.L12738:
	ldr	r1, .L12740+108
	mov	r2, r6
	sub	r8, r7, #1
	ldr	r0, .L12740+112
.LPIC3174:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3175:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12704
.L12741:
	.align	2
.L12740:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3156+8)
	.word	__stack_chk_guard(GOT)
	.word	.LANCHOR4-(.LPIC3157+8)
	.word	.LC719-(.LPIC3158+8)
	.word	.LC720-(.LPIC3159+8)
	.word	tty_std_termios(GOT)
	.word	.LANCHOR5-(.LPIC3160+8)
	.word	.LC721-(.LPIC3162+8)
	.word	.LC208-(.LPIC3161+8)
	.word	.LANCHOR1-(.LPIC3163+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR4-(.LPIC3167+8)
	.word	.LC722-(.LPIC3166+8)
	.word	.LC723-(.LPIC3168+8)
	.word	.LC724-(.LPIC3170+8)
	.word	gs_rx_push-(.LPIC3171+8)
	.word	.LANCHOR4-(.LPIC3182+8)
	.word	.LANCHOR1-(.LPIC3183+8)
	.word	.LANCHOR4-(.LPIC3184+8)
	.word	.LANCHOR9-(.LPIC3177+8)
	.word	.LC726-(.LPIC3178+8)
	.word	.LC728-(.LPIC3180+8)
	.word	.LC729-(.LPIC3181+8)
	.word	.LC727-(.LPIC3179+8)
	.word	gs_dent(GOT)
	.word	debug_adb_ops(GOT)
	.word	debug_rst_ops(GOT)
	.word	.LANCHOR9-(.LPIC3174+8)
	.word	.LC725-(.LPIC3175+8)
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12748
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
.LPIC3187:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12743
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L12746
.L12745:
	ldr	r0, [r5]
	mov	r1, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	gserial_setup(PLT)
.L12743:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L12745
.L12746:
	ldrd	r4, [sp]
	mvn	r0, #11
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12749:
	.align	2
.L12748:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3187+8))
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.global	gserial_cleanup
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L12785
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3188:
	add	r8, pc, r8
	ldr	r0, [r8, #3884]
	cmp	r0, #0
	beq	.L12750
	ldr	r3, [r8, #3888]
	cmp	r3, #0
	beq	.L12752
	mov	r4, #0
	b	.L12753
.L12782:
	ldr	r0, [r8, #3884]
.L12753:
	mov	r1, r4
	add	r4, r4, #1
	bl	tty_unregister_device(PLT)
	ldr	r3, [r8, #3888]
	cmp	r3, r4
	bhi	.L12782
	cmp	r3, #0
	beq	.L12752
	ldr	fp, .L12785+4
	add	r7, r8, #3680
	mov	r9, #0
	add	r7, r7, #12
	mov	r10, r9
.LPIC3199:
	add	fp, pc, fp
.L12761:
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldr	r4, [r7, #20]
	mov	r0, r7
	str	r10, [r7, #20]
	bl	mutex_unlock(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L12755
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12783
.L12755:
	mov	r0, r4
	add	r6, sp, #4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L12785+8
	mov	r3, sp
	str	r10, [sp, #4]
	bic	r3, r3, #8128
	add	r5, r4, #20
	bic	r3, r3, #63
	ldr	r1, [r3, #12]
	add	r3, sp, #16
.LPIC3201:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L12759
.L12757:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L12759:
	mov	r2, #2
	mov	r1, r6
	mov	r0, r5
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L12757
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12757
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r1, r6
	mov	r0, r5
	bl	finish_wait(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L12784
.L12760:
	mov	r0, r4
	add	r9, r9, #1
	bl	kfree(PLT)
	ldr	r3, [r8, #3888]
	add	r7, r7, #24
	cmp	r3, r9
	bhi	.L12761
.L12752:
	ldr	r3, .L12785+12
	mov	r5, #0
	ldr	r4, .L12785+16
.LPIC3202:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3190:
	add	r4, pc, r4
	str	r5, [r4, #3888]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r3, .L12785+20
.LPIC3192:
	add	r3, pc, r3
	ldr	r0, [r3, #2592]
	bl	destroy_workqueue(PLT)
	ldr	r0, [r4, #3884]
	bl	tty_unregister_driver(PLT)
	ldr	r0, [r4, #3884]
	bl	put_tty_driver(PLT)
	str	r5, [r4, #3884]
.L12750:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12783:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12760
.L12784:
	movw	r1, #1477
	mov	r0, fp
	bl	warn_slowpath_null(PLT)
	b	.L12760
.L12786:
	.align	2
.L12785:
	.word	.LANCHOR4-(.LPIC3188+8)
	.word	.LC401-(.LPIC3199+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC3201+8))
	.word	gs_dent(GOT_PREL)+(.-(.LPIC3202+8))
	.word	.LANCHOR4-(.LPIC3190+8)
	.word	.LANCHOR1-(.LPIC3192+8)
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_cleanup(PLT)
	ldr	r0, [r4, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.global	gserial_connect
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12804
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3203:
	add	r3, pc, r3
	ldr	r2, [r3, #3884]
	cmp	r2, #0
	beq	.L12797
	ldr	r2, [r3, #3888]
	cmp	r1, r2
	bcs	.L12797
	ldr	r2, [r0, #88]
	mov	r4, r0
	mov	r0, r1, asl #5
	sub	r1, r0, r1, asl #3
	ldr	ip, [r2, #8]
	add	r3, r3, r1
	mov	r0, r2
	ldr	r5, [r3, #3712]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r6, r0, #0
	blt	.L12790
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	blt	.L12791
	ldr	r3, [r4, #92]
	mov	r0, r5
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r5, [r4, #84]
	ldr	r1, [r5, #120]
	mov	r7, r0
	str	r4, [r5, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r5, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r5, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L12803
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L12794
.L12802:
	mov	r0, r4
	blx	r3
.L12794:
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L12790:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12791:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
	b	.L12790
.L12803:
	mov	r0, r5
	bl	gs_start_io(PLT)
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L12802
	b	.L12794
.L12797:
	mvn	r6, #5
	b	.L12790
.L12805:
	.align	2
.L12804:
	.word	.LANCHOR4-(.LPIC3203+8)
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L12806
	mov	r8, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r8, #96]
	mov	r2, #0
	mov	r5, r0
	str	r1, [r4, #120]
	ldrh	r1, [r8, #100]
	strh	r1, [r4, #124]	@ movhi
	ldrb	r1, [r8, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r8, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L12808
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L12809
.L12808:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12809
	bl	tty_hangup(PLT)
.L12809:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r8, #92]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #92]
	str	r5, [r3]
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #88]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	beq	.L12827
.L12811:
	ldr	r0, [r4, #32]
	add	r9, r4, #32
	ldr	r5, [r8, #92]
	cmp	r9, r0
	beq	.L12812
.L12813:
	sub	r6, r0, #36
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #32]
	cmp	r9, r0
	bne	.L12813
	ldr	r5, [r8, #92]
.L12812:
	ldr	r0, [r4, #48]
	add	r9, r4, #48
	cmp	r0, r9
	beq	.L12818
.L12817:
	sub	r6, r0, #36
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #48]
	cmp	r0, r9
	bne	.L12817
.L12818:
	ldr	r0, [r4, #76]
	add	r6, r4, #76
	ldr	r8, [r8, #88]
	cmp	r0, r6
	beq	.L12816
.L12819:
	sub	r5, r0, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r5
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #76]
	cmp	r0, r6
	bne	.L12819
.L12816:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L12827:
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L12811
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	str	r5, [r4, #96]
	b	.L12811
.L12806:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_disconnect(PLT)
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L12853
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L12835
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12836
	bl	gserial_disconnect(PLT)
	ldr	r2, [r4, #88]
.L12836:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L12837
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L12837
.L12838:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12842
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L12842
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect(PLT)
.L12834:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12853:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12832
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L12832:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L12835
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L12834
.L12837:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12842
	ldr	r2, [r4, #92]
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12842
	ldr	r2, [r4, #88]
	b	.L12838
.L12842:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L12834
.L12835:
	mvn	r5, #21
	b	.L12834
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12860
	mov	r1, r5
	str	r6, [r4, #4]
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L12861
.L12858:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12860:
	ldr	r1, .L12862
	ldr	r0, .L12862+4
.LPIC3206:
	add	r1, pc, r1
	sub	r1, r1, #3744
.LPIC3207:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12858
.L12861:
	ldr	r1, .L12862+8
	ldr	r0, .L12862+12
.LPIC3208:
	add	r1, pc, r1
	sub	r1, r1, #3744
.LPIC3209:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12858
.L12863:
	.align	2
.L12862:
	.word	.LANCHOR9-(.LPIC3206+8)
	.word	.LC419-(.LPIC3207+8)
	.word	.LANCHOR9-(.LPIC3208+8)
	.word	.LC420-(.LPIC3209+8)
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r0, [r1]
	cmp	r1, r0
	beq	.L12864
.L12866:
	sub	r5, r0, #36
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	gsdio_free_req(PLT)
	ldr	r0, [r4]
	cmp	r4, r0
	bne	.L12866
.L12864:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.align	2
	.global	gsdio_alloc_requests
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	ldr	r9, [sp, #32]
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ble	.L12876
	mov	r7, r3
	mov	r5, r1
	mov	r6, r0
	mov	r8, r2
	mov	r4, #0
	b	.L12875
.L12873:
	str	r9, [ip, #28]
	ldr	r2, [r5]
	bl	__list_add(PLT)
	cmp	r4, r8
	beq	.L12876
.L12875:
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	add	r4, r4, #1
	bl	gsdio_alloc_req(PLT)
	subs	ip, r0, #0
	mov	r1, r5
	add	r0, ip, #36
	bne	.L12873
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	movne	r0, #0
	b	.L12872
.L12876:
	mov	r0, #0
.L12872:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L12895
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12883
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L12883
	ldr	r7, [r3, #92]
	add	r8, r5, #12
	mov	r9, #2048
	b	.L12885
.L12887:
	bl	list_del(PLT)
	str	r9, [r4, #-32]
	ldr	r3, [r5, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	cmp	r10, #0
	bne	.L12896
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12883
.L12885:
	ldr	r4, [r5, #12]
	cmp	r8, r4
	mov	r0, r4
	sub	r10, r4, #36
	bne	.L12887
.L12883:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq(PLT)
.L12896:
	ldr	r1, .L12897
	mov	r2, r5
	ldr	r0, .L12897+4
	ldr	r3, [r5]
.LPIC3212:
	add	r1, pc, r1
	sub	r1, r1, #3728
.LPIC3213:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r8
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add(PLT)
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L12883
.L12895:
	ldr	r1, .L12897+8
	ldr	r0, .L12897+12
.LPIC3210:
	add	r1, pc, r1
.LPIC3211:
	add	r0, pc, r0
	sub	r1, r1, #3728
	b	printk(PLT)
.L12898:
	.align	2
.L12897:
	.word	.LANCHOR9-(.LPIC3212+8)
	.word	.LC23-(.LPIC3213+8)
	.word	.LANCHOR9-(.LPIC3210+8)
	.word	.LC22-(.LPIC3211+8)
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_write
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L12908
	cmp	r1, #0
	beq	.L12909
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L12901
	ldr	r3, [r1, #48]
	cmp	r3, #0
	bne	.L12903
	str	r3, [r4, #8]
.L12901:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12908:
	ldr	r1, .L12910
	ldr	r0, .L12910+4
.LPIC3214:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3215:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12901
.L12909:
	ldr	r1, .L12910+8
	ldr	r0, .L12910+12
	ldr	r2, [r4]
.LPIC3216:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3217:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12901
.L12903:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, .L12910+16
	mvn	r3, #18
	ldr	r0, .L12910+20
	ldr	r2, [r4]
.LPIC3218:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3219:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12901
.L12911:
	.align	2
.L12910:
	.word	.LANCHOR9-(.LPIC3214+8)
	.word	.LC22-(.LPIC3215+8)
	.word	.LANCHOR9-(.LPIC3216+8)
	.word	.LC730-(.LPIC3217+8)
	.word	.LANCHOR9-(.LPIC3218+8)
	.word	.LC731-(.LPIC3219+8)
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_rx_push
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	sub	r8, r4, #8
	strd	r6, [sp, #8]
	sub	r6, r0, #28
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L12933
	ldr	r10, [r4, #-8]
	ldr	r3, [r3, #92]
	cmp	r8, r10
	str	r3, [sp, #12]
	beq	.L12915
	ldr	r3, .L12936
	sub	fp, r4, #16
	ldr	r5, .L12936+4
.LPIC3221:
	add	r3, pc, r3
.LPIC3220:
	add	r5, pc, r5
	str	r3, [sp, #8]
	sub	r5, r5, #3696
	mov	r3, fp
	sub	r5, r5, #4
	mov	fp, r10
	mov	r10, r8
	mov	r8, r3
.L12922:
	ldr	lr, [fp, #8]
	sub	r7, fp, #36
	cmn	lr, #108
	beq	.L12915
	cmp	lr, #0
	mov	r2, r6
	ldr	r0, [sp, #8]
	mov	r1, r5
	beq	.L12917
	ldr	r3, [r4, #-28]
	str	lr, [sp]
	bl	printk(PLT)
.L12917:
	ldr	r3, [r4, #80]
	mov	r0, fp
	cmp	r3, #0
	beq	.L12934
	bl	list_del(PLT)
	ldr	r3, [r4, #20]
	mov	r1, r7
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #20]
	bl	gsdio_write(PLT)
	ldr	r3, [r4, #68]
	mov	r2, r0
	mov	r1, r8
	mov	r0, fp
	cmp	r3, #0
	beq	.L12935
	cmp	r2, #0
	bne	.L12921
	ldr	r3, [r4, #-20]
	cmp	r3, #0
	bne	.L12921
	ldr	r2, [r4, #-16]
	bl	__list_add(PLT)
	ldr	r3, [r4, #16]
	ldr	fp, [r4, #-8]
	add	r3, r3, #1
	cmp	r10, fp
	str	r3, [r4, #16]
	bne	.L12922
.L12915:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx(PLT)
.L12935:
	str	r3, [r4, #-20]
	mov	r1, r7
	ldr	r0, [sp, #12]
	bl	gsdio_free_req(PLT)
.L12933:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L12921:
	mov	r8, r10
	mov	r0, fp
	ldr	r2, [r4, #-8]
	mov	r1, r8
	bl	__list_add(PLT)
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
	b	.L12915
.L12934:
	ldr	r1, .L12936+8
	ldr	r0, .L12936+12
.LPIC3222:
	add	r1, pc, r1
	sub	r1, r1, #3696
.LPIC3223:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, fp
	bl	__list_del_entry(PLT)
	ldr	r2, [r4, #-16]
	mov	r0, fp
	sub	r1, r4, #16
	bl	__list_add(PLT)
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L12915
.L12937:
	.align	2
.L12936:
	.word	.LC200-(.LPIC3221+8)
	.word	.LANCHOR9-(.LPIC3220+8)
	.word	.LANCHOR9-(.LPIC3222+8)
	.word	.LC732-(.LPIC3223+8)
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_read_pending
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L12943
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L12938
.L12942:
	b	.L12942
.L12938:
	bx	lr
.L12943:
	ldr	r1, .L12944
	ldr	r0, .L12944+4
.LPIC3224:
	add	r1, pc, r1
	sub	r1, r1, #3680
.LPIC3225:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L12945:
	.align	2
.L12944:
	.word	.LANCHOR9-(.LPIC3224+8)
	.word	.LC22-(.LPIC3225+8)
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L12954
	sub	r5, r0, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L12948
	ldr	r1, [r4, #48]
	ldr	r3, [r4, #36]
	cmp	r1, #0
	ldr	r9, [r3, #88]
	bne	.L12955
.L12948:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq(PLT)
.L12954:
	ldr	r1, .L12957
	ldr	r0, .L12957+4
.LPIC3226:
	add	r1, pc, r1
	sub	r1, r1, #3664
.LPIC3227:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending(PLT)
.L12955:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	ip, .L12957+8
	mvn	r1, #18
	mov	r2, r8
	ldr	r0, .L12957+12
	ldr	r3, [r4, #-60]
	str	r1, [sp]
.LPIC3228:
	add	ip, pc, ip
.LPIC3229:
	add	r0, pc, r0
	sub	r1, ip, #3664
	bl	printk(PLT)
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L12956
	mov	r1, r7
	mov	r0, r6
	ldr	r2, [r4, #-8]
	bl	__list_add(PLT)
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L12948
.L12956:
	mov	r1, r10
	mov	r0, r9
	bl	gsdio_free_req(PLT)
	b	.L12948
.L12958:
	.align	2
.L12957:
	.word	.LANCHOR9-(.LPIC3226+8)
	.word	.LC733-(.LPIC3227+8)
	.word	.LANCHOR9-(.LPIC3228+8)
	.word	.LC734-(.LPIC3229+8)
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r7
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #96]
	mov	r8, r0
	cmp	r2, #0
	beq	.L12965
	ldr	ip, .L12968
	add	r9, r4, #12
	mov	r3, #2048
	ldr	r0, [r2, #92]
	mov	r1, r9
	mov	r2, #8
.LPIC3237:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r10, r0, #0
	bne	.L12966
	ldr	ip, .L12968+4
	mov	r6, #8
	mov	r3, #2048
	ldr	r0, [r4, #96]
	mov	r2, r6
	add	r1, r4, #52
	str	r6, [r4, #44]
.LPIC3236:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	ldr	r0, [r0, #88]
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r5, r0, #0
	bne	.L12967
	mov	r1, r8
	mov	r0, r7
	str	r6, [r4, #76]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	gsdio_start_rx(PLT)
	ldr	r3, .L12968+8
	add	r2, r4, #60
	mov	r0, #4
.LPIC3235:
	add	r3, pc, r3
	ldr	r1, [r3, #2596]
	bl	queue_work_on(PLT)
	mov	r0, r5
.L12961:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12965:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L12961
.L12967:
	ldr	r3, [r4, #96]
	mov	r1, r9
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests(PLT)
	mov	r1, r8
	mov	r0, r7
	str	r10, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L12968+12
	ldr	r0, .L12968+16
.LPIC3233:
	add	r1, pc, r1
.LPIC3234:
	add	r0, pc, r0
	sub	r1, r1, #3648
	bl	printk(PLT)
	mov	r0, r5
	b	.L12961
.L12966:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L12968+20
	ldr	r0, .L12968+24
.LPIC3231:
	add	r1, pc, r1
.LPIC3232:
	add	r0, pc, r0
	sub	r1, r1, #3648
	bl	printk(PLT)
	mov	r0, r10
	b	.L12961
.L12969:
	.align	2
.L12968:
	.word	gsdio_read_complete(GOT_PREL)+(.-(.LPIC3237+8))
	.word	gsdio_write_complete(GOT_PREL)+(.-(.LPIC3236+8))
	.word	.LANCHOR1-(.LPIC3235+8)
	.word	.LANCHOR9-(.LPIC3233+8)
	.word	.LC736-(.LPIC3234+8)
	.word	.LANCHOR9-(.LPIC3231+8)
	.word	.LC735-(.LPIC3232+8)
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #104
	ldr	r3, .L12974
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mul	r1, r1, r0
.LPIC3238:
	add	r3, pc, r3
	add	r2, r3, r1
	ldr	r4, [r2, #308]
	add	r3, r2, #312
	cmp	r4, #0
	beq	.L12973
	mov	r0, r3
	bl	platform_driver_unregister(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L12973:
	ldr	r1, .L12974+4
	mov	r2, r0
	ldr	r0, .L12974+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3240:
	add	r1, pc, r1
.LPIC3241:
	add	r0, pc, r0
	sub	r1, r1, #3632
	b	printk(PLT)
.L12975:
	.align	2
.L12974:
	.word	.LANCHOR1-(.LPIC3238+8)
	.word	.LANCHOR9-(.LPIC3240+8)
	.word	.LC90-(.LPIC3241+8)
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	moveq	r2, #1
	streq	r3, [r1, #176]
	beq	.L12978
	mov	ip, #8
	mov	r2, #9
	mov	r3, ip
	str	ip, [r1, #176]
.L12978:
	tst	r0, #64
	movne	r3, r2
	strne	r2, [r1, #176]
	tst	r0, #256
	ldr	r0, [r1, #96]
	orrne	r3, r3, #2
	strne	r3, [r1, #176]
	cmp	r0, #0
	beq	.L12976
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L12976
	mov	r1, r3
	bx	r2
.L12976:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13012
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3242:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r5, #284]
	cmp	r7, #0
	beq	.L13009
	ldr	r9, .L13012+4
	mov	r8, r0
	add	r5, r5, #288
	ldr	r3, .L13012+8
	mov	r6, #0
.LPIC3245:
	add	r9, pc, r9
.LPIC3244:
	add	r3, pc, r3
	str	r3, [sp, #4]
.L13000:
	ldr	r4, [r5, #20]
	mov	r2, #9
	ldr	r1, [r8]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	subs	r3, r0, #0
	mov	r2, #1
	bne	.L12996
	ldr	r7, [r4, #96]
	mov	r1, r4
	add	fp, r4, #4
	str	r3, [r4, #108]
	str	r3, [r4, #112]
	str	r2, [r4, #116]
	cmp	r7, #0
	beq	.L13011
	bl	gsdio_ctrl_modem_status(PLT)
	ldr	r0, [r7, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12998
	blx	r3
.L12998:
	ldr	r0, [r7, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12999
	blx	r3
.L12999:
	add	r0, r4, #28
	bl	cancel_work_sync(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	add	r1, r4, #12
	ldr	r0, [r7, #92]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #92]
	add	r1, r4, #20
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #88]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, fp
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, [r9, #284]
.L12996:
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r6, r7
	bcc	.L13000
.L13009:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13011:
	ldr	r3, [sp, #4]
	ldr	r7, [r3, #284]
	b	.L12996
.L13013:
	.align	2
.L13012:
	.word	.LANCHOR1-(.LPIC3242+8)
	.word	.LANCHOR1-(.LPIC3245+8)
	.word	.LANCHOR1-(.LPIC3244+8)
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.global	gsdio_ch_notify
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #2
	beq	.L13017
	cmp	r1, #1
	beq	.L13018
	bx	lr
.L13018:
	ldr	r3, .L13019
	add	r2, r0, #60
	mov	r0, #4
.LPIC3247:
	add	r3, pc, r3
	ldr	r1, [r3, #2596]
	b	queue_work_on(PLT)
.L13017:
	ldr	r3, .L13019+4
	add	r2, r0, #28
	mov	r0, #4
.LPIC3246:
	add	r3, pc, r3
	ldr	r1, [r3, #2596]
	b	queue_work_on(PLT)
.L13020:
	.align	2
.L13019:
	.word	.LANCHOR1-(.LPIC3247+8)
	.word	.LANCHOR1-(.LPIC3246+8)
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L13027
	strd	r6, [sp, #8]
	ldr	r6, .L13027+4
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC3248:
	add	r6, pc, r6
	ldr	r3, [r6, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13024
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13026
.L13022:
	mov	r5, #0
	str	r8, [r4]
	add	r2, r4, #32
	mov	ip, #65024
	add	r10, r4, #12
	str	r5, [r4, #4]
	ldr	r1, [r7]	@ unaligned
	movt	ip, 65535
	add	lr, r4, #20
	add	r3, r4, #52
	str	r1, [r4, #100]
	ldrh	r0, [r7, #4]	@ unaligned
	add	r1, r4, #64
	strh	r0, [r4, #104]	@ movhi
	ldrb	r7, [r7, #6]	@ zero_extendqisi2
	add	r0, r4, #84
	str	r2, [r4, #32]
	str	r2, [r4, #36]
	ldr	r2, .L13027+8
	str	ip, [r4, #28]
	strb	r7, [r4, #106]
	ldr	r7, .L13027+12
	str	r10, [r4, #12]
	str	r10, [r4, #16]
	add	r10, r4, #128
	str	lr, [r4, #20]
	str	lr, [r4, #24]
	ldr	r2, [r6, r2]
	str	r1, [r4, #64]
	ldr	lr, .L13027+16
	str	r1, [r4, #68]
	ldr	r1, .L13027+20
	str	ip, [r4, #60]
	str	r3, [r4, #52]
	str	r3, [r4, #56]
.LPIC3251:
	add	lr, pc, lr
	mov	r3, r5
	str	r2, [r4, #40]
	ldr	fp, [r6, r1]
	mov	r2, r5
	str	ip, [r4, #80]
	mov	r1, r5
	str	r0, [r4, #84]
	str	r0, [r4, #88]
	add	r0, r4, #140
	str	fp, [r4, #72]
	ldr	r7, [r6, r7]
	str	ip, [r4, #124]
	str	lr, [r4, #136]
	str	r10, [r4, #128]
	str	r7, [r4, #92]
	str	r10, [r4, #132]
	bl	init_timer_key(PLT)
	ldr	r2, .L13027+24
	mov	r0, #104
	add	lr, r4, #124
	ldr	r3, .L13027+28
	ldr	ip, .L13027+32
	mul	r0, r0, r8
	ldr	r1, .L13027+36
	ldr	r6, [r6, r2]
	str	lr, [r4, #160]
.LPIC3252:
	add	r3, pc, r3
	add	r2, r3, r0
.LPIC3254:
	add	ip, pc, ip
.LPIC3256:
	add	r1, pc, r1
	add	r0, r2, #312
	str	r6, [r4, #156]
	str	r4, [r2, #308]
	str	r9, [r4, #120]
	str	ip, [r2, #312]
	str	r1, [r2, #316]
	ldr	r3, [r9]
	str	r5, [r2, #340]
	str	r3, [r2, #332]
	bl	platform_driver_register(PLT)
	mov	r0, r5
.L13023:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13024:
	mov	r4, #16
	b	.L13022
.L13026:
	ldr	r1, .L13027+40
	ldr	r0, .L13027+44
.LPIC3249:
	add	r1, pc, r1
.LPIC3250:
	add	r0, pc, r0
	sub	r1, r1, #3616
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13023
.L13028:
	.align	2
.L13027:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3248+8)
	.word	gsdio_rx_push(GOT)
	.word	gsdio_ctrl_wq(GOT)
	.word	gsdio_open_work-(.LPIC3251+8)
	.word	gsdio_tx_pull(GOT)
	.word	delayed_work_timer_fn(GOT)
	.word	.LANCHOR1-(.LPIC3252+8)
	.word	gsdio_ch_probe-(.LPIC3254+8)
	.word	gsdio_ch_remove-(.LPIC3256+8)
	.word	.LANCHOR9-(.LPIC3249+8)
	.word	.LC737-(.LPIC3250+8)
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13046
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC3260:
	add	r3, pc, r3
	ldr	r2, [r3, #284]
	cmp	r1, r2
	bcs	.L13041
	cmp	r0, #0
	mov	r4, r0
	beq	.L13042
	mov	r2, #104
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #308]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13046+4
	mov	r1, r0
	str	r4, [r5, #96]
	mov	r0, r6
.LPIC3271:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13043
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13044
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L13045
.L13031:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13045:
	mov	r0, r5
	bl	gsdio_start_io(PLT)
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13031
	ldr	r1, [r5, #176]
	mov	r0, r4
	blx	r3
	b	.L13031
.L13044:
	ldr	r1, .L13046+8
	mov	r2, r6
	ldr	r0, .L13046+12
.LPIC3269:
	add	r1, pc, r1
	sub	r1, r1, #3584
.LPIC3270:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L13031
.L13043:
	ldr	r1, .L13046+16
	mov	r2, r6
	ldr	r0, .L13046+20
.LPIC3267:
	add	r1, pc, r1
	sub	r1, r1, #3584
.LPIC3268:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L13031
.L13042:
	ldr	r1, .L13046+24
	mvn	r6, #21
	ldr	r0, .L13046+28
.LPIC3263:
	add	r1, pc, r1
	sub	r1, r1, #3584
.LPIC3264:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13031
.L13041:
	ldr	r3, .L13046+32
	mov	r2, r1
	mvn	r6, #21
	ldr	r0, .L13046+36
.LPIC3261:
	add	r3, pc, r3
	sub	r1, r3, #3584
.LPIC3262:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13031
.L13047:
	.align	2
.L13046:
	.word	.LANCHOR1-(.LPIC3260+8)
	.word	gsdio_ctrl_notify_modem(GOT_PREL)+(.-(.LPIC3271+8))
	.word	.LANCHOR9-(.LPIC3269+8)
	.word	.LC738-(.LPIC3270+8)
	.word	.LANCHOR9-(.LPIC3267+8)
	.word	.LC738-(.LPIC3268+8)
	.word	.LANCHOR9-(.LPIC3263+8)
	.word	.LC91-(.LPIC3264+8)
	.word	.LANCHOR9-(.LPIC3261+8)
	.word	.LC90-(.LPIC3262+8)
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13054
.LPIC3272:
	add	r3, pc, r3
	ldr	r2, [r3, #284]
	cmp	r1, r2
	bcs	.L13052
	cmp	r0, #0
	beq	.L13053
	mov	ip, #104
	mov	r2, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	mov	r5, r0
	mov	r0, #4
	mla	r2, ip, r2, r3
	strd	r6, [sp, #8]
	mov	r6, #0
	str	r8, [sp, #16]
	ldr	r1, [r3, #2596]
	ldr	r4, [r2, #308]
	add	r2, r4, #80
	add	r7, r4, r0
	str	r6, [r4, #180]
	bl	queue_work_on(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #96]
	mov	r0, r7
	str	r6, [r4, #188]
	str	r6, [r4, #184]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r1, r4, #12
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests(PLT)
	add	r1, r4, #20
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r5, #88]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	str	r6, [r4, #44]
	mov	r0, r7
	mov	r1, r8
	str	r6, [r4, #48]
	str	r6, [r4, #76]
	str	r6, [r4, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L13052:
	ldr	r3, .L13054+4
	mov	r2, r1
	ldr	r0, .L13054+8
.LPIC3273:
	add	r3, pc, r3
	sub	r1, r3, #3568
.LPIC3274:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13053:
	ldr	r1, .L13054+12
	ldr	r0, .L13054+16
.LPIC3275:
	add	r1, pc, r1
	sub	r1, r1, #3568
.LPIC3276:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13055:
	.align	2
.L13054:
	.word	.LANCHOR1-(.LPIC3272+8)
	.word	.LANCHOR9-(.LPIC3273+8)
	.word	.LC90-(.LPIC3274+8)
	.word	.LANCHOR9-(.LPIC3275+8)
	.word	.LC91-(.LPIC3276+8)
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #1
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	bhi	.L13077
	ldr	ip, .L13080
	mov	r5, #0
	mov	lr, #8
	ldr	r0, .L13080+4
	mvn	r7, #127
	mov	r4, #37
	ldr	r6, .L13080+8
	mov	r1, #10
	str	r5, [sp]
	mov	r3, r5
	movt	r1, 2
	strb	r5, [sp, #11]
.LPIC3282:
	add	ip, pc, ip
	mov	r2, #1
	strb	r5, [sp, #12]
.LPIC3281:
	add	r0, pc, r0
	strb	r5, [sp, #14]
	str	ip, [sp, #4]
.LPIC3283:
	add	r6, pc, r6
	strb	r5, [sp, #15]
	strb	r7, [sp, #9]
	strb	r4, [sp, #10]
	strb	lr, [sp, #13]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r6, #2596]
	beq	.L13078
	ldr	r4, .L13080+12
	add	r0, r6, #288
	add	r9, sp, #9
	ldr	r10, .L13080+16
	ldr	r7, .L13080+20
.LPIC3287:
	add	r4, pc, r4
	add	r4, r4, #3888
.LPIC3288:
	add	r10, pc, r10
	add	r4, r4, #4
	mov	r1, r10
	mov	r2, r4
	bl	__mutex_init(PLT)
.LPIC3306:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	mov	r0, r5
	mov	r1, r9
	mov	r2, r7
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #284]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #284]
	bne	.L13062
	cmp	r8, #2
	bne	.L13063
	mov	r2, r4
	mov	r1, r10
	add	r0, r6, #392
	bl	__mutex_init(PLT)
	add	r2, r7, #12
	mov	r1, r9
	mov	r0, #1
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #284]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #284]
	bne	.L13062
.L13063:
	ldr	r0, .L13080+24
	mov	r1, #0
.LPIC3284:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13079
	ldr	ip, .L13080+28
	mov	r2, r0
	mov	r3, #0
	ldr	r0, .L13080+32
	mov	r1, #292
.LPIC3304:
	add	ip, pc, ip
	add	ip, ip, #340
.LPIC3303:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, #0
.L13058:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13079:
	mov	r0, #0
	b	.L13058
.L13062:
	ldr	r1, .L13080+36
	ldr	r4, .L13080+40
	ldr	r0, .L13080+44
.LPIC3299:
	add	r1, pc, r1
.LPIC3298:
	add	r4, pc, r4
	sub	r1, r1, #3552
.LPIC3300:
	add	r0, pc, r0
	sub	r1, r1, #8
	str	r3, [r4, #284]
	bl	printk(PLT)
	ldr	r3, [r4, #284]
	cmp	r3, #0
	movne	r6, r4
	movne	r4, #0
	beq	.L13065
.L13064:
	mov	r0, r4
	add	r4, r4, #1
	bl	gsdio_port_free(PLT)
	ldr	r3, [r6, #284]
	cmp	r4, r3
	bcc	.L13064
.L13065:
	ldr	r3, .L13080+48
.LPIC3302:
	add	r3, pc, r3
	ldr	r0, [r3, #2596]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	b	.L13058
.L13078:
	ldr	r1, .L13080+52
	ldr	r0, .L13080+56
.LPIC3285:
	add	r1, pc, r1
	sub	r1, r1, #3552
.LPIC3286:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13058
.L13077:
	ldr	r1, .L13080+60
	mov	r2, r8
	mov	r3, #2
	ldr	r0, .L13080+64
.LPIC3279:
	add	r1, pc, r1
	sub	r1, r1, #3552
.LPIC3280:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13058
.L13081:
	.align	2
.L13080:
	.word	.LC721-(.LPIC3282+8)
	.word	.LC208-(.LPIC3281+8)
	.word	.LANCHOR1-(.LPIC3283+8)
	.word	.LANCHOR4-(.LPIC3287+8)
	.word	.LC742-(.LPIC3288+8)
	.word	sport_info(GOT_PREL)+(.-(.LPIC3306+8))
	.word	.LC740-(.LPIC3284+8)
	.word	.LANCHOR5-(.LPIC3304+8)
	.word	.LC139-(.LPIC3303+8)
	.word	.LANCHOR9-(.LPIC3299+8)
	.word	.LANCHOR1-(.LPIC3298+8)
	.word	.LC743-(.LPIC3300+8)
	.word	.LANCHOR1-(.LPIC3302+8)
	.word	.LANCHOR9-(.LPIC3285+8)
	.word	.LC741-(.LPIC3286+8)
	.word	.LANCHOR9-(.LPIC3279+8)
	.word	.LC739-(.LPIC3280+8)
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13093
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3307:
	add	r3, pc, r3
	ldr	r2, [r3, #496]
	cmp	r1, r2
	bcs	.L13089
	cmp	r0, #0
	mov	r4, r0
	beq	.L13090
	mov	r2, #104
	mov	r6, #0
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #520]
	add	r7, r5, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13093+4
	mov	r1, r0
	str	r4, [r5, #68]
	mov	r0, r7
.LPIC3313:
	add	r3, pc, r3
	str	r3, [r4, #140]
	str	r6, [r5, #168]
	str	r6, [r5, #172]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L13091
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L13092
	ldr	r3, .L13093+8
	ldr	r2, [r4, #92]
.LPIC3318:
	add	r3, pc, r3
	ldr	r4, [r3, #-1184]
	str	r5, [r2]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r5, #76
	mov	r0, #4
	mov	r1, r4
	bl	queue_delayed_work_on(PLT)
.L13084:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13089:
	ldr	r3, .L13093+12
	mov	r2, r1
	mvn	r7, #21
	ldr	r0, .L13093+16
.LPIC3308:
	add	r3, pc, r3
	sub	r1, r3, #3536
.LPIC3309:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13084
.L13092:
	ldr	r1, .L13093+20
	ldr	r0, .L13093+24
	ldr	r2, [r4, #92]
.LPIC3316:
	add	r1, pc, r1
	sub	r1, r1, #3536
.LPIC3317:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	str	r6, [r5, #68]
	ldr	r3, [r4, #88]
	str	r6, [r3]
	b	.L13084
.L13091:
	ldr	r1, .L13093+28
	ldr	r0, .L13093+32
	ldr	r2, [r4, #88]
.LPIC3314:
	add	r1, pc, r1
	sub	r1, r1, #3536
.LPIC3315:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	str	r6, [r5, #68]
	b	.L13084
.L13090:
	ldr	r1, .L13093+36
	mvn	r7, #21
	ldr	r0, .L13093+40
.LPIC3310:
	add	r1, pc, r1
	sub	r1, r1, #3536
.LPIC3311:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13084
.L13094:
	.align	2
.L13093:
	.word	.LANCHOR1-(.LPIC3307+8)
	.word	gsmd_notify_modem-(.LPIC3313+8)
	.word	.LANCHOR4-(.LPIC3318+8)
	.word	.LANCHOR9-(.LPIC3308+8)
	.word	.LC744-(.LPIC3309+8)
	.word	.LANCHOR9-(.LPIC3316+8)
	.word	.LC213-(.LPIC3317+8)
	.word	.LANCHOR9-(.LPIC3314+8)
	.word	.LC212-(.LPIC3315+8)
	.word	.LANCHOR9-(.LPIC3310+8)
	.word	.LC91-(.LPIC3311+8)
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13118
.LPIC3319:
	add	r3, pc, r3
	ldr	r2, [r3, #496]
	cmp	r1, r2
	bcs	.L13114
	cmp	r0, #0
	beq	.L13115
	mov	r2, #104
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, #0
	str	lr, [sp, #32]
	mla	r1, r2, r1, r3
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	.pad #4
	sub	sp, sp, #4
	ldr	r5, [r1, #520]
	add	r7, r5, #4
	add	r10, r5, #12
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #68]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r9, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #92]
	str	r4, [r3]
	ldr	r0, [r9, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #88]
	mov	r0, r7
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #12]
	mov	r8, r0
	ldr	r6, [r9, #92]
	cmp	r10, r4
	beq	.L13098
.L13099:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #12]
	cmp	r10, r4
	bne	.L13099
	ldr	r6, [r9, #92]
.L13098:
	ldr	r4, [r5, #20]
	add	r10, r5, #20
	cmp	r10, r4
	beq	.L13104
.L13103:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #20]
	cmp	r10, r4
	bne	.L13103
.L13104:
	ldr	r4, [r5, #44]
	add	r10, r5, #44
	ldr	r6, [r9, #88]
	cmp	r10, r4
	beq	.L13102
.L13107:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #44]
	cmp	r10, r4
	bne	.L13107
.L13102:
	mov	r4, #0
	mov	r1, r8
	mov	r0, r7
	str	r4, [r5, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r5, #72]
	mov	r0, r4
	add	r1, r1, #8
	bl	_test_and_clear_bit(PLT)
	cmp	r0, r4
	bne	.L13116
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13095
.L13117:
	ldr	r3, .L13118+4
	add	r2, r5, #128
	mov	r0, #4
.LPIC3325:
	add	r3, pc, r3
	ldr	r1, [r3, #-1184]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L13116:
	ldr	r3, [r5, #72]
	str	r4, [r5, #160]
	mov	r1, r4
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset(PLT)
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L13117
.L13095:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13115:
	ldr	r1, .L13118+8
	ldr	r0, .L13118+12
.LPIC3322:
	add	r1, pc, r1
	sub	r1, r1, #3520
.LPIC3323:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13114:
	ldr	r3, .L13118+16
	mov	r2, r1
	ldr	r0, .L13118+20
.LPIC3320:
	add	r3, pc, r3
	sub	r1, r3, #3520
.LPIC3321:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13119:
	.align	2
.L13118:
	.word	.LANCHOR1-(.LPIC3319+8)
	.word	.LANCHOR4-(.LPIC3325+8)
	.word	.LANCHOR9-(.LPIC3322+8)
	.word	.LC91-(.LPIC3323+8)
	.word	.LANCHOR9-(.LPIC3320+8)
	.word	.LC90-(.LPIC3321+8)
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #1
	strd	r10, [sp, #24]
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #24]
	bhi	.L13149
	ldr	ip, .L13156
	mov	r9, #0
	mov	r1, #10
	ldr	r0, .L13156+4
	mov	r3, r9
	movt	r1, 2
	str	r9, [sp]
	mov	r2, #1
.LPIC3329:
	add	ip, pc, ip
.LPIC3328:
	add	r0, pc, r0
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13156+8
	cmp	r0, r9
.LPIC3330:
	add	r3, pc, r3
	str	r0, [r3, #-1184]
	beq	.L13150
	add	r3, r3, #3888
	ldr	r2, .L13156+12
	mov	r8, r9
	add	r3, r3, #4
	ldr	r10, .L13156+16
	str	r3, [sp, #16]
	ldr	r3, .L13156+20
.LPIC3334:
	add	r10, pc, r10
	add	r5, r10, #500
.LPIC3336:
	add	r3, pc, r3
	str	r3, [sp, #20]
	ldr	r3, .L13156+24
.LPIC3340:
	add	r3, pc, r3
	str	r3, [sp, #28]
.LPIC3357:
	ldr	r3, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #12]
	ldr	r3, .L13156+28
.LPIC3341:
	add	r3, pc, r3
	str	r3, [sp, #32]
	ldr	r3, .L13156+32
.LPIC3342:
	add	r3, pc, r3
	str	r3, [sp, #36]
	b	.L13128
.L13153:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13151
.L13126:
	add	r2, r4, #20
	ldr	r3, .L13156+36
	add	lr, r4, #56
	ldr	ip, [sp, #28]
	add	r1, r4, #32
	add	r0, r4, #44
	str	r2, [sp, #8]
	ldr	r2, [sp, #32]
	add	fp, r4, #12
	str	r8, [r4]
	add	r8, r8, #1
.LPIC3359:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r1, [r4, #32]
	str	ip, [r4, #40]
	add	ip, r4, #80
	str	r2, [r4, #64]
	ldr	r2, [sp, #36]
	str	r1, [r4, #36]
	mov	r1, r6
	add	r3, r9, r3
	str	r0, [r4, #44]
	add	r9, r9, #12
	str	r0, [r4, #48]
	add	r0, r4, #92
	str	r2, [r4, #88]
	ldr	r2, [sp, #8]
	str	r3, [r4, #72]
	mov	r3, r6
	str	lr, [r4, #56]
	str	lr, [r4, #60]
	str	r2, [r4, #20]
	str	r2, [r4, #24]
	mov	r2, r6
	str	ip, [r4, #80]
	str	ip, [r4, #84]
	str	r6, [r4, #4]
	str	r7, [r4, #28]
	str	r7, [r4, #52]
	str	r7, [r4, #76]
	str	fp, [r4, #12]
	str	fp, [r4, #16]
	bl	init_timer_key(PLT)
	add	ip, r4, #76
	ldr	r3, .L13156+40
	add	r1, r4, #132
	ldr	r2, .L13156+44
	str	r7, [r4, #128]
	add	r0, r5, #24
	str	ip, [r4, #112]
	ldr	lr, .L13156+48
	add	r5, r5, #104
	ldr	ip, .L13156+52
	str	r1, [r4, #132]
.LPIC3358:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r1, [r4, #136]
.LPIC3343:
	add	r2, pc, r2
.LPIC3344:
	add	lr, pc, lr
.LPIC3345:
	add	ip, pc, ip
	str	r2, [r4, #140]
	str	r3, [r4, #108]
	str	r4, [r5, #-84]
	str	lr, [r5, #-80]
	str	ip, [r5, #-76]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r6, [r5, #-52]
	str	r3, [r5, #-60]
	bl	platform_driver_register(PLT)
	ldr	r3, [sp, #24]
	cmp	r8, r3
	beq	.L13152
.L13128:
	ldr	r2, [sp, #16]
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #20]
	mov	r7, #65024
	bl	__mutex_init(PLT)
	ldr	r0, [sp, #12]
	movt	r7, 65535
	mov	r2, #176
	ldr	r3, [r10, #496]
	movw	r1, #32976
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #496]
	cmp	ip, r6
	mov	r0, ip
	bne	.L13153
	mov	r4, #16
	b	.L13126
.L13152:
	ldr	r0, .L13156+56
	mov	r1, r6
.LPIC3331:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13154
	ldr	ip, .L13156+60
	mov	r2, r0
	mov	r3, r6
	ldr	r0, .L13156+64
	mov	r1, #292
.LPIC3347:
	add	ip, pc, ip
	add	ip, ip, #448
.LPIC3346:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r6
.L13140:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13151:
	ldr	r1, .L13156+68
	mov	r2, r8
	ldr	r3, [r10, #496]
	ldr	r0, .L13156+72
.LPIC3352:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #3504
.LPIC3353:
	add	r0, pc, r0
	sub	r1, r1, #12
	str	r3, [r10, #496]
	bl	printk(PLT)
	ldr	r3, [r10, #496]
	cmp	r3, #0
	beq	.L13131
	ldr	r0, [r10, #520]
	cmp	r0, #0
	beq	.L13155
.L13132:
	cmp	r3, #1
	bls	.L13131
	ldr	r3, .L13156+76
.LPIC3348:
	add	r3, pc, r3
	ldr	r0, [r3, #624]
	cmp	r0, #0
	bne	.L13131
	bl	kfree(PLT)
.L13131:
	ldr	r3, .L13156+80
.LPIC3349:
	add	r3, pc, r3
	ldr	r0, [r3, #-1184]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13140
.L13154:
	mov	r0, r6
	b	.L13140
.L13155:
	bl	kfree(PLT)
	ldr	r3, [r10, #496]
	b	.L13132
.L13150:
	ldr	r1, .L13156+84
	ldr	r0, .L13156+88
.LPIC3332:
	add	r1, pc, r1
	sub	r1, r1, #3504
.LPIC3333:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13140
.L13149:
	mov	r2, r1
	ldr	r1, .L13156+92
	mov	r3, r0
	ldr	r0, .L13156+96
.LPIC3326:
	add	r1, pc, r1
	sub	r1, r1, #3504
.LPIC3327:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13140
.L13157:
	.align	2
.L13156:
	.word	.LC746-(.LPIC3329+8)
	.word	.LC208-(.LPIC3328+8)
	.word	.LANCHOR4-(.LPIC3330+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3357+8))
	.word	.LANCHOR1-(.LPIC3334+8)
	.word	.LC749-(.LPIC3336+8)
	.word	gsmd_rx_push-(.LPIC3340+8)
	.word	gsmd_tx_pull-(.LPIC3341+8)
	.word	gsmd_connect_work-(.LPIC3342+8)
	.word	smd_pi(GOT_PREL)+(.-(.LPIC3359+8))
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3358+8))
	.word	gsmd_disconnect_work-(.LPIC3343+8)
	.word	gsmd_ch_probe-(.LPIC3344+8)
	.word	gsmd_ch_remove-(.LPIC3345+8)
	.word	.LC747-(.LPIC3331+8)
	.word	.LANCHOR5-(.LPIC3347+8)
	.word	.LC139-(.LPIC3346+8)
	.word	.LANCHOR9-(.LPIC3352+8)
	.word	.LC750-(.LPIC3353+8)
	.word	.LANCHOR1-(.LPIC3348+8)
	.word	.LANCHOR4-(.LPIC3349+8)
	.word	.LANCHOR9-(.LPIC3332+8)
	.word	.LC748-(.LPIC3333+8)
	.word	.LANCHOR9-(.LPIC3326+8)
	.word	.LC745-(.LPIC3327+8)
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L13163
	ldr	r3, .L13169
	ldr	r2, [r4, #44]
.LPIC3360:
	add	r3, pc, r3
	ldr	r3, [r3, #2540]
	cmp	r2, r3
	bls	.L13162
	ldr	r3, [r4, #244]
	ldr	r5, .L13169+4
	add	r3, r3, #1
.LPIC3361:
	add	r5, pc, r5
	sub	r5, r5, #3504
	str	r3, [r4, #244]
	mov	r0, r5
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L13168
.L13163:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any(PLT)
.L13162:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #44]
	str	r6, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost(PLT)
.L13168:
	ldr	r0, .L13169+8
	mov	r1, r5
	ldr	r2, [r4, #244]
.LPIC3363:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13163
.L13170:
	.align	2
.L13169:
	.word	.LANCHOR2-(.LPIC3360+8)
	.word	.LANCHOR9-(.LPIC3361+8)
	.word	.LC751-(.LPIC3363+8)
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13174
	add	r2, r4, #80
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC3364:
	add	r3, pc, r3
	ldr	r1, [r3, #-1436]
	b	queue_work_on(PLT)
.L13175:
	.align	2
.L13174:
	.word	.LANCHOR4-(.LPIC3364+8)
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L13178
	cmp	r1, #1
	bne	.L13182
	mov	r1, r2
	b	gbam_data_write_done(PLT)
.L13182:
	bx	lr
.L13178:
	mov	r1, r2
	b	gbam_data_recv_cb(PLT)
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.global	gbam_disconnect
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L13209
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13210
.L13186:
	cmp	r4, #0
	beq	.L13192
	ldr	r3, .L13214
.LPIC3379:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r5, [r3, fp, asl #2]
	str	r4, [r5, #16]
.L13187:
	ldr	r9, .L13214+4
	add	r7, r5, #4
	mov	r6, #0
	mov	r0, r7
	add	r8, r5, #8
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	mov	r0, r8
.LPIC3375:
	add	r9, pc, r9
	bl	_raw_spin_lock(PLT)
	mov	r0, r8
	str	r6, [r5, #12]
	str	r6, [r9, #-1440]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r6, [r3]
	ldr	r3, [r4, #88]
	str	r6, [r3]
	beq	.L13211
	cmp	fp, #0
	cmpeq	r10, #6
	beq	.L13212
.L13183:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13210:
	ldr	r3, .L13214+8
.LPIC3368:
	add	r3, pc, r3
	ldr	r3, [r3, #3892]
	cmp	r1, r3
	blt	.L13186
	ldr	r1, .L13214+12
	mov	r2, fp
	ldr	r0, .L13214+16
.LPIC3369:
	add	r1, pc, r1
.LPIC3370:
	add	r0, pc, r0
.L13207:
	sub	r1, r1, #3472
	sub	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13209:
	ldr	r2, .L13214+20
.LPIC3365:
	add	r2, pc, r2
	ldr	r3, [r2, #2404]
	cmp	r1, r3
	bge	.L13213
	cmp	r0, #0
	beq	.L13192
	mov	r3, #84
	mla	r3, r3, fp, r2
	ldr	r5, [r3, #2408]
	str	r4, [r5, #16]
	mov	r0, r5
	bl	gbam_free_buffers(PLT)
	b	.L13187
.L13211:
	ldr	r1, [r9, #-1436]
	add	r2, r5, #300
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L13212:
	mov	r0, r6
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L13183
	ldr	r1, .L13214+24
	ldr	r0, .L13214+28
.LPIC3377:
	add	r1, pc, r1
.LPIC3378:
	add	r0, pc, r0
	b	.L13208
.L13192:
	ldr	r1, .L13214+32
	ldr	r0, .L13214+36
.LPIC3371:
	add	r1, pc, r1
.LPIC3372:
	add	r0, pc, r0
.L13208:
	sub	r1, r1, #3472
	sub	r1, r1, #12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13213:
	ldr	r1, .L13214+40
	mov	r2, fp
	ldr	r0, .L13214+44
.LPIC3366:
	add	r1, pc, r1
.LPIC3367:
	add	r0, pc, r0
	b	.L13207
.L13215:
	.align	2
.L13214:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3379+8))
	.word	.LANCHOR4-(.LPIC3375+8)
	.word	.LANCHOR4-(.LPIC3368+8)
	.word	.LANCHOR9-(.LPIC3369+8)
	.word	.LC753-(.LPIC3370+8)
	.word	.LANCHOR1-(.LPIC3365+8)
	.word	.LANCHOR9-(.LPIC3377+8)
	.word	.LC755-(.LPIC3378+8)
	.word	.LANCHOR9-(.LPIC3371+8)
	.word	.LC754-(.LPIC3372+8)
	.word	.LANCHOR9-(.LPIC3366+8)
	.word	.LC752-(.LPIC3367+8)
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	fp, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp, #4]
	beq	.L13240
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13241
.L13220:
	cmp	r10, #0
	beq	.L13227
	ldr	r3, .L13247
.LPIC3395:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
.L13221:
	ldr	r3, [r10, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13242
	ldr	r3, [r10, #84]
	str	r4, [r3]
	ldr	r3, [r10, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13243
	ldr	r3, [r10, #88]
	add	r7, r4, #4
	add	r8, r4, #8
	mov	r0, r7
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r5, #5
	str	r10, [r4, #12]
	beq	.L13244
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #6
	beq	.L13245
	cmp	r5, #7
	bne	.L13225
	ldrb	r1, [sp, #4]	@ zero_extendqisi2
	add	r2, r4, #120
	add	r3, r4, #124
	str	r10, [r4, #16]
	strb	fp, [r4, #137]
	strd	r2, [r4, #140]
	strb	r1, [r4, #136]
.L13225:
	ldr	r3, .L13247+4
	str	r5, [r4, #132]
	add	r2, r4, #284
	mov	r0, #4
.LPIC3394:
	add	r3, pc, r3
	ldr	r1, [r3, #-1436]
	bl	queue_work_on(PLT)
.L13236:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13245:
	ldrb	r3, [sp, #4]	@ zero_extendqisi2
	str	r10, [r4, #16]
	strb	fp, [r4, #129]
	strb	r3, [r4, #128]
	b	.L13225
.L13241:
	ldr	r3, .L13247+8
.LPIC3383:
	add	r3, pc, r3
	ldr	r3, [r3, #3892]
	cmp	r1, r3
	blt	.L13220
	ldr	r3, .L13247+12
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13247+16
.LPIC3384:
	add	r3, pc, r3
	sub	r1, r3, #3456
.LPIC3385:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13236
.L13240:
	ldr	r2, .L13247+20
.LPIC3380:
	add	r2, pc, r2
	ldr	r3, [r2, #2404]
	cmp	r1, r3
	bge	.L13246
	cmp	r0, #0
	beq	.L13227
	mov	r3, #84
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #2408]
	b	.L13221
.L13244:
	mov	r0, r8
	str	r6, [r4, #264]
	str	r6, [r4, #260]
	str	r6, [r4, #240]
	str	r6, [r4, #244]
	str	r6, [r4, #248]
	str	r6, [r4, #268]
	str	r6, [r4, #272]
	str	r6, [r4, #276]
	str	r6, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13225
.L13243:
	ldr	r1, .L13247+24
	ldr	r0, .L13247+28
	ldr	r2, [r10, #88]
.LPIC3392:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3393:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [r10, #84]
	mov	r2, #0
	str	r2, [r3]
	b	.L13236
.L13242:
	ldr	r1, .L13247+32
	ldr	r0, .L13247+36
	ldr	r2, [r10, #84]
.LPIC3390:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3391:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13236
.L13227:
	ldr	r1, .L13247+40
	mvn	r6, #18
	ldr	r0, .L13247+44
.LPIC3386:
	add	r1, pc, r1
	sub	r1, r1, #3456
.LPIC3387:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13236
.L13246:
	ldr	r3, .L13247+48
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13247+52
.LPIC3381:
	add	r3, pc, r3
	sub	r1, r3, #3456
.LPIC3382:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L13236
.L13248:
	.align	2
.L13247:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3395+8))
	.word	.LANCHOR4-(.LPIC3394+8)
	.word	.LANCHOR4-(.LPIC3383+8)
	.word	.LANCHOR9-(.LPIC3384+8)
	.word	.LC90-(.LPIC3385+8)
	.word	.LANCHOR1-(.LPIC3380+8)
	.word	.LANCHOR9-(.LPIC3392+8)
	.word	.LC213-(.LPIC3393+8)
	.word	.LANCHOR9-(.LPIC3390+8)
	.word	.LC212-(.LPIC3391+8)
	.word	.LANCHOR9-(.LPIC3386+8)
	.word	.LC754-(.LPIC3387+8)
	.word	.LANCHOR9-(.LPIC3381+8)
	.word	.LC90-(.LPIC3382+8)
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13297
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3404:
	add	r2, pc, r2
	str	r1, [sp, #12]
	orrs	r1, r0, r3
	str	r2, [sp, #8]
	beq	.L13250
	cmp	r3, #3
	cmpls	r0, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L13250
	ldr	r0, .L13297+4
	str	r3, [sp]
	mov	r2, #1
	mov	r1, #10
.LPIC3398:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13297+8
	cmp	r0, #0
.LPIC3399:
	add	r3, pc, r3
	str	r0, [r3, #-1436]
	beq	.L13253
	cmp	r4, #0
	beq	.L13259
	ldr	r4, .L13297+12
	ldr	r3, .L13297+16
.LPIC3402:
	add	r4, pc, r4
	ldr	r2, [r4, #2404]
	add	r2, r2, #1
	str	r2, [r4, #2404]
	ldr	r2, [sp, #8]
	ldr	r10, [r2, r3]
	ldr	r0, [r10, #36]
	cmp	r0, #0
	beq	.L13272
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r2, r0, #0
	beq	.L13294
.L13257:
	ldr	r1, .L13297+20
	add	fp, r2, #288
	mov	lr, #65024
	ldr	r7, .L13297+24
	mov	r3, #0
	movt	lr, 65535
	ldr	r6, .L13297+28
	add	r10, r2, #304
	add	r9, r2, #28
	ldr	r5, .L13297+32
	add	r8, r2, #52
	str	fp, [r2, #288]
	ldr	r0, .L13297+36
.LPIC3409:
	add	r1, pc, r1
	str	fp, [r2, #292]
.LPIC3405:
	add	r7, pc, r7
	add	r1, r1, #2400
	str	lr, [r2, #284]
.LPIC3406:
	add	r6, pc, r6
	add	r1, r1, #8
	str	lr, [r2, #300]
.LPIC3407:
	add	r5, pc, r5
	mov	ip, r1
	str	r7, [r2, #296]
.LPIC3408:
	add	r0, pc, r0
	str	r6, [r2, #312]
	add	r7, r2, #36
	add	r6, r2, #84
	str	r5, [r2, #92]
	mov	fp, #8
	add	r5, r2, #100
	str	r0, [r2, #108]
	add	r0, r2, #60
	str	lr, [r2, #80]
	ldr	r4, .L13297+40
	str	lr, [r2, #96]
	ldr	lr, .L13297+44
	str	r0, [r2, #60]
	str	r0, [r2, #64]
	str	r2, [r2, #76]
.LPIC3411:
	add	r4, pc, r4
	str	r3, [r2]
.LPIC3412:
	add	lr, pc, lr
	str	r3, [r2, #4]
	str	r3, [r2, #8]
	str	r3, [r2, #48]
	str	r3, [r2, #44]
	str	r3, [r2, #72]
	str	r3, [r2, #68]
	str	r10, [r2, #304]
	str	r10, [r2, #308]
	str	r9, [r2, #28]
	str	r9, [r2, #32]
	str	r8, [r2, #52]
	str	r8, [r2, #56]
	str	r6, [r2, #84]
	str	r6, [r2, #88]
	str	r5, [r2, #100]
	str	r5, [r2, #104]
	str	r7, [r2, #36]
	str	r7, [r2, #40]
	str	fp, [r2, #24]
	str	r2, [ip], #4
	ldr	r2, .L13297+48
	mov	r0, ip
.LPIC3410:
	add	r2, pc, r2
	str	r2, [r1, #4]
	str	r3, [ip, #28]
	str	r4, [ip, #4]
	str	lr, [ip, #20]
	bl	platform_driver_register(PLT)
.L13259:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L13256
	ldr	r3, .L13297+16
	mov	r5, #65024
	mov	r4, #0
	ldr	r2, [sp, #8]
	movt	r5, 65535
	ldr	r6, .L13297+52
	ldr	r9, .L13297+56
	ldr	r8, .L13297+60
	ldr	r10, [r2, r3]
	ldr	r3, .L13297+64
.LPIC3418:
	add	r6, pc, r6
	ldr	r7, .L13297+68
.LPIC3414:
	add	r9, pc, r9
.LPIC3416:
	add	r8, pc, r8
	str	r6, [sp, #20]
.LPIC3419:
	add	r3, pc, r3
.LPIC3417:
	add	r7, pc, r7
	str	r3, [sp, #16]
	b	.L13264
.L13296:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L13295
.L13262:
	ldr	r6, [sp, #20]
	add	r2, r0, #336
	mov	fp, #0
	ldr	r3, .L13297+72
	add	lr, r0, #288
	add	ip, r0, #304
	str	r2, [r0, #336]
	add	r1, r0, #320
	str	r2, [r0, #340]
	ldr	r2, [sp, #8]
	str	r6, [r0, #328]
	ldr	r6, [sp, #16]
	str	r4, [r0]
	str	fp, [r0, #4]
	str	fp, [r0, #8]
	str	r5, [r0, #284]
	str	r8, [r0, #296]
	str	r5, [r0, #300]
	str	r7, [r0, #312]
	str	r5, [r0, #316]
	str	r5, [r0, #332]
	str	r6, [r0, #344]
	str	r0, [r0, #76]
	str	lr, [r0, #288]
	str	lr, [r0, #292]
	str	ip, [r0, #304]
	str	ip, [r0, #308]
	str	r1, [r0, #320]
	str	r1, [r0, #324]
	ldr	r3, [r2, r3]
	str	r0, [r3, r4, asl #2]
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	beq	.L13256
.L13264:
	ldr	r3, [r9, #3892]
	mov	r2, #348
	movw	r1, #32976
	ldr	ip, [r10, #36]
	add	r3, r3, #1
	subs	r0, ip, #0
	str	r3, [r9, #3892]
	bne	.L13296
	mov	r0, #16
	b	.L13262
.L13256:
	ldr	r0, .L13297+76
	mov	r1, #0
.LPIC3413:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r2, [sp, #8]
	cmp	r0, #0
	ldr	r3, .L13297+80
	ldr	r4, [r2, r3]
	str	r0, [r4]
	beq	.L13260
	cmn	r0, #4096
	bhi	.L13260
	ldr	lr, [sp, #8]
	mov	r2, r0
	mov	r3, #0
	ldr	ip, .L13297+84
	mov	r1, #292
	ldr	r0, .L13297+88
	ldr	ip, [lr, ip]
.LPIC3420:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L13265
	cmn	r0, #4096
	bhi	.L13265
.L13260:
	mov	r0, #0
.L13289:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13294:
	ldr	r1, .L13297+92
	ldr	r3, [r4, #2404]
	ldr	r0, .L13297+96
.LPIC3429:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #3440
.LPIC3430:
	add	r0, pc, r0
	sub	r1, r1, #12
	str	r3, [r4, #2404]
	bl	printk(PLT)
.L13266:
	ldr	r4, .L13297+100
.LPIC3421:
	add	r4, pc, r4
	ldr	r3, [r4, #2404]
	cmp	r3, #0
	ble	.L13271
	ldr	r0, [r4, #2408]
	cmp	r0, #0
	beq	.L13271
	bl	kfree(PLT)
	add	r0, r4, #2400
	add	r0, r0, #12
	bl	platform_driver_unregister(PLT)
.L13271:
	ldr	r5, .L13297+104
.LPIC3422:
	add	r5, pc, r5
	ldr	r3, [r5, #3892]
	cmp	r3, #0
	ble	.L13269
	ldr	r3, .L13297+72
	mov	r4, #0
	ldr	r2, [sp, #8]
	ldr	r6, [r2, r3]
.L13268:
	ldr	r0, [r6, r4, asl #2]
	add	r4, r4, #1
	bl	kfree(PLT)
	ldr	r3, [r5, #3892]
	cmp	r3, r4
	bgt	.L13268
.L13269:
	ldr	r3, .L13297+108
.LPIC3425:
	add	r3, pc, r3
	ldr	r0, [r3, #-1436]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13289
.L13272:
	mov	r2, #16
	b	.L13257
.L13295:
	ldr	r1, .L13297+112
	mov	r2, r4
	ldr	r3, [r9, #3892]
	ldr	r0, .L13297+116
.LPIC3433:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #3440
	sub	r1, r1, #12
.LPIC3434:
	add	r0, pc, r0
	str	r3, [r9, #3892]
	bl	printk(PLT)
	b	.L13266
.L13265:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4]
	b	.L13289
.L13253:
	ldr	r1, .L13297+120
	ldr	r0, .L13297+124
.LPIC3400:
	add	r1, pc, r1
	sub	r1, r1, #3440
.LPIC3401:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13289
.L13250:
	ldr	r1, .L13297+128
	mov	r2, r4
	ldr	r0, .L13297+132
	ldr	r3, [sp, #12]
.LPIC3396:
	add	r1, pc, r1
	sub	r1, r1, #3440
.LPIC3397:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13289
.L13298:
	.align	2
.L13297:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3404+8)
	.word	.LC757-(.LPIC3398+8)
	.word	.LANCHOR4-(.LPIC3399+8)
	.word	.LANCHOR1-(.LPIC3402+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR1-(.LPIC3409+8)
	.word	gbam_connect_work-(.LPIC3405+8)
	.word	gbam_disconnect_work-(.LPIC3406+8)
	.word	gbam_data_write_tobam-(.LPIC3407+8)
	.word	gbam_write_data_tohost_w-(.LPIC3408+8)
	.word	gbam_data_ch_remove-(.LPIC3411+8)
	.word	.LC211-(.LPIC3412+8)
	.word	gbam_data_ch_probe-(.LPIC3410+8)
	.word	gbam2bam_suspend_work-(.LPIC3418+8)
	.word	.LANCHOR4-(.LPIC3414+8)
	.word	gbam2bam_connect_work-(.LPIC3416+8)
	.word	gbam2bam_resume_work-(.LPIC3419+8)
	.word	gbam2bam_disconnect_work-(.LPIC3417+8)
	.word	bam2bam_ports(GOT)
	.word	.LC759-(.LPIC3413+8)
	.word	gbam_dent(GOT)
	.word	gbam_stats_ops(GOT)
	.word	.LC139-(.LPIC3420+8)
	.word	.LANCHOR9-(.LPIC3429+8)
	.word	.LC750-(.LPIC3430+8)
	.word	.LANCHOR1-(.LPIC3421+8)
	.word	.LANCHOR4-(.LPIC3422+8)
	.word	.LANCHOR4-(.LPIC3425+8)
	.word	.LANCHOR9-(.LPIC3433+8)
	.word	.LC750-(.LPIC3434+8)
	.word	.LANCHOR9-(.LPIC3400+8)
	.word	.LC758-(.LPIC3401+8)
	.word	.LANCHOR9-(.LPIC3396+8)
	.word	.LC756-(.LPIC3397+8)
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L13300
.LPIC3436:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove_recursive(PLT)
.L13301:
	.align	2
.L13300:
	.word	gbam_dent(GOT_PREL)+(.-(.LPIC3436+8))
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, .L13309
	str	lr, [sp, #12]
.LPIC3437:
	add	r6, pc, r6
	ldr	r3, [r6, #3896]
	cmp	r3, #0
	beq	.L13305
	ldr	r4, .L13309+4
	mov	r5, #0
.LPIC3447:
	add	r4, pc, r4
	add	r4, r4, #2512
.L13304:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #3896]
	cmp	r5, r3
	bcc	.L13304
.L13305:
	bl	gbam_cleanup(PLT)
	ldr	r3, .L13309+8
	mov	r2, #0
.LPIC3438:
	add	r3, pc, r3
	str	r2, [r3, #3896]
	str	r2, [r3, #3900]
	str	r2, [r3, #3904]
	str	r2, [r3, #3908]
	str	r2, [r3, #3912]
	str	r2, [r3, #3916]
	str	r2, [r3, #3920]
	str	r2, [r3, #3924]
	str	r2, [r3, #3928]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13310:
	.align	2
.L13309:
	.word	.LANCHOR4-(.LPIC3437+8)
	.word	.LANCHOR1-(.LPIC3447+8)
	.word	.LANCHOR4-(.LPIC3438+8)
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.global	gbam_suspend
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	mov	r3, r1
	cmp	r2, #1
	bls	.L13313
	bx	lr
.L13313:
	ldr	r2, .L13314
	mov	r0, #4
	ldr	r1, .L13314+4
.LPIC3451:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC3450:
	add	r1, pc, r1
	ldr	r1, [r1, #-1436]
	ldr	r2, [r2, r3, asl #2]
	add	r2, r2, #316
	b	queue_work_on(PLT)
.L13315:
	.align	2
.L13314:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3451+8))
	.word	.LANCHOR4-(.LPIC3450+8)
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r3, .L13333
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #136]
.LPIC3452:
	add	r3, pc, r3
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	ldr	ip, [r0, #8]
	mov	r2, r1, asl #5
	sub	r2, r2, r1, asl #3
	ldr	r1, [ip, #36]
	add	r3, r3, r2
	ldr	r8, [r3, #2512]
	cmp	r1, #0
	beq	.L13317
	blx	r1
.L13317:
	add	r9, r6, #132
	add	r7, r6, #144
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #144]
	mov	r10, r0
	cmp	r4, r7
	beq	.L13322
.L13321:
	mov	r0, r4
	sub	r5, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r4, [r6, #144]
	cmp	r4, r7
	bne	.L13321
.L13322:
	mov	r3, #0
	mov	r1, r10
	mov	r0, r9
	str	r3, [r6, #152]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	sub	r0, r8, #5
	ldr	r3, .L13333+4
	cmp	r0, #5
	mov	r2, r1, asl #5
.LPIC3453:
	add	r3, pc, r3
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r1, [r3, #2520]
	bhi	.L13319
	mov	r3, #1
	mov	r3, r3, asl r0
	tst	r3, #57
	bne	.L13316
	tst	r3, #6
	beq	.L13319
	mov	r2, r8
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	uxtb	r1, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_suspend(PLT)
.L13316:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13319:
	mov	r0, r8
	bl	xport_to_str(PLT)
	ldr	r1, .L13333+8
	mov	r2, r0
	ldr	r0, .L13333+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3454:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3455:
	add	r0, pc, r0
	sub	r1, r1, #3440
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13334:
	.align	2
.L13333:
	.word	.LANCHOR1-(.LPIC3452+8)
	.word	.LANCHOR1-(.LPIC3453+8)
	.word	.LANCHOR9-(.LPIC3454+8)
	.word	.LC760-(.LPIC3455+8)
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.global	gbam_resume
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	mov	r3, r1
	cmp	r2, #1
	bls	.L13337
	bx	lr
.L13337:
	ldr	r2, .L13338
	mov	r0, #4
	ldr	r1, .L13338+4
.LPIC3458:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC3457:
	add	r1, pc, r1
	ldr	r1, [r1, #-1436]
	ldr	r2, [r2, r3, asl #2]
	add	r2, r2, #332
	b	queue_work_on(PLT)
.L13339:
	.align	2
.L13338:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3458+8))
	.word	.LANCHOR4-(.LPIC3457+8)
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r3, .L13347
	str	lr, [sp, #4]
	ldrb	r1, [r0, #116]	@ zero_extendqisi2
.LPIC3459:
	add	r3, pc, r3
	mov	r2, r1, asl #5
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r2, [r3, #2512]
	ldr	r1, [r3, #2520]
	sub	ip, r2, #5
	cmp	ip, #5
	bhi	.L13341
	mov	r3, #1
	mov	r3, r3, asl ip
	tst	r3, #57
	bne	.L13340
	tst	r3, #6
	beq	.L13341
	ldr	r4, [sp]
	uxtb	r1, r1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	gbam_resume(PLT)
.L13340:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13341:
	mov	r0, r2
	bl	xport_to_str(PLT)
	ldr	r1, .L13347+4
	mov	r2, r0
	ldr	r0, .L13347+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3461:
	add	r1, pc, r1
.LPIC3462:
	add	r0, pc, r0
	sub	r1, r1, #3424
	b	printk(PLT)
.L13348:
	.align	2
.L13347:
	.word	.LANCHOR1-(.LPIC3459+8)
	.word	.LANCHOR9-(.LPIC3461+8)
	.word	.LC760-(.LPIC3462+8)
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.global	gsmd_ctrl_connect
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r3, r1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	cmp	r3, #5
	str	lr, [sp, #12]
	bhi	.L13350
	ldr	r2, .L13364
	mov	r4, r0
	mov	r0, #84
.LPIC3463:
	add	r2, pc, r2
	mla	r3, r0, r3, r2
	ldr	r3, [r3, #708]
	cmp	r3, #0
	beq	.L13350
	cmp	r4, #0
	beq	.L13363
	mla	r1, r0, r1, r2
	ldr	r5, [r1, #708]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13364+4
	mov	r1, r0
	str	r4, [r5, #104]
	ldr	r3, .L13364+8
	mov	r0, r6
.LPIC3467:
	add	r2, pc, r2
.LPIC3468:
	add	r3, pc, r3
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L13364+12
	add	r2, r5, #112
	mov	r3, #0
	mov	r0, #4
.LPIC3469:
	add	r1, pc, r1
	ldr	r1, [r1, #-1464]
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
	b	.L13359
.L13350:
	ldr	r3, .L13364+16
	mov	r2, r1
	ldr	r0, .L13364+20
.LPIC3470:
	add	r3, pc, r3
.LPIC3471:
	add	r0, pc, r0
	sub	r1, r3, #3408
	bl	printk(PLT)
	mvn	r0, #18
.L13359:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13363:
	ldr	r1, .L13364+24
	ldr	r0, .L13364+28
.LPIC3464:
	add	r1, pc, r1
.LPIC3465:
	add	r0, pc, r0
	sub	r1, r1, #3408
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13359
.L13365:
	.align	2
.L13364:
	.word	.LANCHOR1-(.LPIC3463+8)
	.word	grmnet_ctrl_smd_send_cpkt_tomodem-(.LPIC3467+8)
	.word	gsmd_ctrl_send_cbits_tomodem-(.LPIC3468+8)
	.word	.LANCHOR4-(.LPIC3469+8)
	.word	.LANCHOR9-(.LPIC3470+8)
	.word	.LC761-(.LPIC3471+8)
	.word	.LANCHOR9-(.LPIC3464+8)
	.word	.LC754-(.LPIC3465+8)
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L13367
	ldr	r3, .L13387
	mov	r2, #84
.LPIC3472:
	add	r3, pc, r3
	mla	r3, r2, r1, r3
	ldr	r6, [r3, #708]
	cmp	r6, #0
	beq	.L13367
	cmp	r0, #0
	beq	.L13385
	add	r8, r6, #108
	mov	r4, r0
	mov	r0, r8
	add	r7, r6, #40
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r9, r0
	str	r3, [r6, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r6, #40]
	str	r3, [r6, #88]
	cmp	r7, r4
	beq	.L13373
.L13372:
	mov	r0, r4
	sub	r5, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r4, [r6, #40]
	cmp	r4, r7
	bne	.L13372
.L13373:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r1, r6, #8
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L13386
.L13371:
	ldr	r1, .L13387+4
	add	r2, r6, #164
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r0, #4
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
.LPIC3475:
	add	r1, pc, r1
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r1, #-1464]
	b	queue_delayed_work_on(PLT)
.L13367:
	ldr	r3, .L13387+8
	mov	r2, r1
	ldr	r0, .L13387+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3476:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	sub	r1, r3, #3376
	ldr	r10, [sp, #24]
.LPIC3477:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13386:
	ldr	r1, [r6, #88]
	ldr	r0, [r6]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
	b	.L13371
.L13385:
	ldr	r1, .L13387+16
	ldr	r0, .L13387+20
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3473:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3376
	ldr	r10, [sp, #24]
.LPIC3474:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13388:
	.align	2
.L13387:
	.word	.LANCHOR1-(.LPIC3472+8)
	.word	.LANCHOR4-(.LPIC3475+8)
	.word	.LANCHOR9-(.LPIC3476+8)
	.word	.LC761-(.LPIC3477+8)
	.word	.LANCHOR9-(.LPIC3473+8)
	.word	.LC754-(.LPIC3474+8)
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r1, [sp, #16]
	str	r2, [sp, #40]
	bhi	.L13415
	sub	r3, r1, #1
	cmp	r3, #2
	bhi	.L13416
	ldr	r3, .L13421
.LPIC3504:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [sp, #48]
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13417
.L13393:
	ldr	r0, [sp, #16]
	add	r2, r4, r4, lsl #1
	add	r3, r3, #1
	mov	r1, r2
	str	r2, [sp, #44]
	mov	r9, r1
	add	r2, r2, r0
	ldr	r0, [sp, #48]
	cmp	r1, r2
	strb	r3, [r0]
	bcs	.L13400
	mov	r2, #84
	ldr	r6, .L13421+4
	mov	r10, #0
	ldr	r3, .L13421+8
	mul	r2, r2, r1
	ldr	r1, .L13421+12
	ldr	fp, .L13421+16
.LPIC3487:
	add	r6, pc, r6
	add	r6, r6, #708
	str	r2, [sp, #52]
.LPIC3491:
	add	r3, pc, r3
.LPIC3488:
	add	r1, pc, r1
	add	r6, r6, r2
	ldr	r2, .L13421+20
	add	r3, r3, #3920
.LPIC3503:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
	str	r1, [sp, #20]
	ldr	r1, .L13421+24
	add	r3, r3, #12
.LPIC3492:
	add	r2, pc, r2
	str	r3, [sp, #32]
.LPIC3489:
	add	r1, pc, r1
	str	r2, [sp, #36]
	str	r1, [sp, #24]
	ldr	r1, .L13421+28
.LPIC3490:
	add	r1, pc, r1
	str	r1, [sp, #28]
	b	.L13399
.L13419:
	str	ip, [sp, #12]
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	ldr	ip, [sp, #12]
	beq	.L13418
.L13397:
	mov	r10, ip
	ldr	ip, [sp, #20]
	add	lr, r4, #116
	mov	r3, r5
	str	r9, [r4, #100]
	mov	r2, r5
	str	lr, [r4, #116]
	mov	r1, r5
	add	r0, r4, #128
	str	lr, [r4, #120]
	str	r7, [r4, #112]
	str	ip, [r4, #124]
	str	r5, [r4, #108]
	bl	init_timer_key(PLT)
	ldr	r1, [sp, #24]
	add	ip, r4, #168
	add	r0, r4, #112
.LPIC3505:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	str	r7, [r4, #164]
	mov	r3, r5
	str	ip, [r4, #168]
	mov	r2, r5
	str	ip, [r4, #172]
	str	r1, [r4, #176]
	mov	r1, r5
	str	r0, [r4, #148]
	add	r0, r4, #180
	str	r8, [r4, #144]
	bl	init_timer_key(PLT)
	ldr	r3, [sp, #28]
	str	r8, [r4, #196]
	add	r1, r4, #164
	ldr	r8, [sp, #32]
	add	r0, r4, #12
	str	r4, [r4, #84]
	str	r1, [r4, #200]
	ldr	r1, [sp, #36]
	add	r3, r3, r9, lsl #2
	add	r9, r9, #1
	mov	r2, r8
	ldr	r3, [r3, #556]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L13421+32
	mov	r2, r8
	add	r0, r4, #24
.LPIC3494:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	str	r7, [r4, #52]
	ldr	r1, .L13421+36
	add	lr, r4, #40
	str	r7, [r4, #68]
	ldr	r7, [sp, #16]
	add	ip, r4, #56
	ldr	r2, .L13421+40
	add	r0, r4, #72
	str	lr, [r4, #40]
	ldr	r3, .L13421+44
	str	lr, [r4, #44]
.LPIC3495:
	add	r1, pc, r1
	str	ip, [r4, #56]
	cmp	r10, r7
	ldr	r7, .L13421+48
	str	ip, [r4, #60]
.LPIC3496:
	add	r2, pc, r2
	str	r1, [r4, #64]
.LPIC3497:
	add	r3, pc, r3
	str	r0, [r4, #72]
	str	r2, [r4, #80]
.LPIC3498:
	add	r7, pc, r7
	str	r0, [r4, #76]
	str	r4, [r6]
	stmib	r6, {r3, r7}
	ldr	r3, [r4, #4]
	add	r6, r6, #84
	str	r5, [r6, #-52]
	str	r3, [r6, #-60]
	beq	.L13400
.L13399:
	ldr	r3, [fp, #32]
	mov	r5, #0
	mov	r7, #65024
	ldr	r8, .L13421+52
	movt	r7, 65535
	mov	r2, #216
	movw	r1, #32976
	add	ip, r10, #1
	cmp	r3, r5
	mov	r0, r3
	bne	.L13419
	mov	r4, #16
	b	.L13397
.L13400:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	beq	.L13413
	ldrb	r2, [sp, #44]	@ zero_extendqisi2
	strb	r2, [r3]
.L13413:
	mov	r0, #0
.L13411:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13418:
	ldr	r1, .L13421+56
	mov	r2, r9
	ldr	r0, .L13421+60
.LPIC3500:
	add	r1, pc, r1
	sub	r1, r1, #3360
.LPIC3501:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	cmp	r10, #0
	ble	.L13404
	ldr	r3, .L13421+64
	ldr	r2, [sp, #52]
.LPIC3502:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r5, r3, #712
.L13402:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L13401
	bl	kfree(PLT)
	mov	r0, r5
	bl	platform_driver_unregister(PLT)
.L13401:
	cmp	r4, r10
	add	r5, r5, #84
	bne	.L13402
.L13404:
	ldr	r2, [sp, #48]
	ldrb	r3, [r2]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2]
	beq	.L13420
.L13403:
	mvn	r0, #11
	b	.L13411
.L13417:
	ldr	r0, .L13421+68
	str	r3, [sp]
	mov	r2, #1
	mov	r1, #10
.LPIC3483:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13421+72
	cmp	r0, #0
.LPIC3484:
	add	r3, pc, r3
	str	r0, [r3, #-1464]
	beq	.L13394
	ldr	r3, [sp, #48]
	ldrb	r3, [r3]	@ zero_extendqisi2
	b	.L13393
.L13420:
	ldr	r3, .L13421+76
.LPIC3499:
	add	r3, pc, r3
	ldr	r0, [r3, #-1464]
	bl	destroy_workqueue(PLT)
	b	.L13403
.L13416:
	ldr	r1, .L13421+80
	ldr	r0, .L13421+84
	ldr	r2, [sp, #16]
.LPIC3480:
	add	r1, pc, r1
	sub	r1, r1, #3360
.LPIC3481:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13411
.L13415:
	ldr	r1, .L13421+88
	mov	r2, r0
	ldr	r0, .L13421+92
.LPIC3478:
	add	r1, pc, r1
	sub	r1, r1, #3360
.LPIC3479:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13411
.L13394:
	ldr	r1, .L13421+96
	ldr	r0, .L13421+100
.LPIC3485:
	add	r1, pc, r1
	sub	r1, r1, #3360
.LPIC3486:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13411
.L13422:
	.align	2
.L13421:
	.word	online_clients(GOT_PREL)+(.-(.LPIC3504+8))
	.word	.LANCHOR1-(.LPIC3487+8)
	.word	.LANCHOR4-(.LPIC3491+8)
	.word	grmnet_ctrl_smd_connect_w-(.LPIC3488+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3503+8))
	.word	.LC766-(.LPIC3492+8)
	.word	grmnet_ctrl_smd_disconnect_w-(.LPIC3489+8)
	.word	.LANCHOR5-(.LPIC3490+8)
	.word	.LC767-(.LPIC3494+8)
	.word	grmnet_ctrl_smd_read_w-(.LPIC3495+8)
	.word	grmnet_ctrl_smd_write_w-(.LPIC3496+8)
	.word	grmnet_ctrl_smd_ch_probe-(.LPIC3497+8)
	.word	grmnet_ctrl_smd_ch_remove-(.LPIC3498+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3505+8))
	.word	.LANCHOR9-(.LPIC3500+8)
	.word	.LC750-(.LPIC3501+8)
	.word	.LANCHOR1-(.LPIC3502+8)
	.word	.LC764-(.LPIC3483+8)
	.word	.LANCHOR4-(.LPIC3484+8)
	.word	.LANCHOR4-(.LPIC3499+8)
	.word	.LANCHOR9-(.LPIC3480+8)
	.word	.LC763-(.LPIC3481+8)
	.word	.LANCHOR9-(.LPIC3478+8)
	.word	.LC762-(.LPIC3479+8)
	.word	.LANCHOR9-(.LPIC3485+8)
	.word	.LC765-(.LPIC3486+8)
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L13430
	ldr	r3, .L13431
.LPIC3508:
	add	r3, pc, r3
	ldr	r4, [r3, #1212]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13431+4
	mov	r1, r0
	str	r5, [r4]
	ldr	r3, .L13431+8
	mov	r0, r6
.LPIC3509:
	add	r2, pc, r2
.LPIC3510:
	add	r3, pc, r3
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up(PLT)
	cmp	r4, #0
	beq	.L13428
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L13425
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L13428
	blx	r4
	mov	r0, #0
.L13425:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13428:
	mov	r0, r4
	b	.L13425
.L13430:
	ldr	r1, .L13431+12
	ldr	r0, .L13431+16
.LPIC3506:
	add	r1, pc, r1
	sub	r1, r1, #3344
.LPIC3507:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13425
.L13432:
	.align	2
.L13431:
	.word	.LANCHOR1-(.LPIC3508+8)
	.word	grmnet_ctrl_qti_send_cpkt_tomodem-(.LPIC3509+8)
	.word	gqti_ctrl_notify_modem-(.LPIC3510+8)
	.word	.LANCHOR9-(.LPIC3506+8)
	.word	.LC754-(.LPIC3507+8)
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13459
	cmp	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3511:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r5, [r3, #1212]
	beq	.L13456
	cmp	r5, #0
	mov	r6, r0
	beq	.L13435
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L13435
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L13435
	blx	r3
.L13435:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	str	r4, [r5, #8]
	mov	r0, r8
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r7, r4
	beq	.L13436
.L13437:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L13437
.L13436:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L13457
	ldr	r3, .L13459+4
.LPIC3517:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13442
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L13458
.L13439:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L13440:
	mov	r2, r7
	ldr	r1, [r5, #48]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L13442:
	mov	r3, #16
	b	.L13439
.L13458:
	mvn	r0, #11
	b	.L13440
.L13456:
	ldr	r1, .L13459+8
	ldr	r0, .L13459+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3512:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3513:
	add	r0, pc, r0
	sub	r1, r1, #3328
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13457:
	ldr	r1, .L13459+16
	mov	r2, r5
	ldr	r0, .L13459+20
.LPIC3514:
	add	r1, pc, r1
	add	r1, r1, #3392
.LPIC3515:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldrd	r6, [sp, #8]
	mov	r1, r4
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L13460:
	.align	2
.L13459:
	.word	.LANCHOR1-(.LPIC3511+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3517+8))
	.word	.LANCHOR9-(.LPIC3512+8)
	.word	.LC754-(.LPIC3513+8)
	.word	.LANCHOR3-(.LPIC3514+8)
	.word	.LC428-(.LPIC3515+8)
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13472
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r3, r3, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3518:
	add	r2, pc, r2
	ldr	r0, [r2, #1216]
	cmp	r1, r0
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L13468
	mov	r3, #104
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #1220]
	cmp	r4, #0
	beq	.L13469
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13470
	cmp	r3, #1
	beq	.L13471
.L13466:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r4, #16
	ldr	r1, [r4, #12]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13463:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13470:
	ldr	r3, .L13472+4
.LPIC3524:
	add	r3, pc, r3
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	cmp	r3, #1
	bne	.L13466
.L13471:
	ldr	r2, .L13472+8
	ldr	r3, .L13472+12
	ldr	r0, [r6, #92]
.LPIC3525:
	add	r2, pc, r2
.LPIC3526:
	add	r3, pc, r3
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
	b	.L13466
.L13468:
	ldr	r3, .L13472+16
	mov	r2, r1
	ldr	r0, .L13472+20
.LPIC3519:
	add	r3, pc, r3
	sub	r1, r3, #3296
.LPIC3520:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13463
.L13469:
	ldr	r1, .L13472+24
	ldr	r0, .L13472+28
.LPIC3522:
	add	r1, pc, r1
	sub	r1, r1, #3296
.LPIC3523:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13463
.L13473:
	.align	2
.L13472:
	.word	.LANCHOR1-(.LPIC3518+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3524+8)
	.word	ghsic_send_cpkt_tomodem-(.LPIC3525+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3526+8)
	.word	.LANCHOR9-(.LPIC3519+8)
	.word	.LC90-(.LPIC3520+8)
	.word	.LANCHOR9-(.LPIC3522+8)
	.word	.LC22-(.LPIC3523+8)
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13485
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3527:
	add	r3, pc, r3
	ldr	r2, [r3, #1216]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1220]
	bhi	.L13483
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L13484
	ldr	r7, [r4, #48]
	mov	r5, r0
	cmp	r7, #0
	beq	.L13477
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r5, #96]
	str	r8, [r5, #100]
.L13479:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #88]
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L13477:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r5, #140]
	b	.L13479
.L13484:
	ldr	r1, .L13485+4
	ldr	r0, .L13485+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3531:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #3280
	ldr	lr, [sp, #20]
.LPIC3532:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L13483:
	ldr	r3, .L13485+12
	mov	r2, r1
	ldr	r0, .L13485+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3529:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	sub	r1, r3, #3280
	ldr	lr, [sp, #20]
.LPIC3530:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L13486:
	.align	2
.L13485:
	.word	.LANCHOR1-(.LPIC3527+8)
	.word	.LANCHOR9-(.LPIC3531+8)
	.word	.LC754-(.LPIC3532+8)
	.word	.LANCHOR9-(.LPIC3529+8)
	.word	.LC90-(.LPIC3530+8)
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13494
.LPIC3533:
	add	r3, pc, r3
	ldr	r3, [r3, #3932]
	cmp	r3, #3
	bhi	.L13492
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L13493
	ldr	ip, .L13494+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3537:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1296
	add	r0, r0, #8
	bl	strlcpy(PLT)
.L13490:
	ldr	r4, .L13494+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L13494+12
	ldr	r1, .L13494+16
.LPIC3540:
	add	r4, pc, r4
	ldr	r3, [r4, #3932]
.LPIC3539:
	add	r0, pc, r0
.LPIC3538:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1296
	add	r0, r0, #8
	bl	strlcat(PLT)
	ldr	r3, [r4, #3932]
	add	r3, r3, #1
	str	r3, [r4, #3932]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13493:
	ldr	r0, .L13494+20
	mov	ip, #104
	mov	r2, #20
.LPIC3536:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1296
	add	r0, r0, #8
	bl	strlcpy(PLT)
	b	.L13490
.L13492:
	ldr	r1, .L13494+24
	mov	r2, r3
	ldr	r0, .L13494+28
.LPIC3534:
	add	r1, pc, r1
	sub	r1, r1, #3248
.LPIC3535:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13495:
	.align	2
.L13494:
	.word	.LANCHOR4-(.LPIC3533+8)
	.word	.LANCHOR1-(.LPIC3537+8)
	.word	.LANCHOR4-(.LPIC3540+8)
	.word	.LANCHOR1-(.LPIC3539+8)
	.word	.LC769-(.LPIC3538+8)
	.word	.LANCHOR1-(.LPIC3536+8)
	.word	.LANCHOR9-(.LPIC3534+8)
	.word	.LC768-(.LPIC3535+8)
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13522
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r3, r3, lsr #5
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
.LPIC3543:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [r5, #1216]
	add	r1, r0, r2
	str	r2, [sp, #36]
	cmp	r1, #4
	orrgt	r3, r3, #1
	str	r2, [sp, #44]
	cmp	r3, #0
	str	r1, [sp, #12]
	bne	.L13497
	cmp	r2, r1
	movcs	r0, r2
	bcs	.L13517
	ldr	r1, [sp, #36]
	mov	r2, #104
	str	r5, [sp, #8]
	ldr	r3, .L13522+4
	ldr	r9, .L13522+8
	mul	r2, r2, r1
	mov	r6, r1
.LPIC3549:
	add	r3, pc, r3
.LPIC3567:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	add	r5, r5, r2
	str	r3, [sp, #16]
	mov	r3, r1
	str	r2, [sp, #40]
	ldr	r1, .L13522+12
	add	r5, r5, #1296
	ldr	r2, .L13522+16
	add	r5, r5, #8
.LPIC3552:
	add	r1, pc, r1
.LPIC3554:
	add	r2, pc, r2
	str	r1, [sp, #20]
	ldr	r1, .L13522+20
	str	r2, [sp, #28]
	ldr	r2, .L13522+24
.LPIC3553:
	add	r1, pc, r1
.LPIC3555:
	add	r2, pc, r2
	str	r1, [sp, #24]
	str	r2, [sp, #32]
	b	.L13504
.L13521:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13501
.L13500:
	mov	r1, #10
	mov	r3, r7
	str	r5, [sp, #4]
	movt	r1, 2
	mov	r2, #1
	str	r7, [sp]
	ldr	r0, [sp, #16]
	bl	__alloc_workqueue_key(PLT)
	ldr	fp, .L13522+28
	mov	r2, r0
	mov	lr, #0
	ldr	r10, .L13522+32
	cmp	r2, lr
	mov	r3, #65024
	sub	r0, r5, #80
	movt	r3, 65535
	str	r2, [r4, #12]
	add	ip, r4, #20
	add	r1, r4, #36
.LPIC3556:
	add	fp, pc, fp
.LPIC3557:
	add	r10, pc, r10
	beq	.L13520
	ldr	r2, [sp, #20]
	str	r3, [r4, #16]
	cmp	r8, #0
	str	r6, [r4]
	add	r6, r6, #1
	str	r5, [r4, #64]
	str	r8, [r4, #48]
	strd	r2, [r4, #28]
	ldr	r3, [sp, #24]
	str	r7, [r4, #4]
	str	ip, [r4, #20]
	str	ip, [r4, #24]
	str	r3, [r4, #44]
	ldr	r3, [sp, #28]
	str	r1, [r4, #36]
	str	r1, [r4, #40]
	str	r4, [r4, #56]
	str	r3, [r4, #72]
	ldreq	r3, [sp, #32]
	streq	r3, [r4, #76]
	str	fp, [r5, #-80]
	str	r4, [r5, #-84]
	str	r10, [r5, #-76]
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	lr, [r5, #-156]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #12]
	ldr	r3, .L13522+36
	cmp	r2, r6
.LPIC3558:
	add	r3, pc, r3
	bls	.L13509
	ldr	r3, [r3, #1216]
.L13504:
	ldr	ip, [r9, #28]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r0, [sp, #8]
	mov	r2, #108
	movw	r1, #32976
	cmp	ip, r7
	str	r3, [r0, #1216]
	mov	r0, ip
	bne	.L13521
	mov	r4, #16
	b	.L13500
.L13497:
	ldr	r1, .L13522+40
	mov	r2, r0
	ldr	r0, .L13522+44
.LPIC3544:
	add	r1, pc, r1
.LPIC3545:
	add	r0, pc, r0
	sub	r1, r1, #3232
	bl	printk(PLT)
	mvn	r0, #21
.L13517:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13509:
	ldr	r0, [sp, #36]
	b	.L13517
.L13520:
	ldr	r1, .L13522+48
	mov	r2, r5
	ldr	r0, .L13522+52
.LPIC3550:
	add	r1, pc, r1
	sub	r1, r1, #3200
.LPIC3551:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
.L13501:
	ldr	r5, .L13522+56
	mov	r2, r6
	ldr	r1, .L13522+60
	ldr	r0, .L13522+64
.LPIC3561:
	add	r5, pc, r5
	ldr	r3, [r5, #1216]
.LPIC3563:
	add	r1, pc, r1
.LPIC3564:
	add	r0, pc, r0
	sub	r1, r1, #3232
	sub	r3, r3, #1
	str	r3, [r5, #1216]
	bl	printk(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, [r5, #1216]
	cmp	r2, r3
	bcs	.L13507
	ldr	r3, [sp, #40]
	add	r4, r5, r3
	add	r4, r4, #1216
	add	r4, r4, #8
.L13506:
	ldr	r3, [sp, #44]
	ldr	r6, [r4, #-4]
	add	r3, r3, #1
	ldr	r0, [r6, #12]
	str	r3, [sp, #44]
	bl	destroy_workqueue(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r4, #0
	mov	r0, r4
	add	r4, r4, #104
	beq	.L13505
	bl	platform_driver_unregister(PLT)
.L13505:
	ldr	r3, [r5, #1216]
	ldr	r2, [sp, #44]
	cmp	r2, r3
	bcc	.L13506
.L13507:
	ldr	r3, .L13522+68
	mvn	r0, #11
	ldr	r2, [sp, #36]
.LPIC3560:
	add	r3, pc, r3
	str	r2, [r3, #1216]
	b	.L13517
.L13523:
	.align	2
.L13522:
	.word	.LANCHOR1-(.LPIC3543+8)
	.word	.LC208-(.LPIC3549+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3567+8))
	.word	ghsic_ctrl_connect_w-(.LPIC3552+8)
	.word	ghsic_ctrl_receive-(.LPIC3554+8)
	.word	gctrl_disconnect_w-(.LPIC3553+8)
	.word	ghsic_ctrl_status-(.LPIC3555+8)
	.word	ghsic_ctrl_probe-(.LPIC3556+8)
	.word	ghsic_ctrl_remove-(.LPIC3557+8)
	.word	.LANCHOR1-(.LPIC3558+8)
	.word	.LANCHOR9-(.LPIC3544+8)
	.word	.LC763-(.LPIC3545+8)
	.word	.LANCHOR9-(.LPIC3550+8)
	.word	.LC770-(.LPIC3551+8)
	.word	.LANCHOR1-(.LPIC3561+8)
	.word	.LANCHOR9-(.LPIC3563+8)
	.word	.LC750-(.LPIC3564+8)
	.word	.LANCHOR1-(.LPIC3560+8)
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13538
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3568:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #1636]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1640]
	bhi	.L13536
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r5, #1
	movne	r5, #0
	beq	.L13537
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13527
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L13527:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13528
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13528:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on(PLT)
.L13536:
	ldr	r3, .L13538+4
	mov	r2, r1
	ldr	r0, .L13538+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3570:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	sub	r1, r3, #3184
	ldr	r10, [sp, #24]
.LPIC3571:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #8
	add	sp, sp, #32
	b	printk(PLT)
.L13537:
	ldr	r1, .L13538+12
	ldr	r0, .L13538+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3572:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3184
	ldr	r10, [sp, #24]
.LPIC3573:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #8
	add	sp, sp, #32
	b	printk(PLT)
.L13539:
	.align	2
.L13538:
	.word	.LANCHOR1-(.LPIC3568+8)
	.word	.LANCHOR9-(.LPIC3570+8)
	.word	.LC90-(.LPIC3571+8)
	.word	.LANCHOR9-(.LPIC3572+8)
	.word	.LC22-(.LPIC3573+8)
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13554
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3574:
	add	r3, pc, r3
	ldr	r2, [r3, #1636]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1640]
	bhi	.L13549
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13550
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L13551
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13554+4
.LPIC3582:
	add	r3, pc, r3
	ldr	r2, [r3, #2552]
	ldr	r3, [r3, #2556]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L13545:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13552
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13553
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r4, #88
	ldr	r1, [r4, #84]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13542:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13551:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13554+8
.LPIC3580:
	add	r3, pc, r3
	ldr	r2, [r3, #2544]
	ldr	r3, [r3, #2548]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L13545
.L13552:
	ldr	r1, .L13554+12
	ldr	r0, .L13554+16
	ldr	r2, [r4, #8]
.LPIC3584:
	add	r1, pc, r1
.LPIC3585:
	add	r0, pc, r0
	sub	r1, r1, #3168
	bl	printk(PLT)
	mov	r0, r5
	b	.L13542
.L13553:
	ldr	r1, .L13554+20
	ldr	r0, .L13554+24
	ldr	r2, [r4, #12]
.LPIC3586:
	add	r1, pc, r1
	sub	r1, r1, #3168
.LPIC3587:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L13542
.L13550:
	ldr	r1, .L13554+28
	ldr	r0, .L13554+32
.LPIC3578:
	add	r1, pc, r1
.LPIC3579:
	add	r0, pc, r0
	sub	r1, r1, #3168
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13542
.L13549:
	ldr	r3, .L13554+36
	mov	r2, r1
	ldr	r0, .L13554+40
.LPIC3576:
	add	r3, pc, r3
.LPIC3577:
	add	r0, pc, r0
	sub	r1, r3, #3168
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13542
.L13555:
	.align	2
.L13554:
	.word	.LANCHOR1-(.LPIC3574+8)
	.word	.LANCHOR2-(.LPIC3582+8)
	.word	.LANCHOR2-(.LPIC3580+8)
	.word	.LANCHOR9-(.LPIC3584+8)
	.word	.LC212-(.LPIC3585+8)
	.word	.LANCHOR9-(.LPIC3586+8)
	.word	.LC213-(.LPIC3587+8)
	.word	.LANCHOR9-(.LPIC3578+8)
	.word	.LC22-(.LPIC3579+8)
	.word	.LANCHOR9-(.LPIC3576+8)
	.word	.LC90-(.LPIC3577+8)
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13563
.LPIC3588:
	add	r3, pc, r3
	ldr	r3, [r3, #3936]
	cmp	r3, #3
	bhi	.L13561
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L13562
	ldr	ip, .L13563+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3592:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1712
	add	r0, r0, #12
	bl	strlcpy(PLT)
.L13559:
	ldr	r4, .L13563+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L13563+12
	ldr	r1, .L13563+16
.LPIC3595:
	add	r4, pc, r4
	ldr	r3, [r4, #3936]
.LPIC3594:
	add	r0, pc, r0
.LPIC3593:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1712
	add	r0, r0, #12
	bl	strlcat(PLT)
	ldr	r3, [r4, #3936]
	add	r3, r3, #1
	str	r3, [r4, #3936]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13562:
	ldr	r0, .L13563+20
	mov	ip, #104
	mov	r2, #20
.LPIC3591:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1712
	add	r0, r0, #12
	bl	strlcpy(PLT)
	b	.L13559
.L13561:
	ldr	r1, .L13563+24
	mov	r2, r3
	ldr	r0, .L13563+28
.LPIC3589:
	add	r1, pc, r1
	sub	r1, r1, #3136
.LPIC3590:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13564:
	.align	2
.L13563:
	.word	.LANCHOR4-(.LPIC3588+8)
	.word	.LANCHOR1-(.LPIC3592+8)
	.word	.LANCHOR4-(.LPIC3595+8)
	.word	.LANCHOR1-(.LPIC3594+8)
	.word	.LC771-(.LPIC3593+8)
	.word	.LANCHOR1-(.LPIC3591+8)
	.word	.LANCHOR9-(.LPIC3589+8)
	.word	.LC768-(.LPIC3590+8)
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L13590
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r3, r3, lsr #5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3598:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #84
	sub	sp, sp, #84
	ldr	r2, [ip, #1636]
	str	r1, [sp, #44]
	add	r1, r0, r2
	str	r2, [sp, #68]
	cmp	r1, #4
	orrgt	r3, r3, #1
	str	r2, [sp, #76]
	cmp	r3, #0
	str	r1, [sp, #40]
	bne	.L13566
	cmp	r2, r1
	movcs	r0, r2
	bcs	.L13585
	ldr	r3, .L13590+4
	mov	r2, #104
	str	ip, [sp, #36]
	ldr	r1, [sp, #68]
	mov	r0, r3
	ldr	r3, .L13590+8
	mul	r2, r2, r1
	mov	r9, r1
.LPIC3604:
	add	r3, pc, r3
	add	ip, ip, r2
	str	r2, [sp, #72]
	ldr	r2, .L13590+12
	add	fp, ip, #1712
	str	r3, [sp, #48]
	mov	r3, r1
	ldr	r1, .L13590+16
	add	fp, fp, #12
	mov	r10, fp
.LPIC3609:
	add	r2, pc, r2
.LPIC3607:
	add	r1, pc, r1
	str	r2, [sp, #60]
	ldr	r2, .L13590+20
	str	r1, [sp, #52]
	ldr	r1, .L13590+24
.LPIC3610:
	add	r2, pc, r2
.LPIC3608:
	add	r1, pc, r1
	str	r2, [sp, #64]
	str	r1, [sp, #56]
.LPIC3624:
	ldr	r1, [pc, r0]		@ tls_load_dot_plus_eight
	str	r1, [sp, #32]
	mov	r2, r1
	b	.L13572
.L13589:
	bl	kmem_cache_alloc_trace(PLT)
	subs	fp, r0, #0
	beq	.L13570
.L13569:
	mov	r1, #10
	mov	r3, r4
	str	r10, [sp, #4]
	movt	r1, 2
	mov	r2, #1
	str	r4, [sp]
	ldr	r0, [sp, #48]
	add	r8, fp, #92
	add	r7, fp, #108
	bl	__alloc_workqueue_key(PLT)
	ldr	r1, .L13590+28
	mov	r2, r0
	add	r6, fp, #140
	ldr	r3, .L13590+32
	cmp	r2, #0
	sub	r0, r10, #80
	add	r5, fp, #124
	add	lr, fp, #56
	str	r2, [fp, #84]
	add	ip, fp, #32
.LPIC3612:
	add	r1, pc, r1
.LPIC3611:
	add	r3, pc, r3
	str	r1, [sp, #20]
	ldr	r1, .L13590+36
	str	r3, [sp, #16]
	mov	r3, #65024
	movt	r3, 65535
.LPIC3613:
	add	r1, pc, r1
	str	r1, [sp, #24]
	ldr	r1, .L13590+40
.LPIC3614:
	add	r1, pc, r1
	str	r1, [sp, #28]
	add	r1, fp, #24
	str	r1, [sp, #12]
	add	r1, fp, #64
	beq	.L13588
	ldr	r2, [sp, #52]
	str	r3, [fp, #88]
	str	r3, [fp, #136]
	str	r3, [fp, #120]
	str	r9, [fp]
	add	r9, r9, #1
	strd	r2, [fp, #100]
	ldr	r2, [sp, #56]
	ldr	r3, [sp, #64]
	str	lr, [fp, #56]
	str	lr, [fp, #60]
	str	ip, [fp, #32]
	str	r2, [fp, #116]
	ldr	r2, [sp, #60]
	str	r3, [fp, #132]
	ldr	r3, [sp, #12]
	str	ip, [fp, #36]
	str	r1, [fp, #64]
	str	r2, [fp, #148]
	str	r3, [fp, #24]
	str	r3, [fp, #28]
	str	r4, [fp, #80]
	str	r4, [fp, #48]
	str	r8, [fp, #92]
	str	r8, [fp, #96]
	str	r7, [fp, #108]
	str	r7, [fp, #112]
	str	r6, [fp, #140]
	str	r6, [fp, #144]
	str	r5, [fp, #124]
	str	r5, [fp, #128]
	str	r4, [fp, #44]
	str	r4, [fp, #40]
	str	r4, [fp, #76]
	str	r1, [fp, #68]
	ldr	r3, [sp, #44]
	str	r10, [fp, #160]
	str	r4, [fp, #72]
	str	fp, [fp, #152]
	str	r3, [fp, #16]
	ldr	r3, [sp, #16]
	str	r3, [fp, #168]
	ldr	r3, [sp, #20]
	str	r3, [fp, #176]
	ldr	r3, [sp, #24]
	str	fp, [r10, #-84]
	str	r10, [r10, #-60]
	add	r10, r10, #104
	str	r4, [r10, #-156]
	str	r3, [r10, #-184]
	ldr	r3, [sp, #28]
	str	r3, [r10, #-180]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #40]
	ldr	r3, .L13590+44
	cmp	r2, r9
.LPIC3615:
	add	r3, pc, r3
	bls	.L13577
	ldr	r3, [r3, #1636]
	ldr	r2, [sp, #32]
.L13572:
	ldr	ip, [r2, #32]
	mov	r4, #0
	add	r3, r3, #1
	ldr	r0, [sp, #36]
	mov	r2, #220
	movw	r1, #32976
	cmp	ip, r4
	str	r3, [r0, #1636]
	mov	r0, ip
	bne	.L13589
	mov	fp, #16
	b	.L13569
.L13566:
	ldr	r1, .L13590+48
	mov	r2, r0
	ldr	r0, .L13590+52
.LPIC3599:
	add	r1, pc, r1
.LPIC3600:
	add	r0, pc, r0
	sub	r1, r1, #3120
	bl	printk(PLT)
	mvn	r0, #21
.L13585:
	add	sp, sp, #84
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13577:
	ldr	r0, [sp, #68]
	b	.L13585
.L13588:
	ldr	r1, .L13590+56
	mov	r3, r10
	mov	r10, fp
	ldr	r0, .L13590+60
	mov	r2, r3
.LPIC3605:
	add	r1, pc, r1
	sub	r1, r1, #3088
.LPIC3606:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r10
	bl	kfree(PLT)
.L13570:
	ldr	r5, .L13590+64
	mov	r2, r9
	ldr	r1, .L13590+68
	ldr	r0, .L13590+72
.LPIC3618:
	add	r5, pc, r5
	ldr	r3, [r5, #1636]
.LPIC3620:
	add	r1, pc, r1
.LPIC3621:
	add	r0, pc, r0
	sub	r1, r1, #3120
	sub	r3, r3, #1
	str	r3, [r5, #1636]
	bl	printk(PLT)
	ldr	r2, [sp, #68]
	ldr	r3, [r5, #1636]
	cmp	r2, r3
	bcs	.L13575
	ldr	r3, [sp, #72]
	add	r4, r5, r3
	add	r4, r4, #1632
	add	r4, r4, #12
.L13574:
	ldr	r3, [sp, #76]
	ldr	r6, [r4, #-4]
	add	r3, r3, #1
	ldr	r0, [r6, #84]
	str	r3, [sp, #76]
	bl	destroy_workqueue(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r4, #0
	mov	r0, r4
	add	r4, r4, #104
	beq	.L13573
	bl	platform_driver_unregister(PLT)
.L13573:
	ldr	r3, [r5, #1636]
	ldr	r2, [sp, #76]
	cmp	r2, r3
	bcc	.L13574
.L13575:
	ldr	r3, .L13590+76
	mvn	r0, #11
	ldr	r2, [sp, #68]
.LPIC3617:
	add	r3, pc, r3
	str	r2, [r3, #1636]
	b	.L13585
.L13591:
	.align	2
.L13590:
	.word	.LANCHOR1-(.LPIC3598+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3624+8))
	.word	.LC208-(.LPIC3604+8)
	.word	ghsic_data_write_tohost-(.LPIC3609+8)
	.word	ghsic_data_connect_w-(.LPIC3607+8)
	.word	ghsic_data_write_tomdm-(.LPIC3610+8)
	.word	ghsic_data_disconnect_w-(.LPIC3608+8)
	.word	ghsic_data_unthrottle_tx-(.LPIC3612+8)
	.word	ghsic_data_receive-(.LPIC3611+8)
	.word	ghsic_data_probe-(.LPIC3613+8)
	.word	ghsic_data_remove-(.LPIC3614+8)
	.word	.LANCHOR1-(.LPIC3615+8)
	.word	.LANCHOR9-(.LPIC3599+8)
	.word	.LC763-(.LPIC3600+8)
	.word	.LANCHOR9-(.LPIC3605+8)
	.word	.LC770-(.LPIC3606+8)
	.word	.LANCHOR1-(.LPIC3618+8)
	.word	.LANCHOR9-(.LPIC3620+8)
	.word	.LC750-(.LPIC3621+8)
	.word	.LANCHOR1-(.LPIC3617+8)
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13602
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r3, r3, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3625:
	add	r2, pc, r2
	ldr	r5, [r2, #2056]
	cmp	r1, r5
	movls	r5, r3
	orrhi	r5, r3, #1
	cmp	r5, #0
	bne	.L13600
	mov	r3, #84
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #2060]
	cmp	r4, #0
	beq	.L13601
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13602+4
	mov	r1, r0
	mov	r0, r7
	ldr	r3, .L13602+8
	ldr	ip, [r6, #92]
.LPIC3631:
	add	r2, pc, r2
.LPIC3632:
	add	r3, pc, r3
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L13594
	add	r2, r4, #36
	ldr	r1, [r4, #32]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13594:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13600:
	ldr	r3, .L13602+12
	mov	r2, r1
	ldr	r0, .L13602+16
.LPIC3626:
	add	r3, pc, r3
	sub	r1, r3, #3072
.LPIC3627:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13594
.L13601:
	ldr	r1, .L13602+20
	ldr	r0, .L13602+24
.LPIC3629:
	add	r1, pc, r1
	sub	r1, r1, #3072
.LPIC3630:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13594
.L13603:
	.align	2
.L13602:
	.word	.LANCHOR1-(.LPIC3625+8)
	.word	ghsuart_send_cpkt_tomodem-(.LPIC3631+8)
	.word	ghsuart_send_cbits_tomodem-(.LPIC3632+8)
	.word	.LANCHOR9-(.LPIC3626+8)
	.word	.LC90-(.LPIC3627+8)
	.word	.LANCHOR9-(.LPIC3629+8)
	.word	.LC22-(.LPIC3630+8)
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13610
.LPIC3633:
	add	r3, pc, r3
	ldr	r2, [r3, #2056]
	cmp	r1, r2
	bhi	.L13608
	mov	r2, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, r2, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #2060]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L13609
	add	r7, r4, #8
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #96]
	mov	r0, r7
	str	r6, [r5, #100]
	str	r6, [r4, #92]
	str	r6, [r4, #12]
	str	r6, [r4, #68]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #52
	mov	r0, #4
	ldr	r1, [r4, #32]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L13608:
	ldr	r3, .L13610+4
	mov	r2, r1
	ldr	r0, .L13610+8
.LPIC3634:
	add	r3, pc, r3
	sub	r1, r3, #3040
.LPIC3635:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L13609:
	ldr	r1, .L13610+12
	ldr	r0, .L13610+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3637:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #3040
	ldr	lr, [sp, #20]
.LPIC3638:
	add	r0, pc, r0
	sub	r1, r1, #12
	add	sp, sp, #24
	b	printk(PLT)
.L13611:
	.align	2
.L13610:
	.word	.LANCHOR1-(.LPIC3633+8)
	.word	.LANCHOR9-(.LPIC3634+8)
	.word	.LC90-(.LPIC3635+8)
	.word	.LANCHOR9-(.LPIC3637+8)
	.word	.LC754-(.LPIC3638+8)
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L13639
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r3, r3, lsr #5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3639:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [ip, #2056]
	str	r1, [sp, #20]
	add	r1, r0, r2
	str	r2, [sp, #36]
	cmp	r1, #2
	orrgt	r3, r3, #1
	str	r2, [sp, #40]
	cmp	r3, #0
	str	r1, [sp, #12]
	bne	.L13613
	cmp	r2, r1
	movcs	r0, r2
	bcs	.L13631
	ldr	r0, [sp, #36]
	mov	r1, #84
	str	ip, [sp, #16]
	ldr	r2, .L13639+4
	ldr	r9, .L13639+8
	ldr	r8, .L13639+12
	mla	ip, r1, r0, ip
	ldr	r1, .L13639+16
	mov	r3, r0
.LPIC3650:
	add	r2, pc, r2
	mov	r7, r0
	add	r2, r2, #3552
.LPIC3666:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	add	r2, r2, #4
.LPIC3646:
	add	r8, pc, r8
.LPIC3645:
	add	r1, pc, r1
	str	r2, [sp, #28]
	str	r1, [sp, #24]
	ldr	r1, .L13639+20
.LPIC3651:
	add	r1, pc, r1
	str	r1, [sp, #32]
	add	r1, ip, #2064
	mov	r5, r1
	str	r1, [sp, #44]
	b	.L13619
.L13638:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13636
.L13616:
	mov	r1, #10
	mov	r3, r6
	str	r8, [sp, #4]
	movt	r1, 2
	mov	r2, #1
	str	r6, [sp]
	ldr	r0, [sp, #24]
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r2, [sp, #28]
	add	r0, r4, #20
	cmp	r3, #0
	ldr	r1, [sp, #32]
	str	r3, [r4, #32]
	beq	.L13637
	ldr	r3, [sp, #20]
	str	r7, [r4]
	add	fp, r4, #40
	str	r6, [r4, #16]
	mov	r10, #42
	stmib	r4, {r3, r6}
	bl	__init_waitqueue_head(PLT)
	mov	r3, #65024
	ldr	ip, .L13639+24
	add	lr, r4, #56
	movt	r3, 65535
	ldr	r0, .L13639+28
	str	r4, [r4, #72]
	ldr	r1, .L13639+32
	str	fp, [r4, #40]
	str	r3, [r4, #36]
	ldr	r2, .L13639+36
	str	r3, [r4, #52]
	ldr	r3, .L13639+40
.LPIC3652:
	add	ip, pc, ip
.LPIC3653:
	add	r0, pc, r0
	str	fp, [r4, #44]
.LPIC3654:
	add	r1, pc, r1
	str	ip, [r4, #48]
.LPIC3655:
	add	r2, pc, r2
	str	r0, [r4, #64]
	mov	r0, r5
.LPIC3656:
	add	r3, pc, r3
	str	r1, [r4, #84]
	add	r5, r5, #84
	str	lr, [r4, #56]
	str	lr, [r4, #60]
	str	r10, [r4, #76]
	strd	r2, [r5, #-84]
	str	r4, [r5, #-88]
	str	r8, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register(PLT)
	ldr	r3, .L13639+44
	cmp	r0, #0
.LPIC3658:
	add	r3, pc, r3
	blt	.L13632
	ldr	r2, [sp, #12]
	add	r7, r7, #1
	cmp	r2, r7
	bls	.L13625
	ldr	r3, [r3, #2056]
.L13619:
	ldr	ip, [r9, #28]
	mov	r6, #0
	add	r3, r3, #1
	ldr	r0, [sp, #16]
	mov	r2, #108
	movw	r1, #32976
	cmp	ip, r6
	str	r3, [r0, #2056]
	mov	r0, ip
	bne	.L13638
	mov	r4, #16
	b	.L13616
.L13632:
	mov	r6, r0
.L13617:
	ldr	r4, .L13639+48
	mov	r2, r7
	ldr	r1, .L13639+52
	ldr	r0, .L13639+56
.LPIC3661:
	add	r4, pc, r4
	ldr	r3, [r4, #2056]
.LPIC3663:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC3664:
	add	r0, pc, r0
	sub	r1, r1, #4
	sub	r3, r3, #1
	str	r3, [r4, #2056]
	bl	printk(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #2056]
	cmp	r2, r3
	bcs	.L13622
	ldr	r7, [sp, #40]
	ldr	r5, [sp, #44]
.L13628:
	ldr	r8, [r5, #-4]
	add	r7, r7, #1
	ldr	r0, [r8, #32]
	bl	destroy_workqueue(PLT)
	cmp	r5, #0
	mov	r0, r5
	add	r5, r5, #84
	beq	.L13620
	bl	platform_driver_unregister(PLT)
.L13620:
	mov	r0, r8
	bl	kfree(PLT)
	ldr	r3, [r4, #2056]
	cmp	r7, r3
	bcc	.L13628
.L13622:
	ldr	r3, .L13639+60
	mov	r0, r6
	ldr	r2, [sp, #36]
.LPIC3660:
	add	r3, pc, r3
	str	r2, [r3, #2056]
.L13631:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13625:
	ldr	r0, [sp, #36]
	b	.L13631
.L13636:
	mvn	r6, #11
	b	.L13617
.L13637:
	ldr	r1, .L13639+64
	mov	r2, r8
	mvn	r6, #11
	ldr	r0, .L13639+68
.LPIC3648:
	add	r1, pc, r1
	sub	r1, r1, #3008
.LPIC3649:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L13617
.L13613:
	ldr	r1, .L13639+72
	mov	r2, r0
	ldr	r0, .L13639+76
.LPIC3640:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC3641:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13631
.L13640:
	.align	2
.L13639:
	.word	.LANCHOR1-(.LPIC3639+8)
	.word	.LANCHOR4-(.LPIC3650+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3666+8))
	.word	.LC772-(.LPIC3646+8)
	.word	.LC208-(.LPIC3645+8)
	.word	.LC481-(.LPIC3651+8)
	.word	ghsuart_ctrl_connect_w-(.LPIC3652+8)
	.word	ghsuart_ctrl_disconnect_w-(.LPIC3653+8)
	.word	ghsuart_ctrl_receive-(.LPIC3654+8)
	.word	ghsuart_ctrl_probe-(.LPIC3655+8)
	.word	ghsuart_ctrl_remove-(.LPIC3656+8)
	.word	.LANCHOR1-(.LPIC3658+8)
	.word	.LANCHOR1-(.LPIC3661+8)
	.word	.LANCHOR9-(.LPIC3663+8)
	.word	.LC750-(.LPIC3664+8)
	.word	.LANCHOR1-(.LPIC3660+8)
	.word	.LANCHOR9-(.LPIC3648+8)
	.word	.LC770-(.LPIC3649+8)
	.word	.LANCHOR9-(.LPIC3640+8)
	.word	.LC763-(.LPIC3641+8)
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	addls	pc, pc, r0, asl #2
	b	.L13642
.L13644:
	b	.L13653
	b	.L13645
	b	.L13646
	b	.L13647
	b	.L13648
	b	.L13649
	b	.L13650
	b	.L13651
	b	.L13652
	.p2align 1
.L13653:
	ldr	r0, .L13654
.LPIC3667:
	add	r0, pc, r0
	bx	lr
.L13645:
	ldr	r0, .L13654+4
.LPIC3668:
	add	r0, pc, r0
	bx	lr
.L13646:
	ldr	r0, .L13654+8
.LPIC3669:
	add	r0, pc, r0
	bx	lr
.L13647:
	ldr	r0, .L13654+12
.LPIC3670:
	add	r0, pc, r0
	bx	lr
.L13648:
	ldr	r0, .L13654+16
.LPIC3671:
	add	r0, pc, r0
	bx	lr
.L13649:
	ldr	r0, .L13654+20
.LPIC3672:
	add	r0, pc, r0
	bx	lr
.L13650:
	ldr	r0, .L13654+24
.LPIC3675:
	add	r0, pc, r0
	bx	lr
.L13651:
	ldr	r0, .L13654+28
.LPIC3674:
	add	r0, pc, r0
	bx	lr
.L13652:
	ldr	r0, .L13654+32
.LPIC3673:
	add	r0, pc, r0
	bx	lr
.L13642:
	ldr	r0, .L13654+36
.LPIC3676:
	add	r0, pc, r0
	bx	lr
.L13655:
	.align	2
.L13654:
	.word	.LC773-(.LPIC3667+8)
	.word	.LC774-(.LPIC3668+8)
	.word	.LC775-(.LPIC3669+8)
	.word	.LC776-(.LPIC3670+8)
	.word	.LC777-(.LPIC3671+8)
	.word	.LC778-(.LPIC3672+8)
	.word	.LC781-(.LPIC3675+8)
	.word	.LC780-(.LPIC3674+8)
	.word	.LC779-(.LPIC3673+8)
	.word	.LC10-(.LPIC3676+8)
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13672
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3677:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #2228]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2232]
	bhi	.L13669
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L13670
	mov	r5, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13659
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r6, [r3]
.L13659:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13660
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13660:
	ldr	r6, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r6, r3
	beq	.L13671
.L13661:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on(PLT)
.L13671:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #140]
	mov	r0, r7
	str	r6, [r4, #196]
	str	r6, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13661
.L13670:
	ldr	r1, .L13672+4
	ldr	r0, .L13672+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3681:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #2976
	ldr	r10, [sp, #24]
.LPIC3682:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #8
	add	sp, sp, #32
	b	printk(PLT)
.L13669:
	ldr	r3, .L13672+12
	mov	r2, r1
	ldr	r0, .L13672+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3679:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	sub	r1, r3, #2976
	ldr	r10, [sp, #24]
.LPIC3680:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #8
	add	sp, sp, #32
	b	printk(PLT)
.L13673:
	.align	2
.L13672:
	.word	.LANCHOR1-(.LPIC3677+8)
	.word	.LANCHOR9-(.LPIC3681+8)
	.word	.LC22-(.LPIC3682+8)
	.word	.LANCHOR9-(.LPIC3679+8)
	.word	.LC90-(.LPIC3680+8)
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	add	r8, r5, #132
	strd	r6, [sp, #8]
	add	r7, r5, #144
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	ldr	r0, [r0, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
	mov	r3, #0
	mov	r0, r8
	str	r3, [r2]
	str	r3, [r5, #120]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r4, r7
	beq	.L13684
.L13683:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #144]
	cmp	r4, r7
	bne	.L13683
.L13684:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r5, #152]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	ldr	r1, .L13720
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.LPIC3705:
	add	r1, pc, r1
	rsb	r0, r2, r3
	add	r1, r1, r0
	ldr	ip, [r1, #2516]
	ldr	r4, [r1, #2512]
	ldr	r1, [r1, #2524]
	sub	r0, ip, #3
	cmp	r0, #7
	addls	pc, pc, r0, asl #2
	b	.L13676
.L13678:
	b	.L13677
	b	.L13679
	b	.L13676
	b	.L13676
	b	.L13676
	b	.L13680
	b	.L13681
	b	.L13682
	.p2align 1
.L13679:
	mov	r0, r5
	bl	gqti_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.L13682:
	ldr	r1, .L13720+4
	rsb	r3, r2, r3
	sub	r0, r4, #5
.LPIC3710:
	add	r1, pc, r1
	add	r3, r1, r3
	ldr	r1, [r3, #2520]
	cmp	r0, #5
	addls	pc, pc, r0, asl #2
	b	.L13697
.L13699:
	b	.L13698
	b	.L13698
	b	.L13698
	b	.L13700
	b	.L13701
	b	.L13674
	.p2align 1
.L13674:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13698:
	mov	r2, r4
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	uxtb	r1, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect(PLT)
.L13700:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect(PLT)
.L13701:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect(PLT)
.L13681:
	mov	r0, r5
	bl	ghsuart_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13682
.L13677:
	uxtb	r1, r1
	mov	r0, r5
	bl	gsmd_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13682
.L13680:
	mov	r0, r5
	bl	ghsic_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13682
.L13676:
	sub	ip, ip, #1
	cmp	ip, #9
	addls	pc, pc, ip, asl #2
	b	.L13685
.L13687:
	b	.L13715
	b	.L13688
	b	.L13689
	b	.L13690
	b	.L13691
	b	.L13692
	b	.L13693
	b	.L13694
	b	.L13695
	b	.L13696
	.p2align 1
.L13697:
	sub	r4, r4, #1
	cmp	r4, #9
	addls	pc, pc, r4, asl #2
	b	.L13703
.L13705:
	b	.L13716
	b	.L13706
	b	.L13707
	b	.L13708
	b	.L13709
	b	.L13710
	b	.L13711
	b	.L13712
	b	.L13713
	b	.L13714
	.p2align 1
.L13716:
	ldr	r2, .L13720+8
.LPIC3694:
	add	r2, pc, r2
.L13704:
	ldr	r1, .L13720+12
	ldr	r0, .L13720+16
.LPIC3711:
	add	r1, pc, r1
.LPIC3712:
	add	r0, pc, r0
.L13719:
	ldrd	r4, [sp]
	sub	r1, r1, #2960
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13715:
	ldr	r2, .L13720+20
.LPIC3683:
	add	r2, pc, r2
.L13686:
	ldr	r1, .L13720+24
	ldr	r0, .L13720+28
.LPIC3708:
	add	r1, pc, r1
.LPIC3709:
	add	r0, pc, r0
	b	.L13719
.L13696:
	ldr	r2, .L13720+32
.LPIC3692:
	add	r2, pc, r2
	b	.L13686
.L13695:
	ldr	r2, .L13720+36
.LPIC3691:
	add	r2, pc, r2
	b	.L13686
.L13694:
	ldr	r2, .L13720+40
.LPIC3690:
	add	r2, pc, r2
	b	.L13686
.L13693:
	ldr	r2, .L13720+44
.LPIC3689:
	add	r2, pc, r2
	b	.L13686
.L13688:
	ldr	r2, .L13720+48
.LPIC3684:
	add	r2, pc, r2
	b	.L13686
.L13714:
	ldr	r2, .L13720+52
.LPIC3703:
	add	r2, pc, r2
	b	.L13704
.L13692:
	ldr	r2, .L13720+56
.LPIC3688:
	add	r2, pc, r2
	b	.L13686
.L13691:
	ldr	r2, .L13720+60
.LPIC3687:
	add	r2, pc, r2
	b	.L13686
.L13690:
	ldr	r2, .L13720+64
.LPIC3686:
	add	r2, pc, r2
	b	.L13686
.L13689:
	ldr	r2, .L13720+68
.LPIC3685:
	add	r2, pc, r2
	b	.L13686
.L13713:
	ldr	r2, .L13720+72
.LPIC3702:
	add	r2, pc, r2
	b	.L13704
.L13712:
	ldr	r2, .L13720+76
.LPIC3701:
	add	r2, pc, r2
	b	.L13704
.L13711:
	ldr	r2, .L13720+80
.LPIC3700:
	add	r2, pc, r2
	b	.L13704
.L13710:
	ldr	r2, .L13720+84
.LPIC3699:
	add	r2, pc, r2
	b	.L13704
.L13709:
	ldr	r2, .L13720+88
.LPIC3698:
	add	r2, pc, r2
	b	.L13704
.L13708:
	ldr	r2, .L13720+92
.LPIC3697:
	add	r2, pc, r2
	b	.L13704
.L13707:
	ldr	r2, .L13720+96
.LPIC3696:
	add	r2, pc, r2
	b	.L13704
.L13706:
	ldr	r2, .L13720+100
.LPIC3695:
	add	r2, pc, r2
	b	.L13704
.L13703:
	ldr	r2, .L13720+104
.LPIC3704:
	add	r2, pc, r2
	b	.L13704
.L13685:
	ldr	r2, .L13720+108
.LPIC3693:
	add	r2, pc, r2
	b	.L13686
.L13721:
	.align	2
.L13720:
	.word	.LANCHOR1-(.LPIC3705+8)
	.word	.LANCHOR1-(.LPIC3710+8)
	.word	.LC0-(.LPIC3694+8)
	.word	.LANCHOR9-(.LPIC3711+8)
	.word	.LC760-(.LPIC3712+8)
	.word	.LC0-(.LPIC3683+8)
	.word	.LANCHOR9-(.LPIC3708+8)
	.word	.LC760-(.LPIC3709+8)
	.word	.LC9-(.LPIC3692+8)
	.word	.LC8-(.LPIC3691+8)
	.word	.LC7-(.LPIC3690+8)
	.word	.LC6-(.LPIC3689+8)
	.word	.LC1-(.LPIC3684+8)
	.word	.LC9-(.LPIC3703+8)
	.word	.LC5-(.LPIC3688+8)
	.word	.LC4-(.LPIC3687+8)
	.word	.LC3-(.LPIC3686+8)
	.word	.LC2-(.LPIC3685+8)
	.word	.LC8-(.LPIC3702+8)
	.word	.LC7-(.LPIC3701+8)
	.word	.LC6-(.LPIC3700+8)
	.word	.LC5-(.LPIC3699+8)
	.word	.LC4-(.LPIC3698+8)
	.word	.LC3-(.LPIC3697+8)
	.word	.LC2-(.LPIC3696+8)
	.word	.LC1-(.LPIC3695+8)
	.word	.LC10-(.LPIC3704+8)
	.word	.LC10-(.LPIC3693+8)
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13736
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3713:
	add	r3, pc, r3
	ldr	r2, [r3, #2228]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2232]
	bhi	.L13731
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13732
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L13733
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13736+4
.LPIC3722:
	add	r3, pc, r3
	ldr	r2, [r3, #2568]
	ldr	r3, [r3, #2572]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L13727:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13734
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13735
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r4, #112
	ldr	r1, [r4, #108]
	mov	r0, #4
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13724:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13733:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13736+8
	mov	r0, r8
.LPIC3719:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	ldr	r3, [r3, #2564]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13736+12
	mov	r1, r0
	mov	r0, r8
.LPIC3721:
	add	r3, pc, r3
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13727
.L13734:
	ldr	r1, .L13736+16
	ldr	r0, .L13736+20
	ldr	r2, [r4, #8]
.LPIC3724:
	add	r1, pc, r1
	sub	r1, r1, #2928
.LPIC3725:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	b	.L13724
.L13735:
	ldr	r1, .L13736+24
	ldr	r0, .L13736+28
	ldr	r2, [r4, #12]
.LPIC3726:
	add	r1, pc, r1
	sub	r1, r1, #2928
.LPIC3727:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L13724
.L13732:
	ldr	r1, .L13736+32
	ldr	r0, .L13736+36
.LPIC3717:
	add	r1, pc, r1
	sub	r1, r1, #2928
.LPIC3718:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13724
.L13731:
	ldr	r3, .L13736+40
	mov	r2, r1
	ldr	r0, .L13736+44
.LPIC3715:
	add	r3, pc, r3
	sub	r1, r3, #2928
.LPIC3716:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13724
.L13737:
	.align	2
.L13736:
	.word	.LANCHOR1-(.LPIC3713+8)
	.word	.LANCHOR2-(.LPIC3722+8)
	.word	.LANCHOR2-(.LPIC3719+8)
	.word	ghsuart_send_controlbits_tomodem-(.LPIC3721+8)
	.word	.LANCHOR9-(.LPIC3724+8)
	.word	.LC212-(.LPIC3725+8)
	.word	.LANCHOR9-(.LPIC3726+8)
	.word	.LC213-(.LPIC3727+8)
	.word	.LANCHOR9-(.LPIC3717+8)
	.word	.LC22-(.LPIC3718+8)
	.word	.LANCHOR9-(.LPIC3715+8)
	.word	.LC90-(.LPIC3716+8)
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #136]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13739
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L13739:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r8, r0, #0
	bne	.L13833
	ldr	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L13834
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13743
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13743
.L13744:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #120]
	ldr	r5, [r7, #144]!
	cmp	r5, r7
	beq	.L13803
	add	r6, r4, #132
	mvn	r9, #94
	b	.L13799
.L13832:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L13795:
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L13803
.L13799:
	mov	r0, r6
	ldr	r10, [r4, #140]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #120]
	cmp	r10, #0
	cmpne	r3, #0
	moveq	r3, #1
	movne	r3, #0
	beq	.L13832
	ldr	r2, [r10]
	cmp	r2, #0
	beq	.L13832
	ldr	ip, [r4, #152]
	add	ip, ip, #1
	cmp	ip, #1
	str	ip, [r4, #152]
	bne	.L13832
	ldr	r2, [r10]
	mov	r1, r0
	mov	r0, r6
	strb	r3, [r2, #2]
	strb	r3, [r2, #3]
	strb	r9, [r2]
	strb	ip, [r2, #1]
	ldrh	ip, [r4, #112]
	strb	r3, [r2, #6]
	strb	r3, [r2, #7]
	strh	ip, [r2, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #136]
	mov	r2, #32
	ldr	r1, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L13795
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #144]
	mov	fp, r0
	cmp	r10, r7
	beq	.L13797
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L13797
	sub	r3, r3, #1
	sub	r2, r10, #8
	mov	r0, r10
	str	r3, [r4, #152]
	str	r2, [sp, #12]
	bl	list_del(PLT)
	ldr	r0, [r10, #-8]
	bl	kfree(PLT)
	ldr	r2, [sp, #12]
	mov	r0, r2
	bl	kfree(PLT)
.L13797:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L13799
.L13803:
	mov	r0, r8
.L13741:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13833:
	ldr	r2, [r4, #136]
	mov	r0, #0
	mov	r3, r8
	ldr	r1, .L13837
	str	r0, [r2, #28]
	ldr	r2, [r4, #136]
	ldr	r0, [r5]
.LPIC3750:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r8
	b	.L13741
.L13743:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13746
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13746
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	r3, .L13837+4
	ldr	ip, [r4, #128]
	mov	r0, r2, asl #3
	mov	r2, r2, asl #5
.LPIC3753:
	add	r3, pc, r3
	rsb	r1, r0, r2
	ldr	r5, [ip]
	add	r3, r3, r1
	ldr	r6, [r3, #2516]
	ldr	r7, [r3, #2512]
	ldr	r1, [r3, #2524]
	sub	r3, r6, #3
	cmp	r3, #7
	addls	pc, pc, r3, asl #2
	b	.L13747
.L13749:
	b	.L13748
	b	.L13750
	b	.L13747
	b	.L13747
	b	.L13747
	b	.L13751
	b	.L13752
	b	.L13753
	.p2align 1
.L13752:
	mov	r0, r4
	bl	ghsuart_ctrl_connect(PLT)
	subs	r2, r0, #0
	bne	.L13757
.L13830:
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	mov	r0, r2, asl #3
	mov	r2, r2, asl #5
.L13753:
	ldr	r3, .L13837+8
	rsb	r2, r0, r2
	sub	r0, r7, #5
.LPIC3766:
	add	r3, pc, r3
	add	r3, r3, r2
	ldr	r9, [r3, #2520]
	cmp	r0, #5
	addls	pc, pc, r0, asl #2
	b	.L13770
.L13772:
	b	.L13801
	b	.L13773
	b	.L13774
	b	.L13775
	b	.L13776
	b	.L13744
	.p2align 1
.L13751:
	mov	r0, r4
	bl	ghsic_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13830
	ldr	r1, .L13837+12
	mov	r8, r2
	ldr	r0, .L13837+16
.LPIC3760:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3761:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13748:
	mov	r0, r4
	bl	gsmd_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13830
	ldr	r1, .L13837+20
	mov	r8, r2
	ldr	r0, .L13837+24
.LPIC3756:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3757:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13750:
	mov	r0, r4
	bl	gqti_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13830
	ldr	r1, .L13837+28
	mov	r8, r2
	ldr	r0, .L13837+32
.LPIC3758:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3759:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13801:
	mov	r2, #0
	mov	r3, r2
.L13771:
	uxtb	r9, r9
	str	r2, [sp]
	mov	r0, r4
	mov	r2, r7
	mov	r1, r9
	bl	gbam_connect(PLT)
	subs	r8, r0, #0
	beq	.L13744
	ldr	r1, .L13837+36
	mov	r2, r8
	ldr	r0, .L13837+40
.LPIC3769:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3770:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r9
	mov	r0, r4
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13744
.L13774:
	mov	r3, r9
	mov	r2, #0
	ldr	r0, [r5, #28]
	mov	r1, #2
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r7, r0
	bmi	.L13835
	uxtb	r2, r0
	uxtb	r9, r9
	uxtb	r3, r7
	mov	r1, r9
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #7
	bl	gbam_connect(PLT)
	subs	r5, r0, #0
	beq	.L13744
	ldr	r3, .L13837+44
	mov	r2, r5
	ldr	r0, .L13837+48
.LPIC3773:
	add	r3, pc, r3
.LPIC3774:
	add	r0, pc, r0
	sub	r1, r3, #2896
	bl	printk(PLT)
	cmp	r6, #4
	beq	.L13836
	mov	r1, r9
	mov	r0, r4
	mov	r8, r5
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13744
.L13773:
	mov	r2, #0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx(PLT)
	mov	r6, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r6, r0
	bmi	.L13777
	uxtb	r3, r6
	uxtb	r2, r0
	b	.L13771
.L13776:
	mov	r1, r9
	mov	r0, r4
	bl	ghsuart_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L13744
	ldr	r1, .L13837+52
	mov	r2, r8
	ldr	r0, .L13837+56
.LPIC3777:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3778:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r9
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect(PLT)
	b	.L13744
.L13775:
	mov	r1, r9
	mov	r0, r4
	bl	ghsic_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L13744
	ldr	r1, .L13837+60
	mov	r2, r8
	ldr	r0, .L13837+64
.LPIC3775:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3776:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r9
	mov	r0, r4
	bl	ghsic_ctrl_disconnect(PLT)
	b	.L13744
.L13747:
	sub	r6, r6, #1
	cmp	r6, #9
	addls	pc, pc, r6, asl #2
	b	.L13758
.L13760:
	b	.L13800
	b	.L13761
	b	.L13762
	b	.L13763
	b	.L13764
	b	.L13765
	b	.L13766
	b	.L13767
	b	.L13768
	b	.L13769
	.p2align 1
.L13800:
	ldr	r2, .L13837+68
.LPIC3728:
	add	r2, pc, r2
.L13759:
	ldr	r1, .L13837+72
	mvn	r8, #18
	ldr	r0, .L13837+76
.LPIC3764:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3765:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13769:
	ldr	r2, .L13837+80
.LPIC3737:
	add	r2, pc, r2
	b	.L13759
.L13768:
	ldr	r2, .L13837+84
.LPIC3736:
	add	r2, pc, r2
	b	.L13759
.L13767:
	ldr	r2, .L13837+88
.LPIC3735:
	add	r2, pc, r2
	b	.L13759
.L13766:
	ldr	r2, .L13837+92
.LPIC3734:
	add	r2, pc, r2
	b	.L13759
.L13765:
	ldr	r2, .L13837+96
.LPIC3733:
	add	r2, pc, r2
	b	.L13759
.L13764:
	ldr	r2, .L13837+100
.LPIC3732:
	add	r2, pc, r2
	b	.L13759
.L13763:
	ldr	r2, .L13837+104
.LPIC3731:
	add	r2, pc, r2
	b	.L13759
.L13762:
	ldr	r2, .L13837+108
.LPIC3730:
	add	r2, pc, r2
	b	.L13759
.L13761:
	ldr	r2, .L13837+112
.LPIC3729:
	add	r2, pc, r2
	b	.L13759
.L13746:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L13741
.L13770:
	sub	r7, r7, #1
	cmp	r7, #9
	addls	pc, pc, r7, asl #2
	b	.L13781
.L13783:
	b	.L13802
	b	.L13784
	b	.L13785
	b	.L13786
	b	.L13787
	b	.L13788
	b	.L13789
	b	.L13790
	b	.L13791
	b	.L13792
	.p2align 1
.L13792:
	ldr	r2, .L13837+116
.LPIC3748:
	add	r2, pc, r2
.L13782:
	ldr	r1, .L13837+120
	mvn	r8, #18
	ldr	r0, .L13837+124
.LPIC3779:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3780:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13791:
	ldr	r2, .L13837+128
.LPIC3747:
	add	r2, pc, r2
	b	.L13782
.L13790:
	ldr	r2, .L13837+132
.LPIC3746:
	add	r2, pc, r2
	b	.L13782
.L13789:
	ldr	r2, .L13837+136
.LPIC3745:
	add	r2, pc, r2
	b	.L13782
.L13788:
	ldr	r2, .L13837+140
.LPIC3744:
	add	r2, pc, r2
	b	.L13782
.L13787:
	ldr	r2, .L13837+144
.LPIC3743:
	add	r2, pc, r2
	b	.L13782
.L13786:
	ldr	r2, .L13837+148
.LPIC3742:
	add	r2, pc, r2
	b	.L13782
.L13785:
	ldr	r2, .L13837+152
.LPIC3741:
	add	r2, pc, r2
	b	.L13782
.L13784:
	ldr	r2, .L13837+156
.LPIC3740:
	add	r2, pc, r2
	b	.L13782
.L13802:
	ldr	r2, .L13837+160
.LPIC3739:
	add	r2, pc, r2
	b	.L13782
.L13781:
	ldr	r2, .L13837+164
.LPIC3749:
	add	r2, pc, r2
	b	.L13782
.L13758:
	ldr	r2, .L13837+168
.LPIC3738:
	add	r2, pc, r2
	b	.L13759
.L13757:
	ldr	r1, .L13837+172
	mov	r8, r2
	ldr	r0, .L13837+176
.LPIC3762:
	add	r1, pc, r1
	sub	r1, r1, #2896
.LPIC3763:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13744
.L13834:
	ldr	r1, .L13837+180
	mov	r3, r8
	ldr	r2, [r4, #136]
	ldr	r0, .L13837+184
.LPIC3751:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	sub	r1, r1, #2912
.LPIC3752:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L13741
.L13777:
	ldr	r1, .L13837+188
	ldr	r0, .L13837+192
.LPIC3767:
	add	r1, pc, r1
.LPIC3768:
	add	r0, pc, r0
.L13831:
	sub	r1, r1, #2896
	bl	printk(PLT)
	uxtb	r1, r9
	mov	r0, r4
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13744
.L13836:
	mov	r0, r4
	mov	r8, r5
	bl	gqti_ctrl_disconnect(PLT)
	b	.L13744
.L13835:
	ldr	r1, .L13837+196
	ldr	r0, .L13837+200
.LPIC3771:
	add	r1, pc, r1
.LPIC3772:
	add	r0, pc, r0
	b	.L13831
.L13838:
	.align	2
.L13837:
	.word	.LC531-(.LPIC3750+8)
	.word	.LANCHOR1-(.LPIC3753+8)
	.word	.LANCHOR1-(.LPIC3766+8)
	.word	.LANCHOR9-(.LPIC3760+8)
	.word	.LC784-(.LPIC3761+8)
	.word	.LANCHOR9-(.LPIC3756+8)
	.word	.LC782-(.LPIC3757+8)
	.word	.LANCHOR9-(.LPIC3758+8)
	.word	.LC783-(.LPIC3759+8)
	.word	.LANCHOR9-(.LPIC3769+8)
	.word	.LC787-(.LPIC3770+8)
	.word	.LANCHOR9-(.LPIC3773+8)
	.word	.LC787-(.LPIC3774+8)
	.word	.LANCHOR9-(.LPIC3777+8)
	.word	.LC789-(.LPIC3778+8)
	.word	.LANCHOR9-(.LPIC3775+8)
	.word	.LC788-(.LPIC3776+8)
	.word	.LC0-(.LPIC3728+8)
	.word	.LANCHOR9-(.LPIC3764+8)
	.word	.LC760-(.LPIC3765+8)
	.word	.LC9-(.LPIC3737+8)
	.word	.LC8-(.LPIC3736+8)
	.word	.LC7-(.LPIC3735+8)
	.word	.LC6-(.LPIC3734+8)
	.word	.LC5-(.LPIC3733+8)
	.word	.LC4-(.LPIC3732+8)
	.word	.LC3-(.LPIC3731+8)
	.word	.LC2-(.LPIC3730+8)
	.word	.LC1-(.LPIC3729+8)
	.word	.LC9-(.LPIC3748+8)
	.word	.LANCHOR9-(.LPIC3779+8)
	.word	.LC760-(.LPIC3780+8)
	.word	.LC8-(.LPIC3747+8)
	.word	.LC7-(.LPIC3746+8)
	.word	.LC6-(.LPIC3745+8)
	.word	.LC5-(.LPIC3744+8)
	.word	.LC4-(.LPIC3743+8)
	.word	.LC3-(.LPIC3742+8)
	.word	.LC2-(.LPIC3741+8)
	.word	.LC1-(.LPIC3740+8)
	.word	.LC0-(.LPIC3739+8)
	.word	.LC10-(.LPIC3749+8)
	.word	.LC10-(.LPIC3738+8)
	.word	.LANCHOR9-(.LPIC3762+8)
	.word	.LC785-(.LPIC3763+8)
	.word	.LANCHOR9-(.LPIC3751+8)
	.word	.LC540-(.LPIC3752+8)
	.word	.LANCHOR9-(.LPIC3767+8)
	.word	.LC786-(.LPIC3768+8)
	.word	.LANCHOR9-(.LPIC3771+8)
	.word	.LC786-(.LPIC3772+8)
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L13867
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	r3, r0
	strd	r8, [sp, #16]
	mov	r3, r3, lsr #5
	strd	r10, [sp, #24]
	strd	r6, [sp, #8]
.LPIC3781:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	ldr	r2, [ip, #2228]
	str	r1, [sp, #24]
	add	r1, r0, r2
	str	r2, [sp, #44]
	cmp	r1, #4
	orrgt	r3, r3, #1
	str	r2, [sp, #48]
	cmp	r3, #0
	str	r1, [sp, #20]
	bne	.L13840
	cmp	r2, r1
	movge	r0, r2
	bge	.L13862
	ldr	r2, .L13867+4
	mov	r1, #84
	str	ip, [sp, #16]
	ldr	r0, [sp, #44]
	ldr	lr, .L13867+8
	ldr	r9, .L13867+12
.LPIC3785:
	add	r2, pc, r2
	add	r2, r2, #580
	mla	ip, r1, r0, ip
	ldr	r1, .L13867+16
	add	fp, r2, r0, lsl #2
	ldr	r2, .L13867+20
.LPIC3788:
	add	lr, pc, lr
	mov	r3, r0
.LPIC3807:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	add	ip, ip, #2224
	ldr	lr, .L13867+24
.LPIC3791:
	add	r1, pc, r1
	mov	r7, r0
	str	fp, [sp, #12]
.LPIC3793:
	add	r2, pc, r2
	str	r2, [sp, #40]
	add	r2, ip, #12
.LPIC3792:
	add	lr, pc, lr
	mov	r6, r2
	str	r2, [sp, #52]
	add	r2, r1, #3552
	add	r2, r2, #4
	str	lr, [sp, #36]
	str	r2, [sp, #32]
	b	.L13847
.L13866:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13844
.L13843:
	ldr	r3, [sp, #12]
	mov	r1, #10
	mov	r2, #1
	movt	r1, 2
	ldr	r0, [sp, #28]
	ldr	r8, [r3], #4
	str	r5, [sp]
	str	r3, [sp, #12]
	mov	r3, r5
	str	r8, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r2, [sp, #32]
	add	r0, r4, #32
	cmp	r3, #0
	ldr	r1, [sp, #36]
	str	r3, [r4, #108]
	beq	.L13865
	str	r7, [r4]
	add	r10, r4, #116
	add	r7, r7, #1
	str	r5, [r4, #20]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	str	r5, [r4, #28]
	bl	__init_waitqueue_head(PLT)
	ldr	fp, [sp, #24]
	mov	r3, #65024
	str	r10, [r4, #116]
	ldr	ip, .L13867+28
	movt	r3, 65535
	str	r10, [r4, #120]
	ldr	lr, .L13867+32
	add	r10, r4, #80
	str	r5, [r4, #68]
	ldr	r0, .L13867+36
	str	r3, [r4, #112]
	cmp	fp, #0
	ldr	r1, .L13867+40
	str	r3, [r4, #128]
	moveq	r2, #11
	movne	r2, #10
	str	r3, [r4, #160]
.LPIC3795:
	add	ip, pc, ip
.LPIC3794:
	add	lr, pc, lr
	str	r3, [r4, #144]
	str	r2, [r4, #180]
	ldr	r2, [sp, #40]
	add	r3, r4, #132
.LPIC3796:
	add	r0, pc, r0
	str	ip, [r4, #172]
	add	ip, r4, #164
.LPIC3797:
	add	r1, pc, r1
	str	lr, [r4, #140]
	add	lr, r4, #148
	str	r0, [r4, #156]
	add	r0, r4, #48
	str	r2, [r4, #124]
	ldr	r2, .L13867+44
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #56
	str	ip, [r4, #164]
.LPIC3798:
	add	r2, pc, r2
	str	ip, [r4, #168]
	add	ip, r4, #88
	str	r3, [r4, #56]
	str	r3, [r4, #60]
	str	lr, [r4, #148]
	str	lr, [r4, #152]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	mov	r0, r6
	str	ip, [r4, #88]
	str	ip, [r4, #92]
	str	r5, [r4, #64]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	fp, [r4, #16]
	str	r4, [r4, #176]
	str	r10, [r4, #80]
	str	r10, [r4, #84]
	str	r4, [r6, #-4]
	stmia	r6, {r1, r2}
	add	r6, r6, #84
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #20]
	ldr	r3, .L13867+48
	cmp	r2, r7
.LPIC3799:
	add	r3, pc, r3
	ble	.L13853
	ldr	r3, [r3, #2228]
.L13847:
	ldr	ip, [r9, #32]
	mov	r5, #0
	add	r3, r3, #1
	ldr	r0, [sp, #16]
	mov	r2, #216
	movw	r1, #32976
	cmp	ip, r5
	str	r3, [r0, #2228]
	mov	r0, ip
	bne	.L13866
	mov	r4, #16
	b	.L13843
.L13840:
	ldr	r1, .L13867+52
	mov	r2, r0
	ldr	r0, .L13867+56
.LPIC3782:
	add	r1, pc, r1
	sub	r1, r1, #2864
.LPIC3783:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
.L13862:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13853:
	ldr	r0, [sp, #44]
	b	.L13862
.L13865:
	ldr	r1, .L13867+60
	mov	r2, r8
	ldr	r0, .L13867+64
.LPIC3789:
	add	r1, pc, r1
	sub	r1, r1, #2848
.LPIC3790:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
.L13844:
	ldr	r4, .L13867+68
	mov	r2, r7
	ldr	r1, .L13867+72
	ldr	r0, .L13867+76
.LPIC3802:
	add	r4, pc, r4
	ldr	r3, [r4, #2228]
.LPIC3804:
	add	r1, pc, r1
	sub	r1, r1, #2864
.LPIC3805:
	add	r0, pc, r0
	sub	r1, r1, #12
	sub	r3, r3, #1
	str	r3, [r4, #2228]
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #2228]
	cmp	r2, r3
	bcs	.L13850
	ldr	r6, [sp, #48]
	ldr	r5, [sp, #52]
.L13858:
	ldr	r7, [r5, #-4]
	add	r6, r6, #1
	ldr	r0, [r7, #108]
	bl	destroy_workqueue(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	cmp	r5, #0
	mov	r0, r5
	add	r5, r5, #84
	beq	.L13848
	bl	platform_driver_unregister(PLT)
.L13848:
	ldr	r3, [r4, #2228]
	cmp	r6, r3
	bcc	.L13858
.L13850:
	ldr	r3, .L13867+80
	mvn	r0, #11
	ldr	r2, [sp, #44]
.LPIC3801:
	add	r3, pc, r3
	str	r2, [r3, #2228]
	b	.L13862
.L13868:
	.align	2
.L13867:
	.word	.LANCHOR1-(.LPIC3781+8)
	.word	.LANCHOR5-(.LPIC3785+8)
	.word	.LC208-(.LPIC3788+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3807+8))
	.word	.LANCHOR4-(.LPIC3791+8)
	.word	ghsuart_data_connect_w-(.LPIC3793+8)
	.word	.LC481-(.LPIC3792+8)
	.word	ghsuart_data_write_tohost-(.LPIC3795+8)
	.word	ghsuart_data_disconnect_w-(.LPIC3794+8)
	.word	ghsuart_data_write_tomdm-(.LPIC3796+8)
	.word	ghsuart_data_probe-(.LPIC3797+8)
	.word	ghsuart_data_remove-(.LPIC3798+8)
	.word	.LANCHOR1-(.LPIC3799+8)
	.word	.LANCHOR9-(.LPIC3782+8)
	.word	.LC763-(.LPIC3783+8)
	.word	.LANCHOR9-(.LPIC3789+8)
	.word	.LC770-(.LPIC3790+8)
	.word	.LANCHOR1-(.LPIC3802+8)
	.word	.LANCHOR9-(.LPIC3804+8)
	.word	.LC750-(.LPIC3805+8)
	.word	.LANCHOR1-(.LPIC3801+8)
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 152
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14056
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L14056+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
.LPIC3977:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #156
	sub	sp, sp, #156
.LPIC3809:
	add	r4, pc, r4
	ldr	r5, [r4, #3940]
	str	r3, [sp, #12]
	ldr	r3, [r3]
	cmp	r5, #0
	str	r3, [sp, #148]
	beq	.L13870
.L13949:
	ldr	r3, .L14056+8
.LPIC3810:
	add	r3, pc, r3
	ldr	r2, [r3, #3944]
	cmp	r2, #0
	ble	.L13942
	ldr	r2, [r3, #3896]
	cmp	r2, #0
	beq	.L14038
	ldr	r3, .L14056+12
	mov	r5, #0
	ldr	r8, .L14056+16
	ldr	r6, .L14056+20
	ldr	r7, .L14056+24
.LPIC3933:
	add	r3, pc, r3
.LPIC3936:
	add	r8, pc, r8
	str	r3, [sp]
	ldr	r3, .L14056+28
.LPIC3928:
	add	r6, pc, r6
	add	r8, r8, #2880
.LPIC3929:
	add	r7, pc, r7
	add	r8, r8, #8
	add	r6, r6, #2512
.LPIC3937:
	add	r3, pc, r3
	str	r3, [sp, #4]
	ldr	r3, .L14056+32
.LPIC3938:
	add	r3, pc, r3
	str	r3, [sp, #8]
	b	.L13935
.L13941:
	ldr	r2, [r3, #3896]
	add	r6, r6, #24
	mov	r3, r5
	cmp	r2, r5
	bls	.L13873
.L13935:
	ldrb	r3, [r7, #2872]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13937
	ldr	r0, [r9, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14039
	strb	r0, [r7, #2872]
.L13937:
	ldr	r4, [r6, #20]
	add	r10, r4, #132
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r9, #24]
	mov	fp, r0
	mov	r2, r5
	ldr	r1, [sp]
	mov	r0, #32
	str	lr, [r4, #128]
	bl	kasprintf(PLT)
	str	r0, [r4]
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L14040
	ldr	r3, [sp, #4]
	str	r8, [r4, #4]
	mov	r1, r4
	ldr	lr, .L14056+36
	mov	r0, r9
	ldr	ip, .L14056+40
	ldr	r2, .L14056+44
	str	r3, [r4, #32]
	ldr	r3, [sp, #8]
.LPIC3939:
	add	lr, pc, lr
.LPIC3940:
	add	ip, pc, ip
.LPIC3941:
	add	r2, pc, r2
	str	lr, [r4, #48]
	ldr	lr, .L14056+48
	str	r3, [r4, #36]
	ldr	r3, .L14056+52
	str	ip, [r4, #40]
	ldr	ip, .L14056+56
	str	r2, [r4, #52]
	ldr	r2, .L14056+60
.LPIC3943:
	add	lr, pc, lr
.LPIC3942:
	add	r3, pc, r3
.LPIC3944:
	add	ip, pc, ip
	str	lr, [r4, #60]
	str	r3, [r4, #56]
	ldr	r3, .L14056+64
.LPIC3945:
	add	r2, pc, r2
	str	ip, [r4, #92]
.LPIC3946:
	add	r3, pc, r3
	strd	r2, [r4, #104]
	bl	usb_add_function(PLT)
	cmp	r0, #0
	bne	.L14041
	ldr	r3, .L14056+68
	add	r5, r5, #1
.LPIC3949:
	add	r3, pc, r3
	ldr	r2, [r3, #3944]
	cmp	r2, r5
	bgt	.L13941
.L13942:
	mov	ip, #0
.L13872:
	ldr	r3, [sp, #12]
	mov	r0, ip
	ldr	r2, [sp, #148]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L14042
	add	sp, sp, #156
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13870:
	add	r2, sp, #48
	mov	r3, #1
	ldr	r8, .L14056+72
	mov	r0, r2
	sub	r1, r4, #1280
	str	r2, [sp]
	ldr	r2, .L14056+76
	sub	r1, r1, #8
	str	r3, [r4, #3940]
.LPIC3815:
	add	r8, pc, r8
.LPIC3818:
	add	r2, pc, r2
	str	r2, [sp, #4]
	mov	r2, #50
	bl	strlcpy(PLT)
	ldr	r3, .L14056+80
	str	r5, [sp, #20]
	ldr	r0, [sp]
.LPIC3824:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	strim(PLT)
	add	r3, sp, #98
	str	r0, [sp, #40]
	sub	r1, r4, #1328
	mov	r0, r3
	mov	r2, #50
	str	r3, [sp]
	ldr	r3, .L14056+84
	sub	r1, r1, #12
.LPIC3826:
	add	r3, pc, r3
	str	r3, [sp, #8]
	bl	strlcpy(PLT)
	ldr	r0, [sp]
	bl	strim(PLT)
	ldr	r3, .L14056+88
	str	r0, [sp, #44]
	str	r9, [sp]
.LPIC3951:
	add	r3, pc, r3
	str	r3, [sp, #24]
.L13875:
	add	r4, sp, #40
	b	.L13876
.L13905:
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	mov	fp, r0
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	cmp	r0, #0
	cmpne	fp, #0
	bne	.L14043
.L13876:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L13905
	ldr	r3, .L14056+92
	ldr	r9, [sp]
.LPIC3885:
	add	r3, pc, r3
	ldr	r0, [r3, #3908]
	ldr	r1, [r3, #3912]
	cmp	r0, #0
	bne	.L13907
	cmp	r1, #0
	beq	.L13911
.L13907:
	bl	gbam_setup(PLT)
	subs	ip, r0, #0
	beq	.L13911
.L13910:
	ldr	r1, .L14056+96
	str	ip, [sp]
	ldr	r0, .L14056+100
.LPIC3961:
	add	r1, pc, r1
	sub	r1, r1, #2784
.LPIC3962:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13872
.L13911:
	ldr	r4, .L14056+104
.LPIC3888:
	add	r4, pc, r4
	ldr	r1, [r4, #3900]
	cmp	r1, #0
	bne	.L14044
.L13909:
	ldr	r4, .L14056+108
.LPIC3889:
	add	r4, pc, r4
	ldr	r0, [r4, #3920]
	cmp	r0, #0
	bne	.L14045
.L13913:
	ldr	r4, .L14056+112
.LPIC3894:
	add	r4, pc, r4
	ldr	r0, [r4, #3916]
	cmp	r0, #0
	bne	.L14046
.L13918:
	ldr	r4, .L14056+116
.LPIC3902:
	add	r4, pc, r4
	ldr	r0, [r4, #3928]
	cmp	r0, #0
	bne	.L14047
.L13923:
	ldr	r4, .L14056+120
.LPIC3910:
	add	r4, pc, r4
	ldr	r0, [r4, #3924]
	cmp	r0, #0
	beq	.L13949
	mov	r1, #1
	bl	ghsuart_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L13910
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13949
	ldr	r2, .L14056+124
.LPIC3919:
	add	r2, pc, r2
	ldr	r1, [r2, #2516]
	cmp	r1, #9
	streq	ip, [r2, #2524]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13949
	ldr	r2, .L14056+128
.LPIC3921:
	add	r2, pc, r2
	ldr	r1, [r2, #2540]
	cmp	r1, #9
	streq	ip, [r2, #2548]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13949
	ldr	r3, .L14056+132
.LPIC3923:
	add	r3, pc, r3
	ldr	r2, [r3, #2564]
	cmp	r2, #9
	streq	ip, [r3, #2572]
	b	.L13949
.L14043:
	ldr	r2, [sp, #44]
	mov	r10, r0
	cmp	r2, #0
	beq	.L13877
	mov	r1, r8
	add	r0, sp, #44
	bl	strsep(PLT)
	str	r0, [sp, #20]
.L13877:
	ldr	r3, [sp, #4]
	ldr	r1, [r3, #3896]
	cmp	r1, #2
	bhi	.L14048
	ldr	r2, .L14056+136
.LPIC3978:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L13963
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	ip, r0, #0
	beq	.L13881
	ldr	r3, [sp, #4]
	ldr	r1, [r3, #3896]
.L13880:
	ldr	r3, [sp, #16]
	mov	r5, r1, asl #3
	mov	r9, r1, asl #5
	strb	r1, [ip, #116]
	ldr	r0, [sp, #8]
	rsb	r4, r5, r9
	add	lr, ip, #144
	mov	r2, #0
	add	r4, r3, r4
	str	lr, [ip, #144]
	str	r2, [ip, #132]
	mov	r2, #12
	str	r1, [r4, #2528]
	mov	r1, fp
	str	ip, [r4, #2532]
	str	lr, [ip, #148]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L13964
	ldr	r6, .L14056+140
	mov	r2, #12
	mov	r1, fp
.LPIC3827:
	add	r6, pc, r6
	mov	r0, r6
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r7, #2
	bne	.L14049
.L13882:
	ldr	r3, [sp, #24]
	rsb	ip, r5, r9
	mov	r2, #12
	ldr	r0, .L14056+144
	mov	r1, r10
	add	ip, r3, ip
.LPIC3952:
	add	r0, pc, r0
	add	r6, ip, #2512
	str	r7, [ip, #2516]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14050
.L13944:
	ldr	r0, .L14056+148
	mov	r2, #12
	mov	r1, r10
.LPIC3833:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	bne	.L14051
.L13885:
	ldr	r1, .L14056+152
	rsb	lr, r5, r9
	sub	r0, r7, #3
.LPIC3837:
	add	r1, pc, r1
	mov	ip, r1
	add	r1, ip, lr
	str	r2, [r1, #2512]
	cmp	r0, #7
	addls	pc, pc, r0, asl #2
	b	.L13886
.L13888:
	b	.L13887
	b	.L13889
	b	.L13886
	b	.L13886
	b	.L13886
	b	.L13890
	b	.L13891
	b	.L13892
	.p2align 1
.L13963:
	mov	ip, #16
	b	.L13880
.L14044:
	add	r2, sp, #39
	mov	r0, #0
	bl	gsmd_ctrl_setup(PLT)
	subs	ip, r0, #0
	bne	.L13910
	ldr	r2, [r4, #3896]
	cmp	r2, #0
	beq	.L13909
	ldr	r1, .L14056+156
	ldrb	r3, [sp, #39]	@ zero_extendqisi2
.LPIC3891:
	add	r1, pc, r1
	ldr	r1, [r1, #2532]
	cmp	r1, #0
	beq	.L13914
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #116]
.L13914:
	cmp	r2, #1
	bls	.L13909
	ldr	r1, .L14056+160
.LPIC3892:
	add	r1, pc, r1
	ldr	r1, [r1, #2556]
	cmp	r1, #0
	beq	.L13915
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #116]
.L13915:
	cmp	r2, #2
	beq	.L13909
	ldr	r2, .L14056+164
.LPIC3893:
	add	r2, pc, r2
	ldr	r2, [r2, #2580]
	cmp	r2, #0
	beq	.L13909
	ldrb	r1, [r2, #116]	@ zero_extendqisi2
	add	r3, r3, r1
	strb	r3, [r2, #116]
	b	.L13909
.L14055:
	mov	r2, #1
	str	r2, [r4, #2512]
.L13889:
	ldr	r0, .L14056+168
	rsb	r1, r5, r9
	ldr	r2, .L14056+172
.LPIC3842:
	add	r0, pc, r0
	ldr	ip, [r0, #3904]
.LPIC3843:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2512]
	add	lr, ip, #1
	str	ip, [r1, #2524]
	str	lr, [r0, #3904]
.L13892:
	sub	r1, r2, #5
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L13894
.L13896:
	b	.L13895
	b	.L13897
	b	.L13897
	b	.L13898
	b	.L13899
	b	.L13900
	.p2align 1
.L13897:
	ldr	r2, .L14056+176
	rsb	r5, r5, r9
	ldr	r3, .L14056+180
.LPIC3868:
	add	r2, pc, r2
	ldr	r1, [r2, #3912]
.LPIC3869:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2520]
	str	r0, [r2, #3912]
.L13900:
	ldr	r3, .L14056+184
.LPIC3879:
	add	r3, pc, r3
	ldr	r1, [r3, #3896]
	ldr	r2, [r3, #3944]
	add	r1, r1, #1
	add	r2, r2, #1
	str	r1, [r3, #3896]
	str	r2, [r3, #3944]
	b	.L13875
.L13964:
	mov	r7, #1
	b	.L13882
.L14049:
	ldr	r7, .L14056+188
	mov	r2, #12
	mov	r1, fp
.LPIC3828:
	add	r7, pc, r7
	mov	r0, r7
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14052
	mov	r3, #3
	mov	r2, #12
	ldr	r0, [sp, #8]
	mov	r1, r10
	str	r3, [r4, #2516]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14053
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2512]
	beq	.L13887
	mov	r0, r7
	mov	r2, #12
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #3
	streq	r3, [r4, #2512]
	beq	.L13887
	ldr	r0, .L14056+192
	mov	r2, #12
	mov	r1, r10
	mov	r7, #3
.LPIC3974:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	streq	r2, [r4, #2512]
	beq	.L13887
.L13959:
	ldr	r0, .L14056+196
	mov	r2, #12
	mov	r1, r10
.LPIC3836:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #5
	beq	.L13885
	mov	r0, r10
	bl	str_to_xport.part.59(PLT)
	mov	r2, r0
	b	.L13885
.L14051:
	ldr	r0, .L14056+200
	mov	r2, #12
	mov	r1, r10
.LPIC3834:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	beq	.L13885
	ldr	r0, .L14056+204
	mov	r2, #12
	mov	r1, r10
.LPIC3835:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	beq	.L13885
	b	.L13959
.L14045:
	mov	r1, #1
	bl	ghsic_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L13910
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13913
	ldr	r2, .L14056+208
.LPIC3896:
	add	r2, pc, r2
	ldr	r1, [r2, #2512]
	cmp	r1, #8
	streq	ip, [r2, #2520]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13913
	ldr	r2, .L14056+212
.LPIC3898:
	add	r2, pc, r2
	ldr	r1, [r2, #2536]
	cmp	r1, #8
	streq	ip, [r2, #2544]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13913
	ldr	r3, .L14056+216
.LPIC3900:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	cmp	r2, #8
	streq	ip, [r3, #2568]
	b	.L13913
.L14046:
	mov	r1, #1
	bl	ghsic_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L13910
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13918
	ldr	r2, .L14056+220
.LPIC3904:
	add	r2, pc, r2
	ldr	r1, [r2, #2516]
	cmp	r1, #8
	streq	ip, [r2, #2524]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13918
	ldr	r2, .L14056+224
.LPIC3906:
	add	r2, pc, r2
	ldr	r1, [r2, #2540]
	cmp	r1, #8
	streq	ip, [r2, #2548]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13918
	ldr	r3, .L14056+228
.LPIC3908:
	add	r3, pc, r3
	ldr	r2, [r3, #2564]
	cmp	r2, #8
	streq	ip, [r3, #2572]
	b	.L13918
.L14047:
	mov	r1, #1
	bl	ghsuart_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L13910
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13923
	ldr	r2, .L14056+232
.LPIC3912:
	add	r2, pc, r2
	ldr	r1, [r2, #2512]
	cmp	r1, #9
	streq	ip, [r2, #2520]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13923
	ldr	r2, .L14056+236
.LPIC3914:
	add	r2, pc, r2
	ldr	r1, [r2, #2536]
	cmp	r1, #9
	streq	ip, [r2, #2544]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13923
	ldr	r3, .L14056+240
.LPIC3916:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	cmp	r2, #9
	streq	ip, [r3, #2568]
	b	.L13923
.L13891:
	ldr	r0, .L14056+244
	rsb	r1, r5, r9
	ldr	r2, .L14056+248
.LPIC3850:
	add	r0, pc, r0
	ldr	ip, [r0, #3924]
.LPIC3851:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2512]
	add	lr, ip, #1
	str	ip, [r1, #2524]
	str	lr, [r0, #3924]
	b	.L13892
.L13890:
	mov	r1, fp
	ldr	r0, [sp, #20]
	bl	ghsic_ctrl_set_port_name(PLT)
	ldr	r0, .L14056+252
	rsb	r1, r5, r9
	ldr	r2, .L14056+256
.LPIC3846:
	add	r0, pc, r0
	ldr	ip, [r0, #3916]
.LPIC3847:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2512]
	add	lr, ip, #1
	str	ip, [r1, #2524]
	str	lr, [r0, #3916]
	b	.L13892
.L14053:
	mov	r2, #1
	str	r2, [r4, #2512]
.L13887:
	ldr	r0, .L14056+260
	rsb	r1, r5, r9
	ldr	r2, .L14056+264
.LPIC3838:
	add	r0, pc, r0
	ldr	ip, [r0, #3900]
.LPIC3839:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2512]
	add	lr, ip, #1
	str	ip, [r1, #2524]
	str	lr, [r0, #3900]
	b	.L13892
.L13899:
	ldr	r2, .L14056+268
	rsb	r5, r5, r9
	ldr	r3, .L14056+272
.LPIC3874:
	add	r2, pc, r2
	ldr	r1, [r2, #3928]
.LPIC3875:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2520]
	str	r0, [r2, #3928]
	b	.L13900
.L13898:
	mov	r1, r10
	ldr	r0, [sp, #20]
	rsb	r5, r5, r9
	bl	ghsic_data_set_port_name(PLT)
	ldr	r2, .L14056+276
	ldr	r3, .L14056+280
.LPIC3871:
	add	r2, pc, r2
	ldr	r1, [r2, #3920]
.LPIC3872:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2520]
	str	r0, [r2, #3920]
	b	.L13900
.L13895:
	ldr	r2, .L14056+284
	rsb	r5, r5, r9
	ldr	r3, .L14056+288
.LPIC3865:
	add	r2, pc, r2
	ldr	r1, [r2, #3908]
.LPIC3866:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2520]
	str	r0, [r2, #3908]
	b	.L13900
.L14050:
	mov	r2, #1
	str	r2, [r6]
.L13886:
	ldr	r1, .L14056+292
	mov	r2, r7
	ldr	r0, .L14056+296
.LPIC3854:
	add	r1, pc, r1
.LPIC3855:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
.L13901:
	ldr	r6, .L14056+300
.LPIC3856:
	add	r6, pc, r6
	ldr	r2, [r6, #3896]
	cmp	r2, #0
	beq	.L13904
	ldr	r4, .L14056+304
	mov	r5, #0
.LPIC3881:
	add	r4, pc, r4
	add	r4, r4, #2512
.L13903:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #3896]
	cmp	r5, r3
	bcc	.L13903
.L13904:
	ldr	r2, .L14056+308
	mov	r1, #0
	mvn	ip, #18
.LPIC3857:
	add	r2, pc, r2
	str	r1, [r2, #3896]
	str	r1, [r2, #3900]
	str	r1, [r2, #3904]
	str	r1, [r2, #3908]
	str	r1, [r2, #3916]
	str	r1, [r2, #3920]
	str	r1, [r2, #3924]
	str	r1, [r2, #3928]
.L13879:
	ldr	r1, .L14056+312
	mov	r3, r10
	mov	r2, fp
	ldr	r0, .L14056+316
	str	ip, [sp]
.LPIC3959:
	add	r1, pc, r1
	sub	r1, r1, #2784
.LPIC3960:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13872
.L14052:
	ldr	r3, .L14056+320
	mov	r2, #12
	mov	r1, fp
.LPIC3829:
	add	r3, pc, r3
	mov	r0, r3
	str	r3, [sp, #28]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	mov	r2, #12
	bne	.L14054
	mov	r3, #4
	mov	r1, r10
	ldr	r0, [sp, #8]
	str	r3, [r4, #2516]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14055
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2512]
	beq	.L13889
	mov	r2, #12
	mov	r0, r7
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	streq	r2, [r4, #2512]
	beq	.L13889
	ldr	r0, [sp, #28]
	mov	r2, #12
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	mov	r7, #4
	moveq	r3, #4
	streq	r3, [r4, #2512]
	beq	.L13889
	b	.L13959
.L13894:
	ldr	r1, .L14056+324
	ldr	r0, .L14056+328
.LPIC3877:
	add	r1, pc, r1
	sub	r1, r1, #2832
.LPIC3878:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13901
.L14040:
	ldr	r1, .L14056+332
	mvn	ip, #11
	ldr	r0, .L14056+336
	str	ip, [sp]
.LPIC3934:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC3935:
	add	r0, pc, r0
	add	r1, r1, ip
	bl	printk(PLT)
	ldr	ip, [sp]
.L13936:
	ldr	r1, .L14056+340
	mov	r2, r5
	str	ip, [sp]
	ldr	r0, .L14056+344
.LPIC3963:
	add	r1, pc, r1
	sub	r1, r1, #2784
.LPIC3964:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13872
.L14038:
	mov	r3, r2
	mov	r5, r2
.L13873:
	ldr	r1, .L14056+348
	mvn	ip, #18
	ldr	r0, .L14056+352
	str	ip, [sp]
.LPIC3926:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC3927:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13936
.L14041:
	ldr	r1, .L14056+356
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14056+360
.LPIC3947:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC3948:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	ip, [sp]
	b	.L13936
.L14054:
	ldr	r0, .L14056+364
	mov	r1, fp
.LPIC3830:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r7, #5
	beq	.L13882
	mov	r0, fp
	bl	str_to_xport.part.59(PLT)
	mov	r7, r0
	mov	r2, #12
	ldr	r0, [sp, #8]
	mov	r1, r10
	str	r7, [r4, #2516]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #1
	bne	.L13944
	b	.L13885
.L14039:
	ldr	r1, .L14056+368
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14056+372
.LPIC3930:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC3931:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13936
.L14048:
	ldr	r1, .L14056+376
	mvn	ip, #21
	mov	r2, #3
	ldr	r0, .L14056+380
	str	ip, [sp]
.LPIC3819:
	add	r1, pc, r1
.LPIC3820:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13879
.L13881:
	ldr	r1, .L14056+384
	mvn	ip, #11
	ldr	r0, .L14056+388
	str	ip, [sp]
.LPIC3822:
	add	r1, pc, r1
.LPIC3823:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13879
.L14042:
	bl	__stack_chk_fail(PLT)
.L14057:
	.align	2
.L14056:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC3977+8))
	.word	.LANCHOR4-(.LPIC3809+8)
	.word	.LANCHOR4-(.LPIC3810+8)
	.word	.LC795-(.LPIC3933+8)
	.word	.LANCHOR0-(.LPIC3936+8)
	.word	.LANCHOR1-(.LPIC3928+8)
	.word	.LANCHOR0-(.LPIC3929+8)
	.word	frmnet_bind-(.LPIC3937+8)
	.word	frmnet_unbind-(.LPIC3938+8)
	.word	frmnet_disable-(.LPIC3939+8)
	.word	frmnet_set_alt-(.LPIC3940+8)
	.word	frmnet_setup-(.LPIC3941+8)
	.word	frmnet_resume-(.LPIC3943+8)
	.word	frmnet_suspend-(.LPIC3942+8)
	.word	frmnet_send_cpkt_response-(.LPIC3944+8)
	.word	frmnet_disconnect-(.LPIC3945+8)
	.word	frmnet_connect-(.LPIC3946+8)
	.word	.LANCHOR4-(.LPIC3949+8)
	.word	.LC299-(.LPIC3815+8)
	.word	.LANCHOR4-(.LPIC3818+8)
	.word	.LANCHOR1-(.LPIC3824+8)
	.word	.LC0-(.LPIC3826+8)
	.word	.LANCHOR1-(.LPIC3951+8)
	.word	.LANCHOR4-(.LPIC3885+8)
	.word	.LANCHOR9-(.LPIC3961+8)
	.word	.LC799-(.LPIC3962+8)
	.word	.LANCHOR4-(.LPIC3888+8)
	.word	.LANCHOR4-(.LPIC3889+8)
	.word	.LANCHOR4-(.LPIC3894+8)
	.word	.LANCHOR4-(.LPIC3902+8)
	.word	.LANCHOR4-(.LPIC3910+8)
	.word	.LANCHOR1-(.LPIC3919+8)
	.word	.LANCHOR1-(.LPIC3921+8)
	.word	.LANCHOR1-(.LPIC3923+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3978+8))
	.word	.LC1-(.LPIC3827+8)
	.word	.LC0-(.LPIC3952+8)
	.word	.LC1-(.LPIC3833+8)
	.word	.LANCHOR1-(.LPIC3837+8)
	.word	.LANCHOR1-(.LPIC3891+8)
	.word	.LANCHOR1-(.LPIC3892+8)
	.word	.LANCHOR1-(.LPIC3893+8)
	.word	.LANCHOR4-(.LPIC3842+8)
	.word	.LANCHOR1-(.LPIC3843+8)
	.word	.LANCHOR4-(.LPIC3868+8)
	.word	.LANCHOR1-(.LPIC3869+8)
	.word	.LANCHOR4-(.LPIC3879+8)
	.word	.LC2-(.LPIC3828+8)
	.word	.LC3-(.LPIC3974+8)
	.word	.LC4-(.LPIC3836+8)
	.word	.LC2-(.LPIC3834+8)
	.word	.LC3-(.LPIC3835+8)
	.word	.LANCHOR1-(.LPIC3896+8)
	.word	.LANCHOR1-(.LPIC3898+8)
	.word	.LANCHOR1-(.LPIC3900+8)
	.word	.LANCHOR1-(.LPIC3904+8)
	.word	.LANCHOR1-(.LPIC3906+8)
	.word	.LANCHOR1-(.LPIC3908+8)
	.word	.LANCHOR1-(.LPIC3912+8)
	.word	.LANCHOR1-(.LPIC3914+8)
	.word	.LANCHOR1-(.LPIC3916+8)
	.word	.LANCHOR4-(.LPIC3850+8)
	.word	.LANCHOR1-(.LPIC3851+8)
	.word	.LANCHOR4-(.LPIC3846+8)
	.word	.LANCHOR1-(.LPIC3847+8)
	.word	.LANCHOR4-(.LPIC3838+8)
	.word	.LANCHOR1-(.LPIC3839+8)
	.word	.LANCHOR4-(.LPIC3874+8)
	.word	.LANCHOR1-(.LPIC3875+8)
	.word	.LANCHOR4-(.LPIC3871+8)
	.word	.LANCHOR1-(.LPIC3872+8)
	.word	.LANCHOR4-(.LPIC3865+8)
	.word	.LANCHOR1-(.LPIC3866+8)
	.word	.LANCHOR9-(.LPIC3854+8)
	.word	.LC792-(.LPIC3855+8)
	.word	.LANCHOR4-(.LPIC3856+8)
	.word	.LANCHOR1-(.LPIC3881+8)
	.word	.LANCHOR4-(.LPIC3857+8)
	.word	.LANCHOR9-(.LPIC3959+8)
	.word	.LC798-(.LPIC3960+8)
	.word	.LC3-(.LPIC3829+8)
	.word	.LANCHOR9-(.LPIC3877+8)
	.word	.LC792-(.LPIC3878+8)
	.word	.LANCHOR9-(.LPIC3934+8)
	.word	.LC796-(.LPIC3935+8)
	.word	.LANCHOR9-(.LPIC3963+8)
	.word	.LC800-(.LPIC3964+8)
	.word	.LANCHOR9-(.LPIC3926+8)
	.word	.LC793-(.LPIC3927+8)
	.word	.LANCHOR9-(.LPIC3947+8)
	.word	.LC797-(.LPIC3948+8)
	.word	.LC4-(.LPIC3830+8)
	.word	.LANCHOR9-(.LPIC3930+8)
	.word	.LC794-(.LPIC3931+8)
	.word	.LANCHOR9-(.LPIC3819+8)
	.word	.LC790-(.LPIC3820+8)
	.word	.LANCHOR9-(.LPIC3822+8)
	.word	.LC791-(.LPIC3823+8)
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	ip, .L14060
	mov	r4, #1
	str	lr, [sp, #4]
	ldr	lr, .L14060+4
	mov	r2, r4
	mov	r1, r4
	mov	r3, #0
.LPIC3980:
	add	ip, pc, ip
.LPIC3979:
	add	lr, pc, lr
	str	r4, [ip], #4
	str	r0, [lr, #-1428]
	mov	r0, ip
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up(PLT)
.L14061:
	.align	2
.L14060:
	.word	.LANCHOR1-(.LPIC3980+8)
	.word	.LANCHOR4-(.LPIC3979+8)
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	str	lr, [sp, #20]
	movw	lr, #8482
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #4]	@ unaligned
	ldr	r5, [r0, #24]
	orr	r3, r3, r2, asl #8
	ldrh	r2, [r1, #6]	@ unaligned
	cmp	r3, lr
	ldr	r7, [r5, #4]
	beq	.L14064
	movw	r0, #41249
	cmp	r3, r0
	beq	.L14065
	movw	r1, #8480
	cmp	r3, r1
	beq	.L14077
.L14073:
	mvn	r6, #94
.L14075:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14077:
	cmp	r2, #7
	bne	.L14073
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r3, r6
	bne	.L14073
	ldr	r1, [r5]
	mov	r6, r2
	ldr	r3, .L14078
	ldr	r2, [r1, #4]
.LPIC3982:
	add	r3, pc, r3
	str	r4, [r2]
	str	r3, [r7, #28]
	b	.L14067
.L14065:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r3, r6
	bne	.L14073
	cmp	r2, #7
	add	r1, r4, #160
	ldr	r0, [r7]
	movcc	r6, r2
	movcs	r6, #7
	mov	r2, r6
	bl	memcpy(PLT)
	b	.L14067
.L14064:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r3, r6
	bne	.L14073
	mov	r0, ip
	strh	ip, [r4, #168]	@ movhi
	mov	r6, #0
	bl	notify_control_line_state(PLT)
.L14067:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r6, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L14075
	ldr	r0, [r5]
	mov	r3, r6
	ldr	r1, .L14078+4
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC3983:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14075
.L14079:
	.align	2
.L14078:
	.word	acm_complete_set_line_coding-(.LPIC3982+8)
	.word	.LC801-(.LPIC3983+8)
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #21249
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	movt	r3, 16388
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	beq	.L14082
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	beq	.L14083
	ldr	r0, .L14092
.LPIC3987:
	add	r0, pc, r0
	bl	printk(PLT)
	movw	r0, #65021
	movt	r0, 65535
.L14084:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14083:
	ldr	r0, .L14092+4
	mov	r1, r2
.LPIC3986:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	bl	notify_control_line_state(PLT)
	mov	r0, #0
	b	.L14084
.L14082:
	ldr	r3, .L14092+8
.LPIC3984:
	add	r3, pc, r3
	ldr	r4, [r3, #3948]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L14084
	add	r6, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L14091
.L14086:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L14084
.L14091:
	ldr	r0, .L14092+12
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	ldrh	r2, [r4, #170]
.LPIC3985:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r4, #170
	mov	r0, r4
	bl	acm_cdc_notify.constprop.115(PLT)
	b	.L14086
.L14093:
	.align	2
.L14092:
	.word	.LC803-(.LPIC3987+8)
	.word	.LC802-(.LPIC3986+8)
	.word	.LANCHOR4-(.LPIC3984+8)
	.word	.LC393-(.LPIC3985+8)
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.global	modem_register
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L14098
	ldr	r3, .L14099
	ldr	r0, .L14099+4
.LPIC3989:
	add	r3, pc, r3
.LPIC3990:
	add	r0, pc, r0
	str	r2, [r3, #3948]
	bl	printk(PLT)
	mov	r0, #0
.L14096:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14098:
	ldr	r0, .L14099+8
.LPIC3988:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L14096
.L14100:
	.align	2
.L14099:
	.word	.LANCHOR4-(.LPIC3989+8)
	.word	.LC805-(.LPIC3990+8)
	.word	.LC804-(.LPIC3988+8)
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14102
	ldr	r6, .L14141
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #144]
.LPIC3991:
	add	r6, pc, r6
	strb	r5, [r6, #2578]
	strb	r5, [r6, #2586]
	strb	r5, [r6, #2599]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14102
	uxtb	r5, r5
	add	r1, r6, #2624
	strb	r5, [r4, #145]
	strb	r5, [r6, #2606]
	strb	r5, [r6, #2600]
	strb	r5, [r6, #2620]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14104
	add	r1, r6, #2624
	str	r0, [r4, #88]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14104
	add	r1, r6, #2640
	str	r0, [r4, #92]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14104
	str	r3, [r4, #152]
	mov	r2, #208
	mov	r1, #10
	str	r7, [r3]
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r4, #156]
	beq	.L14104
	ldr	r1, .L14141+4
	mov	r0, r4
	ldr	r3, .L14141+8
	ldrb	lr, [r6, #2626]	@ zero_extendqisi2
	ldrb	ip, [r6, #2638]	@ zero_extendqisi2
.LPIC4000:
	add	r1, pc, r1
	ldrb	r5, [r6, #2650]	@ zero_extendqisi2
.LPIC4009:
	add	r3, pc, r3
	str	r1, [r2, #28]
	ldr	r8, [r4, #156]
	add	r2, r3, #2944
	add	r1, r3, #2992
	add	r2, r2, #8
	strb	lr, [r6, #2662]
	add	r1, r1, #4
	add	r3, r3, #2896
	strb	r5, [r6, #2686]
	strb	lr, [r6, #2698]
	str	r4, [r8, #32]
	strb	ip, [r6, #2674]
	strb	ip, [r6, #2710]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L14140
.L14102:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14106
	bl	kfree(PLT)
.L14106:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14107
	bl	kfree(PLT)
.L14107:
	ldr	r1, [r4, #156]
	cmp	r1, #0
	beq	.L14108
	ldr	r0, [r4, #152]
	bl	gs_free_req(PLT)
.L14108:
	ldr	r3, [r4, #152]
	ldr	r1, .L14141+12
	cmp	r3, #0
	movne	r2, #0
.LPIC4012:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	str	r5, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L14105:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14104:
	mvn	r5, #18
	b	.L14102
.L14140:
	mov	r0, r4
	bl	modem_register(PLT)
	b	.L14105
.L14142:
	.align	2
.L14141:
	.word	.LANCHOR2-(.LPIC3991+8)
	.word	acm_cdc_notify_complete-(.LPIC4000+8)
	.word	.LANCHOR0-(.LPIC4009+8)
	.word	.LC806-(.LPIC4012+8)
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.global	modem_unregister
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L14145
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, #1
	ldr	ip, .L14145+4
	str	lr, [sp, #4]
	mov	lr, #0
	mov	r2, r4
	mov	r1, r4
	mov	r3, lr
.LPIC4014:
	add	r0, pc, r0
.LPIC4013:
	add	ip, pc, ip
	str	r4, [r0], #4
	str	lr, [ip, #3948]
	bl	__wake_up(PLT)
	ldr	r0, .L14145+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4016:
	add	r0, pc, r0
	b	printk(PLT)
.L14146:
	.align	2
.L14145:
	.word	.LANCHOR1-(.LPIC4014+8)
	.word	.LANCHOR4-(.LPIC4013+8)
	.word	.LC807-(.LPIC4016+8)
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	modem_unregister(PLT)
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	ldrd	r0, [r4, #152]
	bl	gs_free_req(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.global	acm_bind_config
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r7, .L14166
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4017:
	add	r7, pc, r7
	ldrb	r3, [r7, #3040]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14162
.L14150:
	ldr	r3, .L14166+4
.LPIC4035:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14157
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14163
.L14152:
	mov	r1, #0
	ldr	lr, .L14166+8
	strb	r6, [r4, #146]
	ldr	ip, .L14166+12
	mov	r2, r6
	mov	r0, #208
	ldr	r3, .L14166+16
	str	r1, [r4, #148]
	ldr	r1, .L14166+20
.LPIC4025:
	add	lr, pc, lr
.LPIC4026:
	add	ip, pc, ip
.LPIC4027:
	add	r3, pc, r3
	str	lr, [r4, #116]
.LPIC4028:
	add	r1, pc, r1
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	bl	kasprintf(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14164
	ldr	r3, .L14166+24
	mov	r0, r5
	mov	r1, r4
	ldr	r6, .L14166+28
	ldr	r5, .L14166+32
	ldr	lr, .L14166+36
	ldr	ip, .L14166+40
.LPIC4029:
	add	r3, pc, r3
	ldr	r2, .L14166+44
	add	r3, r3, #3072
.LPIC4030:
	add	r6, pc, r6
.LPIC4031:
	add	r5, pc, r5
.LPIC4032:
	add	lr, pc, lr
	str	r6, [r4, #32]
.LPIC4033:
	add	ip, pc, ip
	str	r5, [r4, #36]
.LPIC4034:
	add	r2, pc, r2
	str	r3, [r4, #4]
	str	lr, [r4, #40]
	str	ip, [r4, #52]
	str	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L14165
.L14151:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14162:
	ldr	r0, [r0, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14151
	ldr	r4, .L14166+48
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3040]
.LPIC4019:
	add	r4, pc, r4
	strb	r3, [r4, #2592]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14151
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3048]
	strb	r3, [r4, #2612]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14151
	uxtb	r3, r0
	strb	r3, [r7, #3056]
	strb	r3, [r4, #2583]
	b	.L14150
.L14157:
	mov	r4, #16
	b	.L14152
.L14165:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L14151
.L14163:
	mvn	r0, #11
	b	.L14151
.L14164:
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L14151
.L14167:
	.align	2
.L14166:
	.word	.LANCHOR0-(.LPIC4017+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4035+8))
	.word	acm_connect-(.LPIC4025+8)
	.word	acm_disconnect-(.LPIC4026+8)
	.word	acm_send_break-(.LPIC4027+8)
	.word	.LC808-(.LPIC4028+8)
	.word	.LANCHOR0-(.LPIC4029+8)
	.word	acm_bind-(.LPIC4030+8)
	.word	acm_unbind-(.LPIC4031+8)
	.word	acm_set_alt-(.LPIC4032+8)
	.word	acm_setup-(.LPIC4033+8)
	.word	acm_disable-(.LPIC4034+8)
	.word	.LANCHOR2-(.LPIC4019+8)
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	ldr	r3, [r7]
	cmp	r3, #0
	movgt	r5, r1
	movgt	r4, #0
	ble	.L14172
.L14169:
	uxtb	r1, r4
	mov	r0, r5
	bl	acm_bind_config(PLT)
	subs	r6, r0, #0
	bne	.L14176
	ldr	r3, [r7]
	add	r4, r4, #1
	cmp	r3, r4
	bgt	.L14169
.L14172:
	mov	r6, #0
.L14170:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14176:
	ldr	r1, .L14177
	mov	r2, r4
	ldr	r0, .L14177+4
.LPIC4036:
	add	r1, pc, r1
	sub	r1, r1, #2752
.LPIC4037:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14170
.L14178:
	.align	2
.L14177:
	.word	.LANCHOR9-(.LPIC4036+8)
	.word	.LC809-(.LPIC4037+8)
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	adb_req_put
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add(PLT)
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14187
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
.LPIC4038:
	add	r3, pc, r3
	ldr	r4, [r3, #-1468]
	cmp	r1, #0
	movne	r3, #1
	add	r1, r4, #120
	strne	r3, [r4, #104]
	mov	r0, r4
	bl	adb_req_put(PLT)
	ldr	lr, [sp, #4]
	add	r0, r4, #140
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up(PLT)
.L14188:
	.align	2
.L14187:
	.word	.LANCHOR4-(.LPIC4038+8)
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #4
	sub	sp, sp, #4
	str	r3, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L14218
	ldr	r6, .L14224
	ldr	r7, [r4, #84]
.LPIC4039:
	add	r6, pc, r6
	add	r1, r6, #2720
	strb	r0, [r6, #2722]
	add	r1, r1, #12
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14191
	add	r1, r6, #2736
	str	r4, [r0]
	add	r1, r1, #8
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	beq	.L14191
	str	r4, [r5]
	mov	r1, #208
	str	r5, [r4, #96]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L14195
	ldr	r8, .L14224+4
.LPIC4054:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	ldr	r0, [r8, #48]
	cmp	r0, #0
	beq	.L14193
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L14222
.L14194:
	ldr	r3, .L14224+8
	mov	r5, #4
	mov	fp, #16
	ldr	r9, .L14224+12
.LPIC4043:
	add	r3, pc, r3
.LPIC4044:
	add	r9, pc, r9
	str	r3, [r6, #28]
	str	r6, [r4, #152]
.L14198:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #4096
	mov	r1, #208
	beq	.L14195
	ldr	r3, [r8, #48]
	subs	r0, r3, #0
	beq	.L14196
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L14223
.L14197:
	str	r9, [r6, #28]
	mov	r2, r6
	add	r1, r4, #120
	mov	r0, r4
	bl	adb_req_put(PLT)
	subs	r5, r5, #1
	bne	.L14198
	ldr	r2, [r10, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14220
	ldr	r3, .L14224+16
.LPIC4045:
	add	r3, pc, r3
	ldrb	r0, [r3, #2734]	@ zero_extendqisi2
	ldrb	r1, [r3, #2746]	@ zero_extendqisi2
	strb	r0, [r3, #2758]
	strb	r1, [r3, #2770]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L14220
	strb	r0, [r3, #2782]
	mov	r0, r5
	strb	r1, [r3, #2794]
.L14218:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14193:
	mov	r3, #16
	str	r3, [r6]
	b	.L14194
.L14196:
	str	fp, [r6]
	b	.L14197
.L14220:
	mov	r0, r5
	b	.L14218
.L14222:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14195:
	ldr	r0, .L14224+20
.LPIC4053:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L14218
.L14191:
	mvn	r0, #18
	b	.L14218
.L14223:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14195
.L14225:
	.align	2
.L14224:
	.word	.LANCHOR2-(.LPIC4039+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4054+8))
	.word	adb_complete_out-(.LPIC4043+8)
	.word	adb_complete_in-(.LPIC4044+8)
	.word	.LANCHOR2-(.LPIC4045+8)
	.word	.LC810-(.LPIC4053+8)
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.global	adb_req_get
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	beq	.L14228
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
.L14227:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14228:
	mov	r4, #0
	b	.L14227
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #0
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #1
	str	r8, [sp, #16]
	mov	r3, r2
	add	r0, r6, #128
	str	lr, [sp, #20]
	str	r2, [r6, #100]
	mov	r2, r1
	str	r1, [r6, #104]
	mov	r1, #3
	bl	__wake_up(PLT)
	ldr	r4, [r6, #152]
	ldr	r5, [r6, #96]
	cmp	r4, #0
	beq	.L14231
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14231:
	add	r7, r6, #120
	b	.L14232
.L14233:
	ldr	r4, [r6, #92]
	ldr	r0, [r5]
	bl	kfree(PLT)
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L14232:
	mov	r1, r7
	mov	r0, r6
	bl	adb_req_get(PLT)
	subs	r5, r0, #0
	bne	.L14233
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14282
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4055:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3, #-1468]
	str	r1, [sp]
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L14261
	mov	r6, r2
	add	r8, r4, #112
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L14275
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L14270:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14275:
	mov	r3, sp
	mov	fp, r6
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L14260:
	cmp	r6, #0
	beq	.L14259
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14242
	add	r5, r4, #120
.L14255:
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	beq	.L14276
.L14243:
	cmp	r6, #4096
	ldr	ip, [r7, #8]
	movcc	r9, r6
	movcs	r9, #4096
	ldr	r1, [sp]
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r9; sbcccs r2, r2, ip; movcc ip, #0
@ 0 "" 2
	cmp	ip, #0
	ldr	r0, [r3]
	beq	.L14277
	mov	r1, r9
	str	r3, [sp]
	mvn	fp, #13
	bl	__memzero(PLT)
	ldr	r3, [sp]
.L14252:
	mov	r2, r3
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_put(PLT)
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L14256
.L14279:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up(PLT)
	b	.L14256
.L14276:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14244
	ldr	r2, .L14282+4
	add	r10, sp, #12
	add	r9, r4, #140
	ldr	r1, [r7, #12]
	str	r3, [sp, #12]
	add	r3, sp, #24
	str	r3, [sp, #24]
.LPIC4057:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L14248
.L14278:
	bl	schedule(PLT)
.L14248:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r9
	bl	prepare_to_wait(PLT)
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	bne	.L14245
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14246
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L14278
	mov	fp, #65024
	mov	r1, r10
	mov	r0, r9
	movt	fp, 65535
	bl	finish_wait(PLT)
.L14259:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14279
.L14256:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, fp
	b	.L14270
.L14244:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L14255
.L14242:
	mvn	fp, #4
	b	.L14259
.L14245:
	mov	r1, r10
	mov	r0, r9
	str	r3, [sp, #4]
	bl	finish_wait(PLT)
	ldr	r3, [sp, #4]
	b	.L14243
.L14277:
	mov	r2, r9
	str	r3, [sp, #4]
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L14280
	str	r9, [r3, #4]
	ldr	r0, [r4, #92]
	mov	r1, r3
	mov	r2, #32
	str	r3, [sp, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	ldr	r3, [sp, #4]
	blt	.L14281
	ldr	r3, [sp]
	rsb	r6, r9, r6
	add	r3, r3, r9
	str	r3, [sp]
	b	.L14260
.L14246:
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait(PLT)
	b	.L14260
.L14261:
	mvn	r0, #18
	b	.L14270
.L14281:
	mov	r2, #1
	mvn	fp, #4
	str	r2, [r4, #104]
	b	.L14252
.L14280:
	mvn	fp, #13
	b	.L14252
.L14283:
	.align	2
.L14282:
	.word	.LANCHOR4-(.LPIC4055+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4057+8))
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.global	f_midi_bind_config
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [sp, #76]
	cmp	r6, #0
	beq	.L14285
	mvn	ip, #0
	str	ip, [r6]
	str	ip, [r6, #4]
.L14285:
	ldr	ip, [sp, #64]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L14302
	ldr	r10, .L14332
	mov	r7, r0
	mov	r5, r3
	str	r2, [sp, #12]
	mov	r9, r1
.LPIC4077:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	ldr	r0, [r10, #36]
	cmp	r0, #0
	beq	.L14303
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14325
.L14287:
	cmp	r5, #0
	beq	.L14288
	add	fp, r4, #228
	mov	r8, #0
	b	.L14291
.L14327:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L14326
.L14289:
	strb	r8, [r0, #8]
	add	r8, r8, #1
	mov	r3, #0
	cmp	r8, r5
	str	r4, [r0]
	str	r3, [r0, #4]
	str	r0, [fp, #4]!
	beq	.L14288
.L14291:
	ldr	r3, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	subs	r0, r3, #0
	bne	.L14327
	mov	r0, #16
	b	.L14289
.L14288:
	ldr	r3, [r7, #24]
	mov	r2, r4
	add	r0, r4, #300
	ldr	r1, .L14332+4
	ldr	r3, [r3]
.LPIC4059:
	add	r1, pc, r1
	str	r3, [r4, #84]
	bl	tasklet_init(PLT)
	ldr	r0, [sp, #12]
	mov	r1, #208
	bl	kstrdup(PLT)
	ldr	ip, [sp, #68]
	mov	r1, r0
	mov	r3, #0
	str	r9, [r4, #328]
	mov	r0, r9
	mov	r2, r3
	str	r1, [r4, #332]
	str	r5, [r4, #320]
	str	ip, [r4, #336]
	ldr	ip, [sp, #72]
	str	ip, [r4, #340]
	ldr	ip, [sp, #64]
	str	ip, [r4, #324]
	add	ip, sp, #16
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	r9, r0, #0
	blt	.L14328
	ldr	r8, .L14332+8
	mov	r2, r4
	mov	r1, #8192
	ldr	r0, [sp, #16]
.LPIC4061:
	add	r8, pc, r8
	add	r3, r8, #3072
	str	r0, [r4, #96]
	add	r3, r3, #8
	bl	snd_device_new(PLT)
	subs	r9, r0, #0
	blt	.L14329
	ldr	r0, .L14332+12
	ldr	r2, .L14332+16
	ldr	r3, [sp, #16]
	ldr	r1, .L14332+20
.LPIC4063:
	add	r0, pc, r0
.LPIC4065:
	add	r2, pc, r2
	ldrd	r10, [r0]
	ldr	lr, [r0, #8]
	ldr	r0, [r2]
.LPIC4066:
	add	r1, pc, r1
	ldrh	r9, [r2, #4]
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	str	r10, [r3, #20]	@ unaligned
	str	lr, [r3, #28]	@ unaligned
	str	r0, [sp, #12]
	mov	r0, r3
	str	lr, [r3, #76]	@ unaligned
	ldr	lr, [sp, #12]
	strh	r9, [r3, #40]	@ unaligned
	strb	r2, [r3, #42]
	str	fp, [r3, #24]	@ unaligned
	str	lr, [r3, #36]	@ unaligned
	str	r10, [r3, #68]	@ unaligned
	str	fp, [r3, #72]	@ unaligned
	bl	snd_component_add(PLT)
	add	r1, sp, #20
	ldr	r3, [r4, #324]
	mov	r2, #0
	ldr	r0, [sp, #16]
	str	r1, [sp, #4]
	ldr	ip, [r4, #320]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new(PLT)
	subs	r9, r0, #0
	blt	.L14330
	ldr	r9, [sp, #20]
	add	r10, r8, #3088
	ldr	r1, [sp, #16]
	add	r10, r10, #4
	str	r9, [r4, #100]
	add	r0, r9, #84
	add	r1, r1, #36
	bl	strcpy(PLT)
	mov	r3, #7
	mov	r0, r9
	str	r4, [r9, #200]
	mov	r2, r10
	mov	r1, #0
	str	r3, [r9, #16]
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r0, [sp, #20]
	add	r2, r10, #16
	mov	r1, #1
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r0, [sp, #16]
	bl	snd_card_register(PLT)
	subs	r9, r0, #0
	blt	.L14331
	ldr	r9, .L14332+24
	add	r8, r8, #3120
	mov	r0, r7
	ldr	lr, .L14332+28
	add	r8, r8, #4
	mov	r1, r4
	ldr	ip, .L14332+32
	ldr	r2, .L14332+36
	str	r8, [r4, #4]
	ldr	r3, .L14332+40
.LPIC4071:
	add	r9, pc, r9
.LPIC4073:
	add	lr, pc, lr
.LPIC4074:
	add	ip, pc, ip
	str	r9, [r4]
.LPIC4075:
	add	r2, pc, r2
	str	lr, [r4, #32]
.LPIC4076:
	add	r3, pc, r3
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r9, r0, #0
	bne	.L14309
	cmp	r6, #0
	moveq	r0, r6
	beq	.L14319
	ldr	r3, [r4, #100]
	mov	r0, r9
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	b	.L14319
.L14326:
	mvn	r9, #11
.L14290:
	subs	r5, r8, #1
	addcs	r8, r8, #58
	addcs	r8, r4, r8, lsl #2
	bcc	.L14300
.L14299:
	sub	r5, r5, #1
	ldr	r0, [r8, #-4]!
	bl	kfree(PLT)
	cmn	r5, #1
	bne	.L14299
.L14300:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r9
.L14319:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14303:
	mov	r4, #16
	b	.L14287
.L14330:
	ldr	r0, [r4, #84]
	mov	r2, r9
	ldr	r1, .L14332+44
	add	r0, r0, #32
.LPIC4067:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L14293:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L14309
	bl	snd_card_free(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
.L14309:
	mov	r8, r5
	b	.L14290
.L14325:
	mvn	r0, #11
	b	.L14319
.L14328:
	ldr	r0, [r4, #84]
	ldr	r1, .L14332+48
	add	r0, r0, #32
.LPIC4060:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14293
.L14329:
	ldr	r0, [r4, #84]
	mov	r2, r9
	ldr	r1, .L14332+52
	add	r0, r0, #32
.LPIC4062:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14293
.L14302:
	mvn	r0, #21
	b	.L14319
.L14331:
	ldr	r0, [r4, #84]
	ldr	r1, .L14332+56
	add	r0, r0, #32
.LPIC4070:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14293
.L14333:
	.align	2
.L14332:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4077+8))
	.word	f_midi_in_tasklet-(.LPIC4059+8)
	.word	.LANCHOR0-(.LPIC4061+8)
	.word	.LC813-(.LPIC4063+8)
	.word	.LC814-(.LPIC4065+8)
	.word	.LC815-(.LPIC4066+8)
	.word	.LC818-(.LPIC4071+8)
	.word	f_midi_bind-(.LPIC4073+8)
	.word	f_midi_unbind-(.LPIC4074+8)
	.word	f_midi_set_alt-(.LPIC4075+8)
	.word	f_midi_disable-(.LPIC4076+8)
	.word	.LC816-(.LPIC4067+8)
	.word	.LC811-(.LPIC4060+8)
	.word	.LC812-(.LPIC4062+8)
	.word	.LC817-(.LPIC4070+8)
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	mov	ip, #1
	mov	r3, #32
	mov	r2, #1024
	mov	r0, r1
	str	r3, [sp, #8]
	mvn	r1, #0
	mov	r3, ip
	str	r2, [sp, #4]
	mov	r2, #0
	str	lr, [sp, #12]
	str	ip, [sp]
	bl	f_midi_bind_config(PLT)
	add	sp, sp, #20
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.global	rndis_signal_connect
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14343
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0, asl #2
	strd	r6, [sp, #8]
	mov	r7, r0, asl #6
	mov	r1, #0
	str	r8, [sp, #16]
	rsb	r4, r5, r7
	str	lr, [sp, #20]
.LPIC4078:
	add	r3, pc, r3
	add	r2, r3, r4
	sub	r3, r3, #652
	add	r4, r3, r4
	str	r1, [r2, #-636]
	ldr	r3, [r4, #4]
	cmp	r3, r1
	beq	.L14339
	ldr	r2, .L14343+4
.LPIC4083:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #24]
	cmp	r0, r1
	beq	.L14340
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L14341
	add	r2, r6, #20
.L14338:
	ldr	r3, .L14343+8
	rsb	r1, r5, r7
	str	r2, [r6, #8]
	mov	r5, #0
	mov	r7, #20
	mov	r0, r6
	str	r7, [r6, #12]
.LPIC4081:
	add	r3, pc, r3
	str	r5, [r6, #16]
	add	r2, r3, r1
	mov	r3, r2
	sub	r2, r2, #600
	ldr	r1, [r3, #-596]
	bl	__list_add(PLT)
	ldr	r3, [r6, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	str	r7, [r3, #4]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	str	r1, [r3]
	str	r2, [r3, #8]
	ldr	r0, [r4, #48]
	ldr	r3, [r4, #44]
	blx	r3
	mov	r0, r5
.L14337:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14340:
	mov	r2, #36
	mov	r6, #16
	b	.L14338
.L14339:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14337
.L14341:
	mvn	r0, #11
	b	.L14337
.L14344:
	.align	2
.L14343:
	.word	.LANCHOR4-(.LPIC4078+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4083+8))
	.word	.LANCHOR4-(.LPIC4081+8)
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14352
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0, asl #2
	strd	r6, [sp, #8]
	mov	r7, r0, asl #6
	mov	r1, #1
	str	r8, [sp, #16]
	rsb	r4, r5, r7
	str	lr, [sp, #20]
.LPIC4084:
	add	r3, pc, r3
	add	r2, r3, r4
	sub	r3, r3, #652
	add	r4, r3, r4
	str	r1, [r2, #-636]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14348
	ldr	r2, .L14352+4
.LPIC4089:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L14349
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L14350
	add	r2, r6, #20
.L14347:
	ldr	r3, .L14352+8
	rsb	r1, r5, r7
	str	r2, [r6, #8]
	mov	r5, #0
	mov	r7, #20
	mov	r0, r6
	str	r7, [r6, #12]
.LPIC4087:
	add	r3, pc, r3
	str	r5, [r6, #16]
	add	r2, r3, r1
	mov	r3, r2
	sub	r2, r2, #600
	ldr	r1, [r3, #-596]
	bl	__list_add(PLT)
	ldr	r3, [r6, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	str	r7, [r3, #4]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	str	r1, [r3]
	str	r2, [r3, #8]
	ldr	r0, [r4, #48]
	ldr	r3, [r4, #44]
	blx	r3
	mov	r0, r5
.L14346:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14349:
	mov	r2, #36
	mov	r6, #16
	b	.L14347
.L14348:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14346
.L14350:
	mvn	r0, #11
	b	.L14346
.L14353:
	.align	2
.L14352:
	.word	.LANCHOR4-(.LPIC4084+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4089+8))
	.word	.LANCHOR4-(.LPIC4087+8)
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #12]
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r7, [r3, #44]
	beq	.L14364
	mov	r3, sp
	mov	r6, #0
	bic	r9, r3, #8128
	mov	r4, r1
	mov	r5, r6
	bic	r9, r9, #63
	add	r10, r1, r8
.L14363:
	ldr	r1, [r9, #8]
	mov	r0, r4
	sub	r1, r1, #1
#APP
@ 1185 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	uxtb	r2, r2
	cmp	r0, #0
	sub	r2, r2, #48
	bne	.L14365
	cmp	r2, #52
	addls	pc, pc, r2, asl #2
	b	.L14357
.L14359:
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14358
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14360
	b	.L14361
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14357
	b	.L14360
	b	.L14361
	.p2align 1
.L14361:
	ldrb	r0, [r7]	@ zero_extendqisi2
	bl	rndis_signal_disconnect(PLT)
.L14362:
	add	r4, r4, #1
	cmp	r4, r10
	bne	.L14363
.L14364:
	mov	r0, r8
.L14356:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14360:
	ldrb	r0, [r7]	@ zero_extendqisi2
	bl	rndis_signal_connect(PLT)
	b	.L14362
.L14358:
	mov	r3, r5, asl #3
	mov	r6, #1
	add	r5, r3, r5, lsl #1
	add	r5, r2, r5
	b	.L14362
.L14357:
	cmp	r6, #0
	movne	r6, #1
	strne	r5, [r7, #12]
	b	.L14362
.L14365:
	mvn	r0, #13
	b	.L14356
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.global	rndis_set_host_mac
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14372
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, lsl #6
.LPIC4090:
	add	r3, pc, r3
	add	r3, r3, r0
	str	r1, [r3, #-632]
	bx	lr
.L14373:
	.align	2
.L14372:
	.word	.LANCHOR4-(.LPIC4090+8)
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_register
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L14382
	ldr	r3, .L14383
.LPIC4096:
	add	r3, pc, r3
	ldrb	r2, [r3, #-651]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L14377
	mvn	r0, #18
.L14380:
	bx	lr
.L14377:
	mov	ip, #1
	str	r0, [r3, #-608]
	mov	r0, r2
	str	r1, [r3, #-604]
	strb	r2, [r3, #-615]
	strb	ip, [r3, #-651]
	strb	ip, [r3, #-616]
	bx	lr
.L14382:
	mvn	r0, #21
	b	.L14380
.L14384:
	.align	2
.L14383:
	.word	.LANCHOR4-(.LPIC4096+8)
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r3, r0, #0
	bgt	.L14385
	ldr	r0, .L14387
	mov	r2, r3, asl #6
	mov	r1, #0
	sub	r3, r2, r3, asl #2
.LPIC4097:
	add	r0, pc, r0
	add	r0, r0, r3
	strb	r1, [r0, #-651]
.L14385:
	bx	lr
.L14388:
	.align	2
.L14387:
	.word	.LANCHOR4-(.LPIC4097+8)
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L14391
	cmp	r0, #0
	mov	r3, r0
	bne	.L14392
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L14395
	str	lr, [sp, #4]
	ldr	lr, .L14395+4
	ldr	ip, .L14395+8
.LPIC4102:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC4101:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
.LPIC4098:
	add	ip, pc, ip
	str	r3, [r4]
	str	r1, [ip, #-624]
	str	r2, [ip, #-628]
	str	r3, [lr]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14392:
	mvn	r0, #0
	bx	lr
.L14391:
	mvn	r0, #21
	bx	lr
.L14396:
	.align	2
.L14395:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC4102+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC4101+8))
	.word	.LANCHOR4-(.LPIC4098+8)
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	adds	r0, r0, #0
	movne	r0, #1
	cmp	r2, #0
	orreq	r0, r0, #1
	cmp	r0, #0
	bne	.L14399
	ldr	r3, .L14400
.LPIC4103:
	add	r3, pc, r3
	str	r1, [r3, #-620]
	str	r2, [r3, #-612]
.L14398:
	bx	lr
.L14399:
	mvn	r0, #0
	b	.L14398
.L14401:
	.align	2
.L14400:
	.word	.LANCHOR4-(.LPIC4103+8)
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L14404
	ldr	r3, .L14405
.LPIC4105:
	add	r3, pc, r3
	str	r1, [r3, #-644]
	str	r2, [r3, #-640]
.L14403:
	bx	lr
.L14404:
	mvn	r0, #0
	b	.L14403
.L14406:
	.align	2
.L14405:
	.word	.LANCHOR4-(.LPIC4105+8)
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #164]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #164]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #164]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L14410
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L14418
.L14412:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L14411:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #164]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L14410:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L14411
	ldr	r3, [r3, #16]
	b	.L14412
.L14418:
	mov	r2, #8519680
	b	.L14411
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #144]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L14422
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L14430
.L14424:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L14423:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L14422:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L14423
	ldr	r3, [r3, #16]
	b	.L14424
.L14430:
	mov	r2, #8519680
	b	.L14423
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.global	rndis_set_max_pkt_xfer
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14432
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, lsl #6
.LPIC4107:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #-616]
	bx	lr
.L14433:
	.align	2
.L14432:
	.word	.LANCHOR4-(.LPIC4107+8)
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L14435
	ldr	r5, .L14479
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #148]
.LPIC4108:
	add	r5, pc, r5
	strb	r4, [r5, #2806]
	strb	r4, [r5, #2814]
	strb	r4, [r5, #2827]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L14435
	uxtb	r4, r4
	add	r1, r5, #2832
	add	r1, r1, #12
	strb	r4, [r6, #149]
	strb	r4, [r5, #2834]
	strb	r4, [r5, #2828]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14437
	add	r1, r5, #2848
	str	r0, [r6, #88]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14437
	add	r1, r5, #2864
	str	r0, [r6, #92]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14437
	str	r3, [r6, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #172]
	beq	.L14440
	ldr	r3, .L14479+4
.LPIC4135:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14439
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L14439:
	str	r0, [r4]
	ldr	r3, [r6, #172]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14440
	mov	r2, #8
	ldr	r5, .L14479+8
	mov	r0, r6
	ldr	r1, .L14479+12
	str	r2, [r3, #4]
	ldr	lr, [r6, #172]
	ldr	ip, .L14479+16
.LPIC4118:
	add	r5, pc, r5
	ldrb	r4, [r5, #2858]	@ zero_extendqisi2
.LPIC4127:
	add	r1, pc, r1
	str	r6, [lr, #32]
	ldr	r9, [r6, #172]
	add	r3, r1, #3120
	ldrb	r8, [r5, #2846]	@ zero_extendqisi2
.LPIC4117:
	add	ip, pc, ip
	add	r2, r1, #3184
	ldrb	lr, [r5, #2870]	@ zero_extendqisi2
	add	r3, r3, #12
	add	r2, r2, #4
	add	r1, r1, #3232
	strb	r4, [r5, #2894]
	str	ip, [r9, #28]
	strb	r4, [r5, #2930]
	strb	r8, [r5, #2882]
	strb	r8, [r5, #2918]
	strb	lr, [r5, #2906]
	strb	lr, [r5, #2942]
	bl	usb_assign_descriptors(PLT)
	subs	r4, r0, #0
	beq	.L14477
.L14435:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #172]
	cmp	r3, #0
	beq	.L14444
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14444:
	ldr	r3, [r6, #168]
	ldr	r1, .L14479+20
	cmp	r3, #0
	movne	r2, #0
.LPIC4134:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L14442:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14437:
	mvn	r4, #18
	b	.L14435
.L14440:
	mvn	r4, #11
	b	.L14435
.L14477:
	ldr	r2, .L14479+24
	mov	r1, r6
	ldr	r3, .L14479+28
	ldr	r0, .L14479+32
.LPIC4130:
	add	r2, pc, r2
.LPIC4131:
	add	r3, pc, r3
.LPIC4132:
	add	r0, pc, r0
	strd	r2, [r6, #136]
	bl	rndis_register(PLT)
	subs	r4, r0, #0
	blt	.L14435
	mov	r2, #0
	str	r4, [r6, #164]
	uxtb	r0, r4
	mov	r1, r2
	bl	rndis_set_param_medium(PLT)
	add	r1, r6, #150
	ldr	r0, [r6, #164]
	bl	rndis_set_host_mac(PLT)
	ldrb	r1, [r5, #2952]	@ zero_extendqisi2
	ldrb	r0, [r6, #164]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldr	r2, [r6, #160]
	cmp	r2, #0
	beq	.L14443
	ldr	r1, [r6, #156]
	cmp	r1, #0
	bne	.L14478
.L14443:
	mov	r0, #0
	b	.L14442
.L14478:
	ldrb	r0, [r6, #164]	@ zero_extendqisi2
	bl	rndis_set_param_vendor(PLT)
	cmp	r0, #0
	bne	.L14435
	b	.L14443
.L14480:
	.align	2
.L14479:
	.word	.LANCHOR2-(.LPIC4108+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4135+8))
	.word	.LANCHOR2-(.LPIC4118+8)
	.word	.LANCHOR0-(.LPIC4127+8)
	.word	rndis_response_complete-(.LPIC4117+8)
	.word	.LC566-(.LPIC4134+8)
	.word	rndis_open-(.LPIC4130+8)
	.word	rndis_close-(.LPIC4131+8)
	.word	rndis_response_available-(.LPIC4132+8)
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14482
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, lsl #6
.LPIC4136:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #-615]
	bx	lr
.L14483:
	.align	2
.L14482:
	.word	.LANCHOR4-(.LPIC4136+8)
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14485
	ldr	r6, .L14544
	uxtb	r5, r5
	mov	r1, r4
	mov	r0, r8
	strb	r5, [r4, #120]
.LPIC4137:
	add	r6, pc, r6
	strb	r5, [r6, #2958]
	strb	r5, [r6, #2966]
	strb	r5, [r6, #2979]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14485
	uxtb	r5, r5
	add	r1, r6, #2992
	add	r1, r1, #4
	strb	r5, [r4, #121]
	strb	r5, [r6, #2986]
	strb	r5, [r6, #2980]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14487
	str	r0, [r4, #88]
	add	r1, r6, #3008
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14487
	add	r1, r6, #3008
	str	r0, [r4, #92]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14487
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #160]
	beq	.L14490
	ldr	r3, .L14544+4
.LPIC4167:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14489
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
.L14489:
	str	r0, [r5]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14490
	mov	r1, #8
	ldr	r6, .L14544+8
	ldr	r3, .L14544+12
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
.LPIC4147:
	add	r6, pc, r6
.LPIC4146:
	add	r3, pc, r3
	add	r0, r6, #3264
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	add	r0, r0, #12
	str	r3, [r2, #28]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14490
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14543
.L14491:
	ldr	r2, .L14544+16
	mov	r1, r4
	ldr	r3, .L14544+20
	ldr	r0, .L14544+24
.LPIC4155:
	add	r2, pc, r2
.LPIC4156:
	add	r3, pc, r3
.LPIC4157:
	add	r0, pc, r0
	strd	r2, [r4, #112]
	bl	rndis_register(PLT)
	subs	r5, r0, #0
	blt	.L14485
	mov	r2, #0
	str	r5, [r4, #144]
	uxtb	r0, r5
	mov	r1, r2
	bl	rndis_set_param_medium(PLT)
	add	r1, r4, #122
	ldr	r0, [r4, #144]
	bl	rndis_set_host_mac(PLT)
	ldr	r2, [r4, #140]
	ldr	r1, [r4, #128]
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	bl	rndis_set_param_vendor(PLT)
	subs	r6, r0, #0
	bne	.L14485
	ldrb	r1, [r4, #132]	@ zero_extendqisi2
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	mov	r1, #2
	bl	rndis_set_pkt_alignment_factor(PLT)
.L14495:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14543:
	ldr	r5, .L14544+28
	add	r0, r6, #3312
	add	r0, r0, #8
.LPIC4148:
	add	r5, pc, r5
	ldrb	r1, [r5, #2998]	@ zero_extendqisi2
	ldrb	r2, [r5, #3010]	@ zero_extendqisi2
	ldrb	r3, [r5, #3022]	@ zero_extendqisi2
	strb	r1, [r5, #3034]
	strb	r2, [r5, #3046]
	strb	r3, [r5, #3058]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14490
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14491
	ldrb	r3, [r5, #3022]	@ zero_extendqisi2
	add	r0, r6, #3360
	ldrb	r1, [r5, #2998]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r2, [r5, #3010]	@ zero_extendqisi2
	strb	r3, [r5, #3094]
	strb	r1, [r5, #3070]
	strb	r2, [r5, #3082]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	ldreq	r3, [r8, #24]
	mvneq	r5, #11
	ldreq	r3, [r3]
	ldreq	r3, [r3, #20]
	bne	.L14491
.L14494:
	cmp	r3, #2
	bhi	.L14503
.L14497:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14498
	bl	kfree(PLT)
.L14498:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14499
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14499:
	ldr	r3, [r4, #156]
	mov	r6, r5
	ldr	r1, .L14544+32
	ldr	r0, .L14544+36
	cmp	r3, #0
	movne	r2, #0
.LPIC4165:
	add	r1, pc, r1
	sub	r1, r1, #2736
.LPIC4166:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk(PLT)
	b	.L14495
.L14490:
	mvn	r5, #11
.L14485:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14494
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14503
	bl	kfree(PLT)
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14494
.L14503:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14497
	bl	kfree(PLT)
	b	.L14497
.L14487:
	mvn	r5, #18
	b	.L14485
.L14545:
	.align	2
.L14544:
	.word	.LANCHOR2-(.LPIC4137+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4167+8))
	.word	.LANCHOR0-(.LPIC4147+8)
	.word	rndis_qc_response_complete-(.LPIC4146+8)
	.word	rndis_qc_open-(.LPIC4155+8)
	.word	rndis_qc_close-(.LPIC4156+8)
	.word	rndis_qc_response_available-(.LPIC4157+8)
	.word	.LANCHOR2-(.LPIC4148+8)
	.word	.LANCHOR9-(.LPIC4165+8)
	.word	.LC553-(.LPIC4166+8)
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.global	rndis_add_hdr
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14546
	mov	r1, #44
	bl	skb_push(PLT)
	mov	r1, #44
	mov	r4, r0
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r1, #1
	mov	r2, #36
	strb	r1, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r1, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	str	r1, [r4, #4]	@ unaligned
	strb	r2, [r4, #8]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L14546:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14553
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L14554
	mov	r1, #44
	mov	r0, r4
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r0, r5
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	strb	r2, [r4]
	ldr	r2, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	add	r3, r2, #44
	strb	r1, [r4, #8]
	str	r3, [r4, #4]	@ unaligned
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L14555:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14553:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom(PLT)
	subs	r4, r0, #0
	beq	.L14556
	bl	rndis_add_hdr(PLT)
.L14556:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r4
	b	.L14555
.L14554:
	ldr	r0, .L14561
.LPIC4168:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L14555
.L14562:
	.align	2
.L14561:
	.word	.LC819-(.LPIC4168+8)
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r1, #44
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	skb_realloc_headroom(PLT)
	subs	r5, r0, #0
	beq	.L14564
	bl	rndis_add_hdr(PLT)
.L14564:
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.global	rndis_free_response
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r0, asl #2
	strd	r6, [sp, #8]
	ldr	r6, .L14580
	mov	r7, r1
	rsb	r0, r3, r0, lsl #6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4169:
	add	r6, pc, r6
	add	r3, r6, r0
	ldr	r5, [r3, #-600]
	sub	r6, r3, #600
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L14572
	b	.L14569
.L14574:
	mov	r4, r3
.L14572:
	cmp	r5, #0
	beq	.L14571
	ldr	r3, [r5, #8]
	cmp	r3, r7
	beq	.L14579
.L14571:
	cmp	r6, r4
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L14574
.L14569:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14579:
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L14571
.L14581:
	.align	2
.L14580:
	.word	.LANCHOR4-(.LPIC4169+8)
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L14588
	ldr	ip, .L14594
	mov	r3, r0, asl #6
	sub	r0, r3, r0, asl #2
.LPIC4171:
	add	ip, pc, ip
	add	r3, ip, r0
	ldr	r2, [r3, #-600]
	sub	ip, r3, #600
	cmp	r2, ip
	ldr	r3, [r2]
	beq	.L14589
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L14586
	b	.L14593
.L14587:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L14584
	mov	r3, r2
.L14586:
	cmp	ip, r3
	ldr	r2, [r3]
	bne	.L14587
.L14589:
	mov	r0, #0
.L14583:
	bx	lr
.L14593:
	mov	r3, r2
.L14584:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	bx	lr
.L14588:
	mov	r0, r1
	b	.L14583
.L14595:
	.align	2
.L14594:
	.word	.LANCHOR4-(.LPIC4171+8)
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r6, [r2, #24]
	ldrh	r8, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r6, #4]
	beq	.L14598
	movw	r1, #41217
	cmp	r3, r1
	beq	.L14599
.L14601:
	mvn	r5, #94
.L14607:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14599:
	cmp	r2, #0
	bne	.L14601
	ldrb	r3, [r7, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14601
	add	r1, sp, #4
	ldr	r0, [r7, #164]
	bl	rndis_get_next_response(PLT)
	subs	r5, r0, #0
	beq	.L14601
	mov	r1, r5
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L14610
	str	r7, [r4, #32]
	mov	r1, r5
.LPIC4174:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r7, #164]
	bl	rndis_free_response(PLT)
	ldr	r5, [sp, #4]
	cmp	r5, #0
	blt	.L14607
	cmp	r8, r5
	movle	r3, #0
	movgt	r3, #1
	b	.L14600
.L14598:
	cmp	r2, #0
	bne	.L14601
	ldrb	r3, [r7, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14601
	ldr	r1, .L14610+4
	mov	r5, r8
	mov	r3, r2
	str	r7, [r4, #32]
.LPIC4173:
	add	r1, pc, r1
	str	r1, [r4, #28]
.L14600:
	ldrb	r0, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r0, r3, #1, #1
	strb	r0, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L14607
	ldr	r0, [r6]
	mov	r2, r5
	ldr	r1, .L14610+8
	add	r0, r0, #32
.LPIC4175:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14607
.L14611:
	.align	2
.L14610:
	.word	rndis_response_complete-(.LPIC4174+8)
	.word	rndis_command_complete-(.LPIC4173+8)
	.word	.LC820-(.LPIC4175+8)
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.global	rndis_uninit
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	ldr	r3, .L14618
	mov	r2, r0, asl #6
	mov	r1, #0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	sub	r2, r2, r0, asl #2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r5, sp, #4
.LPIC4176:
	add	r3, pc, r3
	add	r3, r3, r2
	str	r1, [r3, #-648]
	b	.L14614
.L14615:
	bl	rndis_free_response(PLT)
.L14614:
	mov	r1, r5
	mov	r0, r4
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, r4
	bne	.L14615
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14619:
	.align	2
.L14618:
	.word	.LANCHOR4-(.LPIC4176+8)
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_msg_parser
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r5, .L14696
	cmp	r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
.LPIC4179:
	add	r5, pc, r5
	beq	.L14659
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	cmp	r0, #0
	ldrb	r4, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r2, [r1, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	lr, [r1, #4]	@ zero_extendqisi2
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	orr	r3, r3, r4, asl #8
	ldrb	r7, [r1, #7]	@ zero_extendqisi2
	ldrb	r4, [r1, #6]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r2, r3, r2, asl #24
	bne	.L14632
	sub	r0, r2, #2
	mov	r6, r1
	cmp	r0, #6
	addls	pc, pc, r0, asl #2
	b	.L14624
.L14626:
	b	.L14625
	b	.L14627
	b	.L14628
	b	.L14629
	b	.L14670
	b	.L14624
	b	.L14631
	.p2align 1
.L14670:
	add	r4, sp, #12
	b	.L14630
.L14647:
	bl	rndis_free_response(PLT)
.L14630:
	mov	r1, r4
	mov	r0, #0
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, #0
	bne	.L14647
	ldr	r3, .L14696+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14658
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L14659
	add	r3, r6, #20
.L14648:
	ldr	r5, .L14696+8
	mov	r4, #0
	mov	r7, #16
	str	r3, [r6, #8]
	mov	r0, r6
	str	r7, [r6, #12]
	str	r4, [r6, #16]
.LPIC4214:
	add	r5, pc, r5
	sub	r2, r5, #600
	ldr	r1, [r5, #-596]
	bl	__list_add(PLT)
	ldr	r3, [r6, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	str	r7, [r3, #4]
	str	r4, [r3, #8]
	str	r1, [r3]
	str	r2, [r3, #12]
	ldr	r0, [r5, #-604]
	ldr	r3, [r5, #-608]
	blx	r3
	mov	r0, r4
	b	.L14690
.L14631:
	ldr	r3, .L14696+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14660
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L14659
	add	r3, r7, #20
.L14650:
	ldr	r5, .L14696+12
	mov	r4, #0
	mov	r8, #16
	str	r3, [r7, #8]
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
.LPIC4218:
	add	r5, pc, r5
	sub	r2, r5, #600
	ldr	r1, [r5, #-596]
	bl	__list_add(PLT)
	ldr	r3, [r7, #8]
	mov	r2, #-2147483640
	stmia	r3, {r2, r8}
	ldr	r2, [r6, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #8]
	ldr	r0, [r5, #-604]
	ldr	r3, [r5, #-608]
	blx	r3
	mov	r0, r4
	b	.L14690
.L14625:
	ldr	r3, .L14696+16
	mov	r1, #1
.LPIC4177:
	add	r3, pc, r3
	ldr	r2, [r3, #-624]
	str	r1, [r3, #-648]
	cmp	r2, #0
	beq	.L14632
	ldr	r3, .L14696+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L14653
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L14659
	add	r3, r7, #20
.L14633:
	ldr	r5, .L14696+20
	mov	r4, #0
	mov	r8, #52
	str	r3, [r7, #8]
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
.LPIC4180:
	add	r5, pc, r5
	sub	r2, r5, #600
	ldr	r1, [r5, #-596]
	bl	__list_add(PLT)
	ldr	r3, [r7, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stmia	r3, {r1, r8}
	ldr	r1, [r6, #8]
	str	r4, [r3, #12]
	str	r4, [r3, #20]
	str	r4, [r3, #28]
	str	r1, [r3, #8]
	str	r2, [r3, #16]
	str	r2, [r3, #24]
	ldrb	r1, [r5, #-616]	@ zero_extendqisi2
	ldr	r2, [r5, #-624]
	str	r1, [r3, #32]
	ldrb	r1, [r5, #-616]	@ zero_extendqisi2
	ldr	r2, [r2, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r2, r2, #80
	mul	r2, r1, r2
	str	r2, [r3, #36]
	ldrb	r2, [r5, #-615]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r0, [r5, #-604]
	ldr	r3, [r5, #-608]
	blx	r3
	mov	r0, r4
	b	.L14690
.L14628:
	ldr	r3, .L14696+24
.LPIC4193:
	add	r3, pc, r3
	ldr	r3, [r3, #-624]
	cmp	r3, #0
	beq	.L14632
	ldr	r3, .L14696+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14655
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14659
	add	r1, r4, #20
.L14636:
	ldr	r3, .L14696+28
	mov	r2, #136
	mov	r7, #0
	str	r1, [r4, #8]
	mov	r0, r4
	str	r2, [r4, #12]
	str	r7, [r4, #16]
.LPIC4194:
	add	r3, pc, r3
	sub	r2, r3, #600
	ldr	r1, [r3, #-596]
	bl	__list_add(PLT)
	ldr	r5, [r4, #8]
	mov	r3, #-2147483644
	mov	r0, r7
	str	r3, [r5]
	ldr	r3, [r6, #8]
	str	r3, [r5, #8]
	ldr	r2, [r6, #20]
	ldr	r3, [r6, #16]
	ldr	r1, [r6, #12]
	str	r4, [sp]
	add	r2, r2, #8
	add	r2, r6, r2
	bl	gen_ndis_query_resp(PLT)
	cmp	r0, #0
	moveq	r2, r0
	beq	.L14637
	mov	r2, #187
	mov	r3, #24
	str	r7, [r5, #16]
	movt	r2, 49152
	str	r7, [r5, #20]
	str	r3, [r5, #4]
.L14637:
	ldr	r3, .L14696+32
	str	r2, [r5, #12]
.LPIC4196:
	add	r3, pc, r3
	ldr	r0, [r3, #-604]
	ldr	r2, [r3, #-608]
	blx	r2
	mov	r0, #0
	b	.L14690
.L14629:
	ldr	r3, .L14696+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14657
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14659
	add	r3, r4, #20
.L14638:
	ldr	r7, .L14696+36
	mov	r8, #16
	mov	r9, #0
	str	r3, [r4, #8]
	mov	r0, r4
	strd	r8, [r4, #12]
.LPIC4198:
	add	r7, pc, r7
	sub	r2, r7, #600
	ldr	r1, [r7, #-596]
	bl	__list_add(PLT)
	ldr	r5, [r4, #8]
	mov	r2, #-2147483643
	ldr	r3, [r6, #16]
	ldr	r0, [r6, #20]
	stmia	r5, {r2, r8}
	ldr	r2, [r6, #8]
	str	r2, [r5, #8]
	ldr	r1, [r4, #8]
	ldr	r2, [r6, #12]
	cmp	r1, r9
	beq	.L14639
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L14641
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	beq	.L14642
	ldr	r1, .L14696+40
	ldr	r0, .L14696+44
.LPIC4210:
	add	r1, pc, r1
.LPIC4211:
	add	r0, pc, r0
	sub	r1, r1, #2720
	bl	printk(PLT)
.L14639:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r5, #12]
.L14652:
	ldr	r3, .L14696+48
.LPIC4212:
	add	r3, pc, r3
	ldr	r0, [r3, #-604]
	ldr	r2, [r3, #-608]
	blx	r2
	mov	r0, #0
	b	.L14690
.L14627:
	ldr	r5, .L14696+52
	mov	r4, #0
.LPIC4188:
	add	r5, pc, r5
	ldr	r0, [r5, #-624]
	str	r4, [r5, #-648]
	cmp	r0, r4
	beq	.L14690
	bl	netif_carrier_off(PLT)
	ldr	r3, [r5, #-624]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L14694
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit(PLT)
	mov	r0, r4
.L14690:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14624:
	mov	r4, r4, asl #16
	ldr	r1, .L14696+56
	ldr	r0, .L14696+60
	orr	r4, r4, r7, asl #24
	orr	r3, r4, lr
.LPIC4222:
	add	r1, pc, r1
	orr	r4, r3, ip, asl #8
	sub	r1, r1, #2688
.LPIC4223:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r3, r4
	bl	printk(PLT)
	cmp	r4, #0
	beq	.L14632
	mov	r2, #0
.L14651:
	add	r2, r2, #16
	cmp	r2, r4
	bcc	.L14651
.L14632:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14690
.L14659:
	mvn	r0, #11
	b	.L14690
.L14641:
	add	r0, r0, #8
	ldr	ip, [r7, #-628]
	add	r3, r6, r0
	ldrb	r1, [r6, r0]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r3, r2, r3, asl #8
	orr	r3, r3, r1
	strh	r3, [ip]	@ movhi
	ldr	r3, [r7, #-628]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L14643
	mov	r3, #2
	ldr	r0, [r7, #-624]
	str	r3, [r7, #-648]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r7, #-624]
	ldr	r2, [r3, #164]
	tst	r2, #1
	beq	.L14642
	ldr	r4, [r3, #576]
	mov	r0, r9
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L14642
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
.L14642:
	mov	r3, #0
	str	r3, [r5, #12]
	b	.L14652
.L14658:
	mov	r3, #36
	mov	r6, #16
	b	.L14648
.L14660:
	mov	r3, #36
	mov	r7, #16
	b	.L14650
.L14657:
	mov	r3, #36
	mov	r4, #16
	b	.L14638
.L14655:
	mov	r1, #36
	mov	r4, #16
	b	.L14636
.L14653:
	mov	r3, #36
	mov	r7, #16
	b	.L14633
.L14643:
	mov	r3, #1
	ldr	r0, [r7, #-624]
	str	r3, [r7, #-648]
	bl	netif_carrier_off(PLT)
	ldr	r3, [r7, #-624]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L14695
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit(PLT)
	b	.L14642
.L14694:
	ldr	r0, .L14696+64
	movw	r1, #1847
.LPIC4191:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L14696+68
.LPIC4192:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L14690
.L14695:
	ldr	r0, .L14696+72
	movw	r1, #1847
.LPIC4208:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L14696+76
.LPIC4209:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14642
.L14697:
	.align	2
.L14696:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4179+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR4-(.LPIC4214+8)
	.word	.LANCHOR4-(.LPIC4218+8)
	.word	.LANCHOR4-(.LPIC4177+8)
	.word	.LANCHOR4-(.LPIC4180+8)
	.word	.LANCHOR4-(.LPIC4193+8)
	.word	.LANCHOR4-(.LPIC4194+8)
	.word	.LANCHOR4-(.LPIC4196+8)
	.word	.LANCHOR4-(.LPIC4198+8)
	.word	.LANCHOR9-(.LPIC4210+8)
	.word	.LC821-(.LPIC4211+8)
	.word	.LANCHOR4-(.LPIC4212+8)
	.word	.LANCHOR4-(.LPIC4188+8)
	.word	.LANCHOR9-(.LPIC4222+8)
	.word	.LC822-(.LPIC4223+8)
	.word	.LC86-(.LPIC4191+8)
	.word	.LC87-(.LPIC4192+8)
	.word	.LC86-(.LPIC4208+8)
	.word	.LC87-(.LPIC4209+8)
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L14698
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L14698
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser(PLT)
	subs	r2, r0, #0
	blt	.L14707
.L14702:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L14708
.L14698:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14708:
	ldr	r2, .L14709
	ldr	r3, [r3, #20]
.LPIC4225:
	add	r2, pc, r2
	ldr	r2, [r2, #3104]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	strb	r3, [r5, #124]
	cmp	r2, #1
	movls	r3, #0
	strlsb	r3, [r5, #124]
	b	.L14698
.L14707:
	ldr	r0, [r6]
	ldr	ip, [r4, #4]
	ldr	r1, .L14709+4
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
.LPIC4224:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14702
.L14710:
	.align	2
.L14709:
	.word	.LANCHOR2-(.LPIC4225+8)
	.word	.LC823-(.LPIC4224+8)
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser(PLT)
	cmp	r0, #0
	blt	.L14715
.L14712:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	ldreq	r3, [r3, #20]
	streq	r3, [r5, #136]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14715:
	ldr	r1, .L14716
	mov	r2, r0
	ldr	ip, [r4, #4]
	ldr	r0, .L14716+4
	ldr	r3, [r4, #48]
.LPIC4226:
	add	r1, pc, r1
	sub	r1, r1, #2672
	str	ip, [sp]
	sub	r1, r1, #8
.LPIC4227:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14712
.L14717:
	.align	2
.L14716:
	.word	.LANCHOR9-(.LPIC4226+8)
	.word	.LC824-(.LPIC4227+8)
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r7, [r2, #24]
	ldrh	r8, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r7, #4]
	beq	.L14720
	movw	r1, #41217
	cmp	r3, r1
	beq	.L14721
.L14723:
	mvn	r5, #94
.L14729:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14721:
	cmp	r2, #0
	bne	.L14723
	ldrb	r3, [r6, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14723
	add	r1, sp, #4
	ldr	r0, [r6, #144]
	bl	rndis_get_next_response(PLT)
	subs	r5, r0, #0
	beq	.L14723
	mov	r1, r5
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L14732
	mov	r1, r5
.LPIC4229:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r6, #144]
	bl	rndis_free_response(PLT)
	ldr	r5, [sp, #4]
	cmp	r5, #0
	blt	.L14729
	cmp	r8, r5
	movle	r3, #0
	movgt	r3, #1
	b	.L14722
.L14720:
	cmp	r2, #0
	bne	.L14723
	ldrb	r3, [r6, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14723
	ldr	r1, .L14732+4
	mov	r5, r8
	mov	r3, r2
.LPIC4228:
	add	r1, pc, r1
	str	r1, [r4, #28]
.L14722:
	ldrb	r0, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	str	r6, [r4, #32]
	mov	r2, #32
	bfi	r0, r3, #1, #1
	strb	r0, [r4, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L14729
	ldr	r1, .L14732+8
	mov	r2, r5
	ldr	r0, .L14732+12
.LPIC4230:
	add	r1, pc, r1
	sub	r1, r1, #2640
.LPIC4231:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14729
.L14733:
	.align	2
.L14732:
	.word	rndis_qc_response_complete-(.LPIC4229+8)
	.word	rndis_qc_command_complete-(.LPIC4228+8)
	.word	.LANCHOR9-(.LPIC4230+8)
	.word	.LC825-(.LPIC4231+8)
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.global	rndis_init
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r4, .L14741
	strd	r6, [sp, #8]
	ldr	r6, .L14741+4
	str	lr, [sp, #16]
	.pad #36
	sub	sp, sp, #36
.LPIC4233:
	add	r4, pc, r4
.LPIC4247:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldrb	r5, [r4, #3952]	@ zero_extendqisi2
	ldr	r3, [r6]
	cmp	r5, #0
	movne	r0, #0
	str	r3, [sp, #28]
	bne	.L14735
	ldr	r1, .L14741+8
	add	r7, sp, #8
	mov	r2, r5
	mov	r0, r7
.LPIC4234:
	add	r1, pc, r1
	bl	sprintf(PLT)
	ldr	r3, .L14741+12
	sub	ip, r4, #652
	mov	r0, r7
	mov	r2, r5
	mov	r1, #432
	str	ip, [sp]
.LPIC4235:
	add	r3, pc, r3
	add	r3, r3, #212
	bl	proc_create_data(PLT)
	cmp	r0, #0
	str	r0, [r4, #3956]
	mvneq	r0, #4
	beq	.L14735
	mov	r2, #1
	sub	r3, r4, #600
	strb	r5, [r4, #-652]
	mov	r0, r5
	strb	r5, [r4, #-651]
	str	r5, [r4, #-648]
	str	r2, [r4, #-636]
	strb	r2, [r4, #3952]
	str	r3, [r4, #-600]
	str	r3, [r4, #-596]
.L14735:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L14740
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L14740:
	bl	__stack_chk_fail(PLT)
.L14742:
	.align	2
.L14741:
	.word	.LANCHOR4-(.LPIC4233+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4247+8))
	.word	.LC826-(.LPIC4234+8)
	.word	.LANCHOR6-(.LPIC4235+8)
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L14751
	ldr	r3, .L14751+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
.LPIC4252:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC4249:
	add	r3, pc, r3
	ldrb	r1, [r3, #3952]	@ zero_extendqisi2
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	beq	.L14743
	ldr	r1, .L14751+8
	mov	r6, #0
	mov	r0, sp
	mov	r2, r6
	strb	r6, [r3, #3952]
.LPIC4251:
	add	r1, pc, r1
	bl	sprintf(PLT)
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry(PLT)
.L14743:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L14750
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14750:
	bl	__stack_chk_fail(PLT)
.L14752:
	.align	2
.L14751:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4252+8))
	.word	.LANCHOR4-(.LPIC4249+8)
	.word	.LC826-(.LPIC4251+8)
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	rndis_bind_config_vendor
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L14758
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L14754
	ldr	r9, .L14771
.LPIC4253:
	add	r9, pc, r9
	ldrb	r3, [r9, #3420]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14768
.L14755:
	ldr	r3, .L14771+4
.LPIC4272:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14763
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14769
.L14756:
	ldr	r10, [r5]	@ unaligned
	mov	r0, r6
	mov	r9, #0
	ldr	lr, .L14771+8
	mov	ip, #44
	mov	r1, r4
	ldr	r3, .L14771+12
	ldr	r6, .L14771+16
	ldr	r2, .L14771+20
	str	r10, [r4, #150]	@ unaligned
.LPIC4271:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
	ldrh	r5, [r5, #4]	@ unaligned
.LPIC4265:
	add	r3, pc, r3
	str	r8, [r4, #156]
	add	r3, r3, #3440
.LPIC4261:
	add	r6, pc, r6
	str	r7, [r4, #160]
	add	r3, r3, #12
.LPIC4262:
	add	r2, pc, r2
	strh	r9, [r4, #98]	@ movhi
	ldr	r7, [r2, #2952]
	str	r6, [r4, #128]
	ldr	r9, [r2, #3104]
	strh	r5, [r4, #154]	@ unaligned
	str	r3, [r4, #4]
	ldr	r8, .L14771+24
	str	lr, [r4, #132]
	ldr	r6, .L14771+28
	ldr	r5, .L14771+32
	str	r7, [r4, #116]
	ldr	lr, .L14771+36
	str	r9, [r4, #120]
	ldr	r2, .L14771+40
.LPIC4264:
	add	r8, pc, r8
	str	ip, [r4, #100]
	ldr	r3, .L14771+44
.LPIC4266:
	add	r6, pc, r6
.LPIC4267:
	add	r5, pc, r5
	str	r8, [r4]
.LPIC4268:
	add	lr, pc, lr
	str	r6, [r4, #32]
.LPIC4269:
	add	r2, pc, r2
	str	r5, [r4, #36]
.LPIC4270:
	add	r3, pc, r3
	str	lr, [r4, #40]
	str	r2, [r4, #52]
	str	r3, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L14770
.L14754:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14768:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14754
	ldr	r4, .L14771+48
	uxtb	ip, r0
	ldr	r0, [r6, #24]
	strb	ip, [r9, #3420]
.LPIC4255:
	add	r4, pc, r4
	strb	ip, [r4, #2820]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14754
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r9, #3428]
	strb	r3, [r4, #2840]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14754
	uxtb	r0, r0
	strb	r0, [r9, #3436]
	strb	r0, [r4, #2811]
	b	.L14755
.L14763:
	mov	r4, #16
	b	.L14756
.L14770:
	mov	r0, r4
	bl	kfree(PLT)
.L14757:
	bl	rndis_exit(PLT)
	mov	r0, r5
	b	.L14754
.L14769:
	mvn	r5, #11
	b	.L14757
.L14758:
	mvn	r0, #21
	bx	lr
.L14772:
	.align	2
.L14771:
	.word	.LANCHOR0-(.LPIC4253+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4272+8))
	.word	rndis_rm_hdr(GOT_PREL)+(.-(.LPIC4271+8))
	.word	.LANCHOR0-(.LPIC4265+8)
	.word	rndis_add_header-(.LPIC4261+8)
	.word	.LANCHOR2-(.LPIC4262+8)
	.word	.LC827-(.LPIC4264+8)
	.word	rndis_bind-(.LPIC4266+8)
	.word	rndis_unbind-(.LPIC4267+8)
	.word	rndis_set_alt-(.LPIC4268+8)
	.word	rndis_setup-(.LPIC4269+8)
	.word	rndis_disable-(.LPIC4270+8)
	.word	.LANCHOR2-(.LPIC4255+8)
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_bind_config
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	mov	r2, r3
	b	rndis_bind_config_vendor(PLT)
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #164]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.global	ecm_ipa_init
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14778
.LPIC4273:
	add	r3, pc, r3
	ldr	r0, [r3, #3960]
	bx	lr
.L14779:
	.align	2
.L14778:
	.word	.LANCHOR4-(.LPIC4273+8)
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14781
.LPIC4274:
	add	r3, pc, r3
	ldr	r0, [r3, #3964]
	bx	lr
.L14782:
	.align	2
.L14781:
	.word	.LANCHOR4-(.LPIC4274+8)
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14784
.LPIC4275:
	add	r3, pc, r3
	ldr	r0, [r3, #3980]
	bx	lr
.L14785:
	.align	2
.L14784:
	.word	.LANCHOR4-(.LPIC4275+8)
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	beq	.L14830
	bl	usb_bam_reset_complete(PLT)
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L14831
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L14832
.L14793:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L14833
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L14834
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L14786
	sub	r5, r4, #168
	ldr	r3, .L14843
	mov	r6, #0
	mov	r1, #208
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
.LPIC4296:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-124]
	ldr	r2, [r4, #-132]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r6
	str	r0, [r4, #-128]
	beq	.L14786
	ldr	r3, .L14843+4
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
.LPIC4297:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-120]
	ldr	r2, [r4, #-128]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r6
	beq	.L14801
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L14835
.L14802:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L14801
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L14836
.L14801:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L14786
	ldr	r0, .L14843+8
	mov	r1, r5
.LPIC4302:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L14837
.L14786:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14830:
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L14838
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r2, [r0, #-80]
	str	r3, [r0, #-92]
	beq	.L14839
.L14789:
	sub	r5, r4, #104
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L14840
	ldr	r3, [r4, #-112]
	mov	r1, #17
	mov	r2, #1
	str	r1, [r4, #-80]
	str	r2, [r4, #-92]
	cmp	r3, #0
	beq	.L14841
.L14791:
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L14842
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	bne	.L14793
	ldr	r2, .L14843+12
	ldr	r0, .L14843+16
.LPIC4285:
	add	r2, pc, r2
.LPIC4287:
	add	r0, pc, r0
.L14826:
	sub	r2, r2, #2624
	sub	r2, r2, #12
	mov	r1, r2
.L14829:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L14839:
	bl	ecm_qc_get_ipa_rx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L14789
.L14841:
	bl	ecm_qc_get_ipa_tx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L14791
.L14837:
	ldr	r2, .L14843+20
	mov	r3, r0
	ldr	r0, .L14843+24
.LPIC4303:
	add	r2, pc, r2
.LPIC4305:
	add	r0, pc, r0
.L14827:
	sub	r2, r2, #2624
	ldrd	r4, [sp]
	sub	r2, r2, #12
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r1, r2
	add	sp, sp, #16
	b	printk(PLT)
.L14833:
	ldr	r1, .L14843+28
	ldr	r0, .L14843+32
.LPIC4292:
	add	r1, pc, r1
.LPIC4293:
	add	r0, pc, r0
.L14828:
	sub	r1, r1, #2624
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	sub	r1, r1, #12
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L14834:
	ldr	r1, .L14843+36
	ldr	r0, .L14843+40
.LPIC4294:
	add	r1, pc, r1
.LPIC4295:
	add	r0, pc, r0
	b	.L14828
.L14842:
	ldr	r2, .L14843+44
	mov	r3, r0
	ldr	r0, .L14843+48
.LPIC4282:
	add	r2, pc, r2
.LPIC4284:
	add	r0, pc, r0
	b	.L14827
.L14840:
	ldr	r2, .L14843+52
	mov	r3, r0
	ldr	r0, .L14843+56
.LPIC4279:
	add	r2, pc, r2
.LPIC4281:
	add	r0, pc, r0
	b	.L14827
.L14838:
	ldr	r2, .L14843+60
	ldr	r0, .L14843+64
.LPIC4276:
	add	r2, pc, r2
.LPIC4278:
	add	r0, pc, r0
	b	.L14826
.L14835:
	ldr	r1, .L14843+68
	mov	r2, r0
	ldr	r0, .L14843+72
.LPIC4298:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC4299:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L14802
.L14836:
	ldr	r1, .L14843+76
	mov	r2, r0
	ldr	r0, .L14843+80
.LPIC4300:
	add	r1, pc, r1
	add	r1, r1, #2992
.LPIC4301:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L14801
.L14831:
	ldr	r1, .L14843+84
	mov	r2, r0
	ldr	r0, .L14843+88
.LPIC4288:
	add	r1, pc, r1
	sub	r1, r1, #2624
.LPIC4289:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	.L14829
.L14832:
	ldr	r1, .L14843+92
	mov	r2, r0
	ldr	r0, .L14843+96
.LPIC4290:
	add	r1, pc, r1
	sub	r1, r1, #2624
.LPIC4291:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	.L14829
.L14844:
	.align	2
.L14843:
	.word	bam_data_endless_rx_complete-(.LPIC4296+8)
	.word	bam_data_endless_tx_complete-(.LPIC4297+8)
	.word	bam_data_peer_reset_cb-(.LPIC4302+8)
	.word	.LANCHOR9-(.LPIC4285+8)
	.word	.LC830-(.LPIC4287+8)
	.word	.LANCHOR9-(.LPIC4303+8)
	.word	.LC833-(.LPIC4305+8)
	.word	.LANCHOR9-(.LPIC4292+8)
	.word	.LC831-(.LPIC4293+8)
	.word	.LANCHOR9-(.LPIC4294+8)
	.word	.LC832-(.LPIC4295+8)
	.word	.LANCHOR9-(.LPIC4282+8)
	.word	.LC829-(.LPIC4284+8)
	.word	.LANCHOR9-(.LPIC4279+8)
	.word	.LC829-(.LPIC4281+8)
	.word	.LANCHOR9-(.LPIC4276+8)
	.word	.LC828-(.LPIC4278+8)
	.word	.LANCHOR3-(.LPIC4298+8)
	.word	.LC214-(.LPIC4299+8)
	.word	.LANCHOR3-(.LPIC4300+8)
	.word	.LC214-(.LPIC4301+8)
	.word	.LANCHOR9-(.LPIC4288+8)
	.word	.LC414-(.LPIC4289+8)
	.word	.LANCHOR9-(.LPIC4290+8)
	.word	.LC415-(.LPIC4291+8)
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.global	fmbim_free_req
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L14850
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L14850+4
	str	lr, [sp, #4]
.LPIC4306:
	add	r2, pc, r2
	sub	r2, r2, #2608
.LPIC4308:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L14851:
	.align	2
.L14850:
	.word	.LANCHOR9-(.LPIC4306+8)
	.word	.LC834-(.LPIC4308+8)
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	bam_data_disconnect
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14872
.LPIC4309:
	add	r3, pc, r3
	ldr	r3, [r3, #3988]
	cmp	r1, r3
	bge	.L14868
	cmp	r0, #0
	beq	.L14869
	ldr	r3, .L14872+4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4319:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14855
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L14855
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L14855
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r4, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r4, #4]
.L14855:
	ldr	r3, [r4, #60]
	cmp	r3, #7
	beq	.L14870
	mov	r0, #0
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L14871
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14870:
	ldr	r3, .L14872+8
	add	r2, r4, #184
	mov	r0, #4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4315:
	add	r3, pc, r3
	ldr	r1, [r3, #3992]
	b	queue_work_on(PLT)
.L14868:
	ldr	r3, .L14872+12
	mov	r2, r1
	ldr	r0, .L14872+16
.LPIC4310:
	add	r3, pc, r3
	sub	r1, r3, #2576
.LPIC4311:
	add	r0, pc, r0
	sub	r1, r1, #8
	b	printk(PLT)
.L14869:
	ldr	r1, .L14872+20
	ldr	r0, .L14872+24
.LPIC4312:
	add	r1, pc, r1
	sub	r1, r1, #2576
.LPIC4313:
	add	r0, pc, r0
	sub	r1, r1, #8
	b	printk(PLT)
.L14871:
	ldr	r2, .L14872+28
	ldr	r0, .L14872+32
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4316:
	add	r2, pc, r2
	sub	r2, r2, #2576
.LPIC4318:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	b	printk(PLT)
.L14873:
	.align	2
.L14872:
	.word	.LANCHOR4-(.LPIC4309+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4319+8))
	.word	.LANCHOR4-(.LPIC4315+8)
	.word	.LANCHOR9-(.LPIC4310+8)
	.word	.LC753-(.LPIC4311+8)
	.word	.LANCHOR9-(.LPIC4312+8)
	.word	.LC835-(.LPIC4313+8)
	.word	.LANCHOR9-(.LPIC4316+8)
	.word	.LC836-(.LPIC4318+8)
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L14906
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	ldr	r0, .L14906+4
	strd	r6, [sp, #8]
	add	r9, r8, #204
	mov	r7, r8
	str	lr, [sp, #28]
.LPIC4320:
	add	r1, pc, r1
	str	r10, [sp, #24]
	sub	r1, r1, #2560
.LPIC4321:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r8, #88]
	strb	r3, [r8, #164]
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r7, #208]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L14879
	b	.L14880
.L14887:
	mov	r5, r3
.L14879:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L14878
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L14878:
	cmp	r7, r5
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L14887
.L14880:
	mov	r10, r8
	ldr	r4, [r10, #216]!
	cmp	r4, r10
	ldr	r5, [r4]
	bne	.L14884
	b	.L14877
.L14889:
	mov	r5, r3
.L14884:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L14883
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L14883:
	cmp	r10, r5
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L14889
.L14877:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L14906+8
.LPIC4327:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14904
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L14905
.L14881:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L14885:
	mov	r2, r7
	ldr	r1, [r8, #212]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r8, #108
	bl	__wake_up(PLT)
	ldr	r1, .L14906+12
	mov	r2, r8
	ldr	r0, .L14906+16
	ldrb	r3, [r8, #136]	@ zero_extendqisi2
.LPIC4323:
	add	r1, pc, r1
	sub	r1, r1, #2544
.LPIC4324:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	add	r0, r8, #140
	ldrb	r1, [r8, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect(PLT)
	ldr	r0, [r8, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14886
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #156]
	mov	r2, #0
	str	r2, [r3]
.L14886:
	ldr	r1, .L14906+20
	mov	r3, #0
	ldr	r0, .L14906+24
	str	r3, [r8, #168]
	ldrd	r4, [sp]
.LPIC4325:
	add	r1, pc, r1
	ldrd	r6, [sp, #8]
	sub	r1, r1, #2560
	ldrd	r8, [sp, #16]
.LPIC4326:
	add	r0, pc, r0
	ldr	r10, [sp, #24]
	sub	r1, r1, #4
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14904:
	mov	r3, #16
	b	.L14881
.L14905:
	mvn	r0, #11
	b	.L14885
.L14907:
	.align	2
.L14906:
	.word	.LANCHOR9-(.LPIC4320+8)
	.word	.LC837-(.LPIC4321+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4327+8))
	.word	.LANCHOR9-(.LPIC4323+8)
	.word	.LC838-(.LPIC4324+8)
	.word	.LANCHOR9-(.LPIC4325+8)
	.word	.LC839-(.LPIC4326+8)
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L14921
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldrb	r7, [sp, #32]	@ zero_extendqisi2
	strd	r8, [sp, #16]
	mov	r8, r3
	str	lr, [sp, #28]
	mov	lr, r1
.LPIC4328:
	add	ip, pc, ip
	str	r10, [sp, #24]
	ldr	r3, [ip, #3988]
	cmp	r1, r3
	bge	.L14916
	cmp	r0, #0
	mov	r5, r0
	beq	.L14917
	ldr	r3, [r0, #8]
	mov	r6, r2
	ldr	ip, .L14921+4
	ldr	r2, [r3, #8]
	mov	r0, r3
.LPIC4339:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	ldr	r4, [ip, lr, asl #2]
	blx	r3
	subs	r9, r0, #0
	bne	.L14918
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r9, r0, #0
	bne	.L14919
	ldr	r3, [r5, #12]
	cmp	r6, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r8, [r4, #52]
	strb	r7, [r4, #53]
	str	r6, [r4, #60]
	str	r3, [r4, #56]
	beq	.L14920
.L14914:
	ldr	r3, .L14921+8
	add	r2, r4, #168
	mov	r0, #4
.LPIC4338:
	add	r3, pc, r3
	ldr	r1, [r3, #3992]
	bl	queue_work_on(PLT)
.L14910:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14920:
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r8, [r4, #64]
	strb	r7, [r4, #65]
	strd	r2, [r4, #68]
	b	.L14914
.L14919:
	ldr	r1, .L14921+12
	ldr	r0, .L14921+16
	ldr	r2, [r5, #12]
.LPIC4336:
	add	r1, pc, r1
.LPIC4337:
	add	r0, pc, r0
	sub	r1, r1, #2528
	bl	printk(PLT)
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L14910
.L14918:
	ldr	r1, .L14921+20
	ldr	r0, .L14921+24
	ldr	r2, [r5, #8]
.LPIC4334:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4335:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14910
.L14917:
	ldr	r1, .L14921+28
	mvn	r9, #18
	ldr	r0, .L14921+32
.LPIC4331:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4332:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14910
.L14916:
	ldr	r1, .L14921+36
	mov	r2, lr
	mvn	r9, #18
	ldr	r0, .L14921+40
.LPIC4329:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4330:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14910
.L14922:
	.align	2
.L14921:
	.word	.LANCHOR4-(.LPIC4328+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4339+8))
	.word	.LANCHOR4-(.LPIC4338+8)
	.word	.LANCHOR9-(.LPIC4336+8)
	.word	.LC213-(.LPIC4337+8)
	.word	.LANCHOR9-(.LPIC4334+8)
	.word	.LC212-(.LPIC4335+8)
	.word	.LANCHOR9-(.LPIC4331+8)
	.word	.LC835-(.LPIC4332+8)
	.word	.LANCHOR9-(.LPIC4329+8)
	.word	.LC90-(.LPIC4330+8)
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #84]
	cmp	r5, r1
	beq	.L14946
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14925
	ldr	r5, .L14953
	ldr	r0, .L14953+4
.LPIC4348:
	add	r5, pc, r5
	sub	r5, r5, #2496
.LPIC4349:
	add	r0, pc, r0
	sub	r5, r5, #12
	mov	r1, r5
	bl	printk(PLT)
	cmp	r6, #1
	bhi	.L14925
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L14947
.L14931:
	cmp	r6, #1
	beq	.L14948
.L14932:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock(PLT)
.L14930:
	ldr	r1, .L14953+8
	mov	r5, #1
	mov	r6, #0
	ldr	r0, .L14953+12
	str	r5, [r4, #88]
.LPIC4373:
	add	r1, pc, r1
	sub	r1, r1, #2496
.LPIC4374:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r2, r5
	mov	r3, r6
	mov	r1, #3
	add	r0, r4, #108
	bl	__wake_up(PLT)
	mov	r2, r5
	add	r0, r4, #120
	mov	r3, r6
	mov	r1, #3
	bl	__wake_up(PLT)
.L14928:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14948:
	ldr	r9, .L14953+16
	ldr	r0, .L14953+20
.LPIC4353:
	add	r9, pc, r9
	sub	r5, r9, #2496
.LPIC4354:
	add	r0, pc, r0
	sub	r5, r5, #12
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r4, #148]
	mov	r1, r5
	ldr	r8, [r3, #28]
	cmp	r8, #0
	bne	.L14933
	ldr	r0, .L14953+24
.LPIC4356:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r2, [r4, #148]
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	subs	r10, r0, #0
	bne	.L14949
	ldr	r3, [r4, #148]
	mov	r1, r5
	ldr	r0, .L14953+28
	ldr	r2, [r3, #28]
.LPIC4360:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #152]
	bl	config_ep_by_speed(PLT)
	subs	r7, r0, #0
	beq	.L14935
	ldr	r2, [r4, #152]
	mov	r1, r5
	mov	r3, r7
	ldr	r0, .L14953+32
	mov	r6, r7
	str	r10, [r2, #28]
	ldr	r2, [r4, #152]
.LPIC4362:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14928
.L14925:
	ldr	r1, .L14953+36
	mvn	r6, #21
	ldr	r0, .L14953+40
.LPIC4375:
	add	r1, pc, r1
	sub	r1, r1, #2496
.LPIC4376:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L14928
.L14949:
	ldr	r2, [r4, #148]
	mov	r1, r5
	mov	r3, r10
	ldr	r0, .L14953+44
	mov	r6, r10
	str	r8, [r2, #28]
	ldr	r2, [r4, #148]
.LPIC4358:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14928
.L14946:
	ldr	r8, .L14953+48
	ldr	r0, .L14953+52
.LPIC4340:
	add	r8, pc, r8
	sub	r8, r8, #2496
.LPIC4341:
	add	r0, pc, r0
	sub	r8, r8, #12
	mov	r1, r8
	bl	printk(PLT)
	cmp	r6, #0
	bne	.L14925
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L14950
.L14926:
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #156]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L14951
	ldr	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L14930
	ldr	r1, .L14953+56
	mov	r3, r6
	ldr	r2, [r4, #156]
	ldr	r0, .L14953+60
.LPIC4346:
	add	r1, pc, r1
	sub	r1, r1, #2496
	ldr	r2, [r2, #4]
	sub	r1, r1, #12
.LPIC4347:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14928
.L14947:
	ldr	r0, .L14953+64
	mov	r1, r5
.LPIC4351:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L14953+68
	mov	r1, #16384
	mov	r2, #0
	str	r1, [r4, #224]
	str	r2, [r4, #88]
.LPIC4352:
	add	r3, pc, r3
	add	r3, r3, #496
	str	r3, [r4, #200]
	b	.L14931
.L14935:
	ldr	r3, [r4, #152]
	mov	r1, r5
	sub	r9, r9, #2480
	ldr	r0, .L14953+72
	sub	r9, r9, #12
	ldr	r2, [r3, #28]
.LPIC4364:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	lr, [r4, #84]
	mov	r1, r9
	mov	r2, r4
	ldr	ip, [r4, #132]
	ldr	r0, .L14953+76
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
.LPIC4366:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	ip, r0
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldr	r2, [r4, #132]
	add	r0, r4, #140
	str	ip, [sp]
	bl	bam_data_connect(PLT)
	subs	r2, r0, #0
	mov	r1, r9
	bne	.L14952
	ldr	r0, .L14953+80
.LPIC4370:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14932
.L14933:
	ldr	r0, .L14953+84
.LPIC4372:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14932
.L14952:
	ldr	r0, .L14953+88
.LPIC4368:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14932
.L14951:
	ldr	r2, [r4, #156]
	mov	ip, #0
	mov	r6, r3
	ldr	r1, .L14953+92
	ldr	r0, .L14953+96
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
.LPIC4344:
	add	r1, pc, r1
	sub	r1, r1, #2496
.LPIC4345:
	add	r0, pc, r0
	sub	r1, r1, #12
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14928
.L14950:
	ldr	r0, .L14953+100
	mov	r2, r5
	mov	r1, r8
.LPIC4343:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14926
.L14954:
	.align	2
.L14953:
	.word	.LANCHOR9-(.LPIC4348+8)
	.word	.LC843-(.LPIC4349+8)
	.word	.LANCHOR9-(.LPIC4373+8)
	.word	.LC855-(.LPIC4374+8)
	.word	.LANCHOR9-(.LPIC4353+8)
	.word	.LC845-(.LPIC4354+8)
	.word	.LC846-(.LPIC4356+8)
	.word	.LC848-(.LPIC4360+8)
	.word	.LC849-(.LPIC4362+8)
	.word	.LANCHOR9-(.LPIC4375+8)
	.word	.LC856-(.LPIC4376+8)
	.word	.LC847-(.LPIC4358+8)
	.word	.LANCHOR9-(.LPIC4340+8)
	.word	.LC840-(.LPIC4341+8)
	.word	.LANCHOR9-(.LPIC4346+8)
	.word	.LC540-(.LPIC4347+8)
	.word	.LC844-(.LPIC4351+8)
	.word	.LANCHOR2-(.LPIC4352+8)
	.word	.LC850-(.LPIC4364+8)
	.word	.LC851-(.LPIC4366+8)
	.word	.LC853-(.LPIC4370+8)
	.word	.LC854-(.LPIC4372+8)
	.word	.LC852-(.LPIC4368+8)
	.word	.LANCHOR9-(.LPIC4344+8)
	.word	.LC842-(.LPIC4345+8)
	.word	.LC841-(.LPIC4343+8)
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L14961
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4380:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, r0, asl #2]
	bl	kfree(PLT)
	ldr	r3, .L14961+4
	mov	r2, #0
	str	r2, [r4, r5, asl #2]
.LPIC4378:
	add	r3, pc, r3
	ldr	r0, [r3, #3992]
	cmp	r0, r2
	beq	.L14956
	bl	destroy_workqueue(PLT)
.L14956:
	ldr	r3, .L14961+8
	mov	r2, #0
	mov	r0, r2
.LPIC4379:
	add	r3, pc, r3
	str	r2, [r3, #3992]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14962:
	.align	2
.L14961:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4380+8))
	.word	.LANCHOR4-(.LPIC4378+8)
	.word	.LANCHOR4-(.LPIC4379+8)
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r0, #0
	str	r6, [sp, #8]
	mov	r4, r1
	str	lr, [sp, #12]
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L14967
.L14964:
	cmp	r3, #2
	bls	.L14965
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L14965:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #148]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L14968
	mov	r2, #0
	mov	r0, r4
.LPIC4381:
	add	r3, pc, r3
	str	r2, [r3, #3472]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L14967:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14964
.L14969:
	.align	2
.L14968:
	.word	.LANCHOR0-(.LPIC4381+8)
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r1, #136]	@ zero_extendqisi2
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L14974
.L14971:
	cmp	r3, #2
	bls	.L14972
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L14972:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L14975
	mov	r2, #0
.LPIC4382:
	add	r3, pc, r3
	strb	r2, [r3, #170]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14974:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14971
.L14976:
	.align	2
.L14975:
	.word	.LANCHOR2-(.LPIC4382+8)
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	mov	r0, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	bam_data_destroy(PLT)
	ldr	r0, [r4, #144]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14978
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L14978:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #160]
	ldr	r5, .L14980
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
.LPIC4383:
	add	r5, pc, r5
	add	r5, r5, #2496
	add	r5, r5, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, .L14980+4
	mov	r2, #0
	mov	r0, r5
	mov	r1, r6
.LPIC4386:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L14981:
	.align	2
.L14980:
	.word	.LANCHOR1-(.LPIC4383+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC4386+8))
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.global	bam_data_setup
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L14999
	cmp	r0, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC4396:
	add	r5, pc, r5
	.pad #12
	sub	sp, sp, #12
	bne	.L14995
	ldr	r6, .L14999+4
.LPIC4389:
	add	r6, pc, r6
	ldr	r3, [r6, #3992]
	cmp	r3, #0
	movne	r0, #0
	beq	.L14996
.L14992:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14996:
	mov	r2, r0
	ldr	r0, .L14999+8
	str	r3, [sp]
	mov	r1, #10
.LPIC4390:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r6, #3992]
	beq	.L14997
	ldr	r2, [r6, #3988]
	ldr	r3, .L14999+12
	add	r2, r2, #1
	str	r2, [r6, #3988]
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L14991
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14998
.L14986:
	ldr	fp, .L14999+16
	mov	r3, #65024
	mov	r9, #0
	ldr	r10, .L14999+20
	movt	r3, 65535
	add	r8, r4, #172
	ldr	ip, .L14999+24
	add	r7, r4, #188
	add	r6, r4, #204
	ldr	r1, .L14999+28
	add	lr, r4, #220
	str	r9, [r4]
	ldr	r2, .L14999+32
.LPIC4397:
	add	fp, pc, fp
	str	r4, [r4, #16]
.LPIC4398:
	add	r10, pc, r10
	str	r3, [r4, #168]
	mov	r0, r9
.LPIC4399:
	add	ip, pc, ip
	str	r3, [r4, #184]
.LPIC4400:
	add	r1, pc, r1
	str	r3, [r4, #200]
	str	r3, [r4, #216]
	str	fp, [r4, #180]
	str	r10, [r4, #196]
	str	ip, [r4, #212]
	str	r1, [r4, #228]
	str	r8, [r4, #172]
	str	r8, [r4, #176]
	str	r7, [r4, #188]
	str	r7, [r4, #192]
	str	r6, [r4, #204]
	str	r6, [r4, #208]
	str	lr, [r4, #220]
	str	lr, [r4, #224]
	ldr	r3, [r5, r2]
	str	r4, [r3]
	b	.L14992
.L14991:
	mov	r4, #16
	b	.L14986
.L14998:
	ldr	r1, .L14999+36
	mov	r2, r4
	ldr	r3, [r6, #3988]
	ldr	r0, .L14999+40
.LPIC4404:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #2464
.LPIC4405:
	add	r0, pc, r0
	sub	r1, r1, #8
	str	r3, [r6, #3988]
	bl	printk(PLT)
	ldr	r3, [r6, #3988]
	cmp	r3, #0
	ble	.L14989
	ldr	r3, .L14999+32
	ldr	r5, [r5, r3]
	ldr	r0, [r5]
	bl	kfree(PLT)
	str	r4, [r5]
.L14989:
	ldr	r3, .L14999+44
.LPIC4401:
	add	r3, pc, r3
	ldr	r0, [r3, #3992]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L14992
.L14995:
	ldr	r1, .L14999+48
	mov	r2, r0
	ldr	r0, .L14999+52
.LPIC4387:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4388:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L14992
.L14997:
	ldr	r1, .L14999+56
	ldr	r0, .L14999+60
.LPIC4392:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4393:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L14992
.L15000:
	.align	2
.L14999:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4396+8)
	.word	.LANCHOR4-(.LPIC4389+8)
	.word	.LC857-(.LPIC4390+8)
	.word	kmalloc_caches(GOT)
	.word	bam2bam_data_connect_work-(.LPIC4397+8)
	.word	bam2bam_data_disconnect_work-(.LPIC4398+8)
	.word	bam2bam_data_suspend_work-(.LPIC4399+8)
	.word	bam2bam_data_resume_work-(.LPIC4400+8)
	.word	bam2bam_data_ports(GOT)
	.word	.LANCHOR9-(.LPIC4404+8)
	.word	.LC859-(.LPIC4405+8)
	.word	.LANCHOR4-(.LPIC4401+8)
	.word	.LANCHOR9-(.LPIC4387+8)
	.word	.LC763-(.LPIC4388+8)
	.word	.LANCHOR9-(.LPIC4392+8)
	.word	.LC858-(.LPIC4393+8)
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	mbim_bind_config
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldr	r0, .L15037
	strd	r6, [sp, #8]
	ldr	r7, .L15037+4
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r2, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC4408:
	add	r0, pc, r0
	.pad #4
	sub	sp, sp, #4
.LPIC4407:
	add	r7, pc, r7
	sub	r8, r7, #2448
	sub	r8, r8, #8
	mov	r1, r8
	bl	printk(PLT)
	ldr	r3, .L15037+8
.LPIC4409:
	add	r3, pc, r3
	ldr	r9, [r3, #-664]
	cmp	r4, r9
	bcs	.L15032
	ldr	r0, .L15037+12
	sub	r7, r7, #2432
	mov	r2, r9
	sub	r7, r7, #4
	mov	r1, r7
.LPIC4413:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15033
	ldr	r8, .L15037+16
	mov	r2, r9
	mov	r1, r7
	ldr	r0, .L15037+20
.LPIC4420:
	add	r8, pc, r8
.LPIC4419:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r8, #3492]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15034
.L15005:
	ldr	r3, .L15037+24
.LPIC4426:
	add	r3, pc, r3
	ldr	r4, [r3, #-660]
	cmp	r4, #0
	beq	.L15035
	ldr	r3, .L15037+28
	mov	r0, #0
	mov	r2, #12
	ldr	r7, .L15037+32
	mov	lr, #16384
	mov	r1, r6
	ldr	r9, .L15037+36
	ldr	ip, [r5, #24]
	str	r0, [r4, #88]
.LPIC4431:
	add	r3, pc, r3
	ldr	r0, .L15037+40
	str	lr, [r4, #224]
.LPIC4429:
	add	r7, pc, r7
	add	r3, r3, #3504
	ldr	r8, .L15037+44
	add	r3, r3, r2
.LPIC4430:
	add	r9, pc, r9
	ldr	lr, .L15037+48
	add	r10, r7, #496
	str	ip, [r4, #84]
	ldr	fp, .L15037+52
.LPIC4434:
	add	r0, pc, r0
	str	r3, [r4, #4]
	ldr	ip, .L15037+56
	str	r10, [r4, #200]
	ldr	r3, .L15037+60
.LPIC4432:
	add	r8, pc, r8
	str	r9, [r4]
	ldr	r10, .L15037+64
.LPIC4433:
	add	lr, pc, lr
	ldr	r9, .L15037+68
	str	r0, [r4, #40]
.LPIC4436:
	add	fp, pc, fp
	ldr	r0, .L15037+72
.LPIC4435:
	add	ip, pc, ip
	str	r8, [r4, #32]
.LPIC4439:
	add	r3, pc, r3
	str	lr, [r4, #36]
.LPIC4437:
	add	r10, pc, r10
	str	ip, [r4, #44]
.LPIC4438:
	add	r9, pc, r9
	str	r3, [r4, #60]
.LPIC4440:
	add	r0, pc, r0
	strd	r10, [r4, #48]
	str	r9, [r4, #56]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15007
	ldr	r0, .L15037+76
	mov	r2, #12
	mov	r1, r6
.LPIC4441:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15036
.L15007:
	mov	r3, #6
	str	r3, [r4, #132]
.L15009:
	add	r2, r4, #208
	add	r3, r4, #216
	mov	r1, r4
	mov	r0, r5
	strd	r2, [r4, #212]
	str	r2, [r4, #208]
	str	r3, [r4, #220]
	bl	usb_add_function(PLT)
	ldr	r1, .L15037+80
	mov	r4, r0
	ldr	r0, .L15037+84
	mov	r2, r4
.LPIC4447:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4448:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
.L15030:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15034:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15030
	ldr	r7, .L15037+88
	uxtb	r4, r0
	ldr	r0, [r5, #24]
	strb	r4, [r8, #3492]
.LPIC4422:
	add	r7, pc, r7
	strb	r4, [r7, #1136]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15030
	uxtb	r4, r0
	strb	r4, [r8, #3500]
	strb	r4, [r7, #1156]
	strb	r4, [r7, #1168]
	b	.L15005
.L15033:
	ldr	r0, .L15037+92
	mov	r1, r7
	mov	r2, r4
.LPIC4415:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15037+96
	mov	r1, r8
.LPIC4417:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15030
.L15036:
	ldr	r0, .L15037+100
	mov	r2, #12
	mov	r1, r6
.LPIC4442:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15007
	ldr	r0, .L15037+104
	mov	r2, #12
	mov	r1, r6
.LPIC4443:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15007
	ldr	r0, .L15037+108
	mov	r2, #12
	mov	r1, r6
.LPIC4444:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15007
	ldr	r0, .L15037+112
	mov	r2, #12
	mov	r1, r6
.LPIC4445:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15007
	ldr	r0, .L15037+116
	mov	r1, r6
	mov	r2, #12
.LPIC4446:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15007
	mov	r3, #8192
	mov	r0, #7
	mov	r1, #16
	mov	r2, #1
	str	r0, [r4, #132]
	strh	r1, [r7, #54]	@ movhi
	str	r3, [r7, #32]
	str	r3, [r7, #44]
	strh	r2, [r7, #36]	@ movhi
	b	.L15009
.L15035:
	ldr	r1, .L15037+120
	ldr	r0, .L15037+124
.LPIC4427:
	add	r1, pc, r1
	sub	r1, r1, #2448
.LPIC4428:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L15030
.L15032:
	ldr	r0, .L15037+128
	mov	r3, r9
	mov	r2, r4
	mov	r1, r8
.LPIC4411:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15030
.L15038:
	.align	2
.L15037:
	.word	.LC860-(.LPIC4408+8)
	.word	.LANCHOR9-(.LPIC4407+8)
	.word	.LANCHOR4-(.LPIC4409+8)
	.word	.LC862-(.LPIC4413+8)
	.word	.LANCHOR0-(.LPIC4420+8)
	.word	.LC359-(.LPIC4419+8)
	.word	.LANCHOR4-(.LPIC4426+8)
	.word	.LANCHOR0-(.LPIC4431+8)
	.word	.LANCHOR2-(.LPIC4429+8)
	.word	.LC866-(.LPIC4430+8)
	.word	mbim_set_alt-(.LPIC4434+8)
	.word	mbim_bind-(.LPIC4432+8)
	.word	mbim_unbind-(.LPIC4433+8)
	.word	mbim_setup-(.LPIC4436+8)
	.word	mbim_get_alt-(.LPIC4435+8)
	.word	mbim_resume-(.LPIC4439+8)
	.word	mbim_disable-(.LPIC4437+8)
	.word	mbim_suspend-(.LPIC4438+8)
	.word	.LC0-(.LPIC4440+8)
	.word	.LC1-(.LPIC4441+8)
	.word	.LANCHOR9-(.LPIC4447+8)
	.word	.LC867-(.LPIC4448+8)
	.word	.LANCHOR2-(.LPIC4422+8)
	.word	.LC863-(.LPIC4415+8)
	.word	.LC864-(.LPIC4417+8)
	.word	.LC2-(.LPIC4442+8)
	.word	.LC3-(.LPIC4443+8)
	.word	.LC4-(.LPIC4444+8)
	.word	.LC5-(.LPIC4445+8)
	.word	.LC6-(.LPIC4446+8)
	.word	.LANCHOR9-(.LPIC4427+8)
	.word	.LC865-(.LPIC4428+8)
	.word	.LC861-(.LPIC4411+8)
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15041
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC4453:
	add	r3, pc, r3
	sub	r0, r3, #1232
	sub	r0, r0, #4
	bl	strim(PLT)
	mov	r2, r0
	ldr	lr, [sp, #4]
	mov	r0, r4
	mov	r1, #0
	ldr	r4, [sp]
	add	sp, sp, #8
	b	mbim_bind_config(PLT)
.L15042:
	.align	2
.L15041:
	.word	.LANCHOR4-(.LPIC4453+8)
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15044
	ldr	r2, .L15044+4
.LPIC4456:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC4455:
	add	r2, pc, r2
	ldr	r1, [r2, #3992]
	ldr	r2, [r3, r0, asl #2]
	mov	r0, #4
	add	r2, r2, #200
	b	queue_work_on(PLT)
.L15045:
	.align	2
.L15044:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4456+8))
	.word	.LANCHOR4-(.LPIC4455+8)
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15049
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15049+4
	str	lr, [sp, #4]
.LPIC4457:
	add	r1, pc, r1
	sub	r1, r1, #2416
.LPIC4458:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_suspend(PLT)
.L15050:
	.align	2
.L15049:
	.word	.LANCHOR9-(.LPIC4457+8)
	.word	.LC868-(.LPIC4458+8)
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.global	bam_data_resume
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15053
	ldr	r2, .L15053+4
.LPIC4461:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC4460:
	add	r2, pc, r2
	ldr	r1, [r2, #3992]
	ldr	r2, [r3, r0, asl #2]
	mov	r0, #4
	add	r2, r2, #216
	b	queue_work_on(PLT)
.L15054:
	.align	2
.L15053:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4461+8))
	.word	.LANCHOR4-(.LPIC4460+8)
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15058
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15058+4
	str	lr, [sp, #4]
.LPIC4462:
	add	r1, pc, r1
	sub	r1, r1, #2400
.LPIC4463:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_resume(PLT)
.L15059:
	.align	2
.L15058:
	.word	.LANCHOR9-(.LPIC4462+8)
	.word	.LC869-(.LPIC4463+8)
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.global	ecm_bind_config
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L15079
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4464:
	add	r0, pc, r0
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L15066
	ldr	r0, .L15079+4
	mov	r1, r4
.LPIC4465:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L15066
	ldr	r7, .L15079+8
.LPIC4466:
	add	r7, pc, r7
	ldrb	r3, [r7, #864]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15076
.L15063:
	ldr	r3, .L15079+12
.LPIC4487:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15071
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15077
.L15064:
	ldrb	r2, [r5, #3]	@ zero_extendqisi2
	add	r7, r4, #150
	mov	r1, #14
	ldrb	r8, [r5, #5]	@ zero_extendqisi2
	mov	r0, r7
	ldrb	r3, [r5]	@ zero_extendqisi2
	ldrb	lr, [r5, #2]	@ zero_extendqisi2
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r9, [r5, #4]	@ zero_extendqisi2
	str	r2, [sp, #8]
	mov	r5, #15
	ldr	r2, .L15079+16
	str	r8, [sp, #16]
	ldr	r8, .L15079+20
	stmia	sp, {ip, lr}
	str	r9, [sp, #12]
.LPIC4476:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r2, .L15079+24
.LPIC4477:
	add	r8, pc, r8
	mov	r0, r6
	ldr	r3, .L15079+28
	add	ip, r8, #3520
	strh	r5, [r4, #98]	@ movhi
	add	ip, ip, #4
	str	r7, [r8, #876]
	ldr	r6, .L15079+32
	ldr	lr, .L15079+36
	mov	r1, r4
.LPIC4478:
	add	r2, pc, r2
	str	ip, [r4, #4]
	ldr	ip, .L15079+40
.LPIC4480:
	add	r3, pc, r3
	str	r2, [r4]
	ldr	r2, .L15079+44
.LPIC4481:
	add	r6, pc, r6
	str	r3, [r4, #32]
	ldr	r3, .L15079+48
.LPIC4482:
	add	lr, pc, lr
.LPIC4483:
	add	ip, pc, ip
	str	r6, [r4, #36]
	str	lr, [r4, #40]
.LPIC4484:
	add	r2, pc, r2
	str	ip, [r4, #44]
.LPIC4485:
	add	r3, pc, r3
	str	r2, [r4, #52]
	str	r3, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L15078
.L15062:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15066:
	mvn	r0, #21
	b	.L15062
.L15076:
	mov	r0, r8
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	ldr	r4, .L15079+52
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #864]
.LPIC4468:
	add	r4, pc, r4
	strb	r3, [r4, #1308]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #880]
	strb	r3, [r4, #1340]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #872]
	strb	r3, [r4, #3111]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	uxtb	r0, r0
	strb	r0, [r7, #888]
	strb	r0, [r4, #1299]
	b	.L15063
.L15071:
	mov	r4, #16
	b	.L15064
.L15078:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r8, #876]
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15062
.L15077:
	mvn	r0, #11
	b	.L15062
.L15080:
	.align	2
.L15079:
	.word	.LC323-(.LPIC4464+8)
	.word	.LC458-(.LPIC4465+8)
	.word	.LANCHOR0-(.LPIC4466+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4487+8))
	.word	.LC870-(.LPIC4476+8)
	.word	.LANCHOR0-(.LPIC4477+8)
	.word	.LC871-(.LPIC4478+8)
	.word	ecm_bind-(.LPIC4480+8)
	.word	ecm_unbind-(.LPIC4481+8)
	.word	ecm_set_alt-(.LPIC4482+8)
	.word	ecm_get_alt-(.LPIC4483+8)
	.word	ecm_setup-(.LPIC4484+8)
	.word	ecm_disable-(.LPIC4485+8)
	.word	.LANCHOR2-(.LPIC4468+8)
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r1, #0
	strd	r6, [sp, #8]
	ldr	r7, .L15105
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC4498:
	add	r7, pc, r7
	ldrb	r10, [sp, #40]	@ zero_extendqisi2
	beq	.L15089
	mov	r9, r3
	mov	r8, r2
	mov	r6, r0
	mov	r5, r1
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L15097
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15101
	ldr	fp, .L15105+4
.LPIC4509:
	add	fp, pc, fp
	ldrb	r3, [fp, #3532]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15102
.L15088:
	ldr	r3, .L15105+8
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15094
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15103
.L15084:
	ldr	r3, [r5]	@ unaligned
	mov	r0, r6
	cmp	r10, #0
	ldr	r6, .L15105+12
	mov	lr, #44
	moveq	r10, #15
	ldr	ip, .L15105+16
	mov	fp, #0
	mov	r1, r4
	ldr	r2, .L15105+20
	str	r3, [r4, #122]	@ unaligned
	ldrh	r5, [r5, #4]	@ unaligned
.LPIC4501:
	add	r6, pc, r6
	str	lr, [r4, #100]
	ldr	lr, .L15105+24
	add	r3, r6, #3552
.LPIC4499:
	add	ip, pc, ip
	strb	r10, [r4, #132]
	add	r3, r3, #12
	str	r8, [r4, #128]
	ldr	r10, .L15105+28
	str	r9, [r4, #140]
	ldr	r8, .L15105+32
	strh	r5, [r4, #126]	@ unaligned
	ldr	r9, .L15105+36
.LPIC4507:
	add	lr, pc, lr
	str	ip, [r4, #104]
	ldr	r5, .L15105+40
	strh	fp, [r4, #98]	@ movhi
	ldr	ip, .L15105+44
.LPIC4500:
	add	r10, pc, r10
	ldr	r2, [r7, r2]
	str	r3, [r4, #4]
.LPIC4502:
	add	r8, pc, r8
	ldr	r6, .L15105+48
.LPIC4503:
	add	r9, pc, r9
	str	r10, [r4]
	ldr	r3, .L15105+52
.LPIC4504:
	add	r5, pc, r5
.LPIC4505:
	add	ip, pc, ip
	strd	r8, [r4, #32]
	str	r2, [r4, #108]
	mov	r2, lr
.LPIC4506:
	add	r6, pc, r6
	str	r5, [r4, #40]
.LPIC4508:
	add	r3, pc, r3
	str	ip, [r4, #52]
	str	r6, [r4, #48]
	strd	r2, [r4, #56]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L15104
.L15085:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, .L15105+56
	mov	r2, #0
	ldr	r3, [r7, r3]
	str	r2, [r3]
	bl	rndis_exit(PLT)
	mov	r0, r5
.L15097:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15102:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15097
	ldr	r4, .L15105+60
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [fp, #3532]
.LPIC4493:
	add	r4, pc, r4
	strb	r3, [r4, #2972]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15097
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [fp, #3540]
	strb	r3, [r4, #2992]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15097
	uxtb	r0, r0
	strb	r0, [fp, #3548]
	strb	r0, [r4, #2963]
	b	.L15088
.L15094:
	mov	r4, #16
	b	.L15084
.L15104:
	ldr	r3, .L15105+56
	mov	r0, r5
	ldr	r3, [r7, r3]
	str	r4, [r3]
	b	.L15097
.L15103:
	mvn	r5, #11
	b	.L15085
.L15089:
	mvn	r0, #21
	b	.L15097
.L15101:
	ldr	r5, .L15105+64
	mov	r2, r4
	ldr	r0, .L15105+68
.LPIC4488:
	add	r5, pc, r5
	sub	r1, r5, #2384
.LPIC4489:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L15105+72
	sub	r1, r5, #2368
	sub	r1, r1, #4
.LPIC4491:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15097
.L15106:
	.align	2
.L15105:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4498+8)
	.word	.LANCHOR0-(.LPIC4509+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR0-(.LPIC4501+8)
	.word	rndis_qc_add_header-(.LPIC4499+8)
	.word	rndis_qc_rm_hdr(GOT)
	.word	rndis_qc_suspend-(.LPIC4507+8)
	.word	.LC827-(.LPIC4500+8)
	.word	rndis_qc_bind-(.LPIC4502+8)
	.word	rndis_qc_unbind-(.LPIC4503+8)
	.word	rndis_qc_set_alt-(.LPIC4504+8)
	.word	rndis_qc_setup-(.LPIC4505+8)
	.word	rndis_qc_disable-(.LPIC4506+8)
	.word	rndis_qc_resume-(.LPIC4508+8)
	.word	_rndis_qc(GOT)
	.word	.LANCHOR2-(.LPIC4493+8)
	.word	.LANCHOR9-(.LPIC4488+8)
	.word	.LC863-(.LPIC4489+8)
	.word	.LC864-(.LPIC4491+8)
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	rndis_qc_bind_config
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	.pad #12
	sub	sp, sp, #12
	mov	r3, #0
	mov	r2, r3
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	gether_setup_name
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L15126
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC4510:
	add	r8, pc, r8
	ldr	r7, [r8, #3996]
	cmp	r7, #0
	mvnne	r0, #15
	bne	.L15110
	mov	r6, r2
	mov	r2, #1
	mov	r5, r1
	mov	r4, r0
	mov	r1, r2
	mov	r0, #132
	bl	alloc_etherdev_mqs(PLT)
	subs	r9, r0, #0
	mvneq	r0, #11
	bne	.L15125
.L15110:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15125:
	add	r10, r9, #1152
	mov	r2, #65024
	str	r7, [r9, #1152]
	add	ip, r10, #52
	movt	r2, 65535
	str	r7, [r9, #1168]
	add	lr, r10, #20
	add	r3, r10, #28
	str	r7, [r9, #1216]
	str	ip, [r9, #1204]
	add	r1, r10, #108
	add	fp, r10, #92
	str	ip, [r9, #1208]
	ldr	ip, .L15126+4
	str	r3, [r9, #1184]
	mov	r3, r6
	str	r2, [r9, #1240]
	str	r2, [r9, #1256]
	ldr	r2, .L15126+8
.LPIC4511:
	add	ip, pc, ip
	str	lr, [r9, #1172]
	str	lr, [r9, #1176]
	ldr	lr, [r9, #1184]
	str	ip, [r9, #1252]
	ldr	ip, .L15126+12
	str	r7, [r9, #1212]
.LPIC4513:
	add	r2, pc, r2
	str	r1, [r9, #1260]
	str	r1, [r9, #1264]
	mov	r1, #16
.LPIC4512:
	add	ip, pc, ip
	str	r9, [r9, #1160]
	str	fp, [r9, #1244]
	str	fp, [r9, #1248]
	str	lr, [r9, #1180]
	str	ip, [r9, #1268]
	bl	snprintf(PLT)
	ldr	r7, [r8, #4000]
	ldr	r6, [r9, #484]
	cmp	r7, #0
	beq	.L15115
	add	r1, r6, #5
	strd	r4, [sp]
	sub	r8, r6, #1
	mov	r5, r1
.L15114:
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r4, r7
	cmp	r3, #46
	cmpne	r3, #58
	addeq	r4, r7, #1
	mov	r7, r4
	ldrb	r0, [r7], #2	@ zero_extendqisi2
	bl	hex_to_bin(PLT)
	mov	fp, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin(PLT)
	orr	r0, r0, fp, asl #4
	strb	r0, [r8, #1]!
	cmp	r8, r5
	bne	.L15114
	ldrb	ip, [r6]	@ zero_extendqisi2
	ldrd	r4, [sp]
	tst	ip, #1
	bne	.L15115
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	ldrb	r1, [r6, #2]	@ zero_extendqisi2
	ldrb	r2, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	orr	r0, ip, r0
	ldrb	ip, [r6, #5]	@ zero_extendqisi2
	orr	r1, r0, r1
	orr	r2, r1, r2
	orr	r3, r2, r3
	orrs	r3, r3, ip
	beq	.L15115
	add	r7, r4, #32
.L15112:
	ldr	r3, [r5]	@ unaligned
	add	r6, r10, #125
	ldr	r0, .L15126+16
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
.LPIC4517:
	add	r0, pc, r0
	strh	r3, [r6, #4]	@ unaligned
	bl	printk(PLT)
	ldr	r3, .L15126+20
	str	r4, [r9, #1164]
	mov	r0, r9
	ldr	r2, .L15126+24
	str	r7, [r9, #688]
.LPIC4520:
	add	r3, pc, r3
.LPIC4518:
	add	r2, pc, r2
	add	r3, r3, #3568
	add	r1, r2, #320
	add	r3, r3, #4
	add	r2, r2, #456
	str	r3, [r9, #736]
	str	r1, [r9, #328]
	str	r2, [r9, #332]
	bl	register_netdev(PLT)
	subs	r4, r0, #0
	bge	.L15116
	mov	r0, r9
	bl	free_netdev(PLT)
	mov	r0, r4
	b	.L15110
.L15115:
	mov	r0, r6
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r6]	@ zero_extendqisi2
	add	r7, r4, #32
	ldr	r2, .L15126+28
	mov	r0, r7
	ldr	r1, .L15126+32
	bic	r3, r3, #1
	orr	r3, r3, #2
.LPIC4515:
	add	r2, pc, r2
.LPIC4516:
	add	r1, pc, r1
	strb	r3, [r6]
	bl	dev_warn(PLT)
	b	.L15112
.L15116:
	ldr	r0, .L15126+36
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
.LPIC4521:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15126+40
	mov	r2, r6
	ldr	r1, [r9, #1160]
.LPIC4522:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15126+44
	mov	r0, r9
.LPIC4523:
	add	r3, pc, r3
	str	r10, [r3, #3996]
	bl	netif_carrier_off(PLT)
	mov	r0, r4
	b	.L15110
.L15127:
	.align	2
.L15126:
	.word	.LANCHOR4-(.LPIC4510+8)
	.word	eth_work-(.LPIC4511+8)
	.word	.LC872-(.LPIC4513+8)
	.word	process_rx_w-(.LPIC4512+8)
	.word	.LC875-(.LPIC4517+8)
	.word	.LANCHOR0-(.LPIC4520+8)
	.word	.LANCHOR6-(.LPIC4518+8)
	.word	.LC873-(.LPIC4515+8)
	.word	.LC874-(.LPIC4516+8)
	.word	.LC876-(.LPIC4521+8)
	.word	.LC877-(.LPIC4522+8)
	.word	.LANCHOR4-(.LPIC4523+8)
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_setup
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15129
.LPIC4524:
	add	r2, pc, r2
	b	gether_setup_name(PLT)
.L15130:
	.align	2
.L15129:
	.word	.LC878-(.LPIC4524+8)
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L15140
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	mov	r6, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L15142
	ldr	r0, .L15142+4
	str	r2, [sp, #16]
	ldrb	r2, [r4, #4]	@ zero_extendqisi2
.LPIC4528:
	add	r5, pc, r5
	sub	r5, r5, #2336
.LPIC4530:
	add	r0, pc, r0
	str	r2, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r5, r5, #8
	mov	r2, r5
	mov	r1, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk(PLT)
	ldr	r3, [r6, #24]
	mov	r1, r4
	ldr	r2, .L15142+8
	ldr	r0, [r3]
.LPIC4531:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r7, r0, #0
	bne	.L15141
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15135
	ldr	r3, .L15142+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4535:
	add	r3, pc, r3
	strb	r0, [r3, #2808]
	strb	r0, [r3, #2817]
	strb	r1, [r3, #2809]
	strb	r1, [r3, #2818]
	strb	r2, [r3, #2810]
	strb	r2, [r3, #2819]
.L15135:
	ldr	r2, [r4, #8]
	mov	r0, r6
	add	r3, r4, #13
	mov	r1, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_bind_config_vendor(PLT)
.L15140:
	ldr	r2, .L15142+16
	ldr	r0, .L15142+20
.LPIC4525:
	add	r2, pc, r2
	sub	r2, r2, #2336
.LPIC4527:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #0
.L15133:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15141:
	ldr	r0, .L15142+24
	mov	r2, r5
	mov	r1, r5
.LPIC4534:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	b	.L15133
.L15143:
	.align	2
.L15142:
	.word	.LANCHOR9-(.LPIC4528+8)
	.word	.LC880-(.LPIC4530+8)
	.word	.LC827-(.LPIC4531+8)
	.word	.LANCHOR2-(.LPIC4535+8)
	.word	.LANCHOR9-(.LPIC4525+8)
	.word	.LC879-(.LPIC4527+8)
	.word	.LC881-(.LPIC4534+8)
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	gether_cleanup
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L15150
	str	lr, [sp, #4]
.LPIC4541:
	add	r4, pc, r4
	ldr	r3, [r4, #3996]
	cmp	r3, #0
	beq	.L15144
	ldr	r0, [r3, #8]
	bl	unregister_netdev(PLT)
	ldr	r0, [r4, #3996]
	add	r0, r0, #88
	bl	flush_work(PLT)
	ldr	r3, [r4, #3996]
	ldr	r0, [r3, #8]
	bl	free_netdev(PLT)
	mov	r3, #0
	str	r3, [r4, #3996]
.L15144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15151:
	.align	2
.L15150:
	.word	.LANCHOR4-(.LPIC4541+8)
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	beq	.L15160
	ldr	r3, [r1, #24]
	mov	r6, r1
	mov	r1, r5
	ldr	r2, .L15163
	ldr	r0, [r3]
.LPIC4548:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r4, r0, #0
	bne	.L15161
	mov	r1, r5
	mov	r0, r6
	bl	ecm_bind_config(PLT)
	subs	r4, r0, #0
	moveq	r0, r4
	bne	.L15162
.L15156:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15160:
	ldr	r2, .L15163+4
	ldr	r0, .L15163+8
.LPIC4545:
	add	r2, pc, r2
	sub	r2, r2, #2304
.LPIC4547:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15156
.L15162:
	ldr	r2, .L15163+12
	ldr	r0, .L15163+16
.LPIC4552:
	add	r2, pc, r2
	sub	r2, r2, #2304
.LPIC4554:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	bl	gether_cleanup(PLT)
	mov	r0, r4
	b	.L15156
.L15161:
	ldr	r2, .L15163+20
	ldr	r0, .L15163+24
.LPIC4549:
	add	r2, pc, r2
	sub	r2, r2, #2304
.LPIC4551:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mov	r0, r4
	b	.L15156
.L15164:
	.align	2
.L15163:
	.word	.LC883-(.LPIC4548+8)
	.word	.LANCHOR9-(.LPIC4545+8)
	.word	.LC882-(.LPIC4547+8)
	.word	.LANCHOR9-(.LPIC4552+8)
	.word	.LC884-(.LPIC4554+8)
	.word	.LANCHOR9-(.LPIC4549+8)
	.word	.LC881-(.LPIC4551+8)
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.global	gether_connect
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15200
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4555:
	add	r3, pc, r3
	ldr	r6, [r3, #3996]
	cmp	r6, #0
	beq	.L15182
	ldr	r3, .L15200+4
	mov	r4, r0
.LPIC4560:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15168
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L15197
.L15169:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15198
.L15171:
	ldr	r0, [r4, #144]
	bl	kfree(PLT)
.L15170:
	mov	r0, r5
.L15188:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15198:
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15172
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L15199
.L15184:
	mov	r7, #2
.L15173:
	add	r8, r6, #16
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	mov	r2, r7
	ldr	r1, [r4, #88]
	add	r0, r6, #20
	bl	prealloc(PLT)
	subs	r5, r0, #0
	blt	.L15174
	mov	r2, r7
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc(PLT)
	mov	r5, r0
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	cmp	r5, #0
	bne	.L15175
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock(PLT)
	str	r5, [r6, #44]
	str	r5, [r6, #40]
	str	r5, [r6, #48]
	str	r4, [r6, #4]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L15176
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L15177
.L15196:
	mov	r0, r4
	blx	r3
.L15177:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #8]
	bl	netif_carrier_on(PLT)
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L15188
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill(PLT)
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L15180
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
	ldr	r0, [r6, #8]
	b	.L15188
.L15174:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
.L15175:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15172:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L15171
.L15180:
	ldr	r0, [r6, #8]
	b	.L15188
.L15168:
	mov	r3, #16
	str	r3, [r4, #144]
	b	.L15169
.L15199:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L15184
	ldr	r3, .L15200+8
.LPIC4559:
	add	r3, pc, r3
	ldr	r7, [r3, #324]
	mov	r7, r7, asl #1
	b	.L15173
.L15182:
	mvn	r0, #21
	b	.L15188
.L15176:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L15196
	b	.L15177
.L15197:
	ldr	r1, .L15200+12
	mvn	r5, #11
	ldr	r0, .L15200+16
.LPIC4557:
	add	r1, pc, r1
	sub	r1, r1, #2288
.LPIC4558:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15170
.L15201:
	.align	2
.L15200:
	.word	.LANCHOR4-(.LPIC4555+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4560+8))
	.word	.LANCHOR2-(.LPIC4559+8)
	.word	.LANCHOR9-(.LPIC4557+8)
	.word	.LC885-(.LPIC4558+8)
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #84]
	cmp	r5, #0
	bne	.L15223
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15223:
	ldr	r3, [r5, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15224
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L15215:
	ldr	r0, [r5, #8]
	add	r7, r5, #16
	add	r8, r5, #20
	bl	netif_carrier_off(PLT)
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r5, #20]
	cmp	r8, r4
	movne	r9, #0
	bne	.L15209
	b	.L15210
.L15208:
	ldr	r0, [r6, #88]
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r5, #20]
	cmp	r4, r8
	beq	.L15210
.L15209:
	mov	r0, r4
	sub	r10, r4, #36
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15208
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	str	r9, [r4, #-36]
	b	.L15208
.L15210:
	mov	r4, #0
	ldr	r0, [r6, #144]
	add	r8, r5, #28
	bl	kfree(PLT)
	mov	r0, r7
	str	r4, [r6, #144]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #88]
	str	r4, [r3]
	ldr	r3, [r6, #88]
	str	r4, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r5, #28]
	cmp	r8, r1
	beq	.L15207
.L15213:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #92]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r5, #28]
	cmp	r1, r8
	bne	.L15213
.L15207:
	mov	r0, r7
	add	r7, r5, #64
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	add	r4, r5, #52
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #52]
	cmp	r3, r4
	cmpne	r3, #0
	movne	r8, #0
	beq	.L15212
.L15214:
	ldr	r2, [r5, #60]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #60]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #52]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L15214
.L15212:
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #92]
	mov	r0, r5
	str	r4, [r3]
	ldr	r3, [r6, #92]
	str	r4, [r3, #28]
	str	r4, [r5, #68]
	str	r4, [r5, #84]
	str	r4, [r5, #80]
	bl	_raw_spin_lock(PLT)
	str	r4, [r5, #4]
	mov	r0, r5
	str	r4, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L15224:
	ldr	r0, .L15225
	movw	r1, #1847
.LPIC4561:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15225+4
.LPIC4562:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15215
.L15226:
	.align	2
.L15225:
	.word	.LC86-(.LPIC4561+8)
	.word	.LC87-(.LPIC4562+8)
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #164]
	bl	rndis_uninit(PLT)
	mov	r0, r4
	bl	gether_disconnect(PLT)
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15257
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15240
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15241
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #88]
.L15241:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15242
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15242
.L15243:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bhi	.L15239
	mov	r1, r0
	add	r2, r4, #98
	ldrb	r0, [r4, #164]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L15239:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15257:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15236
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L15236:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L15258
.L15237:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L15239
.L15242:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15245
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15243
.L15245:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15239
.L15240:
	mvn	r0, #21
	b	.L15239
.L15258:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15240
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L15237
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15260
	bl	gether_disconnect(PLT)
.L15260:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15259
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L15259:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L15294
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	bne	.L15275
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15276
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #88]
.L15276:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15277
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15277
.L15278:
	cmp	r5, #1
	beq	.L15295
.L15281:
	ldr	r6, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r6, #0
	beq	.L15283
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	mov	r1, r6
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L15296
.L15283:
	mov	r0, #0
.L15272:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15294:
	cmp	r2, #0
	bne	.L15275
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15273
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L15273:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L15297
.L15274:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L15272
.L15295:
	ldr	r3, [r6]
	ldr	r0, .L15298
	ldr	r1, [r3, #28]
.LPIC4563:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #98]	@ movhi
	strb	r2, [r4, #96]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bls	.L15281
	b	.L15272
.L15277:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15280
	ldr	r2, [r4, #92]
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15278
.L15280:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15272
.L15296:
	mov	r0, r5
	str	r6, [r4, #168]
	b	.L15272
.L15275:
	mvn	r0, #21
	b	.L15272
.L15297:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15275
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L15274
.L15299:
	.align	2
.L15298:
	.word	.LC462-(.LPIC4563+8)
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15301
	bl	gether_disconnect(PLT)
.L15301:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15300
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L15300:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L15337
	ldrb	r5, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r5
	movne	r5, #1
	moveq	r5, #0
	bne	.L15316
	cmp	r2, #0
	beq	.L15324
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L15338
.L15317:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15322
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15322
.L15318:
	ldr	r3, [r6]
	ldr	r0, .L15340
	ldr	r1, [r3, #28]
.LPIC4568:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #98]	@ movhi
	strb	r2, [r4, #96]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L15324
	ldrh	r3, [r4, #182]
	str	r0, [r4, #184]
	ldr	r0, .L15340+4
	sub	r3, r3, #14
.LPIC4569:
	add	r0, pc, r0
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk(PLT)
	mov	r0, #0
	b	.L15334
.L15324:
	mov	r0, r2
.L15334:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15337:
	cmp	r2, #0
	bne	.L15316
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15314
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L15314:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L15339
.L15315:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L15334
.L15316:
	mvn	r0, #21
	b	.L15334
.L15339:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15316
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L15315
.L15322:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15320
	ldr	r2, [r4, #92]
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15318
.L15320:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15334
.L15338:
	ldr	r1, .L15340+8
	ldr	r0, .L15340+12
.LPIC4564:
	add	r1, pc, r1
	sub	r1, r1, #2272
.LPIC4565:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	gether_disconnect(PLT)
	ldr	r3, .L15340+16
	mov	r2, #15
	strb	r5, [r4, #180]
	str	r5, [r4, #100]
	mov	r0, #16384
	movw	r1, #9014
	strh	r2, [r4, #98]	@ movhi
	ldr	r2, [r4, #88]
.LPIC4566:
	add	r3, pc, r3
	add	ip, r3, #56
	str	ip, [r4, #176]
	ldr	r3, [r3, #16]
	str	r5, [r4, #184]
	str	r0, [r4, #112]
	strh	r1, [r4, #182]	@ movhi
	str	r3, [r4, #108]
	b	.L15317
.L15341:
	.align	2
.L15340:
	.word	.LC462-(.LPIC4568+8)
	.word	.LC887-(.LPIC4569+8)
	.word	.LANCHOR9-(.LPIC4564+8)
	.word	.LC886-(.LPIC4565+8)
	.word	.LANCHOR2-(.LPIC4566+8)
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L15344
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r1, r0
	str	lr, [sp, #12]
.LPIC4570:
	add	r4, pc, r4
	ldr	r0, [r4, #4004]
	bl	get_qc_ether_addr(PLT)
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #4008]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	get_qc_ether_addr(PLT)
.L15345:
	.align	2
.L15344:
	.word	.LANCHOR4-(.LPIC4570+8)
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	ecm_qc_bind_config
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L15384
	strd	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #24]
	ldr	r3, [r6, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4572:
	add	r0, pc, r0
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L15357
	ldr	r0, .L15384+4
	mov	r1, r4
.LPIC4573:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L15357
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15378
	ldr	r8, .L15384+8
.LPIC4613:
	add	r8, pc, r8
	ldrb	r3, [r8, #3460]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15379
.L15354:
	ldr	r3, .L15384+12
.LPIC4624:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15361
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15380
.L15349:
	ldr	r0, .L15384+16
	mov	r2, #12
	mov	r1, r7
.LPIC4585:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15363
	ldr	r0, .L15384+20
	mov	r2, #12
	mov	r1, r7
.LPIC4586:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #2
	bne	.L15381
.L15350:
	str	r3, [r4, #124]
	ldrb	r2, [r5, #4]	@ zero_extendqisi2
	add	r8, r4, #128
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r9, [r5, #5]	@ zero_extendqisi2
	ldrb	r7, [r5, #3]	@ zero_extendqisi2
	ldrb	lr, [r5, #2]	@ zero_extendqisi2
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r2, [sp, #12]
	ldr	r2, .L15384+24
	str	r9, [sp, #16]
	str	r7, [sp, #8]
	stmia	sp, {ip, lr}
.LPIC4614:
	add	r2, pc, r2
	bl	snprintf(PLT)
.L15355:
	mov	r3, #15
	ldr	r7, .L15384+28
	mov	r0, r6
	ldr	lr, .L15384+32
	mov	r1, r4
	strh	r3, [r4, #98]	@ movhi
	ldr	ip, .L15384+36
	ldr	r3, .L15384+40
.LPIC4595:
	add	r7, pc, r7
	ldr	r6, .L15384+44
	add	r2, r7, #3584
.LPIC4596:
	add	lr, pc, lr
	ldr	r5, .L15384+48
.LPIC4598:
	add	ip, pc, ip
	add	r2, r2, #12
	str	r8, [r7, #3472]
.LPIC4599:
	add	r3, pc, r3
	str	lr, [r4]
	ldr	lr, .L15384+52
	str	ip, [r4, #32]
	ldr	ip, .L15384+56
.LPIC4600:
	add	r6, pc, r6
	str	r2, [r4, #4]
	ldr	r2, .L15384+60
.LPIC4601:
	add	r5, pc, r5
	str	r3, [r4, #36]
	ldr	r3, .L15384+64
.LPIC4602:
	add	lr, pc, lr
	str	r5, [r4, #44]
.LPIC4603:
	add	ip, pc, ip
	str	r6, [r4, #40]
.LPIC4604:
	add	r2, pc, r2
	str	lr, [r4, #52]
.LPIC4605:
	add	r3, pc, r3
	str	ip, [r4, #48]
	strd	r2, [r4, #56]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L15382
	ldr	r3, [r4, #124]
	cmp	r3, #7
	movne	r0, r5
	bne	.L15374
	ldr	r0, .L15384+68
.LPIC4609:
	add	r0, pc, r0
	add	r0, r0, #3952
	add	r0, r0, #8
	bl	ecm_ipa_init(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	beq	.L15374
	ldr	r1, .L15384+72
	ldr	r0, .L15384+76
.LPIC4610:
	add	r1, pc, r1
	sub	r1, r1, #2240
.LPIC4611:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	str	r5, [r7, #3472]
	bl	kfree(PLT)
	mov	r0, r6
	b	.L15374
.L15357:
	mvn	r0, #21
.L15374:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15363:
	mov	r3, #1
	b	.L15350
.L15379:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15374
	ldr	r4, .L15384+80
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3460]
.LPIC4579:
	add	r4, pc, r4
	strb	r3, [r4, #976]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15374
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3476]
	strb	r3, [r4, #1008]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15374
	uxtb	r0, r0
	strb	r0, [r8, #3468]
	strb	r0, [r4, #3127]
	b	.L15354
.L15361:
	mov	r4, #16
	b	.L15349
.L15381:
	ldr	r0, .L15384+84
	mov	r2, #12
	mov	r1, r7
.LPIC4587:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #3
	beq	.L15350
	ldr	r0, .L15384+88
	mov	r2, #12
	mov	r1, r7
.LPIC4588:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #4
	beq	.L15350
	ldr	r0, .L15384+92
	mov	r2, #12
	mov	r1, r7
.LPIC4589:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #5
	beq	.L15350
	ldr	r0, .L15384+96
	mov	r2, #12
	mov	r1, r7
.LPIC4590:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #6
	beq	.L15350
	ldr	r0, .L15384+100
	mov	r2, #12
	mov	r1, r7
.LPIC4591:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15383
	ldr	r5, .L15384+104
	mov	r3, #7
	add	r8, r4, #128
	str	r3, [r4, #124]
.LPIC4615:
	add	r5, pc, r5
	add	r0, r5, #3968
	mov	r1, r0
	add	r0, r0, #6
	bl	gether_qc_get_macs(PLT)
	ldrb	r3, [r5, #3973]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r2, [r5, #3971]	@ zero_extendqisi2
	ldrb	r7, [r5, #3972]	@ zero_extendqisi2
	ldrb	lr, [r5, #3970]	@ zero_extendqisi2
	ldrb	ip, [r5, #3969]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	r3, [r5, #3968]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, .L15384+108
	str	r7, [sp, #12]
	stmia	sp, {ip, lr}
.LPIC4618:
	add	r2, pc, r2
	bl	snprintf(PLT)
	b	.L15355
.L15380:
	mvn	r0, #11
	b	.L15374
.L15383:
	ldr	r0, .L15384+112
	mov	r2, #12
	mov	r1, r7
.LPIC4592:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #8
	beq	.L15350
	ldr	r0, .L15384+116
	mov	r2, #12
	mov	r1, r7
.LPIC4593:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #9
	beq	.L15350
	ldr	r0, .L15384+120
	mov	r1, r7
	mov	r2, #12
.LPIC4594:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #10
	movne	r3, #0
	b	.L15350
.L15378:
	ldr	r5, .L15384+124
	mov	r2, r4
	ldr	r0, .L15384+128
.LPIC4574:
	add	r5, pc, r5
	sub	r1, r5, #2256
.LPIC4575:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L15384+132
	sub	r1, r5, #2240
.LPIC4577:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15374
.L15382:
	ldr	r1, .L15384+136
	ldr	r0, .L15384+140
.LPIC4606:
	add	r1, pc, r1
	sub	r1, r1, #2240
.LPIC4607:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #3472]
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15374
.L15385:
	.align	2
.L15384:
	.word	.LC323-(.LPIC4572+8)
	.word	.LC458-(.LPIC4573+8)
	.word	.LANCHOR0-(.LPIC4613+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4624+8))
	.word	.LC0-(.LPIC4585+8)
	.word	.LC1-(.LPIC4586+8)
	.word	.LC870-(.LPIC4614+8)
	.word	.LANCHOR0-(.LPIC4595+8)
	.word	.LC871-(.LPIC4596+8)
	.word	ecm_qc_bind-(.LPIC4598+8)
	.word	ecm_qc_unbind-(.LPIC4599+8)
	.word	ecm_qc_set_alt-(.LPIC4600+8)
	.word	ecm_qc_get_alt-(.LPIC4601+8)
	.word	ecm_qc_setup-(.LPIC4602+8)
	.word	ecm_qc_disable-(.LPIC4603+8)
	.word	ecm_qc_suspend-(.LPIC4604+8)
	.word	ecm_qc_resume-(.LPIC4605+8)
	.word	.LANCHOR4-(.LPIC4609+8)
	.word	.LANCHOR9-(.LPIC4610+8)
	.word	.LC889-(.LPIC4611+8)
	.word	.LANCHOR2-(.LPIC4579+8)
	.word	.LC2-(.LPIC4587+8)
	.word	.LC3-(.LPIC4588+8)
	.word	.LC4-(.LPIC4589+8)
	.word	.LC5-(.LPIC4590+8)
	.word	.LC6-(.LPIC4591+8)
	.word	.LANCHOR4-(.LPIC4615+8)
	.word	.LC870-(.LPIC4618+8)
	.word	.LC7-(.LPIC4592+8)
	.word	.LC8-(.LPIC4593+8)
	.word	.LC355-(.LPIC4594+8)
	.word	.LANCHOR9-(.LPIC4574+8)
	.word	.LC863-(.LPIC4575+8)
	.word	.LC864-(.LPIC4577+8)
	.word	.LANCHOR9-(.LPIC4606+8)
	.word	.LC888-(.LPIC4607+8)
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	gether_qc_setup_name
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #28
	str	r8, [sp, #16]
	mov	r8, r1
	mov	r1, r2
	str	lr, [sp, #20]
	bl	alloc_etherdev_mqs(PLT)
	subs	r4, r0, #0
	beq	.L15393
	ldr	r2, .L15403
	mov	ip, #0
	mov	r3, r5
	mov	r1, #16
	str	r4, [r4, #1160]
	add	r7, r6, #32
	str	ip, [r4, #1152]
.LPIC4625:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L15403+4
	ldr	r1, [r4, #484]
.LPIC4626:
	add	r3, pc, r3
	ldr	r0, [r3, #4004]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15401
.L15389:
	ldr	r3, .L15403+8
	add	r5, r4, #1168
	add	r5, r5, #5
	mov	r1, r5
.LPIC4629:
	add	r3, pc, r3
	ldr	r0, [r3, #4008]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15402
.L15390:
	cmp	r8, #0
	beq	.L15391
	ldr	r3, [r5]	@ unaligned
	str	r3, [r8]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
.L15391:
	ldr	r3, .L15403+12
	mov	r0, r4
.LPIC4632:
	add	r3, pc, r3
	add	r2, r3, #620
	add	r3, r3, #756
	str	r2, [r4, #328]
	str	r3, [r4, #332]
	bl	netif_carrier_off(PLT)
	ldr	r3, .L15403+16
	str	r6, [r4, #1164]
	mov	r0, r4
	str	r7, [r4, #688]
.LPIC4634:
	add	r3, pc, r3
	add	r3, r3, #3600
	add	r3, r3, #4
	str	r3, [r4, #736]
	bl	register_netdev(PLT)
	subs	r6, r0, #0
	bge	.L15392
	mov	r0, r4
	bl	free_netdev(PLT)
	mov	r0, r6
.L15387:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15401:
	ldr	r2, .L15403+20
	mov	r0, r7
	ldr	r1, .L15403+24
.LPIC4627:
	add	r2, pc, r2
.LPIC4628:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L15389
.L15402:
	ldr	r2, .L15403+28
	mov	r0, r7
	ldr	r1, .L15403+32
.LPIC4630:
	add	r2, pc, r2
.LPIC4631:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L15390
.L15393:
	mvn	r0, #11
	b	.L15387
.L15392:
	ldr	r0, .L15403+36
	ldr	r2, [r4, #484]
	ldr	r1, [r4, #1160]
.LPIC4635:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15403+40
	mov	r2, r5
	ldr	r1, [r4, #1160]
.LPIC4636:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L15387
.L15404:
	.align	2
.L15403:
	.word	.LC872-(.LPIC4625+8)
	.word	.LANCHOR4-(.LPIC4626+8)
	.word	.LANCHOR4-(.LPIC4629+8)
	.word	.LANCHOR6-(.LPIC4632+8)
	.word	.LANCHOR0-(.LPIC4634+8)
	.word	.LC873-(.LPIC4627+8)
	.word	.LC874-(.LPIC4628+8)
	.word	.LC890-(.LPIC4630+8)
	.word	.LC874-(.LPIC4631+8)
	.word	.LC876-(.LPIC4635+8)
	.word	.LC877-(.LPIC4636+8)
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15406
.LPIC4637:
	add	r2, pc, r2
	b	gether_qc_setup_name(PLT)
.L15407:
	.align	2
.L15406:
	.word	.LC878-(.LPIC4637+8)
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L15417
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L15420
	ldr	r0, .L15420+4
	str	r2, [sp, #16]
	ldrb	r2, [r4, #4]	@ zero_extendqisi2
.LPIC4641:
	add	r5, pc, r5
	sub	r5, r5, #2208
.LPIC4643:
	add	r0, pc, r0
	str	r2, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r5, r5, #12
	mov	r2, r5
	mov	r1, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L15420+8
	ldr	r0, [r3]
.LPIC4644:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r6, r0, #0
	bne	.L15418
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15419
.L15412:
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	mov	r0, r7
	add	r3, r4, #13
	ldr	r2, [r4, #8]
	mov	r1, r4
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
.L15410:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15419:
	ldr	r3, .L15420+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4648:
	add	r3, pc, r3
	strb	r0, [r3, #2960]
	strb	r0, [r3, #2969]
	strb	r1, [r3, #2961]
	strb	r1, [r3, #2970]
	strb	r2, [r3, #2962]
	strb	r2, [r3, #2971]
	b	.L15412
.L15417:
	ldr	r2, .L15420+16
	ldr	r0, .L15420+20
.LPIC4638:
	add	r2, pc, r2
	sub	r2, r2, #2208
.LPIC4640:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15410
.L15418:
	ldr	r0, .L15420+24
	mov	r2, r5
	mov	r1, r5
.LPIC4647:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L15410
.L15421:
	.align	2
.L15420:
	.word	.LANCHOR9-(.LPIC4641+8)
	.word	.LC880-(.LPIC4643+8)
	.word	.LC827-(.LPIC4644+8)
	.word	.LANCHOR2-(.LPIC4648+8)
	.word	.LANCHOR9-(.LPIC4638+8)
	.word	.LC879-(.LPIC4640+8)
	.word	.LC881-(.LPIC4647+8)
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #4]
	cmp	r4, #0
	beq	.L15432
	ldr	r0, .L15434
	mov	r6, r1
.LPIC4657:
	add	r0, pc, r0
	sub	r0, r0, #1424
	bl	strim(PLT)
	mov	r1, r0
	mov	r5, r0
	ldr	r0, .L15434+4
.LPIC4658:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L15426
	ldr	r3, [r6, #24]
	mov	r1, r4
	ldr	r2, .L15434+8
	ldr	r0, [r3]
.LPIC4659:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r7, r0, #0
	bne	.L15433
.L15426:
	mov	r2, r5
	mov	r1, r4
	ldr	r8, [sp, #16]
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ecm_qc_bind_config(PLT)
.L15433:
	ldr	r2, .L15434+12
	ldr	r0, .L15434+16
.LPIC4660:
	add	r2, pc, r2
	sub	r2, r2, #2176
.LPIC4662:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mov	r0, r7
.L15424:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15432:
	ldr	r2, .L15434+20
	ldr	r0, .L15434+24
.LPIC4654:
	add	r2, pc, r2
	sub	r2, r2, #2176
.LPIC4656:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15424
.L15435:
	.align	2
.L15434:
	.word	.LANCHOR4-(.LPIC4657+8)
	.word	.LC6-(.LPIC4658+8)
	.word	.LC883-(.LPIC4659+8)
	.word	.LANCHOR9-(.LPIC4660+8)
	.word	.LC881-(.LPIC4662+8)
	.word	.LANCHOR9-(.LPIC4654+8)
	.word	.LC882-(.LPIC4656+8)
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15439
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r0
	str	lr, [sp, #4]
.LPIC4665:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15436
#APP
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15439+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4664:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	bl	unregister_netdev(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev(PLT)
.L15436:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15440:
	.align	2
.L15439:
	.word	init_net(GOT_PREL)+(.-(.LPIC4665+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4664+8))
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L15442
.LPIC4666:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L15443:
	.align	2
.L15442:
	.word	.LC891-(.LPIC4666+8)
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15448
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4667:
	add	r0, pc, r0
	sub	r0, r0, #1424
	bl	strim(PLT)
	mov	r1, r0
	ldr	r0, .L15448+4
.LPIC4668:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L15447
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15447:
	ldr	r0, .L15448+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4669:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L15449:
	.align	2
.L15448:
	.word	.LANCHOR4-(.LPIC4667+8)
	.word	.LC6-(.LPIC4668+8)
	.word	.LC892-(.LPIC4669+8)
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.global	gether_qc_connect_name
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15477
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4672:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15453
#APP
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15477+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4671:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r2, [r2, r1, asl #2]
	ldr	r1, [r3, r2]
	sub	r1, r1, #1
	str	r1, [r3, r2]
#APP
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r7, r4, #1152
	beq	.L15453
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock(PLT)
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L15474
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L15455
.L15472:
	mov	r0, r5
	blx	r3
.L15455:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	bne	.L15475
.L15452:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15474:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	bne	.L15472
	b	.L15455
.L15453:
	mvn	r0, #21
	b	.L15452
.L15475:
	bl	netif_carrier_on(PLT)
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L15452
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L15476
.L15473:
	ldr	r0, [r4, #1160]
	b	.L15452
.L15476:
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L15473
.L15478:
	.align	2
.L15477:
	.word	init_net(GOT_PREL)+(.-(.LPIC4672+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4671+8))
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15490
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4677:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15479
#APP
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15490+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4676:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r6, r4, #1152
	beq	.L15479
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15489
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L15484:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L15479:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15489:
	ldr	r0, .L15490+8
	movw	r1, #1847
.LPIC4674:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15490+12
.LPIC4675:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15484
.L15491:
	.align	2
.L15490:
	.word	init_net(GOT_PREL)+(.-(.LPIC4677+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4676+8))
	.word	.LC86-(.LPIC4674+8)
	.word	.LC87-(.LPIC4675+8)
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15494
	mov	r1, #0
	add	r0, r0, #156
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L15494
	ldr	r1, .L15504
	mov	r0, r4
.LPIC4678:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L15494:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15492
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L15492:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15505:
	.align	2
.L15504:
	.word	.LC892-(.LPIC4678+8)
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L15544
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	movne	r1, #1
	moveq	r1, #0
	bne	.L15543
	ldr	r3, [r4, #88]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L15513
	add	r0, r4, #156
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L15542
	ldr	r1, .L15548
	mov	r0, r4
.LPIC4679:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L15542:
	ldr	r3, [r4, #88]
.L15513:
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L15515
	ldr	r2, [r4, #92]
	ldr	r2, [r2, #28]
	cmp	r2, #0
	beq	.L15515
.L15516:
	cmp	r5, #1
	beq	.L15545
.L15519:
	ldr	r6, [r4, #148]
.L15528:
	mov	r3, #1
	cmp	r6, #0
	strb	r3, [r4, #152]
	beq	.L15527
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r2, #32
	mov	r1, r6
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r5, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #148]
	blt	.L15540
.L15527:
	mov	r0, #0
.L15540:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15545:
	ldr	r3, [r6]
	ldr	r0, .L15548+4
	ldr	r1, [r3, #28]
.LPIC4680:
	add	r0, pc, r0
	bl	strcmp(PLT)
	ldr	r3, [r4, #124]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	strb	r0, [r4, #96]
	cmp	r3, #7
	beq	.L15520
	ldr	r1, .L15548+8
	mov	r2, r5
	mov	r0, r4
.LPIC4681:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	bhi	.L15540
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	moveq	r6, #2
	movne	r6, #0
	ldr	r5, [r2]
.L15522:
	ldr	ip, [r4, #88]
	mov	r3, #0
	str	r2, [r4, #156]
	ldr	r0, [r4, #92]
	mov	r2, r3
	str	r4, [r4, #160]
	mov	r1, r6
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r6
	ldr	r0, [r5, #28]
	mov	r3, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r0, r0
	mov	r1, #0
	ldr	r2, [r4, #124]
	uxtb	r3, r7
	strd	r0, [sp]
	add	r0, r4, #156
	bl	bam_data_connect(PLT)
	subs	ip, r0, #0
	bne	.L15546
	ldr	r6, [r4, #148]
	mov	r3, #1
	strb	r3, [r4, #153]
	strb	r3, [r4, #152]
	cmp	r6, #0
	beq	.L15528
	ldr	r3, [r6]
	mov	lr, #2
	mvn	r0, #94
	mov	r5, #8
	mov	r2, #32
	mov	r1, r6
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r5, [r6, #4]
	strb	lr, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r6, [r4, #148]
	bge	.L15519
	b	.L15528
.L15544:
	cmp	r2, #0
	bne	.L15543
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15510
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L15510:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L15547
.L15511:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L15540
.L15515:
	mov	r2, r3
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15518
	ldr	r2, [r4, #92]
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15516
.L15518:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15540
.L15520:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L15522
.L15546:
	ldr	r1, .L15548+12
	mov	r2, ip
	ldr	r0, .L15548+16
.LPIC4682:
	add	r1, pc, r1
.LPIC4683:
	add	r0, pc, r0
	sub	r1, r1, #2160
	bl	printk(PLT)
.L15543:
	mvn	r0, #21
	b	.L15540
.L15547:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15543
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L15511
.L15549:
	.align	2
.L15548:
	.word	.LC892-(.LPIC4679+8)
	.word	.LC462-(.LPIC4680+8)
	.word	.LC892-(.LPIC4681+8)
	.word	.LANCHOR9-(.LPIC4682+8)
	.word	.LC893-(.LPIC4683+8)
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	ldr	r1, .L15557
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L15557+4
	str	lr, [sp, #4]
.LPIC4684:
	add	r1, pc, r1
	sub	r1, r1, #2128
.LPIC4685:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #144]
	bl	rndis_uninit(PLT)
	add	r0, r4, #168
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L15557+8
	mov	r0, r4
.LPIC4686:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15558:
	.align	2
.L15557:
	.word	.LANCHOR9-(.LPIC4684+8)
	.word	.LC894-(.LPIC4685+8)
	.word	.LC891-(.LPIC4686+8)
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15584
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15583
	ldr	r0, [r0, #88]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15566
	mov	r1, #0
	add	r0, r4, #168
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L15587
	mov	r0, r4
.LPIC4687:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #88]
.L15566:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L15567
	ldr	ip, [r4, #92]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L15567
.L15568:
	ldr	lr, [r4, #20]
	mov	r5, #0
	mov	r3, r5
	mov	r2, r5
	strb	r5, [r4, #96]
	mov	r1, r5
	strh	r5, [r4, #98]	@ movhi
	ldr	lr, [lr, #24]
	ldr	r6, [lr]
	str	lr, [r4, #168]
	str	ip, [r4, #180]
	str	r4, [r4, #172]
	str	r0, [r4, #176]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [r6, #28]
	mov	r1, r5
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r0, r0
	mov	ip, #2
	mov	r1, r5
	uxtb	r3, r7
	mov	r2, #6
	stmia	sp, {r0, ip}
	add	r0, r4, #168
	bl	bam_data_connect(PLT)
	subs	r5, r0, #0
	bne	.L15585
	ldr	r1, .L15587+4
	ldr	r0, .L15587+8
.LPIC4690:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4691:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r1, .L15587+12
	mov	r2, r5
	mov	r0, r4
.LPIC4692:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	mov	r1, r0
	bhi	.L15564
	add	r2, r4, #98
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L15564:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15585:
	ldr	r1, .L15587+16
	mov	r2, r5
	ldr	r0, .L15587+20
.LPIC4688:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4689:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L15583:
	mvn	r0, #21
	b	.L15564
.L15584:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15561
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L15561:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L15586
.L15562:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L15564
.L15567:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15570
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15570
	ldr	r0, [r4, #88]
	ldr	ip, [r4, #92]
	b	.L15568
.L15586:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15583
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L15562
.L15570:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15564
.L15588:
	.align	2
.L15587:
	.word	.LC891-(.LPIC4687+8)
	.word	.LANCHOR9-(.LPIC4690+8)
	.word	.LC895-(.LPIC4691+8)
	.word	.LC891-(.LPIC4692+8)
	.word	.LANCHOR9-(.LPIC4688+8)
	.word	.LC893-(.LPIC4689+8)
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15647
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4693:
	add	r3, pc, r3
	ldr	r4, [r3, #4012]
	cmp	r4, #0
	beq	.L15631
	ldr	r6, .L15647+4
	mov	r3, #2
	mov	r1, #3
	mov	r2, #8000
	ldr	r7, [r4, #124]
	str	r1, [r4, #128]
	str	r3, [r4, #132]
.LPIC4723:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	beq	.L15620
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15632
.L15594:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.99(PLT)
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.100(PLT)
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101(PLT)
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102(PLT)
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15633
.L15596:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15634
	mov	r0, r7
	mov	r2, #0
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15635
.L15598:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15599
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L15636
.L15600:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15601
	ldr	r3, [r5, #40]
	cmp	r3, #0
	bne	.L15637
.L15602:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree(PLT)
	ldr	r3, .L15647+8
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r2, #8000
.LPIC4704:
	add	r3, pc, r3
	ldr	r5, [r3, #4012]
	cmp	r0, #0
	ldr	r7, [r5, #152]
	ldr	r8, [r7, #212]
	str	lr, [r5, #156]
	str	ip, [r5, #160]
	str	r1, [r5, #164]
	str	r2, [r5, #168]
	beq	.L15624
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15638
.L15603:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.99(PLT)
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.100(PLT)
	ldr	r1, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.101(PLT)
	ldr	r1, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.102(PLT)
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15639
.L15605:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15640
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15641
.L15607:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L15608
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L15642
.L15609:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L15610
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L15643
.L15611:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r8, #44]
	bl	snd_pcm_format_physical_width(PLT)
	str	r0, [r8, #80]
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L15627
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15644
.L15612:
	mov	r0, r4
	bl	pcm_buffer_size(PLT)
	mov	r0, r4
	bl	pcm_period_size(PLT)
	mov	r2, r0, lsr #1
	mov	r3, #0
	mov	ip, #1
	mvn	lr, #-2147483648
	movw	r1, #16659
	str	r3, [r5]
	str	r2, [r5, #12]
	mov	r0, r7
	movt	r1, 49256
	str	r2, [r5, #16]
	mov	r2, r5
	str	r3, [r5, #32]
	str	r3, [r5, #28]
	str	ip, [r5, #4]
	str	ip, [r5, #20]
	str	lr, [r5, #24]
	bl	snd_pcm_kernel_ioctl(PLT)
	subs	r4, r0, #0
	blt	.L15645
	mov	r0, r5
	bl	kfree(PLT)
	cmp	r4, #0
	bne	.L15646
	ldr	r1, .L15647+12
	mov	r6, r4
	ldr	r0, .L15647+16
.LPIC4719:
	add	r1, pc, r1
.LPIC4720:
	add	r0, pc, r0
	sub	r1, r1, #2096
	bl	printk(PLT)
.L15628:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15646:
	mov	r6, r4
.L15614:
	ldr	r1, .L15647+20
	mov	r2, r6
	ldr	r0, .L15647+24
.LPIC4717:
	add	r1, pc, r1
	sub	r1, r1, #2096
.LPIC4718:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15628
.L15620:
	mov	r5, #16
	b	.L15594
.L15627:
	mov	r5, #16
	b	.L15612
.L15624:
	mov	r4, #16
	b	.L15603
.L15610:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15619:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15611
.L15608:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15618:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15609
.L15601:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15617:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15602
.L15599:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15616:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15600
.L15642:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15618
.L15643:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15619
.L15636:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15616
.L15637:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15617
.L15632:
	mvn	r6, #11
.L15595:
	ldr	r1, .L15647+28
	mov	r2, r6
	ldr	r0, .L15647+32
.LPIC4721:
	add	r1, pc, r1
	sub	r1, r1, #2096
.LPIC4722:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15628
.L15640:
	ldr	r1, .L15647+36
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L15647+40
.LPIC4709:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4710:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L15614
.L15639:
	ldr	r1, .L15647+44
	mov	r2, r0
	ldr	r0, .L15647+48
.LPIC4707:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4708:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15605
.L15641:
	ldr	r1, .L15647+52
	mov	r2, r0
	ldr	r0, .L15647+56
.LPIC4711:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4712:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15607
.L15633:
	ldr	r1, .L15647+60
	mov	r2, r0
	ldr	r0, .L15647+64
.LPIC4698:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4699:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15596
.L15645:
	ldr	r1, .L15647+68
	mov	r2, r4
	mov	r6, r4
	ldr	r0, .L15647+72
.LPIC4715:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4716:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L15614
.L15644:
	ldr	r1, .L15647+76
	mvn	r6, #11
	ldr	r0, .L15647+80
.LPIC4713:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4714:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15614
.L15631:
	ldr	r2, .L15647+84
	mvn	r6, #18
	ldr	r0, .L15647+88
.LPIC4694:
	add	r2, pc, r2
	sub	r2, r2, #2096
.LPIC4696:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	b	.L15628
.L15638:
	ldr	r1, .L15647+92
	mvn	r6, #11
	ldr	r0, .L15647+96
.LPIC4705:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4706:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15614
.L15635:
	ldr	r1, .L15647+100
	mov	r2, r0
	ldr	r0, .L15647+104
.LPIC4702:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4703:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15598
.L15634:
	ldr	r1, .L15647+108
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L15647+112
.LPIC4700:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4701:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L15595
.L15648:
	.align	2
.L15647:
	.word	.LANCHOR4-(.LPIC4693+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4723+8))
	.word	.LANCHOR4-(.LPIC4704+8)
	.word	.LANCHOR9-(.LPIC4719+8)
	.word	.LC905-(.LPIC4720+8)
	.word	.LANCHOR9-(.LPIC4717+8)
	.word	.LC904-(.LPIC4718+8)
	.word	.LANCHOR9-(.LPIC4721+8)
	.word	.LC906-(.LPIC4722+8)
	.word	.LANCHOR9-(.LPIC4709+8)
	.word	.LC898-(.LPIC4710+8)
	.word	.LANCHOR9-(.LPIC4707+8)
	.word	.LC897-(.LPIC4708+8)
	.word	.LANCHOR9-(.LPIC4711+8)
	.word	.LC901-(.LPIC4712+8)
	.word	.LANCHOR9-(.LPIC4698+8)
	.word	.LC897-(.LPIC4699+8)
	.word	.LANCHOR9-(.LPIC4715+8)
	.word	.LC903-(.LPIC4716+8)
	.word	.LANCHOR9-(.LPIC4713+8)
	.word	.LC902-(.LPIC4714+8)
	.word	.LANCHOR9-(.LPIC4694+8)
	.word	.LC896-(.LPIC4696+8)
	.word	.LANCHOR9-(.LPIC4705+8)
	.word	.LC900-(.LPIC4706+8)
	.word	.LANCHOR9-(.LPIC4702+8)
	.word	.LC899-(.LPIC4703+8)
	.word	.LANCHOR9-(.LPIC4700+8)
	.word	.LC898-(.LPIC4701+8)
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L15666
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4724:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r4, #232]
	bl	f_audio_buffer_alloc(PLT)
	subs	r9, r0, #0
	beq	.L15662
	ldr	r5, .L15666+4
	ldr	r3, [r9]
	ldr	r8, [r6, #-68]
	ldr	r7, [r4, #232]
.LPIC4729:
	add	r5, pc, r5
	str	r3, [sp]
	ldrb	r3, [r5, #4016]	@ zero_extendqisi2
	ldr	fp, [r8, #212]
	cmp	r3, #0
	beq	.L15663
.L15651:
	mov	r3, r7, asl #3
	ldr	r4, .L15666+8
	mov	r7, fp
	str	r3, [sp, #4]
	mov	r3, sp
	bic	r3, r3, #8128
.LPIC4737:
	add	r4, pc, r4
	sub	r4, r4, #2000
	str	r3, [sp, #8]
	ldr	r3, .L15666+12
	sub	r4, r4, #4
.LPIC4738:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L15657:
	ldr	r2, [r7, #160]
	ldr	r3, [sp, #8]
	ldr	r1, [r2]
	bic	fp, r3, #63
	cmp	r1, #4
	cmpne	r1, #7
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #1
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L15664
.L15654:
	ldr	r5, [r7, #80]
	mov	r2, #0
	mov	r0, r8
	ldr	r3, [sp, #4]
	ldr	r10, [fp, #8]
	str	r2, [fp, #8]
	ldr	r1, [sp]
	udiv	r5, r3, r5
	mov	r2, r5
	bl	snd_pcm_lib_read(PLT)
	cmp	r5, r0
	bne	.L15665
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r10, [r3, #8]
.L15655:
	sub	r4, r6, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r1, [r6, #20]
	add	r0, r9, #8
	add	r2, r6, #16
	bl	__list_add(PLT)
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L15664:
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L15654
	ldr	r4, .L15666+16
	mov	r2, r0
	ldr	r0, .L15666+20
.LPIC4733:
	add	r4, pc, r4
	sub	r1, r4, #2000
.LPIC4734:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L15666+24
	sub	r1, r4, #2016
	sub	r1, r1, #12
.LPIC4736:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15655
.L15663:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r3, #1
	streqb	r3, [r5, #4016]
	beq	.L15651
	ldr	r1, .L15666+28
	mov	r2, r0
	ldr	r0, .L15666+32
.LPIC4730:
	add	r1, pc, r1
	sub	r1, r1, #2000
.LPIC4731:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15655
.L15662:
	ldr	r2, .L15666+36
	ldr	r0, .L15666+40
.LPIC4725:
	add	r2, pc, r2
	sub	r2, r2, #2016
.LPIC4727:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L15665:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	str	r10, [fp, #8]
	b	.L15657
.L15667:
	.align	2
.L15666:
	.word	.LANCHOR2-(.LPIC4724+8)
	.word	.LANCHOR4-(.LPIC4729+8)
	.word	.LANCHOR9-(.LPIC4737+8)
	.word	.LC910-(.LPIC4738+8)
	.word	.LANCHOR9-(.LPIC4733+8)
	.word	.LC901-(.LPIC4734+8)
	.word	.LC909-(.LPIC4736+8)
	.word	.LANCHOR9-(.LPIC4730+8)
	.word	.LC908-(.LPIC4731+8)
	.word	.LANCHOR9-(.LPIC4725+8)
	.word	.LC907-(.LPIC4727+8)
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #8
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #16]
	add	r3, r6, #16
	mov	r7, r0
	cmp	r4, r3
	beq	.L15684
	mov	r0, r4
	sub	r8, r4, #8
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, [r4, #-4]
	ldr	r9, [r6, #-64]
	ldr	r3, [r4, #-8]
	cmp	r7, #0
	ldr	fp, [r9, #212]
	str	r3, [sp, #4]
	beq	.L15685
	ldr	r5, .L15690
.LPIC4743:
	add	r5, pc, r5
	ldrb	r2, [r5, #4016]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15686
.L15672:
	mov	r3, r7, asl #3
	ldr	r5, .L15690+4
	str	r3, [sp, #12]
	mov	r3, sp
	bic	r3, r3, #8128
.LPIC4753:
	add	r5, pc, r5
	sub	r5, r5, #1952
	str	r3, [sp, #8]
	ldr	r3, .L15690+8
	sub	r5, r5, #12
.LPIC4754:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L15678:
	ldr	r3, [fp, #160]
	ldr	r2, [sp, #8]
	bic	r7, r2, #63
	ldr	r2, [r3]
	cmp	r2, #4
	cmpne	r2, #7
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #1
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L15687
.L15674:
	ldr	r2, [fp, #80]
	mov	ip, #0
	ldr	r1, [sp, #4]
	cmp	r2, ip
	beq	.L15688
	ldr	r3, [sp, #12]
	ldr	r0, [r6, #-64]
	udiv	r10, r3, r2
	ldr	r3, [r7, #8]
	str	ip, [r7, #8]
	str	r3, [sp, #16]
	mov	r2, r10
	bl	snd_pcm_lib_write(PLT)
	cmp	r10, r0
	bne	.L15689
	mov	r3, sp
	ldr	r2, [sp, #16]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L15675:
	cmp	r8, #0
	beq	.L15668
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r8
	str	r3, [r4, #-8]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L15687:
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L15674
	ldr	r5, .L15690+12
	mov	r2, r0
	ldr	r0, .L15690+16
.LPIC4747:
	add	r5, pc, r5
	sub	r1, r5, #1952
.LPIC4748:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L15690+20
	sub	r1, r5, #1984
	sub	r1, r1, #4
.LPIC4750:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15675
.L15686:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r2, #1
	streqb	r2, [r5, #4016]
	beq	.L15672
	ldr	r1, .L15690+24
	ldr	r0, .L15690+28
.LPIC4744:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4745:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15675
.L15668:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15684:
	ldr	r1, .L15690+32
	ldr	r0, .L15690+36
.LPIC4739:
	add	r1, pc, r1
	sub	r1, r1, #1984
.LPIC4740:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L15688:
	ldr	r1, .L15690+40
	ldr	r0, .L15690+44
.LPIC4751:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4752:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15675
.L15689:
	mov	r2, r0
	mov	r1, r5
	ldr	r0, [sp, #20]
	bl	printk(PLT)
	ldr	r3, [sp, #16]
	str	r3, [r7, #8]
	b	.L15678
.L15685:
	ldr	r1, .L15690+48
	ldr	r0, .L15690+52
.LPIC4741:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4742:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15675
.L15691:
	.align	2
.L15690:
	.word	.LANCHOR4-(.LPIC4743+8)
	.word	.LANCHOR9-(.LPIC4753+8)
	.word	.LC915-(.LPIC4754+8)
	.word	.LANCHOR9-(.LPIC4747+8)
	.word	.LC899-(.LPIC4748+8)
	.word	.LC909-(.LPIC4750+8)
	.word	.LANCHOR9-(.LPIC4744+8)
	.word	.LC913-(.LPIC4745+8)
	.word	.LANCHOR9-(.LPIC4739+8)
	.word	.LC911-(.LPIC4740+8)
	.word	.LANCHOR9-(.LPIC4751+8)
	.word	.LC914-(.LPIC4752+8)
	.word	.LANCHOR9-(.LPIC4741+8)
	.word	.LC912-(.LPIC4742+8)
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.global	u_audio_clear
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15693
	mov	r2, #0
.LPIC4755:
	add	r3, pc, r3
	strb	r2, [r3, #4016]
	bx	lr
.L15694:
	.align	2
.L15693:
	.word	.LANCHOR4-(.LPIC4755+8)
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	u_audio_clear(PLT)
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.global	gaudio_setup
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L15733
	ldr	r6, .L15743
	mov	r2, #0
	mov	r1, #2
.LPIC4759:
	add	r6, pc, r6
	ldr	r0, [r6, #3628]
	bl	filp_open(PLT)
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L15734
	str	r4, [r4, #88]
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #3632]
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L15735
	ldr	r6, .L15743+4
	mov	r3, #2
	mov	ip, #3
	ldr	r1, [r0, #124]
	mov	r2, #8000
.LPIC4780:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	str	r4, [r4, #116]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	ldr	r0, [r6, #40]
	str	r3, [r4, #136]
	str	r1, [r4, #124]
	str	r2, [r4, #140]
	cmp	r0, #0
	beq	.L15722
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15736
.L15703:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.99(PLT)
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.100(PLT)
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101(PLT)
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15705
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L15737
.L15706:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15707
	ldr	r3, [r5, #40]
	cmp	r3, #0
	bne	.L15738
.L15708:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	ldr	r7, .L15743+8
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
.LPIC4768:
	add	r7, pc, r7
	str	r3, [r4, #140]
	bl	kfree(PLT)
	mov	r2, #0
	ldr	r0, [r7, #3636]
	mov	r1, r2
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L15739
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r2, [r4, #152]
	str	r3, [r4, #168]
	beq	.L15725
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15740
.L15710:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.99(PLT)
	ldr	r1, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.100(PLT)
	ldr	r1, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101(PLT)
	ldr	r1, [r4, #168]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15712
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L15741
.L15713:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15714
	ldr	r3, [r5, #40]
	cmp	r3, #0
	bne	.L15742
.L15715:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree(PLT)
.L15701:
	ldr	r3, .L15743+12
.LPIC4774:
	add	r3, pc, r3
	ldr	r5, [r3, #4012]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #4012]
.L15729:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15722:
	mov	r5, #16
	b	.L15703
.L15725:
	mov	r5, #16
	b	.L15710
.L15734:
	ldr	r1, .L15743+16
	ldr	r0, .L15743+20
	ldr	r2, [r6, #3628]
.LPIC4761:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4762:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L15701
	b	.L15700
.L15735:
	ldr	r1, .L15743+24
	mvn	r5, #21
	ldr	r0, .L15743+28
	ldr	r2, [r6, #3632]
.LPIC4765:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4766:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #120]
.L15700:
	ldr	r1, .L15743+32
	ldr	r0, .L15743+36
.LPIC4772:
	add	r1, pc, r1
	sub	r1, r1, #1920
.LPIC4773:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15729
.L15739:
	ldr	r1, .L15743+40
	mvn	r5, #21
	ldr	r0, .L15743+44
	ldr	r2, [r7, #3636]
.LPIC4770:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4771:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #152]
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	b	.L15700
.L15740:
	ldr	r1, .L15743+48
	mvn	r2, #11
	ldr	r0, .L15743+52
	mov	r5, r2
.LPIC4778:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4779:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15700
.L15705:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15717:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15706
.L15707:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15718:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15708
.L15712:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15719:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r2, r3
	b	.L15713
.L15714:
	rsb	r1, r3, #0
	mov	r2, #0
	and	r3, r3, r1
.L15720:
#APP
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2
	b	.L15715
.L15738:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15718
.L15737:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15717
.L15741:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15719
.L15742:
	rsb	r1, r3, #0
	mov	r2, #32
	and	r3, r3, r1
	b	.L15720
.L15736:
	ldr	r1, .L15743+56
	mvn	r2, #11
	ldr	r0, .L15743+60
	mov	r5, r2
.LPIC4776:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4777:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15700
.L15733:
	ldr	r2, .L15743+64
	mvn	r5, #18
	ldr	r0, .L15743+68
.LPIC4756:
	add	r2, pc, r2
	sub	r2, r2, #1936
.LPIC4758:
	add	r0, pc, r0
	sub	r2, r2, #8
	mov	r1, r2
	bl	printk(PLT)
	b	.L15700
.L15744:
	.align	2
.L15743:
	.word	.LANCHOR0-(.LPIC4759+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4780+8))
	.word	.LANCHOR0-(.LPIC4768+8)
	.word	.LANCHOR4-(.LPIC4774+8)
	.word	.LANCHOR9-(.LPIC4761+8)
	.word	.LC916-(.LPIC4762+8)
	.word	.LANCHOR9-(.LPIC4765+8)
	.word	.LC917-(.LPIC4766+8)
	.word	.LANCHOR9-(.LPIC4772+8)
	.word	.LC919-(.LPIC4773+8)
	.word	.LANCHOR9-(.LPIC4770+8)
	.word	.LC918-(.LPIC4771+8)
	.word	.LANCHOR9-(.LPIC4778+8)
	.word	.LC921-(.LPIC4779+8)
	.word	.LANCHOR9-(.LPIC4776+8)
	.word	.LC920-(.LPIC4777+8)
	.word	.LANCHOR9-(.LPIC4756+8)
	.word	.LC896-(.LPIC4758+8)
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15763
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4781:
	add	r3, pc, r3
	ldr	r4, [r3, #4012]
	cmp	r4, #0
	beq	.L15745
	ldr	r0, [r4, #92]
	cmp	r0, #0
	beq	.L15747
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close(PLT)
.L15747:
	ldr	r0, [r4, #120]
	cmp	r0, #0
	beq	.L15748
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close(PLT)
.L15748:
	ldr	r0, [r4, #148]
	cmp	r0, #0
	beq	.L15749
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close(PLT)
.L15749:
	ldr	r3, .L15763+4
	mov	r2, #0
.LPIC4782:
	add	r3, pc, r3
	str	r2, [r3, #4012]
.L15745:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15764:
	.align	2
.L15763:
	.word	.LANCHOR4-(.LPIC4781+8)
	.word	.LANCHOR4-(.LPIC4782+8)
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r4, .L15767
	add	r5, r0, #252
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r2, r5
	str	lr, [sp, #28]
	mov	r1, r5
	strd	r8, [sp, #16]
	add	r8, r0, #260
.LPIC4783:
	add	r4, pc, r4
	str	r10, [sp, #24]
	str	r5, [r0, #252]
	add	r0, r4, #3632
	add	r6, r4, #3648
	str	r5, [r7, #256]
	add	r0, r0, #8
	add	r9, r4, #3680
	bl	__list_add(PLT)
	add	r0, r4, #3664
	mov	r1, r5
	ldr	r2, [r7, #252]
	add	r0, r0, #8
	add	r5, r4, #1664
	bl	__list_add(PLT)
	add	r0, r4, #3696
	mov	r2, r6
	str	r6, [r4, #3648]
	mov	r1, r6
	str	r6, [r4, #3652]
	add	r0, r0, #8
	bl	__list_add(PLT)
	add	r0, r4, #3744
	mov	r1, r6
	ldr	r2, [r4, #3648]
	add	r0, r0, #4
	add	r5, r5, #4
	bl	__list_add(PLT)
	mov	r2, r9
	mov	r1, r9
	str	r9, [r4, #3680]
	add	r0, r4, #3792
	str	r9, [r4, #3684]
	add	r6, r4, #1632
	bl	__list_add(PLT)
	add	r0, r4, #3824
	mov	r1, r9
	ldr	r2, [r4, #3680]
	add	r0, r0, #12
	movw	r9, #65472
	bl	__list_add(PLT)
	movw	lr, #58272
	movw	ip, #65520
	str	r8, [r7, #260]
	mov	r3, #48
	str	r8, [r7, #264]
	mov	r0, r5
	mov	r2, r8
	mov	r1, r8
	str	lr, [r4, #3772]
	add	r6, r6, #4
	str	lr, [r4, #3860]
	add	r5, r5, #8
	str	ip, [r4, #3776]
	str	ip, [r4, #3864]
	str	r3, [r4, #3780]
	str	r3, [r4, #3868]
	str	r9, [r4, #3768]
	str	r9, [r4, #3856]
	bl	__list_add(PLT)
	mov	r1, r8
	ldr	r2, [r7, #260]
	mov	r0, r6
	add	r6, r6, #8
	bl	__list_add(PLT)
	add	r0, r4, #3872
	mov	r2, r6
	str	r6, [r4, #1644]
	mov	r1, r6
	str	r6, [r4, #1648]
	add	r0, r0, #8
	bl	__list_add(PLT)
	add	r0, r4, #3920
	mov	r2, r5
	str	r5, [r4, #1676]
	add	r0, r0, #4
	mov	r1, r5
	str	r5, [r4, #1680]
	bl	__list_add(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15768:
	.align	2
.L15767:
	.word	.LANCHOR0-(.LPIC4783+8)
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15781
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC4843:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L15774
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15779
.L15770:
	ldr	r3, .L15781+4
	add	r1, r4, #204
	mov	ip, #0
	ldr	lr, .L15781+8
	add	r2, r4, #236
	mov	r0, r4
	ldr	r5, [r6, #24]
	ldr	r7, .L15781+12
.LPIC4831:
	add	r3, pc, r3
	ldr	r9, .L15781+16
.LPIC4830:
	add	lr, pc, lr
	add	r3, r3, #3968
	ldr	r8, [r5]
	str	r1, [r4, #204]
	str	r1, [r4, #208]
	ldr	r5, .L15781+20
.LPIC4832:
	add	r7, pc, r7
	str	lr, [r4]
	ldr	r1, .L15781+24
.LPIC4834:
	add	r9, pc, r9
	str	r3, [r4, #4]
	ldr	lr, .L15781+28
	ldr	r3, .L15781+32
	str	ip, [r4, #180]
.LPIC4833:
	add	r5, pc, r5
	str	ip, [r4, #212]
.LPIC4836:
	add	r1, pc, r1
	str	r2, [r4, #236]
.LPIC4835:
	add	lr, pc, lr
	str	r5, [r4, #36]
.LPIC4837:
	add	r3, pc, r3
	str	r1, [r4, #52]
	str	lr, [r4, #40]
	str	r3, [r4, #48]
	str	r2, [r4, #240]
	str	r8, [r4, #84]
	str	r7, [r4, #32]
	str	r9, [r4, #44]
	bl	control_selector_init(PLT)
	ldr	r2, .L15781+36
	mov	r1, #65024
	add	lr, r4, #192
	ldr	r3, .L15781+40
	movt	r1, 65535
	add	ip, r4, #224
	str	lr, [r4, #192]
	mov	r0, r4
	str	r1, [r4, #188]
.LPIC4838:
	add	r2, pc, r2
	str	r1, [r4, #220]
.LPIC4839:
	add	r3, pc, r3
	str	lr, [r4, #196]
	str	r2, [r4, #200]
	str	r3, [r4, #232]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	bl	gaudio_setup(PLT)
	subs	r5, r0, #0
	blt	.L15772
	mov	r0, r6
	mov	r1, r4
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L15780
.L15771:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15774:
	mov	r4, #16
	b	.L15770
.L15772:
	bl	gaudio_cleanup(PLT)
.L15773:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15771
.L15779:
	mvn	r0, #11
	b	.L15771
.L15780:
	ldr	r2, .L15781+44
	mov	r3, r5
	ldr	r0, .L15781+48
.LPIC4840:
	add	r2, pc, r2
	sub	r2, r2, #1904
.LPIC4842:
	add	r0, pc, r0
	sub	r2, r2, #4
	mov	r1, r2
	bl	printk(PLT)
	b	.L15773
.L15782:
	.align	2
.L15781:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4843+8))
	.word	.LANCHOR0-(.LPIC4831+8)
	.word	.LC922-(.LPIC4830+8)
	.word	f_audio_bind-(.LPIC4832+8)
	.word	f_audio_get_alt-(.LPIC4834+8)
	.word	f_audio_unbind-(.LPIC4833+8)
	.word	f_audio_setup-(.LPIC4836+8)
	.word	f_audio_set_alt-(.LPIC4835+8)
	.word	f_audio_disable-(.LPIC4837+8)
	.word	f_audio_playback_work-(.LPIC4838+8)
	.word	f_audio_capture_work-(.LPIC4839+8)
	.word	.LANCHOR9-(.LPIC4840+8)
	.word	.LC923-(.LPIC4842+8)
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config(PLT)
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	conn_gadget_req_put
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add(PLT)
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L15793
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
.LPIC4844:
	add	r3, pc, r3
	ldr	r4, [r3, #2496]
	cmp	r2, #0
	bne	.L15792
.L15787:
	mov	r2, r5
	add	r1, r4, #120
	mov	r0, r4
	bl	conn_gadget_req_put(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L15792:
	ldr	r1, .L15793+4
	mov	r3, #1
	ldr	r0, .L15793+8
	str	r3, [r4, #104]
	ldr	r2, [r5, #44]
.LPIC4845:
	add	r1, pc, r1
	sub	r1, r1, #1888
.LPIC4846:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15787
.L15794:
	.align	2
.L15793:
	.word	.LANCHOR1-(.LPIC4844+8)
	.word	.LANCHOR9-(.LPIC4845+8)
	.word	.LC924-(.LPIC4846+8)
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L15844
	str	lr, [sp, #28]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	ldr	r3, [r7, #24]
	.pad #8
	sub	sp, sp, #8
.LPIC4851:
	add	r0, pc, r0
	str	r3, [r1, #84]
	bl	printk(PLT)
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L15833
	ldr	r5, .L15844+4
	ldr	r6, [r4, #84]
.LPIC4852:
	add	r5, pc, r5
	add	r1, r5, #3152
	strb	r0, [r5, #3142]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15837
	add	r1, r5, #3152
	str	r4, [r0]
	add	r1, r1, #12
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15838
	ldr	r10, .L15844+8
	mov	r6, r0
	mov	r8, #4
	str	r4, [r0]
	str	r0, [r4, #96]
.LPIC4866:
	add	r10, pc, r10
.L15809:
	ldr	r5, [r4, #192]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r6, #8]
	cmp	r5, #0
	beq	.L15839
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r0, r5
	beq	.L15803
.L15812:
	mov	r1, #208
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r2, r9
	cmp	r3, #0
	mov	r0, r4
	add	r1, r4, #128
	str	r3, [r9]
	beq	.L15840
	str	r10, [r9, #28]
	bl	conn_gadget_req_put(PLT)
	subs	r8, r8, #1
	beq	.L15819
	ldr	r6, [r4, #96]
	b	.L15809
.L15839:
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r0, #4096
	bne	.L15812
.L15803:
	ldr	r1, .L15844+12
	ldr	r0, .L15844+16
.LPIC4867:
	add	r1, pc, r1
	sub	r1, r1, #1856
.LPIC4868:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #0
.L15833:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15819:
	ldr	r10, .L15844+20
	mov	r8, #4
.LPIC4869:
	add	r10, pc, r10
.L15808:
	ldr	r6, [r4, #192]
	mov	r1, #208
	ldr	r5, [r4, #92]
	cmp	r6, #0
	ldr	r3, [r5, #8]
	mov	r0, r5
	beq	.L15841
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r0, r6
	beq	.L15803
.L15814:
	mov	r1, #208
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r2, r9
	cmp	r3, #0
	mov	r0, r4
	add	r1, r4, #120
	str	r3, [r9]
	beq	.L15842
	str	r10, [r9, #28]
	bl	conn_gadget_req_put(PLT)
	subs	r8, r8, #1
	bne	.L15808
	ldr	r3, [r7, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L15843
	ldr	r2, .L15844+24
.LPIC4857:
	add	r2, pc, r2
	ldrb	ip, [r2, #3154]	@ zero_extendqisi2
	ldrb	r0, [r2, #3166]	@ zero_extendqisi2
	strb	ip, [r2, #3178]
	strb	r0, [r2, #3190]
	ldr	r1, [r3]
	ldr	r1, [r1, #20]
	cmp	r1, #4
	bls	.L15806
	strb	ip, [r2, #3202]
	strb	r0, [r2, #3214]
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L15806
	ldr	r1, .L15844+28
.LPIC4847:
	add	r1, pc, r1
	b	.L15807
.L15841:
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r0, #4096
	bne	.L15814
	b	.L15803
.L15843:
	ldr	r1, .L15844+32
.LPIC4850:
	add	r1, pc, r1
.L15807:
	ldr	ip, [r4, #96]
	ldr	r3, [r4, #92]
	ldr	r0, .L15844+36
	ldr	r2, [r4]
	ldr	ip, [ip, #4]
.LPIC4865:
	add	r0, pc, r0
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk(PLT)
	mov	r0, #0
	b	.L15833
.L15840:
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15803
.L15842:
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15803
.L15838:
	ldr	r0, .L15844+40
.LPIC4856:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15833
.L15837:
	ldr	r0, .L15844+44
.LPIC4854:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15833
.L15806:
	cmp	r1, #2
	bhi	.L15818
	ldr	r1, .L15844+48
.LPIC4848:
	add	r1, pc, r1
	b	.L15807
.L15818:
	ldr	r1, .L15844+52
.LPIC4849:
	add	r1, pc, r1
	b	.L15807
.L15845:
	.align	2
.L15844:
	.word	.LC926-(.LPIC4851+8)
	.word	.LANCHOR2-(.LPIC4852+8)
	.word	conn_gadget_complete_out-(.LPIC4866+8)
	.word	.LANCHOR9-(.LPIC4867+8)
	.word	.LC930-(.LPIC4868+8)
	.word	conn_gadget_complete_in-(.LPIC4869+8)
	.word	.LANCHOR2-(.LPIC4857+8)
	.word	.LC925-(.LPIC4847+8)
	.word	.LC555-(.LPIC4850+8)
	.word	.LC929-(.LPIC4865+8)
	.word	.LC928-(.LPIC4856+8)
	.word	.LC927-(.LPIC4854+8)
	.word	.LC555-(.LPIC4848+8)
	.word	.LC554-(.LPIC4849+8)
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.global	conn_gadget_req_get
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	beq	.L15848
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
.L15847:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15848:
	mov	r4, #0
	b	.L15847
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.section	.text.unlikely
	.align	2
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r6, r0, #128
	add	r7, r0, #136
.L15851:
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	beq	.L15853
	ldr	r3, [r4, #192]
	str	r3, [r5, #4]
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	mov	r1, r7
	mov	r0, r4
	bge	.L15852
	ldr	r1, .L15856
	ldr	r0, .L15856+4
.LPIC4870:
	add	r1, pc, r1
	sub	r1, r1, #1824
.LPIC4871:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r2, r5
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_put(PLT)
	b	.L15853
.L15852:
	bl	conn_gadget_req_put(PLT)
	b	.L15851
.L15853:
	mov	r0, #0
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L15857:
	.align	2
.L15856:
	.word	.LANCHOR9-(.LPIC4870+8)
	.word	.LC931-(.LPIC4871+8)
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.text
	.align	2
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L15866
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r3, r2
	mov	r2, r1
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	ip, [r0, #20]
	ldr	r0, .L15866+4
.LPIC4872:
	add	r4, pc, r4
	sub	r4, r4, #1792
	sub	r4, r4, #8
	ldr	r7, [ip, #24]
	mov	r1, r4
.LPIC4873:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r2, [r5, #92]
	mov	r1, r5
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	movne	r6, r0
	beq	.L15865
.L15859:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15865:
	ldr	r3, [r5, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L15859
	ldr	r0, [r7]
	mov	r1, r5
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed(PLT)
	subs	r6, r0, #0
	bne	.L15864
	ldr	r3, [r5, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	beq	.L15861
.L15864:
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15859
.L15861:
	ldr	r3, [r5, #100]
	mov	r7, #1
	mov	r1, r4
	ldr	r0, .L15866+8
	str	r6, [r5, #104]
	str	r7, [r5, #100]
	str	r3, [r5, #212]
.LPIC4875:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15866+12
.LPIC4876:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	str	r6, [r3, #172]
	mov	r0, r3
	str	r6, [r3, #168]
	bl	conn_gadget_request_ep_out(PLT)
	mov	r3, r6
	mov	r2, r7
	add	r0, r5, #200
	mov	r1, #3
	bl	__wake_up(PLT)
	mov	r3, r6
	mov	r2, r7
	add	r0, r5, #144
	mov	r1, #3
	bl	__wake_up(PLT)
	b	.L15859
.L15867:
	.align	2
.L15866:
	.word	.LANCHOR9-(.LPIC4872+8)
	.word	.LC932-(.LPIC4873+8)
	.word	.LC933-(.LPIC4875+8)
	.word	.LANCHOR1-(.LPIC4876+8)
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r0, .L15881
	ldr	r5, .L15881+4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
.LPIC4877:
	add	r0, pc, r0
.LPIC4878:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r3, [r5, #2496]
	cmp	r3, #0
	beq	.L15878
	ldr	r4, [r3, #216]
	cmp	r4, #0
	bne	.L15879
	add	r2, r3, #116
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	r1, r0, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L15872
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L15881+8
	mvn	r4, #15
	ldr	r0, .L15881+12
.LPIC4883:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4884:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L15875:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15872:
	ldr	r3, [r5, #2496]
	str	r3, [r6, #124]
	ldr	r2, [r3, #100]
	str	r4, [r3, #104]
	cmp	r2, #0
	bne	.L15880
.L15874:
	str	r2, [r3, #212]
	b	.L15875
.L15880:
	ldr	r1, .L15881+16
	ldr	r0, .L15881+20
.LPIC4885:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4886:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r5, #2496]
	bl	conn_gadget_request_ep_out(PLT)
	ldr	r3, [r5, #2496]
	ldr	r2, [r3, #100]
	b	.L15874
.L15879:
	ldr	r1, .L15881+24
	mvn	r4, #10
	ldr	r0, .L15881+28
.LPIC4881:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4882:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15875
.L15878:
	ldr	r1, .L15881+32
	mvn	r4, #18
	ldr	r0, .L15881+36
.LPIC4879:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4880:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15875
.L15882:
	.align	2
.L15881:
	.word	.LC934-(.LPIC4877+8)
	.word	.LANCHOR1-(.LPIC4878+8)
	.word	.LANCHOR9-(.LPIC4883+8)
	.word	.LC936-(.LPIC4884+8)
	.word	.LANCHOR9-(.LPIC4885+8)
	.word	.LC269-(.LPIC4886+8)
	.word	.LANCHOR9-(.LPIC4881+8)
	.word	.LC935-(.LPIC4882+8)
	.word	.LANCHOR9-(.LPIC4879+8)
	.word	.LC268-(.LPIC4880+8)
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15891
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r5, #1
	mov	r6, #0
	str	lr, [sp, #20]
	add	r7, r4, #128
	str	r8, [sp, #16]
.LPIC4890:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, [r4, #100]
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #200
	str	r6, [r4, #100]
	mov	r1, #3
	str	r5, [r4, #104]
	str	ip, [r4, #212]
	bl	__wake_up(PLT)
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up(PLT)
	b	.L15884
.L15885:
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15884:
	mov	r1, r7
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15885
	add	r7, r4, #136
	b	.L15886
.L15887:
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15886:
	mov	r1, r7
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15887
	add	r7, r4, #120
	b	.L15888
.L15889:
	ldr	r5, [r4, #92]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15888:
	mov	r1, r7
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15889
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15892:
	.align	2
.L15891:
	.word	.LC937-(.LPIC4890+8)
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15932
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4891:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [ip, #2496]
	ldr	r9, [r0, #124]
	cmp	r2, #0
	beq	.L15924
	add	r3, r9, #112
	mov	fp, r1
	str	r3, [sp]
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L15925
	ldr	r3, [sp]
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L15932+4
	ldr	r0, .L15932+8
.LPIC4894:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4895:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #15
.L15921:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15925:
	mov	r3, sp
	mov	r10, r5
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L15913:
	cmp	r5, #0
	beq	.L15912
	ldr	r2, [r9, #104]
	cmp	r2, #0
	bne	.L15899
	add	r4, r9, #120
	mov	r0, r9
	mov	r1, r4
	bl	conn_gadget_req_get(PLT)
	subs	ip, r0, #0
	beq	.L15926
.L15911:
	ldr	r2, [r9, #192]
	ldr	lr, [r8, #8]
	ldr	r0, [ip]
	cmp	r5, r2
	movcc	r6, r5
	movcs	r6, r2
#APP
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, fp, r6; sbcccs r2, r2, lr; movcc lr, #0
@ 0 "" 2
	cmp	lr, #0
	beq	.L15927
	cmp	r6, #0
	bne	.L15928
.L15907:
	str	r6, [ip, #4]
	ldr	r0, [r9, #92]
	mov	r2, #32
	mov	r1, ip
	str	ip, [sp, #4]
	ldr	lr, [r0, #8]
	ldr	r7, [lr, #16]
	blx	r7
	subs	r2, r0, #0
	blt	.L15929
	add	fp, fp, r6
	rsb	r5, r6, r5
	b	.L15913
.L15926:
	ldr	r2, [r9, #104]
	cmp	r2, #0
	beq	.L15930
.L15899:
	ldr	r1, .L15932+12
	mvn	r10, #4
	ldr	r0, .L15932+16
.LPIC4896:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4897:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15912:
	ldr	r3, [sp]
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L15921
.L15930:
	ldr	r1, .L15932+20
	add	r7, sp, #12
	add	r6, r9, #156
	ldr	r0, [r8, #12]
	str	r2, [sp, #12]
	add	r2, sp, #24
	str	r2, [sp, #24]
.LPIC4905:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #28]
	strd	r0, [sp, #16]
	b	.L15903
.L15931:
	bl	schedule(PLT)
.L15903:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r6
	bl	prepare_to_wait(PLT)
	mov	r1, r4
	mov	r0, r9
	bl	conn_gadget_req_get(PLT)
	subs	ip, r0, #0
	bne	.L15900
	ldr	r2, [r9, #104]
	cmp	r2, #0
	bne	.L15901
	ldr	r2, [r8, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L15931
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait(PLT)
	ldr	r1, .L15932+24
	mov	r2, #65024
	ldr	r0, .L15932+28
	mov	r10, r2
	movt	r2, 65535
	movt	r10, 65535
.LPIC4903:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4904:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15912
.L15900:
	mov	r1, r7
	mov	r0, r6
	str	ip, [sp, #4]
	bl	finish_wait(PLT)
	ldr	ip, [sp, #4]
	b	.L15911
.L15901:
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait(PLT)
	b	.L15913
.L15927:
	mov	r2, r6
	mov	r1, fp
	str	ip, [sp, #4]
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	ldr	ip, [sp, #4]
	beq	.L15907
	b	.L15906
.L15928:
	mov	r1, r6
	str	ip, [sp, #4]
	bl	__memzero(PLT)
	ldr	ip, [sp, #4]
.L15906:
	ldr	r1, .L15932+32
	str	ip, [sp, #4]
	mvn	r10, #13
	ldr	r0, .L15932+36
.LPIC4899:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4900:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp, #4]
.L15908:
	mov	r2, ip
	mov	r1, r4
	mov	r0, r9
	bl	conn_gadget_req_put(PLT)
	b	.L15912
.L15929:
	ldr	r1, .L15932+40
	mov	lr, #1
	mvn	r10, #4
	ldr	r0, .L15932+44
	str	lr, [r9, #104]
.LPIC4901:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4902:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp, #4]
	b	.L15908
.L15924:
	ldr	r1, .L15932+48
	ldr	r0, .L15932+52
.LPIC4892:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4893:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15921
.L15933:
	.align	2
.L15932:
	.word	.LANCHOR1-(.LPIC4891+8)
	.word	.LANCHOR9-(.LPIC4894+8)
	.word	.LC938-(.LPIC4895+8)
	.word	.LANCHOR9-(.LPIC4896+8)
	.word	.LC939-(.LPIC4897+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4905+8))
	.word	.LANCHOR9-(.LPIC4903+8)
	.word	.LC942-(.LPIC4904+8)
	.word	.LANCHOR9-(.LPIC4899+8)
	.word	.LC940-(.LPIC4900+8)
	.word	.LANCHOR9-(.LPIC4901+8)
	.word	.LC941-(.LPIC4902+8)
	.word	.LANCHOR9-(.LPIC4892+8)
	.word	.LC268-(.LPIC4893+8)
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15973
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4906:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3, #2496]
	ldr	r4, [r0, #124]
	str	r2, [sp, #8]
	cmp	r3, #0
	beq	.L15968
	ldr	r3, [r4, #192]
	cmp	r2, r3
	bcs	.L15969
	add	r8, r4, #108
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L15970
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L15973+4
	ldr	r0, .L15973+8
.LPIC4911:
	add	r1, pc, r1
.LPIC4912:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
	mvn	r0, #15
.L15964:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15970:
	mov	r6, r1
	ldr	r1, .L15973+12
	ldr	r9, .L15973+16
	ldrd	r2, [r4, #100]
.LPIC4913:
	add	r1, pc, r1
.LPIC4914:
	add	r9, pc, r9
	sub	r7, r1, #1728
.L15939:
	cmp	r2, #0
	bne	.L15945
.L15962:
	cmp	r3, #0
	beq	.L15971
.L15947:
	ldr	r1, .L15973+20
	mvn	r3, #4
	ldr	r0, .L15973+24
	str	r3, [sp, #8]
.LPIC4916:
	add	r1, pc, r1
.LPIC4917:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
.L15949:
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [sp, #8]
	b	.L15964
.L15945:
	cmp	r3, #0
	bne	.L15947
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L15950
.L15952:
	ldr	r1, .L15973+28
	mov	r3, #0
	ldr	r0, .L15973+32
	str	r3, [sp, #8]
.LPIC4918:
	add	r1, pc, r1
.LPIC4919:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
.L15951:
	add	r6, r4, #128
	add	r7, r4, #136
	b	.L15954
.L15956:
	bl	conn_gadget_req_put(PLT)
.L15954:
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	beq	.L15949
	ldr	r3, [r4, #192]
	str	r3, [r5, #4]
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	mov	r1, r7
	mov	r0, r4
	bge	.L15956
	ldr	r1, .L15973+36
	ldr	r0, .L15973+40
.LPIC4922:
	add	r1, pc, r1
	sub	r1, r1, #1824
.LPIC4923:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r2, r5
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_put(PLT)
	b	.L15949
.L15950:
	cmp	r5, r3
	mov	r1, r6
	movcs	r5, r3
	add	r0, r4, #168
	add	r3, sp, #8
	mov	r2, r5
	bl	__kfifo_to_user(PLT)
	cmp	r5, #0
	beq	.L15952
	cmp	r0, #0
	blt	.L15972
	ldr	r3, [r4, #196]
	ldr	r2, [r4, #168]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	rsb	r2, r1, r2
	cmp	r2, r3, asr #1
	bls	.L15951
	b	.L15949
.L15971:
	mov	r1, r7
	mov	r0, r9
	bl	printk(PLT)
	ldrd	r2, [r4, #100]
	cmp	r2, #0
	bne	.L15939
	cmp	r3, #0
	bne	.L15962
	ldr	r2, .L15973+44
	mov	r1, sp
	str	r3, [sp, #12]
	bic	r10, r1, #8128
	add	r3, sp, #24
	bic	r10, r10, #63
	add	fp, sp, #12
	ldr	r1, [r10, #12]
	str	r3, [sp, #24]
.LPIC4926:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r10, [sp, #4]
	add	r10, r4, #144
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
.L15944:
	mov	r2, #1
	mov	r1, fp
	mov	r0, r10
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L15942
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L15942
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L15943
	bl	schedule(PLT)
	b	.L15944
.L15972:
	ldr	r1, .L15973+48
	mov	r2, r0
	mvn	r3, #13
	ldr	r0, .L15973+52
	str	r3, [sp, #8]
.LPIC4920:
	add	r1, pc, r1
	sub	r1, r1, #1728
.LPIC4921:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15949
.L15943:
	mov	r1, fp
	mov	r0, r10
	bl	finish_wait(PLT)
	ldr	r1, .L15973+56
	mov	r2, #65024
	ldr	r0, .L15973+60
	movt	r2, 65535
.LPIC4924:
	add	r1, pc, r1
	sub	r1, r1, #1728
.LPIC4925:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L15964
.L15942:
	mov	r1, fp
	mov	r0, r10
	bl	finish_wait(PLT)
	ldrd	r2, [r4, #100]
	b	.L15939
.L15969:
	ldr	r1, .L15973+64
	ldr	r0, .L15973+68
.LPIC4909:
	add	r1, pc, r1
.LPIC4910:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15964
.L15968:
	ldr	r1, .L15973+72
	ldr	r0, .L15973+76
.LPIC4907:
	add	r1, pc, r1
.LPIC4908:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15964
.L15974:
	.align	2
.L15973:
	.word	.LANCHOR1-(.LPIC4906+8)
	.word	.LANCHOR9-(.LPIC4911+8)
	.word	.LC944-(.LPIC4912+8)
	.word	.LANCHOR9-(.LPIC4913+8)
	.word	.LC945-(.LPIC4914+8)
	.word	.LANCHOR9-(.LPIC4916+8)
	.word	.LC946-(.LPIC4917+8)
	.word	.LANCHOR9-(.LPIC4918+8)
	.word	.LC947-(.LPIC4919+8)
	.word	.LANCHOR9-(.LPIC4922+8)
	.word	.LC931-(.LPIC4923+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4926+8))
	.word	.LANCHOR9-(.LPIC4920+8)
	.word	.LC948-(.LPIC4921+8)
	.word	.LANCHOR9-(.LPIC4924+8)
	.word	.LC949-(.LPIC4925+8)
	.word	.LANCHOR9-(.LPIC4909+8)
	.word	.LC943-(.LPIC4910+8)
	.word	.LANCHOR9-(.LPIC4907+8)
	.word	.LC268-(.LPIC4908+8)
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.global	conn_gadget_req_move
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry(PLT)
	mov	r0, r4
	ldr	r1, [r7, #4]
	mov	r2, r7
	bl	__list_add(PLT)
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15989
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #44]
.LPIC4927:
	add	r3, pc, r3
	ldr	r4, [r3, #2496]
	cmp	r1, #0
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	add	r3, r3, r3, lsl #2
	rsb	r6, r3, r2
	bne	.L15987
	ldr	r2, [r5, #48]
	add	r0, r4, #168
	ldr	r1, [r5]
	bl	__kfifo_in(PLT)
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	rsb	r3, r2, r3
	cmp	r3, r6
	bcs	.L15986
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L15988
.L15980:
	add	r0, r4, #144
	ldr	r6, [sp, #8]
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L15988:
	ldr	r1, .L15989+4
	mov	r3, r0
	mov	r2, r5
	ldr	r0, .L15989+8
.LPIC4930:
	add	r1, pc, r1
	sub	r1, r1, #1696
.LPIC4931:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
.L15986:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move(PLT)
	b	.L15980
.L15987:
	cmn	r1, #104
	ldr	r1, .L15989+12
	ldr	r0, .L15989+16
	movne	r3, #1
	strne	r3, [r4, #104]
	ldr	r2, [r5, #44]
.LPIC4928:
	add	r1, pc, r1
	sub	r1, r1, #1696
.LPIC4929:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15986
.L15990:
	.align	2
.L15989:
	.word	.LANCHOR1-(.LPIC4927+8)
	.word	.LANCHOR9-(.LPIC4930+8)
	.word	.LC931-(.LPIC4931+8)
	.word	.LANCHOR9-(.LPIC4928+8)
	.word	.LC924-(.LPIC4929+8)
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	rsb	r4, r4, r3
	clz	r4, r4
	mov	r4, r4, lsr #5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r1, r4, #144
	beq	.L15995
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L15996
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L15996:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L15995
	mov	r2, r5
	mov	r0, r6
	blx	r3
.L15995:
	ldr	r3, .L16014
.LPIC4932:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	cmp	r3, #0
	beq	.L16012
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L16013
	add	r3, r4, #108
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L16000
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r5, #0
.L16001:
	add	r1, r4, #120
	mov	r0, r4
	bl	conn_gadget_empty(PLT)
	cmp	r0, #0
	orreq	r0, r5, #260
	movne	r0, r5
.L16010:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16000:
	ldr	r2, [r4, #168]
	ldr	r0, [r4, #172]
	cmp	r2, r0
	movne	r5, #65
	moveq	r5, #0
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	b	.L16001
.L16013:
	ldr	r1, .L16014+4
	ldr	r0, .L16014+8
.LPIC4935:
	add	r1, pc, r1
.LPIC4936:
	add	r0, pc, r0
	sub	r1, r1, #1680
	bl	printk(PLT)
	mov	r0, r5
	b	.L16010
.L16012:
	ldr	r1, .L16014+12
	ldr	r0, .L16014+16
.LPIC4933:
	add	r1, pc, r1
.LPIC4934:
	add	r0, pc, r0
	sub	r1, r1, #1680
	bl	printk(PLT)
	mov	r0, #40
	b	.L16010
.L16015:
	.align	2
.L16014:
	.word	.LANCHOR1-(.LPIC4932+8)
	.word	.LANCHOR9-(.LPIC4935+8)
	.word	.LC950-(.LPIC4936+8)
	.word	.LANCHOR9-(.LPIC4933+8)
	.word	.LC268-(.LPIC4934+8)
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.global	ncm_bind_config
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L16034
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r7, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4937:
	add	r0, pc, r0
	ldr	r3, [r6]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L16021
	ldr	r0, .L16034+4
	mov	r1, r4
.LPIC4938:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r8, #0
	cmpne	r0, #0
	beq	.L16021
	ldr	r5, .L16034+8
.LPIC4939:
	add	r5, pc, r5
	ldrb	r3, [r5, #904]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16031
.L16018:
	ldr	r3, .L16034+12
.LPIC4965:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16026
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L16032
.L16019:
	ldrb	r2, [r8, #4]	@ zero_extendqisi2
	add	r6, r4, #150
	mov	r1, #14
	ldrb	r3, [r8]	@ zero_extendqisi2
	mov	r0, r6
	mov	r5, #0
	ldrb	r10, [r8, #5]	@ zero_extendqisi2
	ldrb	r9, [r8, #3]	@ zero_extendqisi2
	ldrb	lr, [r8, #2]	@ zero_extendqisi2
	ldrb	ip, [r8, #1]	@ zero_extendqisi2
	str	r2, [sp, #12]
	ldr	r2, .L16034+16
	str	r10, [sp, #16]
	str	r9, [sp, #8]
	ldr	r8, .L16034+20
	ldr	r9, .L16034+24
	stmia	sp, {ip, lr}
.LPIC4950:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L16034+28
.LPIC4951:
	add	r8, pc, r8
	mov	r2, #15
	str	r5, [r4, #188]
.LPIC4954:
	add	r9, pc, r9
	mov	r0, r7
	str	r6, [r8, #916]
	ldr	lr, .L16034+32
	add	r10, r8, #3968
	strh	r2, [r4, #98]	@ movhi
	ldr	r1, .L16034+36
	add	r10, r10, #8
.LPIC4952:
	add	r3, pc, r3
	strb	r5, [r4, #180]
	ldr	ip, .L16034+40
	add	fp, r3, #56
	str	r5, [r4, #100]
	ldr	r2, .L16034+44
	ldr	r6, .L16034+48
.LPIC4956:
	add	lr, pc, lr
	str	fp, [r4, #176]
	ldr	r3, [r3, #16]
.LPIC4957:
	add	r1, pc, r1
	str	r9, [r4]
	ldr	r7, .L16034+52
.LPIC4958:
	add	ip, pc, ip
	ldr	r9, .L16034+56
.LPIC4959:
	add	r2, pc, r2
	mov	fp, #1
.LPIC4960:
	add	r6, pc, r6
	str	r1, [r4, #36]
	mov	r1, r4
	str	r3, [r4, #108]
	ldr	r3, .L16034+60
.LPIC4962:
	add	r7, pc, r7
	str	r6, [r4, #52]
.LPIC4963:
	add	r9, pc, r9
	str	r5, [r4, #184]
	str	r10, [r4, #4]
.LPIC4961:
	add	r3, pc, r3
	str	lr, [r4, #32]
	str	ip, [r4, #40]
	str	r3, [r4, #48]
	mov	r3, #16384
	str	r2, [r4, #44]
	str	r3, [r4, #112]
	movw	r3, #9014
	str	r7, [r4, #128]
	str	r9, [r4, #132]
	strh	r3, [r4, #182]	@ movhi
	strb	fp, [r4, #104]
	bl	usb_add_function(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	bne	.L16033
.L16017:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16021:
	mvn	r0, #21
	b	.L16017
.L16031:
	mov	r0, r6
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16017
	ldr	r4, .L16034+64
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #904]
.LPIC4941:
	add	r4, pc, r4
	strb	r3, [r4, #1576]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16017
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #920]
	strb	r3, [r4, #1596]
	strb	r3, [r4, #1608]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16017
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #912]
	strb	r3, [r4, #3227]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16017
	uxtb	r0, r0
	strb	r0, [r5, #928]
	strb	r0, [r4, #1567]
	b	.L16018
.L16026:
	mov	r4, #16
	b	.L16019
.L16033:
	mov	r0, r4
	str	r5, [r8, #916]
	bl	kfree(PLT)
	mov	r0, r6
	b	.L16017
.L16032:
	mvn	r0, #11
	b	.L16017
.L16035:
	.align	2
.L16034:
	.word	.LC323-(.LPIC4937+8)
	.word	.LC458-(.LPIC4938+8)
	.word	.LANCHOR0-(.LPIC4939+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4965+8))
	.word	.LC870-(.LPIC4950+8)
	.word	.LANCHOR0-(.LPIC4951+8)
	.word	.LC508-(.LPIC4954+8)
	.word	.LANCHOR2-(.LPIC4952+8)
	.word	ncm_bind-(.LPIC4956+8)
	.word	ncm_unbind-(.LPIC4957+8)
	.word	ncm_set_alt-(.LPIC4958+8)
	.word	ncm_get_alt-(.LPIC4959+8)
	.word	ncm_setup-(.LPIC4960+8)
	.word	ncm_wrap_ntb-(.LPIC4962+8)
	.word	ncm_unwrap_ntb-(.LPIC4963+8)
	.word	ncm_disable-(.LPIC4961+8)
	.word	.LANCHOR2-(.LPIC4941+8)
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	cmp	r4, #0
	beq	.L16048
	ldr	r6, .L16050
	mov	r2, #0
	movw	ip, #26215
	add	r3, r4, #2
	mov	lr, #2
	mov	r7, r1
	mov	r5, r2
	strb	r2, [r4, #1]
	movt	ip, 26214
	strb	r2, [r3], #1
.LPIC4976:
	add	r6, pc, r6
	strb	r2, [r3], #1
	strb	r2, [r3], #1
	strb	r2, [r3]
	strb	lr, [r4]
.L16039:
	add	r1, r6, #28
	smull	r3, r2, ip, r5
	mov	r3, r5, asr #31
	ldrb	r1, [r5, r1]	@ zero_extendqisi2
	rsb	r3, r3, r2, asr #1
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	beq	.L16043
	rsb	r3, r3, r5
	add	r5, r5, #1
	add	r3, r3, #1
	cmp	r5, #256
	ldrb	r2, [r4, r3]	@ zero_extendqisi2
	eor	r2, r2, r1
	strb	r2, [r4, r3]
	bne	.L16039
.L16043:
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r6, .L16050+4
	str	r1, [sp, #12]
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	ldr	r0, .L16050+8
.LPIC4969:
	add	r6, pc, r6
	str	r1, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r6, r6, #1648
	sub	r6, r6, #12
.LPIC4970:
	add	r0, pc, r0
	mov	r1, r6
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk(PLT)
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r1, r6
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r0, .L16050+12
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
.LPIC4972:
	add	r0, pc, r0
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L16050+16
	ldr	r0, [r3]
.LPIC4973:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r5, r0
	mov	r1, r6
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r0, .L16050+20
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
.LPIC4975:
	add	r0, pc, r0
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk(PLT)
	cmp	r5, #0
	bne	.L16049
	mov	r1, r4
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ncm_bind_config(PLT)
.L16048:
	ldr	r2, .L16050+24
	ldr	r0, .L16050+28
.LPIC4966:
	add	r2, pc, r2
	sub	r2, r2, #1648
.LPIC4968:
	add	r0, pc, r0
	sub	r2, r2, #12
	mov	r1, r2
	bl	printk(PLT)
	mvn	r0, #0
.L16038:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16049:
	ldr	r0, .L16050+32
	mov	r2, r6
	mov	r1, r6
.LPIC4979:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L16038
.L16051:
	.align	2
.L16050:
	.word	.LANCHOR1-(.LPIC4976+8)
	.word	.LANCHOR9-(.LPIC4969+8)
	.word	.LC952-(.LPIC4970+8)
	.word	.LC953-(.LPIC4972+8)
	.word	.LC508-(.LPIC4973+8)
	.word	.LC954-(.LPIC4975+8)
	.word	.LANCHOR9-(.LPIC4966+8)
	.word	.LC951-(.LPIC4968+8)
	.word	.LC881-(.LPIC4979+8)
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16064
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4980:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L16053
	ldr	r1, .L16064+4
	mov	r0, r5
.LPIC4981:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	bne	.L16054
.L16053:
	ldr	r3, .L16064+8
.LPIC4982:
	add	r3, pc, r3
	ldrb	r4, [r3, #-592]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L16063
.L16054:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16063:
	ldr	r1, .L16064+12
	mov	r2, r5
	ldr	r0, .L16064+16
.LPIC4983:
	add	r1, pc, r1
	sub	r1, r1, #1632
.LPIC4984:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16054
.L16065:
	.align	2
.L16064:
	.word	.LC827-(.LPIC4980+8)
	.word	.LC508-(.LPIC4981+8)
	.word	.LANCHOR4-(.LPIC4982+8)
	.word	.LANCHOR9-(.LPIC4983+8)
	.word	.LC955-(.LPIC4984+8)
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16068
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L16068+4
	str	lr, [sp, #4]
	mov	r3, #93
	mov	lr, #2
	mov	r4, #104
	strb	r3, [ip, #10]
	movw	r2, #26717
	mov	r3, lr
	strb	r4, [ip, #11]
.LPIC4985:
	add	r1, pc, r1
	strb	lr, [ip, #4]
.LPIC4986:
	add	r0, pc, r0
	sub	r1, r1, #1616
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk(PLT)
.L16069:
	.align	2
.L16068:
	.word	.LANCHOR9-(.LPIC4985+8)
	.word	.LC956-(.LPIC4986+8)
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L16075
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4987:
	add	r5, pc, r5
	ldrb	r2, [r5, #-592]	@ zero_extendqisi2
	cmp	r0, r2
	bne	.L16074
.L16071:
	cmp	r4, #0
	bne	.L16070
	ldr	r2, .L16075+4
	ldr	r3, .L16075+8
.LPIC4994:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC4993:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	strh	r4, [r2]	@ movhi
	strh	r4, [r3]	@ movhi
.L16070:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16074:
	ldr	r1, .L16075+12
	mov	r3, r0
	ldr	r0, .L16075+16
.LPIC4988:
	add	r1, pc, r1
	sub	r1, r1, #1584
.LPIC4989:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, .L16075+20
	mov	r0, #4
	strb	r4, [r5, #-592]
	ldr	r2, [r5, #-668]
.LPIC4995:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L16071
.L16076:
	.align	2
.L16075:
	.word	.LANCHOR4-(.LPIC4987+8)
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC4994+8))
	.word	terminal_mode_vendor_id(GOT_PREL)+(.-(.LPIC4993+8))
	.word	.LANCHOR9-(.LPIC4988+8)
	.word	.LC957-(.LPIC4989+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC4995+8))
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16081
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r4
	add	r2, sp, #4
	mov	r5, r3
.LPIC4996:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	ip, .L16081+4
	mov	r2, r4
	ldr	r1, .L16081+8
	ldr	r0, .L16081+12
	ldr	r3, [sp, #4]
.LPIC5000:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC4998:
	add	r1, pc, r1
	sub	r1, r1, #1568
.LPIC4999:
	add	r0, pc, r0
	sub	r1, r1, #4
	strh	r3, [ip]	@ movhi
	bl	printk(PLT)
	ldr	r0, [sp, #4]
	cmp	r0, #0
	movne	r0, #1
	bl	set_ncm_ready(PLT)
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L16082:
	.align	2
.L16081:
	.word	.LC958-(.LPIC4996+8)
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC5000+8))
	.word	.LANCHOR9-(.LPIC4998+8)
	.word	.LC205-(.LPIC4999+8)
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16219
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
.LPIC5005:
	add	r3, pc, r3
	str	r0, [sp, #4]
	add	r0, r0, #32
	str	r3, [sp]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L16219+4
	mov	r6, r0
.LPIC5001:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r9, r3, #520
	bne	.L16087
	b	.L16084
.L16208:
	ldr	r3, [r9, #520]
	cmp	r3, r2
	sub	r9, r3, #520
	beq	.L16084
.L16087:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L16208
.L16084:
	ldr	r3, [r6, #4]
	mov	r0, #0
	mov	r10, r9
	ldr	r2, .L16219+8
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
.LPIC5004:
	add	r2, pc, r2
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #508]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L16088
	mvn	fp, #94
.L16092:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16089
.L16091:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L16090
	blx	r3
	subs	fp, r0, #0
	bge	.L16089
.L16090:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L16091
.L16089:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L16092
	ldr	r3, [r6, #12]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	fp, #0
	str	r3, [sp, #8]
	blt	.L16152
.L16150:
	add	r4, r6, #60
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	mov	r1, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r9, #48]
	beq	.L16144
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L16209
.L16145:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16195
.L16209:
	ldr	r3, [r6, #12]
	ldr	r2, [sp, #8]
	cmp	r3, #0
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L16145
.L16144:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [sp]
	add	r2, r9, #180
	mov	r0, #4
	ldr	r3, .L16219+12
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
.L16195:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16088:
	ldr	r3, [r6, #12]
	adds	r3, r3, #0
	movne	r3, #1
	str	r3, [sp, #8]
.L16152:
	ldrb	r2, [r7]	@ zero_extendqisi2
	ldrh	r1, [r7, #4]	@ unaligned
	ldrh	ip, [r7, #2]	@ unaligned
	and	r3, r2, #96
	cmp	r3, #64
	mov	r8, r1
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r10, ip
	bne	.L16095
	cmp	r3, #240
	beq	.L16210
.L16095:
	ldr	r1, .L16219+16
	cmp	r2, #64
	ldrh	r5, [r7, #6]	@ unaligned
.LPIC5015:
	add	r1, pc, r1
	ldr	r4, [r1, #2500]
	beq	.L16211
	cmp	r3, #51
	cmpeq	r2, #192
	beq	.L16212
.L16142:
	ldr	r0, [sp, #4]
	mov	r1, r7
	bl	composite_setup(PLT)
	mov	fp, r0
	b	.L16150
.L16211:
	cmp	r3, #53
	beq	.L16213
	cmp	r3, #52
	beq	.L16214
	cmp	r3, #58
	cmpeq	r8, #0
	beq	.L16215
	cmp	r3, #54
	bne	.L16101
	cmp	r8, #0
	beq	.L16142
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	fp, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r2, r3
	bne	.L16108
	b	.L16103
.L16106:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r2, r3
	beq	.L16103
.L16108:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L16106
	cmp	r3, #0
	beq	.L16103
.L16107:
	mov	r0, r2
	str	r2, [sp, #12]
	bl	__list_del_entry(PLT)
	ldr	r2, [sp, #12]
	mov	r1, r4
	mov	r0, r2
	ldr	r2, [r1, #1784]!
	bl	__list_add(PLT)
.L16109:
	ldr	r3, .L16219+20
	ldr	r2, [sp]
	ldr	r3, [r2, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L16155
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L16115
.L16114:
	movw	r1, #32800
	mov	r0, r8
	str	r3, [sp, #12]
	bl	__kmalloc(PLT)
	ldr	r3, [sp, #12]
	cmp	r0, #0
	str	r0, [r3, #20]
	beq	.L16216
	mov	r1, r4
	str	r4, [r3, #12]
	mov	r0, r3
	str	r10, [r3, #16]
	str	r8, [r3, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add(PLT)
	mov	r1, fp
.L16205:
	mov	r0, r5
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [sp]
	add	r2, r4, #1744
	mov	r0, #4
	ldr	r3, .L16219+12
	add	r2, r2, #8
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L16097
.L16214:
	str	r8, [r4, #1640]
	ldr	r2, [r6]
	ldr	r3, .L16219+24
	ldr	r2, [r2, #4]
.LPIC5010:
	add	r3, pc, r3
	str	r4, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
.L16097:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r5, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	bge	.L16150
	ldr	r2, .L16219+28
	ldr	r0, [r6]
	ldr	r1, .L16219+32
.LPIC5013:
	add	r2, pc, r2
	add	r2, r2, #3664
	add	r0, r0, #32
.LPIC5014:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	b	.L16142
.L16215:
	cmp	r5, #0
	streq	r10, [r4, #1648]
	beq	.L16097
.L16100:
	cmp	r3, #56
	beq	.L16217
	cmp	r3, #57
	bne	.L16142
	add	fp, r4, #88
	add	r4, r4, #1760
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #8]
	add	r4, r4, #8
	mov	r1, r0
	cmp	r4, r8
	beq	.L16136
	ldr	r2, [r8, #16]
	cmp	r10, r2
	bne	.L16139
	b	.L16137
.L16141:
	ldr	r3, [r8, #16]
	cmp	r10, r3
	beq	.L16137
.L16139:
	ldr	r8, [r8]
	cmp	r4, r8
	bne	.L16141
.L16136:
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16142
.L16212:
	ldr	r3, [r6, #4]
	mov	r5, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r5, [r3]	@ movhi
	bl	__memzero(PLT)
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	mov	r3, #0
	str	r3, [r4, #1644]
	str	r3, [r4, #1648]
	b	.L16097
.L16210:
	ldr	lr, [sp]
	mov	r0, #1
	mov	r4, #0
	ldr	r2, .L16219+36
	ldr	r3, .L16219+40
	ldr	r5, [lr, r2]
	strh	ip, [r5]	@ movhi
	ldr	r8, [lr, r3]
	strh	r1, [r8]	@ movhi
	bl	set_ncm_ready(PLT)
	ldr	r1, .L16219+44
	ldr	r0, .L16219+48
	ldrh	r2, [r5]
	ldrh	r3, [r8]
.LPIC5006:
	add	r1, pc, r1
	sub	r5, r1, #1536
.LPIC5007:
	add	r0, pc, r0
	sub	r5, r5, #12
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r4, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r4
	movge	fp, r4
	bge	.L16150
	ldr	r0, .L16219+52
	mov	r1, r5
	mov	fp, r4
.LPIC5009:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16150
.L16137:
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L16142
	ldr	r2, [r6, #4]
	ldr	r3, .L16219+56
	str	r8, [r2, #32]
	ldr	r2, [r6, #4]
.LPIC5012:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L16097
.L16217:
	add	fp, r4, #88
	add	r4, r4, #1776
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	cmp	r4, r3
	beq	.L16136
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L16132
	b	.L16130
.L16135:
	ldr	r2, [r3, #16]
	cmp	r10, r2
	beq	.L16130
.L16132:
	ldr	r3, [r3]
	cmp	r4, r3
	bne	.L16135
	b	.L16136
.L16213:
	mov	r3, #1
	mov	r0, #200
	mov	r5, #0
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies(PLT)
	ldr	ip, [sp]
	add	r2, r4, #1696
	mov	r3, r0
	ldr	r1, .L16219+12
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [ip, r1]
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L16097
.L16103:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	mov	r2, r3
	beq	.L16109
.L16113:
	ldr	r0, [r3, #16]
	cmp	r10, r0
	beq	.L16218
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r2, r3
	bne	.L16113
	b	.L16109
.L16216:
	mov	r0, r3
	bl	kfree(PLT)
.L16115:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16142
.L16218:
	cmp	r3, #0
	bne	.L16107
	b	.L16109
.L16155:
	mov	r3, #16
	b	.L16114
.L16101:
	cmp	r3, #55
	bne	.L16100
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r8, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	fp, r3
	beq	.L16117
	ldr	r0, [r3, #16]
	cmp	r10, r0
	bne	.L16120
	b	.L16118
.L16122:
	ldr	r2, [r3, #16]
	cmp	r10, r2
	beq	.L16118
.L16120:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	fp, r3
	bne	.L16122
.L16117:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	mov	fp, r3
	beq	.L16123
	ldr	r0, [r3, #16]
	cmp	r10, r0
	beq	.L16124
.L16126:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	fp, r3
	beq	.L16123
	ldr	r2, [r3, #16]
	cmp	r10, r2
	bne	.L16126
.L16124:
	cmp	r3, #0
	bne	.L16121
.L16123:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16142
.L16130:
	mov	r0, fp
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L16142
	ldr	r2, [r3, #28]
	cmp	r8, r2
	bne	.L16142
	ldr	r2, [r3, #24]
	add	r8, r8, r5
	cmp	r8, r2
	bgt	.L16142
	ldr	r1, [r6, #4]
	ldr	r2, .L16219+60
	str	r3, [r1, #32]
	ldr	r1, [r6, #4]
.LPIC5011:
	add	r2, pc, r2
	str	r2, [r1, #28]
	b	.L16097
.L16118:
	cmp	r3, #0
	beq	.L16117
.L16121:
	mov	r0, fp
	bl	__list_del_entry(PLT)
	mov	r1, r4
	mov	r0, fp
	ldr	r2, [r1, #1784]!
	bl	__list_add(PLT)
	mov	r1, r8
	b	.L16205
.L16220:
	.align	2
.L16219:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC5005+8)
	.word	.LANCHOR1-(.LPIC5001+8)
	.word	composite_setup_complete-(.LPIC5004+8)
	.word	system_wq(GOT)
	.word	.LANCHOR1-(.LPIC5015+8)
	.word	kmalloc_caches(GOT)
	.word	acc_complete_set_string-(.LPIC5010+8)
	.word	.LANCHOR3-(.LPIC5013+8)
	.word	.LC509-(.LPIC5014+8)
	.word	terminal_mode_version(GOT)
	.word	terminal_mode_vendor_id(GOT)
	.word	.LANCHOR9-(.LPIC5006+8)
	.word	.LC959-(.LPIC5007+8)
	.word	.LC960-(.LPIC5009+8)
	.word	acc_complete_send_hid_event-(.LPIC5012+8)
	.word	acc_complete_set_hid_report_desc-(.LPIC5011+8)
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16234
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	str	r6, [sp, #8]
	cmp	r0, #0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
.LPIC5016:
	add	r3, pc, r3
	str	r2, [sp, #4]
	str	r3, [sp]
	bne	.L16232
.L16221:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16232:
	ldr	r5, .L16234+4
	add	r6, r0, #452
	mov	r4, r0
	ldr	r0, .L16234+8
.LPIC5017:
	add	r5, pc, r5
	sub	r5, r5, #1520
.LPIC5019:
	add	r0, pc, r0
	sub	r5, r5, #4
	mov	r2, r5
	mov	r1, r5
	bl	printk(PLT)
	mov	r0, r6
	bl	work_busy(PLT)
	cmp	r0, #0
	bne	.L16233
.L16223:
	ldr	r0, [r4, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #504]
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L16234+12
	mov	r3, r0
	mov	r2, r6
	mov	r0, #4
.LPIC5024:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L16221
.L16233:
	mov	r0, r6
	bl	cancel_delayed_work(PLT)
	ldr	r0, .L16234+16
	mov	r2, r5
	mov	r1, r5
.LPIC5022:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16223
.L16235:
	.align	2
.L16234:
	.word	.LC961-(.LPIC5016+8)
	.word	.LANCHOR9-(.LPIC5017+8)
	.word	.LC962-(.LPIC5019+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC5024+8))
	.word	.LC963-(.LPIC5022+8)
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.align	2
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	bl	get_host_os_type(PLT)
	subs	r3, r0, #0
	beq	.L16256
	ldr	r1, .L16258
	mov	r0, r5
	add	r2, sp, #4
.LPIC5028:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L16239
	ldr	r2, [r6, #8]
	cmp	r2, #0
	beq	.L16239
	ldr	r5, .L16258+4
	ldr	r1, [sp, #4]
.LPIC5037:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L16240
	ldr	r1, .L16258+8
	mov	r2, r3
	ldr	r0, .L16258+12
.LPIC5029:
	add	r1, pc, r1
.LPIC5030:
	add	r0, pc, r0
	sub	r1, r1, #1488
	bl	printk(PLT)
	mov	r0, r4
.L16238:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16239:
	ldr	r1, .L16258+16
	ldr	r0, .L16258+20
.LPIC5035:
	add	r1, pc, r1
.LPIC5036:
	add	r0, pc, r0
	sub	r1, r1, #1488
	bl	printk(PLT)
	mvn	r0, #0
	b	.L16238
.L16256:
	ldr	r2, .L16258+24
	ldr	r1, .L16258+28
	ldr	r0, .L16258+32
.LPIC5038:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC5026:
	add	r1, pc, r1
.LPIC5027:
	add	r0, pc, r0
	sub	r1, r1, #1488
	strb	r3, [r2]
	bl	printk(PLT)
	mov	r0, r4
	b	.L16238
.L16240:
	strb	r1, [r5]
	ldr	r0, [r2]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16241
	mov	r1, #0
	blx	r3
.L16241:
	ldrb	r2, [r5]	@ zero_extendqisi2
	ldr	r3, [r6, #8]
	cmp	r2, #0
	movne	r1, #5
	moveq	r1, #3
	ldr	r0, [r3]
	bl	sec_set_speedlimit(PLT)
	ldr	r1, .L16258+36
	ldr	r0, .L16258+40
.LPIC5031:
	add	r1, pc, r1
	sub	r1, r1, #1488
.LPIC5032:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, #200
	bl	msleep(PLT)
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16257
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16244
	mov	r1, #1
	blx	r3
.L16244:
	ldr	r1, .L16258+44
	ldr	r0, .L16258+48
.LPIC5033:
	add	r1, pc, r1
.LPIC5034:
	add	r0, pc, r0
	sub	r1, r1, #1488
	bl	printk(PLT)
	mov	r0, r4
	b	.L16238
.L16257:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16244
.L16259:
	.align	2
.L16258:
	.word	.LC270-(.LPIC5028+8)
	.word	usb30en(GOT_PREL)+(.-(.LPIC5037+8))
	.word	.LANCHOR9-(.LPIC5029+8)
	.word	.LC965-(.LPIC5030+8)
	.word	.LANCHOR9-(.LPIC5035+8)
	.word	.LC968-(.LPIC5036+8)
	.word	usb30en(GOT_PREL)+(.-(.LPIC5038+8))
	.word	.LANCHOR9-(.LPIC5026+8)
	.word	.LC964-(.LPIC5027+8)
	.word	.LANCHOR9-(.LPIC5031+8)
	.word	.LC966-(.LPIC5032+8)
	.word	.LANCHOR9-(.LPIC5033+8)
	.word	.LC967-(.LPIC5034+8)
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	bl	dev_get_drvdata(PLT)
	ldr	fp, [r0, #8]
	mov	r3, #0
	mov	r5, r0
	str	r3, [sp, #52]
	cmp	fp, r3
	mvneq	r0, #18
	bne	.L16326
.L16324:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16326:
	add	r9, r5, #24
	mov	r0, r9
	bl	mutex_lock(PLT)
	ldr	r1, .L16338
	add	r2, sp, #52
	mov	r0, r6
.LPIC5041:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r0, .L16338+4
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	ldr	r1, [sp, #52]
.LPIC5042:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [sp, #52]
	cmp	r3, #0
	beq	.L16262
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16327
	ldr	r0, .L16338+8
	ldr	r1, .L16338+12
.LPIC5080:
	add	r0, pc, r0
.LPIC5079:
	add	r1, pc, r1
	add	r0, r0, #3232
	add	r0, r0, #8
	sub	r1, r1, #1472
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L16328
.L16295:
	mov	r0, r9
	bl	mutex_unlock(PLT)
	mov	r0, r4
	b	.L16324
.L16262:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L16329
	ldr	r0, [fp]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16296
	blx	r3
.L16296:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L16295
.L16329:
	ldr	r1, [r5, #20]
	ldr	r8, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L16330
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16285
	blx	r3
.L16285:
	ldr	r3, [r8]
	mov	r6, r5
	ldr	r1, [r8, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r7, [r6, #508]!
	sub	r7, r7, #120
	b	.L16286
.L16287:
	bl	usb_remove_config(PLT)
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
.L16286:
	add	r3, r7, #120
	mov	r1, r7
	cmp	r3, r6
	mov	r0, r8
	bne	.L16287
	b	.L16288
.L16330:
	add	r6, r5, #508
.L16288:
	ldr	r8, [r5, #508]
	sub	r8, r8, #120
.L16284:
	add	r3, r8, #120
	cmp	r3, r6
	beq	.L16296
	mov	r10, r8
	ldr	r7, [r10, #112]!
	cmp	r10, r7
	sub	r7, r7, #4
	beq	.L16290
.L16292:
	ldr	r0, [r7]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L16291
	blx	r3
.L16291:
	ldr	r7, [r7, #4]
	cmp	r10, r7
	sub	r7, r7, #4
	bne	.L16292
.L16290:
	ldr	r8, [r8, #120]
	sub	r8, r8, #120
	b	.L16284
.L16328:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16300
	ldr	r2, .L16338+16
.LPIC5040:
	add	r2, pc, r2
.L16297:
	ldr	r1, .L16338+20
	ldr	r0, .L16338+24
.LPIC5081:
	add	r1, pc, r1
	sub	r1, r1, #1472
.LPIC5082:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16295
.L16327:
	ldr	r3, .L16338+28
	mov	r2, #255
	mov	r6, r5
	ldr	ip, .L16338+32
	ldr	r7, .L16338+36
	ldr	r1, .L16338+40
.LPIC5053:
	add	r3, pc, r3
.LPIC5058:
	add	ip, pc, ip
	str	r3, [sp, #16]
	ldr	r3, .L16338+44
.LPIC5043:
	add	r7, pc, r7
	str	ip, [sp, #24]
	ldr	ip, .L16338+48
.LPIC5044:
	add	r1, pc, r1
	sub	r0, r7, #924
.LPIC5054:
	add	r3, pc, r3
.LPIC5059:
	add	ip, pc, ip
	str	r3, [sp, #20]
	ldr	r3, [r7, #3632]
	str	ip, [sp, #28]
	ldr	ip, .L16338+52
	strb	r3, [fp, #48]
	ldr	r3, .L16338+56
.LPIC5057:
	add	ip, pc, ip
	str	ip, [sp, #32]
.LPIC5055:
	add	r3, pc, r3
	str	r3, [sp, #36]
	bl	strncpy(PLT)
	ldr	r3, .L16338+60
	sub	r0, r7, #1168
	mov	r2, #255
	ldr	r1, .L16338+64
	sub	r0, r0, #12
.LPIC5056:
	add	r3, pc, r3
.LPIC5046:
	add	r1, pc, r1
	str	r3, [sp, #40]
	bl	strncpy(PLT)
	ldr	r3, .L16338+68
	ldr	r1, .L16338+72
.LPIC5048:
	add	r3, pc, r3
	add	r2, r3, #392
.LPIC5052:
	add	r1, pc, r1
	ldrb	r0, [r3, #396]	@ zero_extendqisi2
	ldrh	lr, [r2, #8]
	sub	r3, r1, #1472
	str	r3, [sp, #12]
	strh	lr, [fp, #25]	@ unaligned
	ldrh	r3, [r2, #10]
	strh	r3, [fp, #27]	@ unaligned
	ldrh	r3, [r2, #12]
	strb	r0, [fp, #21]
	strh	r3, [fp, #29]	@ unaligned
	ldr	r8, [r6, #508]!
	sub	r8, r8, #120
.L16264:
	add	r3, r8, #120
	cmp	r6, r3
	beq	.L16331
	mov	r10, r8
	ldr	r7, [r10, #112]!
	sub	r7, r7, #4
.L16265:
	add	r3, r7, #4
	cmp	r3, r10
	bne	.L16270
	ldr	r8, [r8, #120]
	sub	r8, r8, #120
	b	.L16264
.L16300:
	ldr	r2, .L16338+76
.LPIC5039:
	add	r2, pc, r2
	b	.L16297
.L16270:
	ldr	r3, [r7]
	ldr	r1, [sp, #12]
	ldr	r0, [sp, #16]
	ldr	r2, [r3]
	bl	printk(PLT)
	ldr	r3, [r7]
	ldr	r1, [sp, #20]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #44]
	bl	strcmp(PLT)
	ldr	r3, [sp, #44]
	subs	r2, r0, #0
	ldr	r1, [sp, #24]
	mov	r0, r3
	beq	.L16332
	bl	strcmp(PLT)
	subs	r2, r0, #0
	bne	.L16268
	str	r2, [sp, #44]
	ldrh	r3, [fp, #29]	@ unaligned
	ldr	r0, [sp, #28]
	cmp	r3, #1024
	beq	.L16267
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	mov	r3, #8
	strb	r3, [fp, #30]
	strb	r2, [fp, #29]
.L16268:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L16265
.L16332:
	ldr	r0, [sp, #36]
	str	r2, [sp, #44]
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	mov	r3, #4
	ldr	r1, [sp, #40]
	strb	r3, [fp, #30]
	strb	r2, [fp, #29]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L16268
.L16267:
	ldr	r0, [sp, #32]
	bl	printk(PLT)
	mov	r2, #0
	mov	r3, #12
	strb	r2, [fp, #29]
	strb	r3, [fp, #30]
	b	.L16268
.L16331:
	ldr	r7, .L16338+80
	mov	r2, #255
	ldr	r1, .L16338+84
.LPIC5061:
	add	r7, pc, r7
.LPIC5060:
	add	r1, pc, r1
	sub	r0, r7, #924
	bl	strncpy(PLT)
	ldr	r1, .L16338+88
	sub	r0, r7, #1168
	mov	r2, #255
	sub	r0, r0, #12
	ldr	r7, .L16338+92
.LPIC5062:
	add	r1, pc, r1
	bl	strncpy(PLT)
	ldr	r1, .L16338+96
.LPIC5066:
	add	r7, pc, r7
	ldrh	r10, [fp, #29]	@ unaligned
	sub	r7, r7, #1472
	ldr	r0, .L16338+100
	ldrh	r3, [fp, #27]	@ unaligned
.LPIC5064:
	add	r1, pc, r1
	ldrh	r2, [fp, #25]	@ unaligned
	ldrb	lr, [r1, #398]	@ zero_extendqisi2
	ldrb	r8, [r1, #397]	@ zero_extendqisi2
.LPIC5067:
	add	r0, pc, r0
	mov	r1, r7
	strb	lr, [fp, #23]
	strb	r8, [fp, #22]
	str	r10, [sp]
	bl	printk(PLT)
	ldr	r0, .L16338+104
	ldrb	r3, [fp, #23]	@ zero_extendqisi2
	ldrb	r2, [fp, #22]	@ zero_extendqisi2
	ldrb	r1, [fp, #21]	@ zero_extendqisi2
.LPIC5068:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L16338+108
	mov	r1, r7
.LPIC5070:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r7, [r5, #508]
	sub	r7, r7, #120
.L16272:
	add	r3, r7, #120
	cmp	r6, r3
	beq	.L16333
	mov	r10, r7
	ldr	r8, [r10, #112]!
	sub	r8, r8, #4
.L16273:
	add	r3, r8, #4
	cmp	r3, r10
	beq	.L16334
	ldr	r0, [r8]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L16301
	blx	r3
.L16301:
	ldr	r8, [r8, #4]
	sub	r8, r8, #4
	b	.L16273
.L16334:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L16272
.L16333:
	ldr	r3, [r5, #20]
	ldr	r8, [r5, #8]
	cmp	r3, #0
	beq	.L16335
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r5, #20]
	bne	.L16278
	ldr	r7, [r5, #508]
	ldr	r10, .L16338+112
	sub	r7, r7, #120
.LPIC5072:
	add	r10, pc, r10
.L16279:
	add	r3, r7, #120
	mov	r1, r7
	cmp	r6, r3
	mov	r2, r10
	mov	r0, r8
	beq	.L16336
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16337
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L16279
.L16335:
	ldr	r0, .L16338+116
	mov	r1, #500
.LPIC5071:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
.L16278:
	mov	r3, #1
	strb	r3, [r5, #16]
	b	.L16295
.L16336:
	mov	r0, r5
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16278
.L16337:
	ldr	r6, .L16338+120
	mov	r3, r0
	ldr	r0, .L16338+124
.LPIC5073:
	add	r6, pc, r6
	sub	r2, r6, #1456
.LPIC5075:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	ldr	r0, .L16338+128
	sub	r2, r6, #1472
	mov	r1, r2
.LPIC5078:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r9
	strb	r3, [r5, #48]
	strb	r3, [r5, #16]
	bl	mutex_unlock(PLT)
	mov	r0, r4
	b	.L16324
.L16339:
	.align	2
.L16338:
	.word	.LC270-(.LPIC5041+8)
	.word	.LC971-(.LPIC5042+8)
	.word	.LANCHOR2-(.LPIC5080+8)
	.word	.LANCHOR9-(.LPIC5079+8)
	.word	.LC970-(.LPIC5040+8)
	.word	.LANCHOR9-(.LPIC5081+8)
	.word	.LC984-(.LPIC5082+8)
	.word	.LC973-(.LPIC5053+8)
	.word	.LC548-(.LPIC5058+8)
	.word	.LANCHOR4-(.LPIC5043+8)
	.word	.LC480-(.LPIC5044+8)
	.word	.LC974-(.LPIC5054+8)
	.word	.LC977-(.LPIC5059+8)
	.word	.LC976-(.LPIC5057+8)
	.word	.LC975-(.LPIC5055+8)
	.word	.LC548-(.LPIC5056+8)
	.word	.LC972-(.LPIC5046+8)
	.word	.LANCHOR2-(.LPIC5048+8)
	.word	.LANCHOR9-(.LPIC5052+8)
	.word	.LC969-(.LPIC5039+8)
	.word	.LANCHOR4-(.LPIC5061+8)
	.word	.LC480-(.LPIC5060+8)
	.word	.LC972-(.LPIC5062+8)
	.word	.LANCHOR9-(.LPIC5066+8)
	.word	.LANCHOR2-(.LPIC5064+8)
	.word	.LC978-(.LPIC5067+8)
	.word	.LC979-(.LPIC5068+8)
	.word	.LC980-(.LPIC5070+8)
	.word	android_bind_config-(.LPIC5072+8)
	.word	.LC981-(.LPIC5071+8)
	.word	.LANCHOR9-(.LPIC5073+8)
	.word	.LC982-(.LPIC5075+8)
	.word	.LC983-(.LPIC5078+8)
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L16352
.L16340:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16352:
	ldr	r3, [r8, #20]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L16353
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #20]
	bne	.L16340
	mov	r5, r8
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16347
	ldr	r7, .L16355
.LPIC5084:
	add	r7, pc, r7
.L16346:
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16354
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16346
.L16347:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	schedule_usb_gadget_connect_work(PLT)
.L16353:
	ldr	r0, .L16355+4
	mov	r1, #500
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC5083:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L16354:
	ldr	r2, .L16355+8
	mov	r3, r0
	ldr	r0, .L16355+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC5085:
	add	r2, pc, r2
	ldr	r8, [sp, #16]
	sub	r2, r2, #1456
	ldr	lr, [sp, #20]
.LPIC5087:
	add	r0, pc, r0
	mov	r1, r2
	add	sp, sp, #24
	b	printk(PLT)
.L16356:
	.align	2
.L16355:
	.word	android_bind_config-(.LPIC5084+8)
	.word	.LC981-(.LPIC5083+8)
	.word	.LANCHOR9-(.LPIC5085+8)
	.word	.LC982-(.LPIC5087+8)
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L16369
.L16357:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16369:
	ldr	r3, [r8, #20]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L16370
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #20]
	bne	.L16357
	mov	r5, r8
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16364
	ldr	r7, .L16372
.LPIC5089:
	add	r7, pc, r7
.L16363:
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16371
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16363
.L16364:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	schedule_usb_gadget_connect_work(PLT)
.L16370:
	ldr	r0, .L16372+4
	mov	r1, #500
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC5088:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L16371:
	ldr	r2, .L16372+8
	mov	r3, r0
	ldr	r0, .L16372+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC5090:
	add	r2, pc, r2
	ldr	r8, [sp, #16]
	sub	r2, r2, #1456
	ldr	lr, [sp, #20]
.LPIC5092:
	add	r0, pc, r0
	mov	r1, r2
	add	sp, sp, #24
	b	printk(PLT)
.L16373:
	.align	2
.L16372:
	.word	android_bind_config-(.LPIC5089+8)
	.word	.LC981-(.LPIC5088+8)
	.word	.LANCHOR9-(.LPIC5090+8)
	.word	.LC982-(.LPIC5092+8)
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16405
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r0, .L16405+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC5093:
	add	r3, pc, r3
	str	lr, [sp, #28]
.LPIC5094:
	add	r0, pc, r0
	sub	r1, r3, #1440
	add	r0, r0, #3264
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L16401
.L16375:
	ldr	r1, .L16405+8
.LPIC5096:
	add	r1, pc, r1
	ldr	r3, [r1, #-1468]
	cmp	r3, #0
	beq	.L16391
	add	r2, r3, #116
#APP
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L16377
#APP
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L16398:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16377:
	ldr	r3, [r1, #-1468]
	mov	r1, #0
	str	r3, [r4, #124]
	ldrb	r2, [r3, #161]	@ zero_extendqisi2
	str	r1, [r3, #104]
	cmp	r2, r1
	bne	.L16402
.L16387:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
	b	.L16398
.L16402:
	ldr	r2, .L16405+12
	strb	r1, [r3, #161]
.LPIC5097:
	add	r2, pc, r2
	ldr	r6, [r2, #1932]
	ldr	r4, [r2, #1916]
	cmp	r6, #0
	beq	.L16378
	add	r7, r6, #24
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r6, [r4, #4]
	strb	r5, [r4]
	cmp	r3, #0
	beq	.L16388
	ldr	r3, [r6, #20]
	ldr	r8, [r6, #8]
	cmp	r3, #0
	beq	.L16403
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r6, #20]
	bne	.L16388
	mov	r5, r6
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16385
	ldr	r9, .L16405+16
.LPIC5100:
	add	r9, pc, r9
.L16384:
	mov	r2, r9
	mov	r1, r4
	mov	r0, r8
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16404
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16384
.L16385:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work(PLT)
.L16388:
	mov	r0, r7
	bl	mutex_unlock(PLT)
	ldr	r3, .L16405+20
	mov	r2, #1
	mov	r0, #0
.LPIC5104:
	add	r3, pc, r3
	ldr	r3, [r3, #-1468]
	strb	r2, [r3, #160]
	b	.L16398
.L16378:
	str	r6, [r4, #4]
	strb	r5, [r4]
	b	.L16387
.L16403:
	ldr	r0, .L16405+24
	mov	r1, #500
.LPIC5099:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L16388
.L16391:
	mvn	r0, #18
	b	.L16398
.L16404:
	ldr	r2, .L16405+28
	mov	r3, r0
	ldr	r0, .L16405+32
.LPIC5101:
	add	r2, pc, r2
	sub	r2, r2, #1456
.LPIC5103:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	b	.L16388
.L16401:
	ldr	r0, .L16405+36
.LPIC5095:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16375
.L16406:
	.align	2
.L16405:
	.word	.LANCHOR9-(.LPIC5093+8)
	.word	.LANCHOR2-(.LPIC5094+8)
	.word	.LANCHOR4-(.LPIC5096+8)
	.word	.LANCHOR0-(.LPIC5097+8)
	.word	android_bind_config-(.LPIC5100+8)
	.word	.LANCHOR4-(.LPIC5104+8)
	.word	.LC981-(.LPIC5099+8)
	.word	.LANCHOR9-(.LPIC5101+8)
	.word	.LC982-(.LPIC5103+8)
	.word	.LC985-(.LPIC5095+8)
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r5, r4, #96
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r3, #0
.L16408:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r5]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r5]

@ 0 "" 2
	cmp	ip, #0
	bne	.L16408
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	lr, #2
	beq	.L16475
	ldr	r3, [r0, #32]
	add	r6, r4, #4
	mov	fp, r2
	mov	r9, r1
	mov	r0, r6
	tst	r3, #2048
	bne	.L16543
	bl	mutex_lock_interruptible(PLT)
	cmp	r0, #0
	blt	.L16498
.L16414:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L16412
	cmp	r3, #2
	bne	.L16544
	add	r10, r4, #116
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r3, #0
.L16456:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r5]
	mov	r8, #0
	teq	r2, #2
	strexeq r8, r3, [r5]

@ 0 "" 2
	cmp	r8, #0
	bne	.L16456
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L16458
	cmp	r2, #2
	bne	.L16545
	mov	r9, r8
.L16538:
	mvn	r7, #42
.L16459:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
.L16464:
	mov	r0, r9
	bl	kfree(PLT)
.L16411:
	mov	r0, r6
	bl	mutex_unlock(PLT)
	mov	r0, r7
.L16498:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16543:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L16414
	mvn	r0, #10
	b	.L16498
.L16412:
	cmp	fp, #15
	bls	.L16478
	mov	r0, r9
	mov	r1, fp
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r5, r0
	movhi	r7, r0
	bhi	.L16411
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L16416
	ldr	r0, .L16558
.LPIC5107:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	ldrb	r2, [r5]	@ zero_extendqisi2
	ldrb	r0, [r5, #3]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	orr	r3, r1, r3, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r0, asl #24
	cmp	r3, #1
	bne	.L16417
	ldrb	r1, [r5, #6]	@ zero_extendqisi2
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	ldrb	r2, [r5, #4]	@ zero_extendqisi2
	ldrb	r0, [r5, #7]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	orr	r3, r1, r3, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r0, asl #24
	cmp	fp, r3
	bne	.L16417
	ldrb	r2, [r5, #10]	@ zero_extendqisi2
	add	r10, r5, #16
	sub	r9, fp, #16
	ldrb	r0, [r5, #9]	@ zero_extendqisi2
	ldrb	r3, [r5, #14]	@ zero_extendqisi2
	ldrb	r1, [r5, #8]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	ip, [r5, #11]	@ zero_extendqisi2
	ldrb	lr, [r5, #13]	@ zero_extendqisi2
	orr	r2, r2, r0, asl #8
	mov	r3, r3, asl #16
	ldrb	r0, [r5, #12]	@ zero_extendqisi2
	ldrb	r7, [r5, #15]	@ zero_extendqisi2
	orr	r2, r2, r1
	orrs	r2, r2, ip, asl #24
	orr	r3, r3, lr, asl #8
	orr	r0, r3, r0
	mov	ip, r2
	str	r2, [sp, #8]
	orr	r8, r0, r7, asl #24
	beq	.L16479
	ldr	r3, .L16558+4
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r10
	mov	r0, ip
.LPIC5108:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.129(PLT)
	subs	r7, r0, #0
	blt	.L16419
	add	r10, r10, r7
	rsb	r9, r7, r9
.L16418:
	cmp	r8, #0
	beq	.L16480
	ldr	r3, .L16558+8
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r10
	mov	r0, r8
.LPIC5109:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.129(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #12]
	blt	.L16481
	add	r2, r3, #8
.L16420:
	cmp	r9, r2
	bcc	.L16421
	add	r1, r10, r3
	ldrb	lr, [r10, r3]	@ zero_extendqisi2
	ldrb	r2, [r1, #2]	@ zero_extendqisi2
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1, #3]	@ zero_extendqisi2
	movw	r1, #56924
	movt	r1, 85
	mov	r2, r2, asl #16
	orr	r2, r2, ip, asl #8
	orr	lr, r2, lr
	orr	r0, lr, r0, asl #24
	cmp	r0, r1
	bne	.L16417
	add	r2, r3, #4
	sub	r9, r9, #8
	add	r0, r10, r2
	ldrb	r1, [r10, r2]	@ zero_extendqisi2
	rsb	ip, r3, r9
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	lr, [r0, #1]	@ zero_extendqisi2
	ldrb	r0, [r0, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, lr, asl #8
	orr	r1, r2, r1
	ldr	r2, [sp, #8]
	orr	r9, r1, r0, asl #24
	orr	r2, r8, r2
	orrs	r2, r2, r9
	beq	.L16417
	cmp	r9, #0
	beq	.L16423
	add	r1, r3, #8
	ldr	r3, .L16558+12
	str	r4, [sp]
	add	r1, r10, r1
	mov	r2, ip
	str	ip, [sp, #16]
	mov	r0, r9
.LPIC5110:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.129(PLT)
	cmp	r0, #0
	blt	.L16482
	ldr	ip, [sp, #16]
	cmp	ip, r0
	bne	.L16417
	ldr	r3, [sp, #12]
	str	ip, [r4, #160]
	str	r5, [r4, #144]
	strd	r8, [r4, #168]
	add	r7, r3, r7
	add	r3, r7, #24
	add	ip, ip, r7
	str	r7, [r4, #152]
	str	r3, [r4, #156]
	ldr	r3, [sp, #8]
	str	ip, [r4, #148]
	str	r3, [r4, #164]
	b	.L16473
.L16544:
	mov	r0, r6
	mvn	r7, #76
	bl	mutex_unlock(PLT)
	mov	r0, r7
	b	.L16498
.L16416:
	ldr	r0, .L16558+16
.LPIC5111:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	ldrb	r2, [r5]	@ zero_extendqisi2
	ldrb	r0, [r5, #3]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	orr	r3, r1, r3, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r0, asl #24
	cmp	r3, #2
	bne	.L16425
	ldrb	r1, [r5, #6]	@ zero_extendqisi2
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	ldrb	r2, [r5, #4]	@ zero_extendqisi2
	ldrb	r0, [r5, #7]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	orr	r3, r1, r3, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r0, asl #24
	cmp	fp, r3
	bne	.L16425
	ldrb	r2, [r5, #10]	@ zero_extendqisi2
	ldrb	r1, [r5, #9]	@ zero_extendqisi2
	ldrb	r3, [r5, #14]	@ zero_extendqisi2
	ldrb	r0, [r5, #8]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	ip, [r5, #13]	@ zero_extendqisi2
	ldrb	r8, [r5, #11]	@ zero_extendqisi2
	orr	r2, r2, r1, asl #8
	mov	r3, r3, asl #16
	ldrb	r1, [r5, #12]	@ zero_extendqisi2
	ldrb	r9, [r5, #15]	@ zero_extendqisi2
	orr	r2, r2, r0
	orr	r3, r3, ip, asl #8
	orrs	r8, r2, r8, asl #24
	orr	r3, r3, r1
	moveq	r2, #1
	movne	r2, #0
	orrs	r3, r3, r9, asl #24
	str	r3, [sp, #8]
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, r3
	bne	.L16425
	ldrh	r3, [r4, #176]
	cmp	r8, r3
	str	r3, [sp, #16]
	bcc	.L16425
	cmp	r3, #0
	beq	.L16546
	ldr	ip, [sp, #8]
	mov	r1, #208
	ldr	r2, [sp, #16]
	add	r3, ip, #1
	mla	r0, r2, ip, ip
	add	r2, r3, ip, lsl #1
	mov	r9, r3, asl #2
	mov	r7, r2, asl #2
	add	r0, r0, ip
	add	r0, r3, r0, lsl #1
	mov	r0, r0, asl #2
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #12]
	beq	.L16547
	add	r1, r3, r9
	mov	r0, r3
	ldr	r3, [sp, #8]
	mov	r2, r1
.L16430:
	subs	r3, r3, #1
	str	r2, [r0], #4
	add	r2, r2, #8
	bne	.L16430
	ldr	r2, [sp, #12]
	sub	r0, fp, #16
	add	r10, r5, #16
	cmp	r0, #2
	add	ip, r2, r9
	add	r9, r2, r7
	str	r3, [ip, #-4]
	bls	.L16431
	add	r3, r1, #8
	str	r4, [sp, #20]
	mov	r4, r3
	str	fp, [sp, #24]
.L16432:
	ldrb	ip, [r10, #1]	@ zero_extendqisi2
	sub	r7, r0, #2
	ldrb	r1, [r10], #2	@ zero_extendqisi2
	str	r9, [r4, #-4]
	ldr	fp, [sp, #16]
	orr	r1, r1, ip, asl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L16434
.L16549:
	cmp	fp, #0
	beq	.L16433
	str	r10, [r9, #4]
	sub	fp, fp, #1
	add	r9, r9, #8
.L16433:
	subs	r8, r8, #1
	rsb	r7, r0, r7
	add	r3, r0, #1
	sub	r7, r7, #1
	add	r10, r10, r3
	beq	.L16548
.L16434:
	mov	r1, r7
	mov	r0, r10
	bl	strnlen(PLT)
	cmp	r7, r0
	bne	.L16549
.L16431:
	ldr	r0, [sp, #12]
	bl	kfree(PLT)
.L16425:
	mov	r0, r5
	mvn	r7, #21
	bl	kfree(PLT)
	b	.L16411
.L16458:
	mov	r9, r2
	mvn	r7, #2
	b	.L16459
.L16545:
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L16460
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	mvneq	r7, #2
	beq	.L16411
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r7, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #96]
	b	.L16411
.L16417:
	mvn	r7, #21
.L16419:
	mov	r0, r5
	bl	kfree(PLT)
	b	.L16411
.L16421:
	ldr	r2, [sp, #8]
	orrs	r2, r8, r2
	rsbne	ip, r3, r9
	beq	.L16417
.L16423:
	cmp	ip, #0
	bne	.L16417
	ldr	r3, [sp, #12]
	str	ip, [r4, #160]
	str	r5, [r4, #144]
	str	r8, [r4, #168]
	str	ip, [r4, #172]
	add	r7, r3, r7
	ldr	r3, [sp, #8]
	str	r7, [r4, #152]
	str	r7, [r4, #148]
	str	r3, [r4, #164]
.L16473:
	mov	r3, #1
	mov	r7, fp
	str	r3, [r4, #92]
	b	.L16411
.L16475:
	mvn	r0, #42
	b	.L16498
.L16478:
	mvn	r7, #21
	b	.L16411
.L16460:
	ldrh	r3, [r4, #114]
	mov	r0, r10
	cmp	fp, r3
	movcc	r7, fp
	movcs	r7, r3
	bl	_raw_spin_unlock_irq(PLT)
	mov	r1, r7
	mov	r0, r9
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r9, r0
	movhi	r7, r0
	bhi	.L16411
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
.L16462:
#APP
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r5]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r5]

@ 0 "" 2
	cmp	r3, #0
	bne	.L16462
#APP
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #2
	beq	.L16538
	ldr	r5, [r4, #28]
	mov	r0, r10
	ldrh	r3, [r4, #114]
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r9, #0
	str	r9, [r5]
	str	r7, [r5, #4]
	beq	.L16550
.L16465:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r5
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L16464
	add	r0, r4, #32
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L16551
	ldr	r7, [r4, #48]
	str	r0, [r4, #96]
	b	.L16464
.L16548:
	ldr	r3, [sp, #8]
	strb	r8, [r9]
	mov	r0, r7
	str	r8, [r9, #4]
	add	r9, r9, #8
	subs	r3, r3, #1
	str	r3, [sp, #8]
	beq	.L16552
	cmp	r0, #2
	add	r4, r4, #8
	bhi	.L16432
	b	.L16431
.L16546:
	mov	r0, r5
	bl	kfree(PLT)
.L16427:
	ldrh	r3, [r4, #180]
	movw	r1, #32976
	mov	r0, r3, asl #6
	str	r3, [sp, #12]
	sub	r0, r0, r3, asl #3
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #32]
	beq	.L16445
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L16436
	ldr	r3, [sp, #32]
	mov	r5, #1
	str	fp, [sp, #36]
	ldr	r7, .L16558+20
	add	r2, r3, #48
	mov	r8, r3
	ldr	r3, .L16558+24
.LPIC5112:
	add	r7, pc, r7
	str	r2, [sp, #8]
	ldr	r2, .L16558+28
	add	r7, r7, #4016
	add	r7, r7, #4
.LPIC5117:
	add	r3, pc, r3
	add	r3, r3, #920
.LPIC5113:
	add	r2, pc, r2
	str	r3, [sp, #28]
	str	r2, [sp, #16]
	ldr	r2, .L16558+32
.LPIC5115:
	add	r2, pc, r2
	str	r2, [sp, #20]
	ldr	r2, .L16558+36
.LPIC5116:
	add	r2, pc, r2
	str	r2, [sp, #24]
.L16470:
	mov	r2, r7
	ldr	r1, [sp, #16]
	mov	r0, r8
	str	r4, [r8, #36]
	bl	__mutex_init(PLT)
	ldr	r1, [sp, #20]
	mov	r2, r7
	add	r0, r8, #20
	bl	__init_waitqueue_head(PLT)
	ldr	r9, [sp, #8]
	mov	r2, r5
	ldr	r1, [sp, #24]
	mov	r0, r9
	bl	sprintf(PLT)
	ldr	fp, [r4, #192]
	mov	r1, r9
	ldr	r0, [fp, #60]
	ldr	r9, [fp, #616]
	bl	d_alloc_name(PLT)
	subs	r10, r0, #0
	beq	.L16437
	mov	r0, fp
	bl	new_inode(PLT)
	subs	fp, r0, #0
	beq	.L16438
	add	r0, sp, #40
	add	r5, r5, #1
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [fp, #40]
	ldrh	r0, [r9, #196]
	ldr	r1, [sp, #28]
	ldrd	r2, [sp, #40]
	strh	r0, [fp]	@ movhi
	ldr	r0, [r9, #200]
	cmp	r1, #0
	str	r0, [fp, #4]
	ldr	r0, [r9, #204]
	strd	r2, [fp, #52]
	strd	r2, [fp, #60]
	strd	r2, [fp, #68]
	movne	r3, r1
	mov	r1, fp
	str	r8, [fp, #328]
	strne	r3, [fp, #200]
	str	r0, [fp, #8]
	mov	r0, r10
	bl	d_instantiate(PLT)
	mov	r0, r10
	bl	d_rehash(PLT)
	ldr	r3, [sp, #12]
	cmn	r8, #44
	add	r8, r8, #56
	strne	r10, [r8, #-12]
	cmp	r3, r5
	bcs	.L16470
	ldr	fp, [sp, #36]
.L16436:
	ldr	r2, [sp, #32]
	mov	r3, #2
	mov	r0, r6
	str	r3, [r4, #92]
	str	r2, [r4, #208]
	bl	mutex_unlock(PLT)
	ldr	r3, .L16558+40
.LPIC5119:
	add	r3, pc, r3
	ldr	r6, [r3, #1984]
	ldr	r5, [r3, #1968]
	cmp	r6, #0
	beq	.L16483
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldr	r1, [r6, #8]
	mov	r0, r4
	bl	functionfs_bind(PLT)
	subs	r7, r0, #0
	bne	.L16553
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	mov	r2, #1
	stmib	r5, {r4, r6}
	strb	r2, [r5]
	cmp	r3, #0
	bne	.L16554
.L16450:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L16448:
	mov	r0, #0
	add	r1, r4, #128
	bl	_set_bit(PLT)
	mov	r0, fp
	b	.L16498
.L16438:
	mov	r0, r10
	bl	dput(PLT)
.L16437:
	subs	r5, r5, #1
	beq	.L16468
	ldr	r7, [sp, #32]
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L16441
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L16441
	mov	r8, #0
	b	.L16442
.L16555:
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L16441
.L16442:
	ldr	r0, [r7, #44]
	cmp	r0, #0
	beq	.L16443
	bl	d_delete(PLT)
	ldr	r0, [r7, #44]
	bl	dput(PLT)
	str	r8, [r7, #44]
.L16443:
	subs	r5, r5, #1
	add	r7, r7, #56
	beq	.L16468
	ldr	r3, [r7]
	cmp	r3, #1
	beq	.L16555
.L16441:
#APP
@ 1539 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1540, 0
.popsection
@ 0 "" 2
.L16468:
	ldr	r0, [sp, #32]
	bl	kfree(PLT)
.L16445:
	mov	r3, #3
	mvn	r7, #11
	str	r3, [r4, #92]
	b	.L16411
.L16479:
	mov	r7, r2
	b	.L16418
.L16480:
	mov	r3, r8
	mov	r2, #8
	str	r8, [sp, #12]
	b	.L16420
.L16481:
	mov	r7, r3
	b	.L16419
.L16547:
	mov	r0, r5
	mvn	r7, #11
	bl	kfree(PLT)
	b	.L16411
.L16554:
	ldr	r3, [r6, #20]
	ldr	r7, [r6, #8]
	cmp	r3, #0
	beq	.L16556
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r6, #20]
	bne	.L16450
	mov	r10, r6
	ldr	r5, [r10, #508]!
	cmp	r10, r5
	sub	r5, r5, #120
	beq	.L16455
	ldr	r9, .L16558+44
.LPIC5122:
	add	r9, pc, r9
.L16454:
	mov	r2, r9
	mov	r1, r5
	mov	r0, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16557
	ldr	r5, [r5, #120]
	cmp	r10, r5
	sub	r5, r5, #120
	bne	.L16454
.L16455:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16450
.L16553:
	mov	r0, r8
	bl	mutex_unlock(PLT)
	cmp	r7, #0
	movlt	r0, r7
	bge	.L16448
.L16446:
	mov	r3, #3
	str	r3, [r4, #92]
	b	.L16498
.L16550:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L16465
.L16551:
	ldr	r3, [r4]
	mov	r1, r5
	mvn	r7, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L16464
.L16482:
	mov	r7, r0
	b	.L16419
.L16552:
	cmp	r7, #0
	ldr	r4, [sp, #20]
	ldr	fp, [sp, #24]
	bne	.L16431
	ldr	r3, [sp, #12]
	str	r5, [r4, #184]
	str	r3, [r4, #188]
	b	.L16427
.L16483:
	mvn	r0, #18
	b	.L16446
.L16556:
	ldr	r0, .L16558+48
	mov	r1, #500
.LPIC5121:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L16450
.L16557:
	ldr	r2, .L16558+52
	mov	r3, r0
	ldr	r0, .L16558+56
.LPIC5123:
	add	r2, pc, r2
	sub	r2, r2, #1456
.LPIC5125:
	add	r0, pc, r0
	mov	r1, r2
	bl	printk(PLT)
	b	.L16450
.L16559:
	.align	2
.L16558:
	.word	.LC986-(.LPIC5107+8)
	.word	__ffs_data_do_entity-(.LPIC5108+8)
	.word	__ffs_data_do_entity-(.LPIC5109+8)
	.word	__ffs_data_do_entity-(.LPIC5110+8)
	.word	.LC987-(.LPIC5111+8)
	.word	.LANCHOR4-(.LPIC5112+8)
	.word	.LANCHOR6-(.LPIC5117+8)
	.word	.LC988-(.LPIC5113+8)
	.word	.LC989-(.LPIC5115+8)
	.word	.LC990-(.LPIC5116+8)
	.word	.LANCHOR0-(.LPIC5119+8)
	.word	android_bind_config-(.LPIC5122+8)
	.word	.LC981-(.LPIC5121+8)
	.word	.LANCHOR9-(.LPIC5123+8)
	.word	.LC982-(.LPIC5125+8)
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
.LANCHOR3 = . + 0
.LANCHOR9 = . + 8184
	.type	__func__.38484, %object
	.size	__func__.38484, 24
__func__.38484:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.49277, %object
	.size	__func__.49277, 14
__func__.49277:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49958, %object
	.size	__func__.49958, 21
__func__.49958:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49964, %object
	.size	__func__.49964, 21
__func__.49964:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.51566, %object
	.size	__func__.51566, 24
__func__.51566:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56725, %object
	.size	__func__.56725, 13
__func__.56725:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.57042, %object
	.size	__func__.57042, 21
__func__.57042:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57303, %object
	.size	__func__.57303, 25
__func__.57303:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57309, %object
	.size	__func__.57309, 25
__func__.57309:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57687, %object
	.size	__func__.57687, 27
__func__.57687:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57679, %object
	.size	__func__.57679, 28
__func__.57679:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61614, %object
	.size	__func__.61614, 21
__func__.61614:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61784, %object
	.size	__func__.61784, 23
__func__.61784:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61860, %object
	.size	__func__.61860, 14
__func__.61860:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62922, %object
	.size	__func__.62922, 10
__func__.62922:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.62878, %object
	.size	__func__.62878, 22
__func__.62878:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.63994, %object
	.size	__func__.63994, 31
__func__.63994:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.64039, %object
	.size	__func__.64039, 24
__func__.64039:
	.ascii	"android_enable_function\000"
	.type	__func__.63879, %object
	.size	__func__.63879, 23
__func__.63879:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.57818, %object
	.size	__func__.57818, 21
__func__.57818:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.57808, %object
	.size	__func__.57808, 18
__func__.57808:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.38911, %object
	.size	__func__.38911, 23
__func__.38911:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57093, %object
	.size	__func__.57093, 17
__func__.57093:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57205, %object
	.size	__func__.57205, 13
__func__.57205:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.49081, %object
	.size	__func__.49081, 16
__func__.49081:
	.ascii	"gsdio_open_work\000"
	.type	dirletter.46798, %object
	.size	dirletter.46798, 4
dirletter.46798:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.63869, %object
	.size	__func__.63869, 22
__func__.63869:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.52553, %object
	.size	__func__.52553, 26
__func__.52553:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48989, %object
	.size	__func__.48989, 21
__func__.48989:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.49057, %object
	.size	__func__.49057, 24
__func__.49057:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.61663, %object
	.size	__func__.61663, 29
__func__.61663:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61685, %object
	.size	__func__.61685, 28
__func__.61685:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61702, %object
	.size	__func__.61702, 17
__func__.61702:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.53060, %object
	.size	__func__.53060, 19
__func__.53060:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.50355, %object
	.size	__func__.50355, 24
__func__.50355:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.50327, %object
	.size	__func__.50327, 23
__func__.50327:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.54961, %object
	.size	__func__.54961, 16
__func__.54961:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.37405, %object
	.size	__func__.37405, 24
__func__.37405:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49825, %object
	.size	__func__.49825, 23
__func__.49825:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49892, %object
	.size	__func__.49892, 19
__func__.49892:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.52890, %object
	.size	__func__.52890, 25
__func__.52890:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52933, %object
	.size	__func__.52933, 22
__func__.52933:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.50424, %object
	.size	__func__.50424, 26
__func__.50424:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49938, %object
	.size	__func__.49938, 14
__func__.49938:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49907, %object
	.size	__func__.49907, 20
__func__.49907:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57834, %object
	.size	__func__.57834, 15
__func__.57834:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57213, %object
	.size	__func__.57213, 11
__func__.57213:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38507, %object
	.size	__func__.38507, 24
__func__.38507:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.38530, %object
	.size	__func__.38530, 25
__func__.38530:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.57192, %object
	.size	__func__.57192, 11
__func__.57192:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56956, %object
	.size	__func__.56956, 25
__func__.56956:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56946, %object
	.size	__func__.56946, 30
__func__.56946:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.46475, %object
	.size	__func__.46475, 19
__func__.46475:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.49332, %object
	.size	__func__.49332, 13
__func__.49332:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.49299, %object
	.size	__func__.49299, 13
__func__.49299:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.64232, %object
	.size	__func__.64232, 11
__func__.64232:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64147, %object
	.size	__func__.64147, 12
__func__.64147:
	.ascii	"enable_show\000"
	.type	__func__.51652, %object
	.size	__func__.51652, 18
__func__.51652:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.49415, %object
	.size	__func__.49415, 18
__func__.49415:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.50091, %object
	.size	__func__.50091, 19
__func__.50091:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.49946, %object
	.size	__func__.49946, 22
__func__.49946:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49952, %object
	.size	__func__.49952, 22
__func__.49952:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57316, %object
	.size	__func__.57316, 23
__func__.57316:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57849, %object
	.size	__func__.57849, 14
__func__.57849:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38551, %object
	.size	__func__.38551, 27
__func__.38551:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.57854, %object
	.size	__func__.57854, 17
__func__.57854:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57241, %object
	.size	__func__.57241, 14
__func__.57241:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56185, %object
	.size	__func__.56185, 20
__func__.56185:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.58057, %object
	.size	__func__.58057, 12
__func__.58057:
	.ascii	"tx_complete\000"
	.type	__func__.56416, %object
	.size	__func__.56416, 13
__func__.56416:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	__func__.62665, %object
	.size	__func__.62665, 29
__func__.62665:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.62656, %object
	.size	__func__.62656, 20
__func__.62656:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.62661, %object
	.size	__func__.62661, 26
__func__.62661:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.62603, %object
	.size	__func__.62603, 18
__func__.62603:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.62623, %object
	.size	__func__.62623, 34
__func__.62623:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.63859, %object
	.size	__func__.63859, 27
__func__.63859:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.63842, %object
	.size	__func__.63842, 26
__func__.63842:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.62970, %object
	.size	__func__.62970, 13
__func__.62970:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63052, %object
	.size	__func__.63052, 9
__func__.63052:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64388, %object
	.size	__func__.64388, 11
__func__.64388:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64378, %object
	.size	__func__.64378, 23
__func__.64378:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64526, %object
	.size	__func__.64526, 21
__func__.64526:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64130, %object
	.size	__func__.64130, 16
__func__.64130:
	.ascii	"functions_store\000"
	.type	__func__.63166, %object
	.size	__func__.63166, 13
__func__.63166:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.46354, %object
	.size	__func__.46354, 13
__func__.46354:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.48979, %object
	.size	__func__.48979, 20
__func__.48979:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.49048, %object
	.size	__func__.49048, 14
__func__.49048:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.50727, %object
	.size	__func__.50727, 16
__func__.50727:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.51573, %object
	.size	__func__.51573, 25
__func__.51573:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.52562, %object
	.size	__func__.52562, 27
__func__.52562:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57395, %object
	.size	__func__.57395, 17
__func__.57395:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.38875, %object
	.size	__func__.38875, 15
__func__.38875:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.38882, %object
	.size	__func__.38882, 18
__func__.38882:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38902, %object
	.size	__func__.38902, 20
__func__.38902:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.57197, %object
	.size	__func__.57197, 10
__func__.57197:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.62646, %object
	.size	__func__.62646, 36
__func__.62646:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.62634, %object
	.size	__func__.62634, 37
__func__.62634:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.62613, %object
	.size	__func__.62613, 33
__func__.62613:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63102, %object
	.size	__func__.63102, 22
__func__.63102:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.51585, %object
	.size	__func__.51585, 21
__func__.51585:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58232, %object
	.size	__func__.58232, 12
__func__.58232:
	.ascii	"gether_init\000"
	.type	__func__.50384, %object
	.size	__func__.50384, 29
__func__.50384:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.64591, %object
	.size	__func__.64591, 5
__func__.64591:
	.ascii	"init\000"
	.space	3
	.type	__func__.62496, %object
	.size	__func__.62496, 18
__func__.62496:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.52875, %object
	.size	__func__.52875, 26
__func__.52875:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37513, %object
	.size	__func__.37513, 22
__func__.37513:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.63175, %object
	.size	__func__.63175, 24
__func__.63175:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.49104, %object
	.size	__func__.49104, 15
__func__.49104:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.49398, %object
	.size	__func__.49398, 18
__func__.49398:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.50028, %object
	.size	__func__.50028, 25
__func__.50028:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57325, %object
	.size	__func__.57325, 29
__func__.57325:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63060, %object
	.size	__func__.63060, 18
__func__.63060:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.52114, %object
	.size	__func__.52114, 21
__func__.52114:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52570, %object
	.size	__func__.52570, 23
__func__.52570:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.53032, %object
	.size	__func__.53032, 23
__func__.53032:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.57226, %object
	.size	__func__.57226, 10
__func__.57226:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.54034, %object
	.size	__func__.54034, 22
__func__.54034:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.54045, %object
	.size	__func__.54045, 11
__func__.54045:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53978, %object
	.size	__func__.53978, 22
__func__.53978:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.53085, %object
	.size	__func__.53085, 33
__func__.53085:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.50370, %object
	.size	__func__.50370, 34
__func__.50370:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38891, %object
	.size	__func__.38891, 26
__func__.38891:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.61883, %object
	.size	__func__.61883, 16
__func__.61883:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.49347, %object
	.size	__func__.49347, 19
__func__.49347:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52151, %object
	.size	__func__.52151, 17
__func__.52151:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51640, %object
	.size	__func__.51640, 17
__func__.51640:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.49353, %object
	.size	__func__.49353, 20
__func__.49353:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.57291, %object
	.size	__func__.57291, 26
__func__.57291:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57297, %object
	.size	__func__.57297, 26
__func__.57297:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.53070, %object
	.size	__func__.53070, 20
__func__.53070:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.52159, %object
	.size	__func__.52159, 18
__func__.52159:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.46470, %object
	.size	__func__.46470, 18
__func__.46470:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.51992, %object
	.size	__func__.51992, 24
__func__.51992:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.52021, %object
	.size	__func__.52021, 23
__func__.52021:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.52070, %object
	.size	__func__.52070, 20
__func__.52070:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.62536, %object
	.size	__func__.62536, 18
__func__.62536:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.62525, %object
	.size	__func__.62525, 37
__func__.62525:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.37429, %object
	.size	__func__.37429, 26
__func__.37429:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.57064, %object
	.size	__func__.57064, 11
__func__.57064:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.25445, %object
	.size	__func__.25445, 21
__func__.25445:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.57156, %object
	.size	__func__.57156, 10
__func__.57156:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.46448, %object
	.size	__func__.46448, 10
__func__.46448:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.50055, %object
	.size	__func__.50055, 22
__func__.50055:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.49254, %object
	.size	__func__.49254, 15
__func__.49254:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.49358, %object
	.size	__func__.49358, 14
__func__.49358:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.37351, %object
	.size	__func__.37351, 20
__func__.37351:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37574, %object
	.size	__func__.37574, 21
__func__.37574:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.50607, %object
	.size	__func__.50607, 24
__func__.50607:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.38359, %object
	.size	__func__.38359, 16
__func__.38359:
	.ascii	"transport_store\000"
	.type	__func__.53955, %object
	.size	__func__.53955, 16
__func__.53955:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.50041, %object
	.size	__func__.50041, 18
__func__.50041:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49982, %object
	.size	__func__.49982, 14
__func__.49982:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.64432, %object
	.size	__func__.64432, 19
__func__.64432:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.57029, %object
	.size	__func__.57029, 21
__func__.57029:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57019, %object
	.size	__func__.57019, 15
__func__.57019:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.53925, %object
	.size	__func__.53925, 15
__func__.53925:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.38212, %object
	.size	__func__.38212, 27
__func__.38212:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	__func__.50619, %object
	.size	__func__.50619, 34
__func__.50619:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57051, %object
	.size	__func__.57051, 19
__func__.57051:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.58027, %object
	.size	__func__.58027, 13
__func__.58027:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.55429, %object
	.size	__func__.55429, 16
__func__.55429:
	.ascii	"acc_ctrlrequest\000"
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.25098, %object
	.size	__func__.25098, 11
__func__.25098:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25189, %object
	.size	__func__.25189, 11
__func__.25189:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25404, %object
	.size	__func__.25404, 16
__func__.25404:
	.ascii	"composite_setup\000"
	.type	__func__.37585, %object
	.size	__func__.37585, 19
__func__.37585:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53868, %object
	.size	__func__.53868, 22
__func__.53868:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.62670, %object
	.size	__func__.62670, 33
__func__.62670:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.56781, %object
	.size	__func__.56781, 12
__func__.56781:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57131, %object
	.size	__func__.57131, 10
__func__.57131:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61915, %object
	.size	__func__.61915, 13
__func__.61915:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53892, %object
	.size	__func__.53892, 19
__func__.53892:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.25250, %object
	.size	__func__.25250, 18
__func__.25250:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53626, %object
	.size	__func__.53626, 12
__func__.53626:
	.ascii	"adb_release\000"
	.type	__func__.63315, %object
	.size	__func__.63315, 20
__func__.63315:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63272, %object
	.size	__func__.63272, 27
__func__.63272:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.45459, %object
	.size	__func__.45459, 13
__func__.45459:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.25481, %object
	.size	__func__.25481, 15
__func__.25481:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.64420, %object
	.size	__func__.64420, 13
__func__.64420:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.63968, %object
	.size	__func__.63968, 23
__func__.63968:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63593, %object
	.size	__func__.63593, 26
__func__.63593:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.63227, %object
	.size	__func__.63227, 20
__func__.63227:
	.ascii	"ffs_function_enable\000"
	.type	__func__.64556, %object
	.size	__func__.64556, 14
__func__.64556:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63116, %object
	.size	__func__.63116, 26
__func__.63116:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25525, %object
	.size	__func__.25525, 29
__func__.25525:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46950, %object
	.size	__func__.46950, 17
__func__.46950:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46880, %object
	.size	__func__.46880, 17
__func__.46880:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.46362, %object
	.size	__func__.46362, 14
__func__.46362:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.46366, %object
	.size	__func__.46366, 15
__func__.46366:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.46373, %object
	.size	__func__.46373, 17
__func__.46373:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.46769, %object
	.size	__func__.46769, 13
__func__.46769:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26006, %object
	.size	__func__.26006, 14
__func__.26006:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26024, %object
	.size	__func__.26024, 15
__func__.26024:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.63576, %object
	.size	__func__.63576, 26
__func__.63576:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.30935, %object
	.size	__func__.30935, 25
__func__.30935:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.38964, %object
	.size	__func__.38964, 12
__func__.38964:
	.ascii	"frmnet_bind\000"
	.type	__func__.48015, %object
	.size	__func__.48015, 12
__func__.48015:
	.ascii	"gs_start_tx\000"
	.type	__func__.48077, %object
	.size	__func__.48077, 18
__func__.48077:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.48115, %object
	.size	__func__.48115, 12
__func__.48115:
	.ascii	"gs_start_io\000"
	.type	__func__.48294, %object
	.size	__func__.48294, 14
__func__.48294:
	.ascii	"gserial_setup\000"
	.space	2
	.type	__func__.48902, %object
	.size	__func__.48902, 16
__func__.48902:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48934, %object
	.size	__func__.48934, 15
__func__.48934:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48951, %object
	.size	__func__.48951, 12
__func__.48951:
	.ascii	"gsdio_write\000"
	.type	__func__.48961, %object
	.size	__func__.48961, 14
__func__.48961:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.49003, %object
	.size	__func__.49003, 19
__func__.49003:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.49014, %object
	.size	__func__.49014, 14
__func__.49014:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.49032, %object
	.size	__func__.49032, 15
__func__.49032:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.49041, %object
	.size	__func__.49041, 16
__func__.49041:
	.ascii	"gsdio_port_free\000"
	.type	__func__.49115, %object
	.size	__func__.49115, 17
__func__.49115:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.49128, %object
	.size	__func__.49128, 14
__func__.49128:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.49138, %object
	.size	__func__.49138, 17
__func__.49138:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.49195, %object
	.size	__func__.49195, 12
__func__.49195:
	.ascii	"gsdio_setup\000"
	.type	__func__.49424, %object
	.size	__func__.49424, 13
__func__.49424:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.49434, %object
	.size	__func__.49434, 16
__func__.49434:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.49531, %object
	.size	__func__.49531, 11
__func__.49531:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.49843, %object
	.size	__func__.49843, 18
__func__.49843:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.50211, %object
	.size	__func__.50211, 16
__func__.50211:
	.ascii	"gbam_disconnect\000"
	.type	__func__.50226, %object
	.size	__func__.50226, 13
__func__.50226:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.50236, %object
	.size	__func__.50236, 11
__func__.50236:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.38812, %object
	.size	__func__.38812, 15
__func__.38812:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.38827, %object
	.size	__func__.38827, 14
__func__.38827:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.50435, %object
	.size	__func__.50435, 18
__func__.50435:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.50456, %object
	.size	__func__.50456, 21
__func__.50456:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.50519, %object
	.size	__func__.50519, 16
__func__.50519:
	.ascii	"gsmd_ctrl_setup\000"
	.type	__func__.50634, %object
	.size	__func__.50634, 18
__func__.50634:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50644, %object
	.size	__func__.50644, 21
__func__.50644:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51597, %object
	.size	__func__.51597, 19
__func__.51597:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51615, %object
	.size	__func__.51615, 22
__func__.51615:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51678, %object
	.size	__func__.51678, 25
__func__.51678:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51687, %object
	.size	__func__.51687, 17
__func__.51687:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51669, %object
	.size	__func__.51669, 17
__func__.51669:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.52185, %object
	.size	__func__.52185, 22
__func__.52185:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.52201, %object
	.size	__func__.52201, 19
__func__.52201:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.52336, %object
	.size	__func__.52336, 25
__func__.52336:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.52345, %object
	.size	__func__.52345, 17
__func__.52345:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.52172, %object
	.size	__func__.52172, 22
__func__.52172:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52578, %object
	.size	__func__.52578, 21
__func__.52578:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52595, %object
	.size	__func__.52595, 24
__func__.52595:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52643, %object
	.size	__func__.52643, 19
__func__.52643:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52631, %object
	.size	__func__.52631, 24
__func__.52631:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	__func__.53108, %object
	.size	__func__.53108, 24
__func__.53108:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38770, %object
	.size	__func__.38770, 23
__func__.38770:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.53127, %object
	.size	__func__.53127, 21
__func__.53127:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38850, %object
	.size	__func__.38850, 15
__func__.38850:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38748, %object
	.size	__func__.38748, 20
__func__.38748:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.53209, %object
	.size	__func__.53209, 19
__func__.53209:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	__func__.53093, %object
	.size	__func__.53093, 24
__func__.53093:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.38997, %object
	.size	__func__.38997, 17
__func__.38997:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.38977, %object
	.size	__func__.38977, 19
__func__.38977:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.63422, %object
	.size	__func__.63422, 27
__func__.63422:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.63356, %object
	.size	__func__.63356, 25
__func__.63356:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.57773, %object
	.size	__func__.57773, 14
__func__.57773:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.56234, %object
	.size	__func__.56234, 18
__func__.56234:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56314, %object
	.size	__func__.56314, 17
__func__.56314:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57701, %object
	.size	__func__.57701, 26
__func__.57701:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.57722, %object
	.size	__func__.57722, 15
__func__.57722:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.57338, %object
	.size	__func__.57338, 26
__func__.57338:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.56970, %object
	.size	__func__.56970, 22
__func__.56970:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57358, %object
	.size	__func__.57358, 20
__func__.57358:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.57114, %object
	.size	__func__.57114, 13
__func__.57114:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56983, %object
	.size	__func__.56983, 20
__func__.56983:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57370, %object
	.size	__func__.57370, 17
__func__.57370:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57103, %object
	.size	__func__.57103, 13
__func__.57103:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56979, %object
	.size	__func__.56979, 17
__func__.56979:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57382, %object
	.size	__func__.57382, 15
__func__.57382:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57145, %object
	.size	__func__.57145, 17
__func__.57145:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56964, %object
	.size	__func__.56964, 15
__func__.56964:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.57118, %object
	.size	__func__.57118, 13
__func__.57118:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57122, %object
	.size	__func__.57122, 12
__func__.57122:
	.ascii	"mbim_resume\000"
	.type	__func__.57647, %object
	.size	__func__.57647, 19
__func__.57647:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57800, %object
	.size	__func__.57800, 28
__func__.57800:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.63662, %object
	.size	__func__.63662, 27
__func__.63662:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.63778, %object
	.size	__func__.63778, 25
__func__.63778:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58206, %object
	.size	__func__.58206, 15
__func__.58206:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.62938, %object
	.size	__func__.62938, 12
__func__.62938:
	.ascii	"ncm_set_alt\000"
	.type	__func__.56670, %object
	.size	__func__.56670, 17
__func__.56670:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56795, %object
	.size	__func__.56795, 19
__func__.56795:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.63669, %object
	.size	__func__.63669, 30
__func__.63669:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63473, %object
	.size	__func__.63473, 28
__func__.63473:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56680, %object
	.size	__func__.56680, 19
__func__.56680:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57741, %object
	.size	__func__.57741, 17
__func__.57741:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57656, %object
	.size	__func__.57656, 21
__func__.57656:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61408, %object
	.size	__func__.61408, 20
__func__.61408:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61381, %object
	.size	__func__.61381, 24
__func__.61381:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61392, %object
	.size	__func__.61392, 23
__func__.61392:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61673, %object
	.size	__func__.61673, 21
__func__.61673:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61438, %object
	.size	__func__.61438, 16
__func__.61438:
	.ascii	"u_audio_capture\000"
	.type	__func__.61653, %object
	.size	__func__.61653, 22
__func__.61653:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61424, %object
	.size	__func__.61424, 17
__func__.61424:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.61462, %object
	.size	__func__.61462, 20
__func__.61462:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61473, %object
	.size	__func__.61473, 13
__func__.61473:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61944, %object
	.size	__func__.61944, 18
__func__.61944:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62385, %object
	.size	__func__.62385, 24
__func__.62385:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.62413, %object
	.size	__func__.62413, 34
__func__.62413:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.62357, %object
	.size	__func__.62357, 27
__func__.62357:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.62581, %object
	.size	__func__.62581, 29
__func__.62581:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.62490, %object
	.size	__func__.62490, 17
__func__.62490:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62476, %object
	.size	__func__.62476, 18
__func__.62476:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.62441, %object
	.size	__func__.62441, 17
__func__.62441:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.62393, %object
	.size	__func__.62393, 25
__func__.62393:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.62427, %object
	.size	__func__.62427, 17
__func__.62427:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.63072, %object
	.size	__func__.63072, 25
__func__.63072:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63087, %object
	.size	__func__.63087, 13
__func__.63087:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63091, %object
	.size	__func__.63091, 26
__func__.63091:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63095, %object
	.size	__func__.63095, 14
__func__.63095:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.63110, %object
	.size	__func__.63110, 23
__func__.63110:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63124, %object
	.size	__func__.63124, 22
__func__.63124:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.63180, %object
	.size	__func__.63180, 33
__func__.63180:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64368, %object
	.size	__func__.64368, 14
__func__.64368:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.64171, %object
	.size	__func__.64171, 13
__func__.64171:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.63193, %object
	.size	__func__.63193, 15
__func__.63193:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.53619, %object
	.size	__func__.53619, 9
__func__.53619:
	.ascii	"adb_open\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	__modver,"aw",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	.data.rel.ro,"aw",%progbits
	.align	2
.LANCHOR6 = . + 0
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.data.unlikely,"aw",%progbits
.LANCHOR8 = . + 0
	.type	__warned.11076, %object
	.size	__warned.11076, 1
__warned.11076:
	.space	1
	.section	.data.rel.ro.local,"aw",%progbits
	.align	2
.LANCHOR5 = . + 0
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1083
	.word	.LC1084
	.word	.LC1085
	.word	.LC1084
	.space	8
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1080
	.word	.LC1081
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.section	.data.rel.local,"aw",%progbits
	.align	3
.LANCHOR0 = . + 0
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC629
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1082
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1070
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1059
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1096
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1075
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1074
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1066
	.word	mbim_fops
	.space	24
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1094
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1101
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1069
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC355
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC355
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1090
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1092
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1093
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1091
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1063
	.space	4
	.word	0
	.space	4
	.word	.LC1064
	.space	4
	.word	.LC1065
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1037
	.space	4
	.word	0
	.space	4
	.word	.LC1038
	.space	4
	.word	.LC1039
	.space	8
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1045
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1047
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC551
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC300
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1073
	.space	8
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1071
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1072
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1099
	.space	4
	.word	.LC1100
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1036
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC629
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1079
	.word	modem_fops
	.space	24
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.space	4
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC711
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1095
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1076
	.space	4
	.word	.LC1077
	.space	4
	.word	.LC1078
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	ops.54482, %object
	.size	ops.54482, 12
ops.54482:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1060
	.space	4
	.word	.LC1061
	.space	4
	.word	.LC1062
	.space	8
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1063
	.space	4
	.word	0
	.space	4
	.word	.LC1064
	.space	8
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1067
	.space	4
	.word	.LC1068
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1060
	.space	4
	.word	.LC1061
	.space	4
	.word	.LC1062
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1058
	.space	20
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1058
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1055
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1057
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1056
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1049
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1052
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1051
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1050
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1054
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1053
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1046
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1048
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC991
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC992
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC993
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC994
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC995
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC996
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC997
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC998
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC999
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC1000
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1001
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1002
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1003
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1004
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1005
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1006
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1007
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1008
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1009
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC711
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1010
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC613
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1011
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1012
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1013
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1014
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1015
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC883
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1016
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC827
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1017
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1018
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1019
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1020
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1021
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1022
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC616
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC549
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC617
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1023
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1024
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC922
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC866
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1025
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1026
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1027
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1028
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC704
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1029
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1030
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC552
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC706
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1031
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC974
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1032
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1033
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1034
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1035
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC508
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC548
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1040
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1041
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1042
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1086
	.space	4
	.space	4
	.word	.LC1087
	.space	4
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1088
	.space	4
	.word	9
	.word	.LC1089
	.space	4
	.word	10
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1097
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1095
	.space	8
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1098
	.space	8
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1098
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.data
	.align	2
.LANCHOR2 = . + 0
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	_rs.52554, %object
	.size	_rs.52554, 24
_rs.52554:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	_rs.52892, %object
	.size	_rs.52892, 24
_rs.52892:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52943, %object
	.size	_rs.52943, 24
_rs.52943:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	last_vote.63144, %object
	.size	last_vote.63144, 4
last_vote.63144:
	.word	-1
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	_rs.52026, %object
	.size	_rs.52026, 24
_rs.52026:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.52083, %object
	.size	_rs.52083, 24
_rs.52083:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	_rs.38210, %object
	.size	_rs.38210, 24
_rs.38210:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rl.53624, %object
	.size	rl.53624, 24
rl.53624:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rl.26001, %object
	.size	rl.26001, 24
rl.26001:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.26019, %object
	.size	rl.26019, 24
rl.26019:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	rl.64160, %object
	.size	rl.64160, 24
rl.64160:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.53617, %object
	.size	rl.53617, 24
rl.53617:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"TTY\000"
.LC1:
	.ascii	"SDIO\000"
	.space	3
.LC2:
	.ascii	"SMD\000"
.LC3:
	.ascii	"QTI\000"
.LC4:
	.ascii	"BAM\000"
.LC5:
	.ascii	"BAM2BAM\000"
.LC6:
	.ascii	"BAM2BAM_IPA\000"
.LC7:
	.ascii	"HSIC\000"
	.space	3
.LC8:
	.ascii	"HSUART\000"
	.space	1
.LC9:
	.ascii	"NONE\000"
	.space	3
.LC10:
	.ascii	"UNDEFINED\000"
	.space	2
.LC11:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC12:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC13:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC14:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC15:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC16:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC17:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC18:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs."
	.ascii	"c\000"
	.space	3
.LC19:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC20:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC21:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC22:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC23:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC24:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC25:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC26:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC27:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC28:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC29:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC30:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC31:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC32:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC33:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC34:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC35:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC36:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC37:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC38:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC39:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC40:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC41:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC42:
	.ascii	"<6>conn_gadget_release\012\000"
.LC43:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC44:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC45:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC46:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC47:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC48:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC49:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC50:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC51:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC52:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC53:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC54:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC55:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC56:
	.ascii	"<6>acc_release\012\000"
.LC57:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acc"
	.ascii	"essory.c\000"
.LC58:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC59:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC60:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC61:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC62:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC63:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC64:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC65:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC66:
	.ascii	"<6>mtp_release\012\000"
.LC67:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC68:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC69:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC70:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC71:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC72:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC73:
	.ascii	"<3>%s: response queue error: %d\000"
.LC74:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC75:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC76:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC77:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC78:
	.ascii	"%d\012\000"
.LC79:
	.ascii	"%01x\012\000"
	.space	2
.LC80:
	.ascii	"%u\012\000"
.LC81:
	.ascii	", H%c=%u\000"
	.space	3
.LC82:
	.ascii	"%s\015\012\000"
	.space	3
.LC83:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC84:
	.ascii	"%s\012\000"
.LC85:
	.ascii	"%d %d\012\000"
	.space	1
.LC86:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/netdevice."
	.ascii	"h\000"
	.space	3
.LC87:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC88:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC89:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC90:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC91:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC92:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC93:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC94:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC95:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC96:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC97:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC98:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC99:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC100:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC101:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC102:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC103:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC104:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC105:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC106:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC107:
	.ascii	"tty_flags: %lu\012\000"
.LC108:
	.ascii	"DTR_status: %d\012\000"
.LC109:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC110:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC111:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC112:
	.ascii	"HIGH\000"
	.space	3
.LC113:
	.ascii	"LOW\000"
.LC114:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC115:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC116:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC117:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC118:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC119:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC120:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC121:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC122:
	.ascii	"rmnet command error %d\012\000"
.LC123:
	.ascii	"rmnet control smd write failed\012\000"
.LC124:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC125:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC126:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC127:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC128:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC129:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC130:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC131:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC132:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC133:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC134:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC135:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC136:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC137:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC138:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC139:
	.ascii	"status\000"
	.space	1
.LC140:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC141:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC142:
	.ascii	"timestamp\000"
	.space	2
.LC143:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC144:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC145:
	.ascii	"usb_diag\000"
	.space	3
.LC146:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC147:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC148:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC149:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC150:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC151:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC152:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC153:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC154:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC155:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC156:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC157:
	.ascii	"<3>copying to user space failed\000"
.LC158:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC159:
	.ascii	"<3>%s: copying to user space failed\000"
.LC160:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC161:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC162:
	.ascii	"<6>%s: Received command %d\012\000"
.LC163:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC164:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC165:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC166:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC167:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC168:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC169:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC170:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC171:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC172:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC173:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC174:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC175:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC176:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC177:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC178:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC179:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC180:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC181:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC182:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC183:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC184:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC185:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC186:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC187:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC188:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC189:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC190:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC191:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC192:
	.ascii	"g_ether\000"
.LC193:
	.ascii	"29-May-2008\000"
.LC194:
	.ascii	"g_qc_ether\000"
	.space	1
.LC195:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC196:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC197:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mas"
	.ascii	"s_storage.c\000"
	.space	1
.LC198:
	.ascii	"error in submission: %s --> %d\012\000"
.LC199:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC200:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC201:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC202:
	.ascii	"CONFIGURED\000"
	.space	1
.LC203:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC204:
	.ascii	"CONNECTED\000"
	.space	2
.LC205:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC206:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC207:
	.ascii	"%s,\000"
.LC208:
	.ascii	"%s\000"
	.space	1
.LC209:
	.ascii	"%04x\012\000"
	.space	2
.LC210:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC211:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC212:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC213:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC214:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC215:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC216:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC217:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC218:
	.ascii	"&port->read_wq\000"
	.space	1
.LC219:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC220:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC221:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC222:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC223:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC224:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC225:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC226:
	.ascii	"f_mtp\000"
	.space	2
.LC227:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC228:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC229:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC230:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC231:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC232:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC233:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC234:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC235:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC236:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC237:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC238:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC239:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC240:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC241:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC242:
	.ascii	"y\000"
	.space	2
.LC243:
	.ascii	"n\000"
	.space	2
.LC244:
	.ascii	"?\000"
	.space	2
.LC245:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC246:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC247:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC248:
	.ascii	"connected\000"
	.space	2
.LC249:
	.ascii	"disconnected\000"
	.space	3
.LC250:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC251:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC252:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC253:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC254:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC255:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC256:
	.ascii	"using only first %d blocks\012\000"
.LC257:
	.ascii	"file too small: %s\012\000"
.LC258:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC259:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC260:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC261:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC262:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC263:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC264:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC265:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC266:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC267:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC268:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC269:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC270:
	.ascii	"%d\000"
	.space	1
.LC271:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC272:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC273:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC274:
	.ascii	"%28s\000"
	.space	3
.LC275:
	.ascii	"%04x\000"
	.space	3
.LC276:
	.ascii	"%255s\000"
	.space	2
.LC277:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC278:
	.ascii	"HEAD:\000"
	.space	2
.LC279:
	.ascii	"<6>\000"
.LC280:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC281:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC282:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC283:
	.ascii	"Wrong NDP SIGN\012\000"
.LC284:
	.ascii	"Bad NDP length: %x\012\000"
.LC285:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC286:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC287:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC288:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC289:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC290:
	.ascii	"ACCESSORY=START\000"
.LC291:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC292:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC293:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC294:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC295:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC296:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC297:
	.ascii	":\000"
	.space	2
.LC298:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC299:
	.ascii	",\000"
	.space	2
.LC300:
	.ascii	"ffs\000"
.LC301:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC302:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC303:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC304:
	.ascii	"USB_STATE=CONNECTED\000"
.LC305:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC306:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC307:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC308:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC309:
	.ascii	"low\000"
.LC310:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC311:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC312:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC313:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC314:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC315:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC316:
	.ascii	"<6>%s (%s)\012\000"
.LC317:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC318:
	.ascii	"SWITCH_STATE=%s\000"
.LC319:
	.ascii	"usb_msg\000"
.LC320:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC321:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC322:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC323:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC324:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC325:
	.ascii	"<3>%s on a NULL device\012\000"
.LC326:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC327:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC328:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC329:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC330:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC331:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC332:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC333:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC334:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC335:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC336:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC337:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC338:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC339:
	.ascii	"uether\000"
	.space	1
.LC340:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC341:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC342:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC343:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC344:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC345:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC346:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC347:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC348:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC349:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC350:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC351:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC352:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC353:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC354:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC355:
	.ascii	"\000"
	.space	3
.LC356:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC357:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC358:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC359:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC360:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC361:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC362:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC363:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC364:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC365:
	.ascii	"&bulk_dev->write_wq\000"
.LC366:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC367:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC368:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC369:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC370:
	.ascii	"dwc3-gadget\000"
.LC371:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC372:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC373:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC374:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC375:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC376:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC377:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC378:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC379:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC380:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC381:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC382:
	.ascii	"ep0\000"
.LC383:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/compo"
	.ascii	"site.c\000"
	.space	2
.LC384:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC385:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC386:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC387:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC388:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC389:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC390:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC391:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC392:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC393:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC394:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC395:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC396:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC397:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC398:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC399:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC400:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC401:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ser"
	.ascii	"ial.c\000"
	.space	3
.LC402:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC403:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC404:
	.ascii	"<7>usb: %s\012\000"
.LC405:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC406:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC407:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC408:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC409:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC410:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC411:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC412:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC413:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC414:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC415:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC416:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC417:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC418:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC419:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC420:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC421:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC422:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC423:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC424:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC425:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC426:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC427:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC428:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC429:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC430:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC431:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC432:
	.ascii	"<3>%s: undefined transport\012\000"
.LC433:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC434:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC435:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC436:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC437:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC438:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC439:
	.ascii	"pdrv %s register failed %d\012\000"
.LC440:
	.ascii	"lun%d\000"
	.space	2
.LC441:
	.ascii	"Linux\000"
	.space	2
.LC442:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC443:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC444:
	.ascii	"file-storage\000"
	.space	3
.LC445:
	.ascii	"(no medium)\000"
.LC446:
	.ascii	"(error)\000"
.LC447:
	.ascii	"removable \000"
	.space	1
.LC448:
	.ascii	"read only \000"
	.space	1
.LC449:
	.ascii	"CD-ROM \000"
.LC450:
	.ascii	"lun\000"
.LC451:
	.ascii	"&common->filesem\000"
	.space	3
.LC452:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC453:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC454:
	.ascii	"net2280\000"
.LC455:
	.ascii	"dummy_udc\000"
	.space	2
.LC456:
	.ascii	"goku_udc\000"
	.space	3
.LC457:
	.ascii	"omap_udc\000"
	.space	3
.LC458:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC459:
	.ascii	"s3c2410_udc\000"
.LC460:
	.ascii	"at91_udc\000"
	.space	3
.LC461:
	.ascii	"imx_udc\000"
.LC462:
	.ascii	"musb-hdrc\000"
	.space	2
.LC463:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC464:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC465:
	.ascii	"amd5536udc\000"
	.space	1
.LC466:
	.ascii	"m66592_udc\000"
	.space	1
.LC467:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC468:
	.ascii	"ci13xxx_pci\000"
.LC469:
	.ascii	"langwell_udc\000"
	.space	3
.LC470:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC471:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC472:
	.ascii	"pch_udc\000"
.LC473:
	.ascii	"ci13xxx_msm\000"
.LC474:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC475:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC476:
	.ascii	"net2272\000"
.LC477:
	.ascii	"msm72k_udc\000"
	.space	1
.LC478:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC479:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC480:
	.ascii	"SAMSUNG\000"
.LC481:
	.ascii	"&x->wait\000"
	.space	3
.LC482:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC483:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC484:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC485:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC486:
	.ascii	"controller '%s' not recognized\012\000"
.LC487:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC488:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC489:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC490:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC491:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC492:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC493:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC494:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC495:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC496:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC497:
	.ascii	"rmnet_mux command error %d\012\000"
.LC498:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC499:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC500:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC501:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC502:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC503:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC504:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC505:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC506:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC507:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC508:
	.ascii	"ncm\000"
.LC509:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC510:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC511:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC512:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC513:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC514:
	.ascii	"battery\000"
.LC515:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC516:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC517:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC518:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC519:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC520:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC521:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC522:
	.ascii	"unconfigured\000"
	.space	3
.LC523:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/kref.h\000"
.LC524:
	.ascii	"ep-e\000"
	.space	3
.LC525:
	.ascii	"ep-f\000"
	.space	3
.LC526:
	.ascii	"ep3-bulk\000"
	.space	3
.LC527:
	.ascii	"ep2-bulk\000"
	.space	3
.LC528:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC529:
	.ascii	"can't enable %s, result %d\012\000"
.LC530:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC531:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC532:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC533:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC534:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC535:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC536:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC537:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC538:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC539:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC540:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC541:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC542:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC543:
	.ascii	"can't configure %s: %d\012\000"
.LC544:
	.ascii	"can't start %s: %d\012\000"
.LC545:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC546:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC547:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC548:
	.ascii	"conn_gadget\000"
.LC549:
	.ascii	"ccid\000"
	.space	3
.LC550:
	.ascii	"<6>adb_bind_config\012\000"
.LC551:
	.ascii	"adb\000"
.LC552:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC553:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC554:
	.ascii	"dual\000"
	.space	3
.LC555:
	.ascii	"full\000"
	.space	3
.LC556:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC557:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC558:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC559:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC560:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC561:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC562:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC563:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC564:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC565:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC566:
	.ascii	"%s: can't bind, err %d\012\000"
.LC567:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC568:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC569:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC570:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC571:
	.ascii	"android\000"
.LC572:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC573:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC574:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC575:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC576:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC577:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC578:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC579:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC580:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC581:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC582:
	.ascii	"<6>adb_release\012\000"
.LC583:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC584:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC585:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC586:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC587:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC588:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC589:
	.ascii	"rmode\000"
	.space	2
.LC590:
	.ascii	"fmode\000"
	.space	2
.LC591:
	.ascii	"mode\000"
	.space	3
.LC592:
	.ascii	"uid\000"
.LC593:
	.ascii	"gid\000"
.LC594:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC595:
	.ascii	"&ffs->mutex\000"
.LC596:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC597:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC598:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC599:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC600:
	.ascii	"%s %s with %s\000"
	.space	2
.LC601:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC602:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC603:
	.ascii	"%s ready\012\000"
	.space	2
.LC604:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC605:
	.ascii	"f_%s\000"
	.space	3
.LC606:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC607:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC608:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC609:
	.ascii	"Android\000"
.LC610:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC611:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC612:
	.ascii	"<6>acc_bind_config\012\000"
.LC613:
	.ascii	"accessory\000"
	.space	2
.LC614:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC615:
	.ascii	"<6>mtp_bind_config\012\000"
.LC616:
	.ascii	"mtp\000"
.LC617:
	.ascii	"qdss\000"
	.space	3
.LC618:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC619:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC620:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC621:
	.ascii	"<3>%s: %s: functionfs_bind failed (%d)\012\000"
.LC622:
	.ascii	"composite\000"
	.space	2
.LC623:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC624:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC625:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC626:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC627:
	.ascii	"qcom,streaming-func\000"
.LC628:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC629:
	.ascii	"android_usb\000"
.LC630:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC631:
	.ascii	"&android_dev->mutex\000"
.LC632:
	.ascii	"ioremap failed\012\000"
.LC633:
	.ascii	"android%d\000"
	.space	2
.LC634:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC635:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC636:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC637:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC638:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC639:
	.ascii	"high\000"
	.space	3
.LC640:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC641:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC642:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC643:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC644:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC645:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC646:
	.ascii	"INQUIRY\000"
.LC647:
	.ascii	" Card\000"
	.space	2
.LC648:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC649:
	.ascii	"MODE SELECT(10)\000"
.LC650:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC651:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC652:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC653:
	.ascii	"READ(6)\000"
.LC654:
	.ascii	"READ(10)\000"
	.space	3
.LC655:
	.ascii	"READ(12)\000"
	.space	3
.LC656:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC657:
	.ascii	"READ HEADER\000"
.LC658:
	.ascii	"READ TOC\000"
	.space	3
.LC659:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC660:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC661:
	.ascii	"START-STOP UNIT\000"
.LC662:
	.ascii	"Load AT\000"
.LC663:
	.ascii	"Load User\000"
	.space	2
.LC664:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC665:
	.ascii	"TEST UNIT READY\000"
.LC666:
	.ascii	"VERIFY\000"
	.space	1
.LC667:
	.ascii	"WRITE(6)\000"
	.space	3
.LC668:
	.ascii	"WRITE(10)\000"
	.space	2
.LC669:
	.ascii	"WRITE(12)\000"
	.space	2
.LC670:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC671:
	.ascii	"time stop\000"
	.space	2
.LC672:
	.ascii	"time reset\000"
	.space	1
.LC673:
	.ascii	"READ CD\000"
.LC674:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC675:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC676:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC677:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC678:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC679:
	.ascii	"unable to get diag usb channel\012\000"
.LC680:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC681:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC682:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC683:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC684:
	.ascii	"<3>init_data error\000"
	.space	1
.LC685:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC686:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC687:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC688:
	.ascii	"<3>uninit_data\012\000"
.LC689:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC690:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC691:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC692:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC693:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC694:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC695:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC696:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC697:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC698:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC699:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC700:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC701:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC702:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC703:
	.ascii	"&dev->smd_data.wait\000"
.LC704:
	.ascii	"rmnet\000"
	.space	2
.LC705:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC706:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC707:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC708:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC709:
	.ascii	"USB audio source\000"
	.space	3
.LC710:
	.ascii	"USB gadget audio\000"
	.space	3
.LC711:
	.ascii	"audio_source\000"
	.space	3
.LC712:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC713:
	.ascii	"queue\000"
	.space	2
.LC714:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC715:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC716:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC717:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC718:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC719:
	.ascii	"g_serial\000"
	.space	3
.LC720:
	.ascii	"ttyGS\000"
	.space	2
.LC721:
	.ascii	"k_gserial\000"
	.space	2
.LC722:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC723:
	.ascii	"&port->close_wait\000"
	.space	2
.LC724:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC725:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC726:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC727:
	.ascii	"usb_serial%d\000"
	.space	3
.LC728:
	.ascii	"readstatus\000"
	.space	1
.LC729:
	.ascii	"reset\000"
	.space	2
.LC730:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC731:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC732:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC733:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC734:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC735:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC736:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC737:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC738:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC739:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC740:
	.ascii	"usb_gsdio\000"
	.space	2
.LC741:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC742:
	.ascii	"&sdio_ports[i].lock\000"
.LC743:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC744:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC745:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC746:
	.ascii	"k_gsmd\000"
	.space	1
.LC747:
	.ascii	"usb_gsmd\000"
	.space	3
.LC748:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC749:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC750:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC751:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC752:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC753:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC754:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC755:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC756:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC757:
	.ascii	"k_gbam\000"
	.space	1
.LC758:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC759:
	.ascii	"usb_rmnet\000"
	.space	2
.LC760:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC761:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC762:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC763:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC764:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC765:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC766:
	.ascii	"&c->wait\000"
	.space	3
.LC767:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC768:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC769:
	.ascii	"_ctrl\000"
	.space	2
.LC770:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC771:
	.ascii	"_data\000"
	.space	2
.LC772:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC773:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC774:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC775:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC776:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC777:
	.ascii	"SMUX_WRITE_DONE\000"
.LC778:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC779:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC780:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC781:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC782:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC783:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC784:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC785:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC786:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC787:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC788:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC789:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC790:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC791:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC792:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC793:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC794:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC795:
	.ascii	"rmnet%d\000"
.LC796:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC797:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC798:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC799:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC800:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC801:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC802:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC803:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC804:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC805:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC806:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC807:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC808:
	.ascii	"acm%u\000"
	.space	2
.LC809:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC810:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC811:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC812:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC815:
	.ascii	"MIDI\000"
	.space	3
.LC816:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC817:
	.ascii	"snd_card_register() failed\012\000"
.LC818:
	.ascii	"gmidi function\000"
	.space	1
.LC813:
	.ascii	"MIDI Gadget\000"
.LC814:
	.ascii	"f_midi\000"
	.space	1
.LC819:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC820:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC821:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC822:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC823:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC824:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC825:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC826:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC827:
	.ascii	"rndis\000"
	.space	2
.LC828:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC829:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC830:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC831:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC832:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC833:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC834:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC835:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC836:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC837:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC838:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC839:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC840:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC841:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC842:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC843:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC844:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC845:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC846:
	.ascii	"<6>%s: Choose endpoints\000"
.LC847:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC848:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC849:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC850:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC851:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC852:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC853:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC854:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC855:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC856:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC857:
	.ascii	"k_bam_data\000"
	.space	1
.LC858:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC859:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC860:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC861:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC862:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC863:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC864:
	.ascii	"<3>%s: bam setup failed\000"
.LC865:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC866:
	.ascii	"usb_mbim\000"
	.space	3
.LC867:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC868:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC869:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC870:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC871:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC872:
	.ascii	"%s%%d\000"
	.space	2
.LC873:
	.ascii	"self\000"
	.space	3
.LC874:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC875:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC876:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC877:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC878:
	.ascii	"usb\000"
.LC879:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC880:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC881:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC882:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC883:
	.ascii	"ecm\000"
.LC884:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC885:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC886:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC887:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC888:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC889:
	.ascii	"<3>%s: failed to initialize ecm_ipa\000"
.LC890:
	.ascii	"host\000"
	.space	3
.LC891:
	.ascii	"rndis0\000"
	.space	1
.LC892:
	.ascii	"ecm0\000"
	.space	3
.LC893:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC894:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC895:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC896:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC897:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC898:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC899:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC900:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC901:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC902:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC903:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC904:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC905:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC906:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC907:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC908:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC909:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC910:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC911:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC912:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC913:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC914:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC915:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC916:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC917:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC918:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC919:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC920:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC921:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC922:
	.ascii	"audio\000"
	.space	2
.LC923:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC924:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC925:
	.ascii	"super\000"
	.space	2
.LC926:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC927:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC928:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC929:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC930:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC931:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC932:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC933:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC934:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC935:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC936:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC937:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC938:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC939:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC940:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC941:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC942:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC943:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC944:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC945:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC946:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC947:
	.ascii	"<3>%s() zero queue\012\000"
.LC948:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC949:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC950:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC951:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC952:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC953:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC954:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC955:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC956:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC957:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC958:
	.ascii	"%x\000"
	.space	1
.LC959:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC960:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC961:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC962:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC963:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC964:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC965:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC966:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC967:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC968:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC969:
	.ascii	"enabled\000"
.LC970:
	.ascii	"disabled\000"
	.space	3
.LC971:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC972:
	.ascii	"SAMSUNG_Android\000"
.LC973:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC974:
	.ascii	"acm\000"
.LC975:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC976:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC977:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC978:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC979:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC980:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC981:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/andro"
	.ascii	"id.c\000"
.LC982:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC983:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC984:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC985:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC986:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC987:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC988:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC989:
	.ascii	"&epfile->wait\000"
	.space	2
.LC990:
	.ascii	"ep%u\000"
	.space	3
.LC991:
	.ascii	"remote_wakeup\000"
	.space	2
.LC992:
	.ascii	"state\000"
	.space	2
.LC993:
	.ascii	"pm_qos\000"
	.space	1
.LC994:
	.ascii	"enable\000"
	.space	1
.LC995:
	.ascii	"functions\000"
	.space	2
.LC996:
	.ascii	"macos\000"
	.space	2
.LC997:
	.ascii	"ss_host_available\000"
	.space	2
.LC998:
	.ascii	"usb30en\000"
.LC999:
	.ascii	"bcdUSB\000"
	.space	1
.LC1000:
	.ascii	"iSerial\000"
.LC1001:
	.ascii	"iProduct\000"
	.space	3
.LC1002:
	.ascii	"iManufacturer\000"
	.space	2
.LC1003:
	.ascii	"bDeviceProtocol\000"
.LC1004:
	.ascii	"bDeviceSubClass\000"
.LC1005:
	.ascii	"bDeviceClass\000"
	.space	3
.LC1006:
	.ascii	"bcdDevice\000"
	.space	2
.LC1007:
	.ascii	"idProduct\000"
	.space	2
.LC1008:
	.ascii	"idVendor\000"
	.space	3
.LC1009:
	.ascii	"uasp\000"
	.space	3
.LC1010:
	.ascii	"pcm\000"
.LC1011:
	.ascii	"mass_storage\000"
	.space	3
.LC1012:
	.ascii	"sua_version_info\000"
	.space	3
.LC1013:
	.ascii	"product_string\000"
	.space	1
.LC1014:
	.ascii	"vendor_string\000"
	.space	2
.LC1015:
	.ascii	"inquiry_string\000"
	.space	1
.LC1016:
	.ascii	"rndis_qc\000"
	.space	3
.LC1017:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC1018:
	.ascii	"vendorID\000"
	.space	3
.LC1019:
	.ascii	"ethaddr\000"
.LC1020:
	.ascii	"wceis\000"
	.space	2
.LC1021:
	.ascii	"manufacturer\000"
	.space	3
.LC1022:
	.ascii	"ptp\000"
.LC1023:
	.ascii	"diag\000"
	.space	3
.LC1024:
	.ascii	"clients\000"
.LC1025:
	.ascii	"mbim_transports\000"
.LC1026:
	.ascii	"ecm_qc\000"
	.space	1
.LC1027:
	.ascii	"ecm_transports\000"
	.space	1
.LC1028:
	.ascii	"ecm_ethaddr\000"
.LC1029:
	.ascii	"transport_names\000"
.LC1030:
	.ascii	"transports\000"
	.space	1
.LC1031:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1032:
	.ascii	"instances\000"
	.space	2
.LC1033:
	.ascii	"midi\000"
	.space	3
.LC1034:
	.ascii	"alsa\000"
	.space	3
.LC1035:
	.ascii	"aliases\000"
.LC1036:
	.ascii	"terminal_version\000"
	.space	3
.LC1037:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1038:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1039:
	.ascii	"CDC NCM\000"
.LC1040:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1041:
	.ascii	"out_max_packet_size\000"
.LC1042:
	.ascii	"usb_buffer_size\000"
.LC1043:
	.ascii	"version\000"
.LC1044:
	.ascii	"1.0\000"
.LC1045:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1046:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1047:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1048:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1049:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1050:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1051:
	.ascii	"Microphone Mute Control\000"
.LC1052:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1053:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1054:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1055:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1056:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1057:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1058:
	.ascii	"gadget\000"
	.space	1
.LC1059:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1060:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1061:
	.ascii	"RNDIS Ethernet Data\000"
.LC1062:
	.ascii	"RNDIS\000"
	.space	2
.LC1063:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1064:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1065:
	.ascii	"CDC ECM\000"
.LC1066:
	.ascii	"android_mbim\000"
	.space	3
.LC1067:
	.ascii	"MBIM Control\000"
	.space	3
.LC1068:
	.ascii	"MBIM Data\000"
	.space	2
.LC1069:
	.ascii	"USB accessory\000"
	.space	2
.LC1070:
	.ascii	"usb_accessory\000"
	.space	2
.LC1071:
	.ascii	"Android Accessory Interface\000"
.LC1072:
	.ascii	"MTP\000"
.LC1073:
	.ascii	"MIDI function\000"
	.space	2
.LC1074:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1075:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1076:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1077:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1078:
	.ascii	"CDC Serial\000"
	.space	1
.LC1079:
	.ascii	"dun\000"
.LC1080:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1081:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1082:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1083:
	.ascii	"DATA40_CNTL\000"
.LC1084:
	.ascii	"DATA39_CNTL\000"
.LC1085:
	.ascii	"DATA38_CNTL\000"
.LC1086:
	.ascii	"DS\000"
	.space	1
.LC1087:
	.ascii	"UNUSED\000"
	.space	1
.LC1088:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1089:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1090:
	.ascii	"cdrom\000"
	.space	2
.LC1091:
	.ascii	"file\000"
	.space	3
.LC1092:
	.ascii	"nofua\000"
	.space	2
.LC1093:
	.ascii	"ro\000"
	.space	1
.LC1094:
	.ascii	"functionfs\000"
	.space	1
.LC1095:
	.ascii	"RmNet\000"
	.space	2
.LC1096:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1097:
	.ascii	"transport\000"
	.space	2
.LC1098:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1099:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1100:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1101:
	.ascii	"suspended\000"
	.section	__param,"aw",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.bss
	.align	2
.LANCHOR1 = . + 0
.LANCHOR4 = . + 8184
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38329, %object
	.size	retry_cnt.38329, 4
retry_cnt.38329:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	__key.50739, %object
	.size	__key.50739, 0
__key.50739:
	.type	__key.55547, %object
	.size	__key.55547, 0
__key.55547:
	.type	__key.55548, %object
	.size	__key.55548, 0
__key.55548:
	.type	__key.55016, %object
	.size	__key.55016, 0
__key.55016:
	.type	__key.55017, %object
	.size	__key.55017, 0
__key.55017:
	.type	__key.55018, %object
	.size	__key.55018, 0
__key.55018:
	.type	__key.53674, %object
	.size	__key.53674, 0
__key.53674:
	.type	__key.53675, %object
	.size	__key.53675, 0
__key.53675:
	.type	__key.38424, %object
	.size	__key.38424, 0
__key.38424:
	.type	__key.38550, %object
	.size	__key.38550, 0
__key.38550:
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.62600, %object
	.size	__key.62600, 0
__key.62600:
	.type	__key.62601, %object
	.size	__key.62601, 0
__key.62601:
	.type	__key.62602, %object
	.size	__key.62602, 0
__key.62602:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	next_state.63160, %object
	.size	next_state.63160, 4
next_state.63160:
	.space	4
	.type	last_uevent.63159, %object
	.size	last_uevent.63159, 4
last_uevent.63159:
	.space	4
	.type	__key.46356, %object
	.size	__key.46356, 0
__key.46356:
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	__key.57229, %object
	.size	__key.57229, 0
__key.57229:
	.type	__key.57230, %object
	.size	__key.57230, 0
__key.57230:
	.type	__key.54033, %object
	.size	__key.54033, 0
__key.54033:
	.type	__key.53976, %object
	.size	__key.53976, 0
__key.53976:
	.type	__key.53977, %object
	.size	__key.53977, 0
__key.53977:
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	retry_cnt.37573, %object
	.size	retry_cnt.37573, 4
retry_cnt.37573:
	.space	4
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	__key.47005, %object
	.size	__key.47005, 0
__key.47005:
	.type	__key.8198, %object
	.size	__key.8198, 0
__key.8198:
	.type	__key.47014, %object
	.size	__key.47014, 0
__key.47014:
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	__key.45467, %object
	.size	__key.45467, 0
__key.45467:
	.type	__key.45469, %object
	.size	__key.45469, 0
__key.45469:
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	__key.64562, %object
	.size	__key.64562, 0
__key.64562:
	.type	__key.64567, %object
	.size	__key.64567, 0
__key.64567:
	.type	__key.53282, %object
	.size	__key.53282, 0
__key.53282:
	.type	new_product_name.46633, %object
	.size	new_product_name.46633, 17
new_product_name.46633:
	.space	17
	.space	3
	.type	unknown.46823, %object
	.size	unknown.46823, 16
unknown.46823:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32071, %object
	.size	__key.32071, 0
__key.32071:
	.type	__key.32072, %object
	.size	__key.32072, 0
__key.32072:
	.type	prev_len.48008, %object
	.size	prev_len.48008, 4
prev_len.48008:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	__key.48290, %object
	.size	__key.48290, 0
__key.48290:
	.type	__key.48236, %object
	.size	__key.48236, 0
__key.48236:
	.type	__key.48237, %object
	.size	__key.48237, 0
__key.48237:
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	__key.49196, %object
	.size	__key.49196, 0
__key.49196:
	.type	__key.49532, %object
	.size	__key.49532, 0
__key.49532:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	__key.50505, %object
	.size	__key.50505, 0
__key.50505:
	.type	__key.50506, %object
	.size	__key.50506, 0
__key.50506:
	.type	port_num.51677, %object
	.size	port_num.51677, 4
port_num.51677:
	.space	4
	.type	port_num.52335, %object
	.size	port_num.52335, 4
port_num.52335:
	.space	4
	.type	rmnet_initialized.63420, %object
	.size	rmnet_initialized.63420, 4
rmnet_initialized.63420:
	.space	4
	.type	ports.63421, %object
	.size	ports.63421, 4
ports.63421:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rndis_connect_state, %object
	.size	rndis_connect_state, 4
rndis_connect_state:
	.space	4
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	__key.45504, %object
	.size	__key.45504, 0
__key.45504:
	.type	__key.45505, %object
	.size	__key.45505, 0
__key.45505:
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	3
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.section	.data.rel,"aw",%progbits
	.align	2
.LANCHOR7 = . + 0
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1043
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC571
	.word	.LC1044
	.ident	"GCC: (Linaro GCC 4.9-2014.08-1~dev) 4.9.2 20140811 (prerelease)"
	.section	.note.GNU-stack,"",%progbits
// GENERATED BY LOLZ KERNEL
